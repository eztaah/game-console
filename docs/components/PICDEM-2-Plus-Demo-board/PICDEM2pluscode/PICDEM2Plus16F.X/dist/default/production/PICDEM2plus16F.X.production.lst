

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Apr 29 09:12:29 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1937
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,delta=2
    77                           	psect	text62,local,class=CODE,merge=1,delta=2
    78                           	psect	swtext1,local,class=CONST,delta=2
    79                           	psect	text63,local,class=CODE,merge=1,delta=2
    80                           	psect	text64,local,class=CODE,merge=1,delta=2
    81                           	psect	text65,local,class=CODE,merge=1,delta=2
    82                           	psect	text66,local,class=CODE,merge=1,delta=2
    83                           	psect	text67,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000D                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0016                     	;# 
   108  0017                     	;# 
   109  0018                     	;# 
   110  0019                     	;# 
   111  001A                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  0110                     	;# 
   140  0111                     	;# 
   141  0112                     	;# 
   142  0113                     	;# 
   143  0114                     	;# 
   144  0115                     	;# 
   145  0116                     	;# 
   146  0117                     	;# 
   147  0118                     	;# 
   148  0119                     	;# 
   149  011A                     	;# 
   150  011B                     	;# 
   151  011D                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  018F                     	;# 
   155  0190                     	;# 
   156  0191                     	;# 
   157  0191                     	;# 
   158  0192                     	;# 
   159  0193                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0194                     	;# 
   163  0195                     	;# 
   164  0196                     	;# 
   165  0199                     	;# 
   166  019A                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019C                     	;# 
   172  019C                     	;# 
   173  019D                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  020D                     	;# 
   177  0210                     	;# 
   178  0211                     	;# 
   179  0212                     	;# 
   180  0213                     	;# 
   181  0214                     	;# 
   182  0215                     	;# 
   183  0215                     	;# 
   184  0216                     	;# 
   185  0217                     	;# 
   186  0291                     	;# 
   187  0291                     	;# 
   188  0292                     	;# 
   189  0293                     	;# 
   190  0294                     	;# 
   191  0295                     	;# 
   192  0295                     	;# 
   193  0296                     	;# 
   194  0298                     	;# 
   195  0298                     	;# 
   196  0299                     	;# 
   197  029A                     	;# 
   198  029B                     	;# 
   199  029C                     	;# 
   200  029C                     	;# 
   201  029D                     	;# 
   202  029E                     	;# 
   203  029F                     	;# 
   204  0311                     	;# 
   205  0311                     	;# 
   206  0312                     	;# 
   207  0313                     	;# 
   208  0314                     	;# 
   209  0315                     	;# 
   210  0315                     	;# 
   211  0316                     	;# 
   212  0318                     	;# 
   213  0318                     	;# 
   214  0319                     	;# 
   215  031A                     	;# 
   216  031C                     	;# 
   217  031C                     	;# 
   218  031D                     	;# 
   219  031E                     	;# 
   220  0394                     	;# 
   221  0395                     	;# 
   222  0396                     	;# 
   223  0415                     	;# 
   224  0416                     	;# 
   225  0417                     	;# 
   226  041C                     	;# 
   227  041D                     	;# 
   228  041E                     	;# 
   229  0791                     	;# 
   230  0792                     	;# 
   231  0793                     	;# 
   232  0794                     	;# 
   233  0795                     	;# 
   234  0798                     	;# 
   235  0799                     	;# 
   236  079A                     	;# 
   237  07A0                     	;# 
   238  07A1                     	;# 
   239  07A2                     	;# 
   240  07A3                     	;# 
   241  07A4                     	;# 
   242  07A5                     	;# 
   243  07A6                     	;# 
   244  07A7                     	;# 
   245  07A8                     	;# 
   246  07A9                     	;# 
   247  07AA                     	;# 
   248  07AB                     	;# 
   249  0FE4                     	;# 
   250  0FE5                     	;# 
   251  0FE6                     	;# 
   252  0FE7                     	;# 
   253  0FE8                     	;# 
   254  0FE9                     	;# 
   255  0FEA                     	;# 
   256  0FEB                     	;# 
   257  0FED                     	;# 
   258  0FEE                     	;# 
   259  0FEF                     	;# 
   260  0000                     	;# 
   261  0001                     	;# 
   262  0002                     	;# 
   263  0003                     	;# 
   264  0004                     	;# 
   265  0005                     	;# 
   266  0006                     	;# 
   267  0007                     	;# 
   268  0008                     	;# 
   269  0009                     	;# 
   270  000A                     	;# 
   271  000B                     	;# 
   272  000C                     	;# 
   273  000D                     	;# 
   274  000E                     	;# 
   275  000F                     	;# 
   276  0010                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  001E                     	;# 
   290  001F                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  008E                     	;# 
   294  008F                     	;# 
   295  0090                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0093                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0098                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  010F                     	;# 
   314  0110                     	;# 
   315  0111                     	;# 
   316  0112                     	;# 
   317  0113                     	;# 
   318  0114                     	;# 
   319  0115                     	;# 
   320  0116                     	;# 
   321  0117                     	;# 
   322  0118                     	;# 
   323  0119                     	;# 
   324  011A                     	;# 
   325  011B                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018F                     	;# 
   330  0190                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0193                     	;# 
   337  0194                     	;# 
   338  0195                     	;# 
   339  0196                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0216                     	;# 
   360  0217                     	;# 
   361  0291                     	;# 
   362  0291                     	;# 
   363  0292                     	;# 
   364  0293                     	;# 
   365  0294                     	;# 
   366  0295                     	;# 
   367  0295                     	;# 
   368  0296                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  029B                     	;# 
   374  029C                     	;# 
   375  029C                     	;# 
   376  029D                     	;# 
   377  029E                     	;# 
   378  029F                     	;# 
   379  0311                     	;# 
   380  0311                     	;# 
   381  0312                     	;# 
   382  0313                     	;# 
   383  0314                     	;# 
   384  0315                     	;# 
   385  0315                     	;# 
   386  0316                     	;# 
   387  0318                     	;# 
   388  0318                     	;# 
   389  0319                     	;# 
   390  031A                     	;# 
   391  031C                     	;# 
   392  031C                     	;# 
   393  031D                     	;# 
   394  031E                     	;# 
   395  0394                     	;# 
   396  0395                     	;# 
   397  0396                     	;# 
   398  0415                     	;# 
   399  0416                     	;# 
   400  0417                     	;# 
   401  041C                     	;# 
   402  041D                     	;# 
   403  041E                     	;# 
   404  0791                     	;# 
   405  0792                     	;# 
   406  0793                     	;# 
   407  0794                     	;# 
   408  0795                     	;# 
   409  0798                     	;# 
   410  0799                     	;# 
   411  079A                     	;# 
   412  07A0                     	;# 
   413  07A1                     	;# 
   414  07A2                     	;# 
   415  07A3                     	;# 
   416  07A4                     	;# 
   417  07A5                     	;# 
   418  07A6                     	;# 
   419  07A7                     	;# 
   420  07A8                     	;# 
   421  07A9                     	;# 
   422  07AA                     	;# 
   423  07AB                     	;# 
   424  0FE4                     	;# 
   425  0FE5                     	;# 
   426  0FE6                     	;# 
   427  0FE7                     	;# 
   428  0FE8                     	;# 
   429  0FE9                     	;# 
   430  0FEA                     	;# 
   431  0FEB                     	;# 
   432  0FED                     	;# 
   433  0FEE                     	;# 
   434  0FEF                     	;# 
   435  0000                     	;# 
   436  0001                     	;# 
   437  0002                     	;# 
   438  0003                     	;# 
   439  0004                     	;# 
   440  0005                     	;# 
   441  0006                     	;# 
   442  0007                     	;# 
   443  0008                     	;# 
   444  0009                     	;# 
   445  000A                     	;# 
   446  000B                     	;# 
   447  000C                     	;# 
   448  000D                     	;# 
   449  000E                     	;# 
   450  000F                     	;# 
   451  0010                     	;# 
   452  0011                     	;# 
   453  0012                     	;# 
   454  0013                     	;# 
   455  0015                     	;# 
   456  0016                     	;# 
   457  0016                     	;# 
   458  0017                     	;# 
   459  0018                     	;# 
   460  0019                     	;# 
   461  001A                     	;# 
   462  001B                     	;# 
   463  001C                     	;# 
   464  001E                     	;# 
   465  001F                     	;# 
   466  008C                     	;# 
   467  008D                     	;# 
   468  008E                     	;# 
   469  008F                     	;# 
   470  0090                     	;# 
   471  0091                     	;# 
   472  0092                     	;# 
   473  0093                     	;# 
   474  0095                     	;# 
   475  0096                     	;# 
   476  0097                     	;# 
   477  0098                     	;# 
   478  0099                     	;# 
   479  009A                     	;# 
   480  009B                     	;# 
   481  009B                     	;# 
   482  009C                     	;# 
   483  009D                     	;# 
   484  009E                     	;# 
   485  010C                     	;# 
   486  010D                     	;# 
   487  010E                     	;# 
   488  010F                     	;# 
   489  0110                     	;# 
   490  0111                     	;# 
   491  0112                     	;# 
   492  0113                     	;# 
   493  0114                     	;# 
   494  0115                     	;# 
   495  0116                     	;# 
   496  0117                     	;# 
   497  0118                     	;# 
   498  0119                     	;# 
   499  011A                     	;# 
   500  011B                     	;# 
   501  011D                     	;# 
   502  018C                     	;# 
   503  018D                     	;# 
   504  018F                     	;# 
   505  0190                     	;# 
   506  0191                     	;# 
   507  0191                     	;# 
   508  0192                     	;# 
   509  0193                     	;# 
   510  0193                     	;# 
   511  0193                     	;# 
   512  0194                     	;# 
   513  0195                     	;# 
   514  0196                     	;# 
   515  0199                     	;# 
   516  019A                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019B                     	;# 
   521  019C                     	;# 
   522  019C                     	;# 
   523  019D                     	;# 
   524  019E                     	;# 
   525  019F                     	;# 
   526  020D                     	;# 
   527  0210                     	;# 
   528  0211                     	;# 
   529  0212                     	;# 
   530  0213                     	;# 
   531  0214                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0216                     	;# 
   535  0217                     	;# 
   536  0291                     	;# 
   537  0291                     	;# 
   538  0292                     	;# 
   539  0293                     	;# 
   540  0294                     	;# 
   541  0295                     	;# 
   542  0295                     	;# 
   543  0296                     	;# 
   544  0298                     	;# 
   545  0298                     	;# 
   546  0299                     	;# 
   547  029A                     	;# 
   548  029B                     	;# 
   549  029C                     	;# 
   550  029C                     	;# 
   551  029D                     	;# 
   552  029E                     	;# 
   553  029F                     	;# 
   554  0311                     	;# 
   555  0311                     	;# 
   556  0312                     	;# 
   557  0313                     	;# 
   558  0314                     	;# 
   559  0315                     	;# 
   560  0315                     	;# 
   561  0316                     	;# 
   562  0318                     	;# 
   563  0318                     	;# 
   564  0319                     	;# 
   565  031A                     	;# 
   566  031C                     	;# 
   567  031C                     	;# 
   568  031D                     	;# 
   569  031E                     	;# 
   570  0394                     	;# 
   571  0395                     	;# 
   572  0396                     	;# 
   573  0415                     	;# 
   574  0416                     	;# 
   575  0417                     	;# 
   576  041C                     	;# 
   577  041D                     	;# 
   578  041E                     	;# 
   579  0791                     	;# 
   580  0792                     	;# 
   581  0793                     	;# 
   582  0794                     	;# 
   583  0795                     	;# 
   584  0798                     	;# 
   585  0799                     	;# 
   586  079A                     	;# 
   587  07A0                     	;# 
   588  07A1                     	;# 
   589  07A2                     	;# 
   590  07A3                     	;# 
   591  07A4                     	;# 
   592  07A5                     	;# 
   593  07A6                     	;# 
   594  07A7                     	;# 
   595  07A8                     	;# 
   596  07A9                     	;# 
   597  07AA                     	;# 
   598  07AB                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  000F                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0013                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  001E                     	;# 
   640  001F                     	;# 
   641  008C                     	;# 
   642  008D                     	;# 
   643  008E                     	;# 
   644  008F                     	;# 
   645  0090                     	;# 
   646  0091                     	;# 
   647  0092                     	;# 
   648  0093                     	;# 
   649  0095                     	;# 
   650  0096                     	;# 
   651  0097                     	;# 
   652  0098                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  010F                     	;# 
   664  0110                     	;# 
   665  0111                     	;# 
   666  0112                     	;# 
   667  0113                     	;# 
   668  0114                     	;# 
   669  0115                     	;# 
   670  0116                     	;# 
   671  0117                     	;# 
   672  0118                     	;# 
   673  0119                     	;# 
   674  011A                     	;# 
   675  011B                     	;# 
   676  011D                     	;# 
   677  018C                     	;# 
   678  018D                     	;# 
   679  018F                     	;# 
   680  0190                     	;# 
   681  0191                     	;# 
   682  0191                     	;# 
   683  0192                     	;# 
   684  0193                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0194                     	;# 
   688  0195                     	;# 
   689  0196                     	;# 
   690  0199                     	;# 
   691  019A                     	;# 
   692  019B                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019C                     	;# 
   697  019C                     	;# 
   698  019D                     	;# 
   699  019E                     	;# 
   700  019F                     	;# 
   701  020D                     	;# 
   702  0210                     	;# 
   703  0211                     	;# 
   704  0212                     	;# 
   705  0213                     	;# 
   706  0214                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0216                     	;# 
   710  0217                     	;# 
   711  0291                     	;# 
   712  0291                     	;# 
   713  0292                     	;# 
   714  0293                     	;# 
   715  0294                     	;# 
   716  0295                     	;# 
   717  0295                     	;# 
   718  0296                     	;# 
   719  0298                     	;# 
   720  0298                     	;# 
   721  0299                     	;# 
   722  029A                     	;# 
   723  029B                     	;# 
   724  029C                     	;# 
   725  029C                     	;# 
   726  029D                     	;# 
   727  029E                     	;# 
   728  029F                     	;# 
   729  0311                     	;# 
   730  0311                     	;# 
   731  0312                     	;# 
   732  0313                     	;# 
   733  0314                     	;# 
   734  0315                     	;# 
   735  0315                     	;# 
   736  0316                     	;# 
   737  0318                     	;# 
   738  0318                     	;# 
   739  0319                     	;# 
   740  031A                     	;# 
   741  031C                     	;# 
   742  031C                     	;# 
   743  031D                     	;# 
   744  031E                     	;# 
   745  0394                     	;# 
   746  0395                     	;# 
   747  0396                     	;# 
   748  0415                     	;# 
   749  0416                     	;# 
   750  0417                     	;# 
   751  041C                     	;# 
   752  041D                     	;# 
   753  041E                     	;# 
   754  0791                     	;# 
   755  0792                     	;# 
   756  0793                     	;# 
   757  0794                     	;# 
   758  0795                     	;# 
   759  0798                     	;# 
   760  0799                     	;# 
   761  079A                     	;# 
   762  07A0                     	;# 
   763  07A1                     	;# 
   764  07A2                     	;# 
   765  07A3                     	;# 
   766  07A4                     	;# 
   767  07A5                     	;# 
   768  07A6                     	;# 
   769  07A7                     	;# 
   770  07A8                     	;# 
   771  07A9                     	;# 
   772  07AA                     	;# 
   773  07AB                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000F                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0015                     	;# 
   806  0016                     	;# 
   807  0016                     	;# 
   808  0017                     	;# 
   809  0018                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  001E                     	;# 
   815  001F                     	;# 
   816  008C                     	;# 
   817  008D                     	;# 
   818  008E                     	;# 
   819  008F                     	;# 
   820  0090                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0095                     	;# 
   825  0096                     	;# 
   826  0097                     	;# 
   827  0098                     	;# 
   828  0099                     	;# 
   829  009A                     	;# 
   830  009B                     	;# 
   831  009B                     	;# 
   832  009C                     	;# 
   833  009D                     	;# 
   834  009E                     	;# 
   835  010C                     	;# 
   836  010D                     	;# 
   837  010E                     	;# 
   838  010F                     	;# 
   839  0110                     	;# 
   840  0111                     	;# 
   841  0112                     	;# 
   842  0113                     	;# 
   843  0114                     	;# 
   844  0115                     	;# 
   845  0116                     	;# 
   846  0117                     	;# 
   847  0118                     	;# 
   848  0119                     	;# 
   849  011A                     	;# 
   850  011B                     	;# 
   851  011D                     	;# 
   852  018C                     	;# 
   853  018D                     	;# 
   854  018F                     	;# 
   855  0190                     	;# 
   856  0191                     	;# 
   857  0191                     	;# 
   858  0192                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0193                     	;# 
   862  0194                     	;# 
   863  0195                     	;# 
   864  0196                     	;# 
   865  0199                     	;# 
   866  019A                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  020D                     	;# 
   877  0210                     	;# 
   878  0211                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0216                     	;# 
   885  0217                     	;# 
   886  0291                     	;# 
   887  0291                     	;# 
   888  0292                     	;# 
   889  0293                     	;# 
   890  0294                     	;# 
   891  0295                     	;# 
   892  0295                     	;# 
   893  0296                     	;# 
   894  0298                     	;# 
   895  0298                     	;# 
   896  0299                     	;# 
   897  029A                     	;# 
   898  029B                     	;# 
   899  029C                     	;# 
   900  029C                     	;# 
   901  029D                     	;# 
   902  029E                     	;# 
   903  029F                     	;# 
   904  0311                     	;# 
   905  0311                     	;# 
   906  0312                     	;# 
   907  0313                     	;# 
   908  0314                     	;# 
   909  0315                     	;# 
   910  0315                     	;# 
   911  0316                     	;# 
   912  0318                     	;# 
   913  0318                     	;# 
   914  0319                     	;# 
   915  031A                     	;# 
   916  031C                     	;# 
   917  031C                     	;# 
   918  031D                     	;# 
   919  031E                     	;# 
   920  0394                     	;# 
   921  0395                     	;# 
   922  0396                     	;# 
   923  0415                     	;# 
   924  0416                     	;# 
   925  0417                     	;# 
   926  041C                     	;# 
   927  041D                     	;# 
   928  041E                     	;# 
   929  0791                     	;# 
   930  0792                     	;# 
   931  0793                     	;# 
   932  0794                     	;# 
   933  0795                     	;# 
   934  0798                     	;# 
   935  0799                     	;# 
   936  079A                     	;# 
   937  07A0                     	;# 
   938  07A1                     	;# 
   939  07A2                     	;# 
   940  07A3                     	;# 
   941  07A4                     	;# 
   942  07A5                     	;# 
   943  07A6                     	;# 
   944  07A7                     	;# 
   945  07A8                     	;# 
   946  07A9                     	;# 
   947  07AA                     	;# 
   948  07AB                     	;# 
   949  0FE4                     	;# 
   950  0FE5                     	;# 
   951  0FE6                     	;# 
   952  0FE7                     	;# 
   953  0FE8                     	;# 
   954  0FE9                     	;# 
   955  0FEA                     	;# 
   956  0FEB                     	;# 
   957  0FED                     	;# 
   958  0FEE                     	;# 
   959  0FEF                     	;# 
   960  0000                     	;# 
   961  0001                     	;# 
   962  0002                     	;# 
   963  0003                     	;# 
   964  0004                     	;# 
   965  0005                     	;# 
   966  0006                     	;# 
   967  0007                     	;# 
   968  0008                     	;# 
   969  0009                     	;# 
   970  000A                     	;# 
   971  000B                     	;# 
   972  000C                     	;# 
   973  000D                     	;# 
   974  000E                     	;# 
   975  000F                     	;# 
   976  0010                     	;# 
   977  0011                     	;# 
   978  0012                     	;# 
   979  0013                     	;# 
   980  0015                     	;# 
   981  0016                     	;# 
   982  0016                     	;# 
   983  0017                     	;# 
   984  0018                     	;# 
   985  0019                     	;# 
   986  001A                     	;# 
   987  001B                     	;# 
   988  001C                     	;# 
   989  001E                     	;# 
   990  001F                     	;# 
   991  008C                     	;# 
   992  008D                     	;# 
   993  008E                     	;# 
   994  008F                     	;# 
   995  0090                     	;# 
   996  0091                     	;# 
   997  0092                     	;# 
   998  0093                     	;# 
   999  0095                     	;# 
  1000  0096                     	;# 
  1001  0097                     	;# 
  1002  0098                     	;# 
  1003  0099                     	;# 
  1004  009A                     	;# 
  1005  009B                     	;# 
  1006  009B                     	;# 
  1007  009C                     	;# 
  1008  009D                     	;# 
  1009  009E                     	;# 
  1010  010C                     	;# 
  1011  010D                     	;# 
  1012  010E                     	;# 
  1013  010F                     	;# 
  1014  0110                     	;# 
  1015  0111                     	;# 
  1016  0112                     	;# 
  1017  0113                     	;# 
  1018  0114                     	;# 
  1019  0115                     	;# 
  1020  0116                     	;# 
  1021  0117                     	;# 
  1022  0118                     	;# 
  1023  0119                     	;# 
  1024  011A                     	;# 
  1025  011B                     	;# 
  1026  011D                     	;# 
  1027  018C                     	;# 
  1028  018D                     	;# 
  1029  018F                     	;# 
  1030  0190                     	;# 
  1031  0191                     	;# 
  1032  0191                     	;# 
  1033  0192                     	;# 
  1034  0193                     	;# 
  1035  0193                     	;# 
  1036  0193                     	;# 
  1037  0194                     	;# 
  1038  0195                     	;# 
  1039  0196                     	;# 
  1040  0199                     	;# 
  1041  019A                     	;# 
  1042  019B                     	;# 
  1043  019B                     	;# 
  1044  019B                     	;# 
  1045  019B                     	;# 
  1046  019C                     	;# 
  1047  019C                     	;# 
  1048  019D                     	;# 
  1049  019E                     	;# 
  1050  019F                     	;# 
  1051  020D                     	;# 
  1052  0210                     	;# 
  1053  0211                     	;# 
  1054  0212                     	;# 
  1055  0213                     	;# 
  1056  0214                     	;# 
  1057  0215                     	;# 
  1058  0215                     	;# 
  1059  0216                     	;# 
  1060  0217                     	;# 
  1061  0291                     	;# 
  1062  0291                     	;# 
  1063  0292                     	;# 
  1064  0293                     	;# 
  1065  0294                     	;# 
  1066  0295                     	;# 
  1067  0295                     	;# 
  1068  0296                     	;# 
  1069  0298                     	;# 
  1070  0298                     	;# 
  1071  0299                     	;# 
  1072  029A                     	;# 
  1073  029B                     	;# 
  1074  029C                     	;# 
  1075  029C                     	;# 
  1076  029D                     	;# 
  1077  029E                     	;# 
  1078  029F                     	;# 
  1079  0311                     	;# 
  1080  0311                     	;# 
  1081  0312                     	;# 
  1082  0313                     	;# 
  1083  0314                     	;# 
  1084  0315                     	;# 
  1085  0315                     	;# 
  1086  0316                     	;# 
  1087  0318                     	;# 
  1088  0318                     	;# 
  1089  0319                     	;# 
  1090  031A                     	;# 
  1091  031C                     	;# 
  1092  031C                     	;# 
  1093  031D                     	;# 
  1094  031E                     	;# 
  1095  0394                     	;# 
  1096  0395                     	;# 
  1097  0396                     	;# 
  1098  0415                     	;# 
  1099  0416                     	;# 
  1100  0417                     	;# 
  1101  041C                     	;# 
  1102  041D                     	;# 
  1103  041E                     	;# 
  1104  0791                     	;# 
  1105  0792                     	;# 
  1106  0793                     	;# 
  1107  0794                     	;# 
  1108  0795                     	;# 
  1109  0798                     	;# 
  1110  0799                     	;# 
  1111  079A                     	;# 
  1112  07A0                     	;# 
  1113  07A1                     	;# 
  1114  07A2                     	;# 
  1115  07A3                     	;# 
  1116  07A4                     	;# 
  1117  07A5                     	;# 
  1118  07A6                     	;# 
  1119  07A7                     	;# 
  1120  07A8                     	;# 
  1121  07A9                     	;# 
  1122  07AA                     	;# 
  1123  07AB                     	;# 
  1124  0FE4                     	;# 
  1125  0FE5                     	;# 
  1126  0FE6                     	;# 
  1127  0FE7                     	;# 
  1128  0FE8                     	;# 
  1129  0FE9                     	;# 
  1130  0FEA                     	;# 
  1131  0FEB                     	;# 
  1132  0FED                     	;# 
  1133  0FEE                     	;# 
  1134  0FEF                     	;# 
  1135  0000                     	;# 
  1136  0001                     	;# 
  1137  0002                     	;# 
  1138  0003                     	;# 
  1139  0004                     	;# 
  1140  0005                     	;# 
  1141  0006                     	;# 
  1142  0007                     	;# 
  1143  0008                     	;# 
  1144  0009                     	;# 
  1145  000A                     	;# 
  1146  000B                     	;# 
  1147  000C                     	;# 
  1148  000D                     	;# 
  1149  000E                     	;# 
  1150  000F                     	;# 
  1151  0010                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0013                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  001E                     	;# 
  1165  001F                     	;# 
  1166  008C                     	;# 
  1167  008D                     	;# 
  1168  008E                     	;# 
  1169  008F                     	;# 
  1170  0090                     	;# 
  1171  0091                     	;# 
  1172  0092                     	;# 
  1173  0093                     	;# 
  1174  0095                     	;# 
  1175  0096                     	;# 
  1176  0097                     	;# 
  1177  0098                     	;# 
  1178  0099                     	;# 
  1179  009A                     	;# 
  1180  009B                     	;# 
  1181  009B                     	;# 
  1182  009C                     	;# 
  1183  009D                     	;# 
  1184  009E                     	;# 
  1185  010C                     	;# 
  1186  010D                     	;# 
  1187  010E                     	;# 
  1188  010F                     	;# 
  1189  0110                     	;# 
  1190  0111                     	;# 
  1191  0112                     	;# 
  1192  0113                     	;# 
  1193  0114                     	;# 
  1194  0115                     	;# 
  1195  0116                     	;# 
  1196  0117                     	;# 
  1197  0118                     	;# 
  1198  0119                     	;# 
  1199  011A                     	;# 
  1200  011B                     	;# 
  1201  011D                     	;# 
  1202  018C                     	;# 
  1203  018D                     	;# 
  1204  018F                     	;# 
  1205  0190                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0215                     	;# 
  1233  0215                     	;# 
  1234  0216                     	;# 
  1235  0217                     	;# 
  1236  0291                     	;# 
  1237  0291                     	;# 
  1238  0292                     	;# 
  1239  0293                     	;# 
  1240  0294                     	;# 
  1241  0295                     	;# 
  1242  0295                     	;# 
  1243  0296                     	;# 
  1244  0298                     	;# 
  1245  0298                     	;# 
  1246  0299                     	;# 
  1247  029A                     	;# 
  1248  029B                     	;# 
  1249  029C                     	;# 
  1250  029C                     	;# 
  1251  029D                     	;# 
  1252  029E                     	;# 
  1253  029F                     	;# 
  1254  0311                     	;# 
  1255  0311                     	;# 
  1256  0312                     	;# 
  1257  0313                     	;# 
  1258  0314                     	;# 
  1259  0315                     	;# 
  1260  0315                     	;# 
  1261  0316                     	;# 
  1262  0318                     	;# 
  1263  0318                     	;# 
  1264  0319                     	;# 
  1265  031A                     	;# 
  1266  031C                     	;# 
  1267  031C                     	;# 
  1268  031D                     	;# 
  1269  031E                     	;# 
  1270  0394                     	;# 
  1271  0395                     	;# 
  1272  0396                     	;# 
  1273  0415                     	;# 
  1274  0416                     	;# 
  1275  0417                     	;# 
  1276  041C                     	;# 
  1277  041D                     	;# 
  1278  041E                     	;# 
  1279  0791                     	;# 
  1280  0792                     	;# 
  1281  0793                     	;# 
  1282  0794                     	;# 
  1283  0795                     	;# 
  1284  0798                     	;# 
  1285  0799                     	;# 
  1286  079A                     	;# 
  1287  07A0                     	;# 
  1288  07A1                     	;# 
  1289  07A2                     	;# 
  1290  07A3                     	;# 
  1291  07A4                     	;# 
  1292  07A5                     	;# 
  1293  07A6                     	;# 
  1294  07A7                     	;# 
  1295  07A8                     	;# 
  1296  07A9                     	;# 
  1297  07AA                     	;# 
  1298  07AB                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310  0000                     	;# 
  1311  0001                     	;# 
  1312  0002                     	;# 
  1313  0003                     	;# 
  1314  0004                     	;# 
  1315  0005                     	;# 
  1316  0006                     	;# 
  1317  0007                     	;# 
  1318  0008                     	;# 
  1319  0009                     	;# 
  1320  000A                     	;# 
  1321  000B                     	;# 
  1322  000C                     	;# 
  1323  000D                     	;# 
  1324  000E                     	;# 
  1325  000F                     	;# 
  1326  0010                     	;# 
  1327  0011                     	;# 
  1328  0012                     	;# 
  1329  0013                     	;# 
  1330  0015                     	;# 
  1331  0016                     	;# 
  1332  0016                     	;# 
  1333  0017                     	;# 
  1334  0018                     	;# 
  1335  0019                     	;# 
  1336  001A                     	;# 
  1337  001B                     	;# 
  1338  001C                     	;# 
  1339  001E                     	;# 
  1340  001F                     	;# 
  1341  008C                     	;# 
  1342  008D                     	;# 
  1343  008E                     	;# 
  1344  008F                     	;# 
  1345  0090                     	;# 
  1346  0091                     	;# 
  1347  0092                     	;# 
  1348  0093                     	;# 
  1349  0095                     	;# 
  1350  0096                     	;# 
  1351  0097                     	;# 
  1352  0098                     	;# 
  1353  0099                     	;# 
  1354  009A                     	;# 
  1355  009B                     	;# 
  1356  009B                     	;# 
  1357  009C                     	;# 
  1358  009D                     	;# 
  1359  009E                     	;# 
  1360  010C                     	;# 
  1361  010D                     	;# 
  1362  010E                     	;# 
  1363  010F                     	;# 
  1364  0110                     	;# 
  1365  0111                     	;# 
  1366  0112                     	;# 
  1367  0113                     	;# 
  1368  0114                     	;# 
  1369  0115                     	;# 
  1370  0116                     	;# 
  1371  0117                     	;# 
  1372  0118                     	;# 
  1373  0119                     	;# 
  1374  011A                     	;# 
  1375  011B                     	;# 
  1376  011D                     	;# 
  1377  018C                     	;# 
  1378  018D                     	;# 
  1379  018F                     	;# 
  1380  0190                     	;# 
  1381  0191                     	;# 
  1382  0191                     	;# 
  1383  0192                     	;# 
  1384  0193                     	;# 
  1385  0193                     	;# 
  1386  0193                     	;# 
  1387  0194                     	;# 
  1388  0195                     	;# 
  1389  0196                     	;# 
  1390  0199                     	;# 
  1391  019A                     	;# 
  1392  019B                     	;# 
  1393  019B                     	;# 
  1394  019B                     	;# 
  1395  019B                     	;# 
  1396  019C                     	;# 
  1397  019C                     	;# 
  1398  019D                     	;# 
  1399  019E                     	;# 
  1400  019F                     	;# 
  1401  020D                     	;# 
  1402  0210                     	;# 
  1403  0211                     	;# 
  1404  0212                     	;# 
  1405  0213                     	;# 
  1406  0214                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0216                     	;# 
  1410  0217                     	;# 
  1411  0291                     	;# 
  1412  0291                     	;# 
  1413  0292                     	;# 
  1414  0293                     	;# 
  1415  0294                     	;# 
  1416  0295                     	;# 
  1417  0295                     	;# 
  1418  0296                     	;# 
  1419  0298                     	;# 
  1420  0298                     	;# 
  1421  0299                     	;# 
  1422  029A                     	;# 
  1423  029B                     	;# 
  1424  029C                     	;# 
  1425  029C                     	;# 
  1426  029D                     	;# 
  1427  029E                     	;# 
  1428  029F                     	;# 
  1429  0311                     	;# 
  1430  0311                     	;# 
  1431  0312                     	;# 
  1432  0313                     	;# 
  1433  0314                     	;# 
  1434  0315                     	;# 
  1435  0315                     	;# 
  1436  0316                     	;# 
  1437  0318                     	;# 
  1438  0318                     	;# 
  1439  0319                     	;# 
  1440  031A                     	;# 
  1441  031C                     	;# 
  1442  031C                     	;# 
  1443  031D                     	;# 
  1444  031E                     	;# 
  1445  0394                     	;# 
  1446  0395                     	;# 
  1447  0396                     	;# 
  1448  0415                     	;# 
  1449  0416                     	;# 
  1450  0417                     	;# 
  1451  041C                     	;# 
  1452  041D                     	;# 
  1453  041E                     	;# 
  1454  0791                     	;# 
  1455  0792                     	;# 
  1456  0793                     	;# 
  1457  0794                     	;# 
  1458  0795                     	;# 
  1459  0798                     	;# 
  1460  0799                     	;# 
  1461  079A                     	;# 
  1462  07A0                     	;# 
  1463  07A1                     	;# 
  1464  07A2                     	;# 
  1465  07A3                     	;# 
  1466  07A4                     	;# 
  1467  07A5                     	;# 
  1468  07A6                     	;# 
  1469  07A7                     	;# 
  1470  07A8                     	;# 
  1471  07A9                     	;# 
  1472  07AA                     	;# 
  1473  07AB                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000D                     	;# 
  1499  000E                     	;# 
  1500  000F                     	;# 
  1501  0010                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0013                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  001E                     	;# 
  1515  001F                     	;# 
  1516  008C                     	;# 
  1517  008D                     	;# 
  1518  008E                     	;# 
  1519  008F                     	;# 
  1520  0090                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0093                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0098                     	;# 
  1528  0099                     	;# 
  1529  009A                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  010C                     	;# 
  1536  010D                     	;# 
  1537  010E                     	;# 
  1538  010F                     	;# 
  1539  0110                     	;# 
  1540  0111                     	;# 
  1541  0112                     	;# 
  1542  0113                     	;# 
  1543  0114                     	;# 
  1544  0115                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  0118                     	;# 
  1548  0119                     	;# 
  1549  011A                     	;# 
  1550  011B                     	;# 
  1551  011D                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018F                     	;# 
  1555  0190                     	;# 
  1556  0191                     	;# 
  1557  0191                     	;# 
  1558  0192                     	;# 
  1559  0193                     	;# 
  1560  0193                     	;# 
  1561  0193                     	;# 
  1562  0194                     	;# 
  1563  0195                     	;# 
  1564  0196                     	;# 
  1565  0199                     	;# 
  1566  019A                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019C                     	;# 
  1572  019C                     	;# 
  1573  019D                     	;# 
  1574  019E                     	;# 
  1575  019F                     	;# 
  1576  020D                     	;# 
  1577  0210                     	;# 
  1578  0211                     	;# 
  1579  0212                     	;# 
  1580  0213                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0294                     	;# 
  1591  0295                     	;# 
  1592  0295                     	;# 
  1593  0296                     	;# 
  1594  0298                     	;# 
  1595  0298                     	;# 
  1596  0299                     	;# 
  1597  029A                     	;# 
  1598  029B                     	;# 
  1599  029C                     	;# 
  1600  029C                     	;# 
  1601  029D                     	;# 
  1602  029E                     	;# 
  1603  029F                     	;# 
  1604  0311                     	;# 
  1605  0311                     	;# 
  1606  0312                     	;# 
  1607  0313                     	;# 
  1608  0314                     	;# 
  1609  0315                     	;# 
  1610  0315                     	;# 
  1611  0316                     	;# 
  1612  0318                     	;# 
  1613  0318                     	;# 
  1614  0319                     	;# 
  1615  031A                     	;# 
  1616  031C                     	;# 
  1617  031C                     	;# 
  1618  031D                     	;# 
  1619  031E                     	;# 
  1620  0394                     	;# 
  1621  0395                     	;# 
  1622  0396                     	;# 
  1623  0415                     	;# 
  1624  0416                     	;# 
  1625  0417                     	;# 
  1626  041C                     	;# 
  1627  041D                     	;# 
  1628  041E                     	;# 
  1629  0791                     	;# 
  1630  0792                     	;# 
  1631  0793                     	;# 
  1632  0794                     	;# 
  1633  0795                     	;# 
  1634  0798                     	;# 
  1635  0799                     	;# 
  1636  079A                     	;# 
  1637  07A0                     	;# 
  1638  07A1                     	;# 
  1639  07A2                     	;# 
  1640  07A3                     	;# 
  1641  07A4                     	;# 
  1642  07A5                     	;# 
  1643  07A6                     	;# 
  1644  07A7                     	;# 
  1645  07A8                     	;# 
  1646  07A9                     	;# 
  1647  07AA                     	;# 
  1648  07AB                     	;# 
  1649  0FE4                     	;# 
  1650  0FE5                     	;# 
  1651  0FE6                     	;# 
  1652  0FE7                     	;# 
  1653  0FE8                     	;# 
  1654  0FE9                     	;# 
  1655  0FEA                     	;# 
  1656  0FEB                     	;# 
  1657  0FED                     	;# 
  1658  0FEE                     	;# 
  1659  0FEF                     	;# 
  1660  0000                     	;# 
  1661  0001                     	;# 
  1662  0002                     	;# 
  1663  0003                     	;# 
  1664  0004                     	;# 
  1665  0005                     	;# 
  1666  0006                     	;# 
  1667  0007                     	;# 
  1668  0008                     	;# 
  1669  0009                     	;# 
  1670  000A                     	;# 
  1671  000B                     	;# 
  1672  000C                     	;# 
  1673  000D                     	;# 
  1674  000E                     	;# 
  1675  000F                     	;# 
  1676  0010                     	;# 
  1677  0011                     	;# 
  1678  0012                     	;# 
  1679  0013                     	;# 
  1680  0015                     	;# 
  1681  0016                     	;# 
  1682  0016                     	;# 
  1683  0017                     	;# 
  1684  0018                     	;# 
  1685  0019                     	;# 
  1686  001A                     	;# 
  1687  001B                     	;# 
  1688  001C                     	;# 
  1689  001E                     	;# 
  1690  001F                     	;# 
  1691  008C                     	;# 
  1692  008D                     	;# 
  1693  008E                     	;# 
  1694  008F                     	;# 
  1695  0090                     	;# 
  1696  0091                     	;# 
  1697  0092                     	;# 
  1698  0093                     	;# 
  1699  0095                     	;# 
  1700  0096                     	;# 
  1701  0097                     	;# 
  1702  0098                     	;# 
  1703  0099                     	;# 
  1704  009A                     	;# 
  1705  009B                     	;# 
  1706  009B                     	;# 
  1707  009C                     	;# 
  1708  009D                     	;# 
  1709  009E                     	;# 
  1710  010C                     	;# 
  1711  010D                     	;# 
  1712  010E                     	;# 
  1713  010F                     	;# 
  1714  0110                     	;# 
  1715  0111                     	;# 
  1716  0112                     	;# 
  1717  0113                     	;# 
  1718  0114                     	;# 
  1719  0115                     	;# 
  1720  0116                     	;# 
  1721  0117                     	;# 
  1722  0118                     	;# 
  1723  0119                     	;# 
  1724  011A                     	;# 
  1725  011B                     	;# 
  1726  011D                     	;# 
  1727  018C                     	;# 
  1728  018D                     	;# 
  1729  018F                     	;# 
  1730  0190                     	;# 
  1731  0191                     	;# 
  1732  0191                     	;# 
  1733  0192                     	;# 
  1734  0193                     	;# 
  1735  0193                     	;# 
  1736  0193                     	;# 
  1737  0194                     	;# 
  1738  0195                     	;# 
  1739  0196                     	;# 
  1740  0199                     	;# 
  1741  019A                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019B                     	;# 
  1746  019C                     	;# 
  1747  019C                     	;# 
  1748  019D                     	;# 
  1749  019E                     	;# 
  1750  019F                     	;# 
  1751  020D                     	;# 
  1752  0210                     	;# 
  1753  0211                     	;# 
  1754  0212                     	;# 
  1755  0213                     	;# 
  1756  0214                     	;# 
  1757  0215                     	;# 
  1758  0215                     	;# 
  1759  0216                     	;# 
  1760  0217                     	;# 
  1761  0291                     	;# 
  1762  0291                     	;# 
  1763  0292                     	;# 
  1764  0293                     	;# 
  1765  0294                     	;# 
  1766  0295                     	;# 
  1767  0295                     	;# 
  1768  0296                     	;# 
  1769  0298                     	;# 
  1770  0298                     	;# 
  1771  0299                     	;# 
  1772  029A                     	;# 
  1773  029B                     	;# 
  1774  029C                     	;# 
  1775  029C                     	;# 
  1776  029D                     	;# 
  1777  029E                     	;# 
  1778  029F                     	;# 
  1779  0311                     	;# 
  1780  0311                     	;# 
  1781  0312                     	;# 
  1782  0313                     	;# 
  1783  0314                     	;# 
  1784  0315                     	;# 
  1785  0315                     	;# 
  1786  0316                     	;# 
  1787  0318                     	;# 
  1788  0318                     	;# 
  1789  0319                     	;# 
  1790  031A                     	;# 
  1791  031C                     	;# 
  1792  031C                     	;# 
  1793  031D                     	;# 
  1794  031E                     	;# 
  1795  0394                     	;# 
  1796  0395                     	;# 
  1797  0396                     	;# 
  1798  0415                     	;# 
  1799  0416                     	;# 
  1800  0417                     	;# 
  1801  041C                     	;# 
  1802  041D                     	;# 
  1803  041E                     	;# 
  1804  0791                     	;# 
  1805  0792                     	;# 
  1806  0793                     	;# 
  1807  0794                     	;# 
  1808  0795                     	;# 
  1809  0798                     	;# 
  1810  0799                     	;# 
  1811  079A                     	;# 
  1812  07A0                     	;# 
  1813  07A1                     	;# 
  1814  07A2                     	;# 
  1815  07A3                     	;# 
  1816  07A4                     	;# 
  1817  07A5                     	;# 
  1818  07A6                     	;# 
  1819  07A7                     	;# 
  1820  07A8                     	;# 
  1821  07A9                     	;# 
  1822  07AA                     	;# 
  1823  07AB                     	;# 
  1824  0FE4                     	;# 
  1825  0FE5                     	;# 
  1826  0FE6                     	;# 
  1827  0FE7                     	;# 
  1828  0FE8                     	;# 
  1829  0FE9                     	;# 
  1830  0FEA                     	;# 
  1831  0FEB                     	;# 
  1832  0FED                     	;# 
  1833  0FEE                     	;# 
  1834  0FEF                     	;# 
  1835  0000                     	;# 
  1836  0001                     	;# 
  1837  0002                     	;# 
  1838  0003                     	;# 
  1839  0004                     	;# 
  1840  0005                     	;# 
  1841  0006                     	;# 
  1842  0007                     	;# 
  1843  0008                     	;# 
  1844  0009                     	;# 
  1845  000A                     	;# 
  1846  000B                     	;# 
  1847  000C                     	;# 
  1848  000D                     	;# 
  1849  000E                     	;# 
  1850  000F                     	;# 
  1851  0010                     	;# 
  1852  0011                     	;# 
  1853  0012                     	;# 
  1854  0013                     	;# 
  1855  0015                     	;# 
  1856  0016                     	;# 
  1857  0016                     	;# 
  1858  0017                     	;# 
  1859  0018                     	;# 
  1860  0019                     	;# 
  1861  001A                     	;# 
  1862  001B                     	;# 
  1863  001C                     	;# 
  1864  001E                     	;# 
  1865  001F                     	;# 
  1866  008C                     	;# 
  1867  008D                     	;# 
  1868  008E                     	;# 
  1869  008F                     	;# 
  1870  0090                     	;# 
  1871  0091                     	;# 
  1872  0092                     	;# 
  1873  0093                     	;# 
  1874  0095                     	;# 
  1875  0096                     	;# 
  1876  0097                     	;# 
  1877  0098                     	;# 
  1878  0099                     	;# 
  1879  009A                     	;# 
  1880  009B                     	;# 
  1881  009B                     	;# 
  1882  009C                     	;# 
  1883  009D                     	;# 
  1884  009E                     	;# 
  1885  010C                     	;# 
  1886  010D                     	;# 
  1887  010E                     	;# 
  1888  010F                     	;# 
  1889  0110                     	;# 
  1890  0111                     	;# 
  1891  0112                     	;# 
  1892  0113                     	;# 
  1893  0114                     	;# 
  1894  0115                     	;# 
  1895  0116                     	;# 
  1896  0117                     	;# 
  1897  0118                     	;# 
  1898  0119                     	;# 
  1899  011A                     	;# 
  1900  011B                     	;# 
  1901  011D                     	;# 
  1902  018C                     	;# 
  1903  018D                     	;# 
  1904  018F                     	;# 
  1905  0190                     	;# 
  1906  0191                     	;# 
  1907  0191                     	;# 
  1908  0192                     	;# 
  1909  0193                     	;# 
  1910  0193                     	;# 
  1911  0193                     	;# 
  1912  0194                     	;# 
  1913  0195                     	;# 
  1914  0196                     	;# 
  1915  0199                     	;# 
  1916  019A                     	;# 
  1917  019B                     	;# 
  1918  019B                     	;# 
  1919  019B                     	;# 
  1920  019B                     	;# 
  1921  019C                     	;# 
  1922  019C                     	;# 
  1923  019D                     	;# 
  1924  019E                     	;# 
  1925  019F                     	;# 
  1926  020D                     	;# 
  1927  0210                     	;# 
  1928  0211                     	;# 
  1929  0212                     	;# 
  1930  0213                     	;# 
  1931  0214                     	;# 
  1932  0215                     	;# 
  1933  0215                     	;# 
  1934  0216                     	;# 
  1935  0217                     	;# 
  1936  0291                     	;# 
  1937  0291                     	;# 
  1938  0292                     	;# 
  1939  0293                     	;# 
  1940  0294                     	;# 
  1941  0295                     	;# 
  1942  0295                     	;# 
  1943  0296                     	;# 
  1944  0298                     	;# 
  1945  0298                     	;# 
  1946  0299                     	;# 
  1947  029A                     	;# 
  1948  029B                     	;# 
  1949  029C                     	;# 
  1950  029C                     	;# 
  1951  029D                     	;# 
  1952  029E                     	;# 
  1953  029F                     	;# 
  1954  0311                     	;# 
  1955  0311                     	;# 
  1956  0312                     	;# 
  1957  0313                     	;# 
  1958  0314                     	;# 
  1959  0315                     	;# 
  1960  0315                     	;# 
  1961  0316                     	;# 
  1962  0318                     	;# 
  1963  0318                     	;# 
  1964  0319                     	;# 
  1965  031A                     	;# 
  1966  031C                     	;# 
  1967  031C                     	;# 
  1968  031D                     	;# 
  1969  031E                     	;# 
  1970  0394                     	;# 
  1971  0395                     	;# 
  1972  0396                     	;# 
  1973  0415                     	;# 
  1974  0416                     	;# 
  1975  0417                     	;# 
  1976  041C                     	;# 
  1977  041D                     	;# 
  1978  041E                     	;# 
  1979  0791                     	;# 
  1980  0792                     	;# 
  1981  0793                     	;# 
  1982  0794                     	;# 
  1983  0795                     	;# 
  1984  0798                     	;# 
  1985  0799                     	;# 
  1986  079A                     	;# 
  1987  07A0                     	;# 
  1988  07A1                     	;# 
  1989  07A2                     	;# 
  1990  07A3                     	;# 
  1991  07A4                     	;# 
  1992  07A5                     	;# 
  1993  07A6                     	;# 
  1994  07A7                     	;# 
  1995  07A8                     	;# 
  1996  07A9                     	;# 
  1997  07AA                     	;# 
  1998  07AB                     	;# 
  1999  0FE4                     	;# 
  2000  0FE5                     	;# 
  2001  0FE6                     	;# 
  2002  0FE7                     	;# 
  2003  0FE8                     	;# 
  2004  0FE9                     	;# 
  2005  0FEA                     	;# 
  2006  0FEB                     	;# 
  2007  0FED                     	;# 
  2008  0FEE                     	;# 
  2009  0FEF                     	;# 
  2010  0000                     	;# 
  2011  0001                     	;# 
  2012  0002                     	;# 
  2013  0003                     	;# 
  2014  0004                     	;# 
  2015  0005                     	;# 
  2016  0006                     	;# 
  2017  0007                     	;# 
  2018  0008                     	;# 
  2019  0009                     	;# 
  2020  000A                     	;# 
  2021  000B                     	;# 
  2022  000C                     	;# 
  2023  000D                     	;# 
  2024  000E                     	;# 
  2025  000F                     	;# 
  2026  0010                     	;# 
  2027  0011                     	;# 
  2028  0012                     	;# 
  2029  0013                     	;# 
  2030  0015                     	;# 
  2031  0016                     	;# 
  2032  0016                     	;# 
  2033  0017                     	;# 
  2034  0018                     	;# 
  2035  0019                     	;# 
  2036  001A                     	;# 
  2037  001B                     	;# 
  2038  001C                     	;# 
  2039  001E                     	;# 
  2040  001F                     	;# 
  2041  008C                     	;# 
  2042  008D                     	;# 
  2043  008E                     	;# 
  2044  008F                     	;# 
  2045  0090                     	;# 
  2046  0091                     	;# 
  2047  0092                     	;# 
  2048  0093                     	;# 
  2049  0095                     	;# 
  2050  0096                     	;# 
  2051  0097                     	;# 
  2052  0098                     	;# 
  2053  0099                     	;# 
  2054  009A                     	;# 
  2055  009B                     	;# 
  2056  009B                     	;# 
  2057  009C                     	;# 
  2058  009D                     	;# 
  2059  009E                     	;# 
  2060  010C                     	;# 
  2061  010D                     	;# 
  2062  010E                     	;# 
  2063  010F                     	;# 
  2064  0110                     	;# 
  2065  0111                     	;# 
  2066  0112                     	;# 
  2067  0113                     	;# 
  2068  0114                     	;# 
  2069  0115                     	;# 
  2070  0116                     	;# 
  2071  0117                     	;# 
  2072  0118                     	;# 
  2073  0119                     	;# 
  2074  011A                     	;# 
  2075  011B                     	;# 
  2076  011D                     	;# 
  2077  018C                     	;# 
  2078  018D                     	;# 
  2079  018F                     	;# 
  2080  0190                     	;# 
  2081  0191                     	;# 
  2082  0191                     	;# 
  2083  0192                     	;# 
  2084  0193                     	;# 
  2085  0193                     	;# 
  2086  0193                     	;# 
  2087  0194                     	;# 
  2088  0195                     	;# 
  2089  0196                     	;# 
  2090  0199                     	;# 
  2091  019A                     	;# 
  2092  019B                     	;# 
  2093  019B                     	;# 
  2094  019B                     	;# 
  2095  019B                     	;# 
  2096  019C                     	;# 
  2097  019C                     	;# 
  2098  019D                     	;# 
  2099  019E                     	;# 
  2100  019F                     	;# 
  2101  020D                     	;# 
  2102  0210                     	;# 
  2103  0211                     	;# 
  2104  0212                     	;# 
  2105  0213                     	;# 
  2106  0214                     	;# 
  2107  0215                     	;# 
  2108  0215                     	;# 
  2109  0216                     	;# 
  2110  0217                     	;# 
  2111  0291                     	;# 
  2112  0291                     	;# 
  2113  0292                     	;# 
  2114  0293                     	;# 
  2115  0294                     	;# 
  2116  0295                     	;# 
  2117  0295                     	;# 
  2118  0296                     	;# 
  2119  0298                     	;# 
  2120  0298                     	;# 
  2121  0299                     	;# 
  2122  029A                     	;# 
  2123  029B                     	;# 
  2124  029C                     	;# 
  2125  029C                     	;# 
  2126  029D                     	;# 
  2127  029E                     	;# 
  2128  029F                     	;# 
  2129  0311                     	;# 
  2130  0311                     	;# 
  2131  0312                     	;# 
  2132  0313                     	;# 
  2133  0314                     	;# 
  2134  0315                     	;# 
  2135  0315                     	;# 
  2136  0316                     	;# 
  2137  0318                     	;# 
  2138  0318                     	;# 
  2139  0319                     	;# 
  2140  031A                     	;# 
  2141  031C                     	;# 
  2142  031C                     	;# 
  2143  031D                     	;# 
  2144  031E                     	;# 
  2145  0394                     	;# 
  2146  0395                     	;# 
  2147  0396                     	;# 
  2148  0415                     	;# 
  2149  0416                     	;# 
  2150  0417                     	;# 
  2151  041C                     	;# 
  2152  041D                     	;# 
  2153  041E                     	;# 
  2154  0791                     	;# 
  2155  0792                     	;# 
  2156  0793                     	;# 
  2157  0794                     	;# 
  2158  0795                     	;# 
  2159  0798                     	;# 
  2160  0799                     	;# 
  2161  079A                     	;# 
  2162  07A0                     	;# 
  2163  07A1                     	;# 
  2164  07A2                     	;# 
  2165  07A3                     	;# 
  2166  07A4                     	;# 
  2167  07A5                     	;# 
  2168  07A6                     	;# 
  2169  07A7                     	;# 
  2170  07A8                     	;# 
  2171  07A9                     	;# 
  2172  07AA                     	;# 
  2173  07AB                     	;# 
  2174  0FE4                     	;# 
  2175  0FE5                     	;# 
  2176  0FE6                     	;# 
  2177  0FE7                     	;# 
  2178  0FE8                     	;# 
  2179  0FE9                     	;# 
  2180  0FEA                     	;# 
  2181  0FEB                     	;# 
  2182  0FED                     	;# 
  2183  0FEE                     	;# 
  2184  0FEF                     	;# 
  2185  0000                     	;# 
  2186  0001                     	;# 
  2187  0002                     	;# 
  2188  0003                     	;# 
  2189  0004                     	;# 
  2190  0005                     	;# 
  2191  0006                     	;# 
  2192  0007                     	;# 
  2193  0008                     	;# 
  2194  0009                     	;# 
  2195  000A                     	;# 
  2196  000B                     	;# 
  2197  000C                     	;# 
  2198  000D                     	;# 
  2199  000E                     	;# 
  2200  000F                     	;# 
  2201  0010                     	;# 
  2202  0011                     	;# 
  2203  0012                     	;# 
  2204  0013                     	;# 
  2205  0015                     	;# 
  2206  0016                     	;# 
  2207  0016                     	;# 
  2208  0017                     	;# 
  2209  0018                     	;# 
  2210  0019                     	;# 
  2211  001A                     	;# 
  2212  001B                     	;# 
  2213  001C                     	;# 
  2214  001E                     	;# 
  2215  001F                     	;# 
  2216  008C                     	;# 
  2217  008D                     	;# 
  2218  008E                     	;# 
  2219  008F                     	;# 
  2220  0090                     	;# 
  2221  0091                     	;# 
  2222  0092                     	;# 
  2223  0093                     	;# 
  2224  0095                     	;# 
  2225  0096                     	;# 
  2226  0097                     	;# 
  2227  0098                     	;# 
  2228  0099                     	;# 
  2229  009A                     	;# 
  2230  009B                     	;# 
  2231  009B                     	;# 
  2232  009C                     	;# 
  2233  009D                     	;# 
  2234  009E                     	;# 
  2235  010C                     	;# 
  2236  010D                     	;# 
  2237  010E                     	;# 
  2238  010F                     	;# 
  2239  0110                     	;# 
  2240  0111                     	;# 
  2241  0112                     	;# 
  2242  0113                     	;# 
  2243  0114                     	;# 
  2244  0115                     	;# 
  2245  0116                     	;# 
  2246  0117                     	;# 
  2247  0118                     	;# 
  2248  0119                     	;# 
  2249  011A                     	;# 
  2250  011B                     	;# 
  2251  011D                     	;# 
  2252  018C                     	;# 
  2253  018D                     	;# 
  2254  018F                     	;# 
  2255  0190                     	;# 
  2256  0191                     	;# 
  2257  0191                     	;# 
  2258  0192                     	;# 
  2259  0193                     	;# 
  2260  0193                     	;# 
  2261  0193                     	;# 
  2262  0194                     	;# 
  2263  0195                     	;# 
  2264  0196                     	;# 
  2265  0199                     	;# 
  2266  019A                     	;# 
  2267  019B                     	;# 
  2268  019B                     	;# 
  2269  019B                     	;# 
  2270  019B                     	;# 
  2271  019C                     	;# 
  2272  019C                     	;# 
  2273  019D                     	;# 
  2274  019E                     	;# 
  2275  019F                     	;# 
  2276  020D                     	;# 
  2277  0210                     	;# 
  2278  0211                     	;# 
  2279  0212                     	;# 
  2280  0213                     	;# 
  2281  0214                     	;# 
  2282  0215                     	;# 
  2283  0215                     	;# 
  2284  0216                     	;# 
  2285  0217                     	;# 
  2286  0291                     	;# 
  2287  0291                     	;# 
  2288  0292                     	;# 
  2289  0293                     	;# 
  2290  0294                     	;# 
  2291  0295                     	;# 
  2292  0295                     	;# 
  2293  0296                     	;# 
  2294  0298                     	;# 
  2295  0298                     	;# 
  2296  0299                     	;# 
  2297  029A                     	;# 
  2298  029B                     	;# 
  2299  029C                     	;# 
  2300  029C                     	;# 
  2301  029D                     	;# 
  2302  029E                     	;# 
  2303  029F                     	;# 
  2304  0311                     	;# 
  2305  0311                     	;# 
  2306  0312                     	;# 
  2307  0313                     	;# 
  2308  0314                     	;# 
  2309  0315                     	;# 
  2310  0315                     	;# 
  2311  0316                     	;# 
  2312  0318                     	;# 
  2313  0318                     	;# 
  2314  0319                     	;# 
  2315  031A                     	;# 
  2316  031C                     	;# 
  2317  031C                     	;# 
  2318  031D                     	;# 
  2319  031E                     	;# 
  2320  0394                     	;# 
  2321  0395                     	;# 
  2322  0396                     	;# 
  2323  0415                     	;# 
  2324  0416                     	;# 
  2325  0417                     	;# 
  2326  041C                     	;# 
  2327  041D                     	;# 
  2328  041E                     	;# 
  2329  0791                     	;# 
  2330  0792                     	;# 
  2331  0793                     	;# 
  2332  0794                     	;# 
  2333  0795                     	;# 
  2334  0798                     	;# 
  2335  0799                     	;# 
  2336  079A                     	;# 
  2337  07A0                     	;# 
  2338  07A1                     	;# 
  2339  07A2                     	;# 
  2340  07A3                     	;# 
  2341  07A4                     	;# 
  2342  07A5                     	;# 
  2343  07A6                     	;# 
  2344  07A7                     	;# 
  2345  07A8                     	;# 
  2346  07A9                     	;# 
  2347  07AA                     	;# 
  2348  07AB                     	;# 
  2349  0FE4                     	;# 
  2350  0FE5                     	;# 
  2351  0FE6                     	;# 
  2352  0FE7                     	;# 
  2353  0FE8                     	;# 
  2354  0FE9                     	;# 
  2355  0FEA                     	;# 
  2356  0FEB                     	;# 
  2357  0FED                     	;# 
  2358  0FEE                     	;# 
  2359  0FEF                     	;# 
  2360  0000                     	;# 
  2361  0001                     	;# 
  2362  0002                     	;# 
  2363  0003                     	;# 
  2364  0004                     	;# 
  2365  0005                     	;# 
  2366  0006                     	;# 
  2367  0007                     	;# 
  2368  0008                     	;# 
  2369  0009                     	;# 
  2370  000A                     	;# 
  2371  000B                     	;# 
  2372  000C                     	;# 
  2373  000D                     	;# 
  2374  000E                     	;# 
  2375  000F                     	;# 
  2376  0010                     	;# 
  2377  0011                     	;# 
  2378  0012                     	;# 
  2379  0013                     	;# 
  2380  0015                     	;# 
  2381  0016                     	;# 
  2382  0016                     	;# 
  2383  0017                     	;# 
  2384  0018                     	;# 
  2385  0019                     	;# 
  2386  001A                     	;# 
  2387  001B                     	;# 
  2388  001C                     	;# 
  2389  001E                     	;# 
  2390  001F                     	;# 
  2391  008C                     	;# 
  2392  008D                     	;# 
  2393  008E                     	;# 
  2394  008F                     	;# 
  2395  0090                     	;# 
  2396  0091                     	;# 
  2397  0092                     	;# 
  2398  0093                     	;# 
  2399  0095                     	;# 
  2400  0096                     	;# 
  2401  0097                     	;# 
  2402  0098                     	;# 
  2403  0099                     	;# 
  2404  009A                     	;# 
  2405  009B                     	;# 
  2406  009B                     	;# 
  2407  009C                     	;# 
  2408  009D                     	;# 
  2409  009E                     	;# 
  2410  010C                     	;# 
  2411  010D                     	;# 
  2412  010E                     	;# 
  2413  010F                     	;# 
  2414  0110                     	;# 
  2415  0111                     	;# 
  2416  0112                     	;# 
  2417  0113                     	;# 
  2418  0114                     	;# 
  2419  0115                     	;# 
  2420  0116                     	;# 
  2421  0117                     	;# 
  2422  0118                     	;# 
  2423  0119                     	;# 
  2424  011A                     	;# 
  2425  011B                     	;# 
  2426  011D                     	;# 
  2427  018C                     	;# 
  2428  018D                     	;# 
  2429  018F                     	;# 
  2430  0190                     	;# 
  2431  0191                     	;# 
  2432  0191                     	;# 
  2433  0192                     	;# 
  2434  0193                     	;# 
  2435  0193                     	;# 
  2436  0193                     	;# 
  2437  0194                     	;# 
  2438  0195                     	;# 
  2439  0196                     	;# 
  2440  0199                     	;# 
  2441  019A                     	;# 
  2442  019B                     	;# 
  2443  019B                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019C                     	;# 
  2447  019C                     	;# 
  2448  019D                     	;# 
  2449  019E                     	;# 
  2450  019F                     	;# 
  2451  020D                     	;# 
  2452  0210                     	;# 
  2453  0211                     	;# 
  2454  0212                     	;# 
  2455  0213                     	;# 
  2456  0214                     	;# 
  2457  0215                     	;# 
  2458  0215                     	;# 
  2459  0216                     	;# 
  2460  0217                     	;# 
  2461  0291                     	;# 
  2462  0291                     	;# 
  2463  0292                     	;# 
  2464  0293                     	;# 
  2465  0294                     	;# 
  2466  0295                     	;# 
  2467  0295                     	;# 
  2468  0296                     	;# 
  2469  0298                     	;# 
  2470  0298                     	;# 
  2471  0299                     	;# 
  2472  029A                     	;# 
  2473  029B                     	;# 
  2474  029C                     	;# 
  2475  029C                     	;# 
  2476  029D                     	;# 
  2477  029E                     	;# 
  2478  029F                     	;# 
  2479  0311                     	;# 
  2480  0311                     	;# 
  2481  0312                     	;# 
  2482  0313                     	;# 
  2483  0314                     	;# 
  2484  0315                     	;# 
  2485  0315                     	;# 
  2486  0316                     	;# 
  2487  0318                     	;# 
  2488  0318                     	;# 
  2489  0319                     	;# 
  2490  031A                     	;# 
  2491  031C                     	;# 
  2492  031C                     	;# 
  2493  031D                     	;# 
  2494  031E                     	;# 
  2495  0394                     	;# 
  2496  0395                     	;# 
  2497  0396                     	;# 
  2498  0415                     	;# 
  2499  0416                     	;# 
  2500  0417                     	;# 
  2501  041C                     	;# 
  2502  041D                     	;# 
  2503  041E                     	;# 
  2504  0791                     	;# 
  2505  0792                     	;# 
  2506  0793                     	;# 
  2507  0794                     	;# 
  2508  0795                     	;# 
  2509  0798                     	;# 
  2510  0799                     	;# 
  2511  079A                     	;# 
  2512  07A0                     	;# 
  2513  07A1                     	;# 
  2514  07A2                     	;# 
  2515  07A3                     	;# 
  2516  07A4                     	;# 
  2517  07A5                     	;# 
  2518  07A6                     	;# 
  2519  07A7                     	;# 
  2520  07A8                     	;# 
  2521  07A9                     	;# 
  2522  07AA                     	;# 
  2523  07AB                     	;# 
  2524  0FE4                     	;# 
  2525  0FE5                     	;# 
  2526  0FE6                     	;# 
  2527  0FE7                     	;# 
  2528  0FE8                     	;# 
  2529  0FE9                     	;# 
  2530  0FEA                     	;# 
  2531  0FEB                     	;# 
  2532  0FED                     	;# 
  2533  0FEE                     	;# 
  2534  0FEF                     	;# 
  2535  0000                     	;# 
  2536  0001                     	;# 
  2537  0002                     	;# 
  2538  0003                     	;# 
  2539  0004                     	;# 
  2540  0005                     	;# 
  2541  0006                     	;# 
  2542  0007                     	;# 
  2543  0008                     	;# 
  2544  0009                     	;# 
  2545  000A                     	;# 
  2546  000B                     	;# 
  2547  000C                     	;# 
  2548  000D                     	;# 
  2549  000E                     	;# 
  2550  000F                     	;# 
  2551  0010                     	;# 
  2552  0011                     	;# 
  2553  0012                     	;# 
  2554  0013                     	;# 
  2555  0015                     	;# 
  2556  0016                     	;# 
  2557  0016                     	;# 
  2558  0017                     	;# 
  2559  0018                     	;# 
  2560  0019                     	;# 
  2561  001A                     	;# 
  2562  001B                     	;# 
  2563  001C                     	;# 
  2564  001E                     	;# 
  2565  001F                     	;# 
  2566  008C                     	;# 
  2567  008D                     	;# 
  2568  008E                     	;# 
  2569  008F                     	;# 
  2570  0090                     	;# 
  2571  0091                     	;# 
  2572  0092                     	;# 
  2573  0093                     	;# 
  2574  0095                     	;# 
  2575  0096                     	;# 
  2576  0097                     	;# 
  2577  0098                     	;# 
  2578  0099                     	;# 
  2579  009A                     	;# 
  2580  009B                     	;# 
  2581  009B                     	;# 
  2582  009C                     	;# 
  2583  009D                     	;# 
  2584  009E                     	;# 
  2585  010C                     	;# 
  2586  010D                     	;# 
  2587  010E                     	;# 
  2588  010F                     	;# 
  2589  0110                     	;# 
  2590  0111                     	;# 
  2591  0112                     	;# 
  2592  0113                     	;# 
  2593  0114                     	;# 
  2594  0115                     	;# 
  2595  0116                     	;# 
  2596  0117                     	;# 
  2597  0118                     	;# 
  2598  0119                     	;# 
  2599  011A                     	;# 
  2600  011B                     	;# 
  2601  011D                     	;# 
  2602  018C                     	;# 
  2603  018D                     	;# 
  2604  018F                     	;# 
  2605  0190                     	;# 
  2606  0191                     	;# 
  2607  0191                     	;# 
  2608  0192                     	;# 
  2609  0193                     	;# 
  2610  0193                     	;# 
  2611  0193                     	;# 
  2612  0194                     	;# 
  2613  0195                     	;# 
  2614  0196                     	;# 
  2615  0199                     	;# 
  2616  019A                     	;# 
  2617  019B                     	;# 
  2618  019B                     	;# 
  2619  019B                     	;# 
  2620  019B                     	;# 
  2621  019C                     	;# 
  2622  019C                     	;# 
  2623  019D                     	;# 
  2624  019E                     	;# 
  2625  019F                     	;# 
  2626  020D                     	;# 
  2627  0210                     	;# 
  2628  0211                     	;# 
  2629  0212                     	;# 
  2630  0213                     	;# 
  2631  0214                     	;# 
  2632  0215                     	;# 
  2633  0215                     	;# 
  2634  0216                     	;# 
  2635  0217                     	;# 
  2636  0291                     	;# 
  2637  0291                     	;# 
  2638  0292                     	;# 
  2639  0293                     	;# 
  2640  0294                     	;# 
  2641  0295                     	;# 
  2642  0295                     	;# 
  2643  0296                     	;# 
  2644  0298                     	;# 
  2645  0298                     	;# 
  2646  0299                     	;# 
  2647  029A                     	;# 
  2648  029B                     	;# 
  2649  029C                     	;# 
  2650  029C                     	;# 
  2651  029D                     	;# 
  2652  029E                     	;# 
  2653  029F                     	;# 
  2654  0311                     	;# 
  2655  0311                     	;# 
  2656  0312                     	;# 
  2657  0313                     	;# 
  2658  0314                     	;# 
  2659  0315                     	;# 
  2660  0315                     	;# 
  2661  0316                     	;# 
  2662  0318                     	;# 
  2663  0318                     	;# 
  2664  0319                     	;# 
  2665  031A                     	;# 
  2666  031C                     	;# 
  2667  031C                     	;# 
  2668  031D                     	;# 
  2669  031E                     	;# 
  2670  0394                     	;# 
  2671  0395                     	;# 
  2672  0396                     	;# 
  2673  0415                     	;# 
  2674  0416                     	;# 
  2675  0417                     	;# 
  2676  041C                     	;# 
  2677  041D                     	;# 
  2678  041E                     	;# 
  2679  0791                     	;# 
  2680  0792                     	;# 
  2681  0793                     	;# 
  2682  0794                     	;# 
  2683  0795                     	;# 
  2684  0798                     	;# 
  2685  0799                     	;# 
  2686  079A                     	;# 
  2687  07A0                     	;# 
  2688  07A1                     	;# 
  2689  07A2                     	;# 
  2690  07A3                     	;# 
  2691  07A4                     	;# 
  2692  07A5                     	;# 
  2693  07A6                     	;# 
  2694  07A7                     	;# 
  2695  07A8                     	;# 
  2696  07A9                     	;# 
  2697  07AA                     	;# 
  2698  07AB                     	;# 
  2699  0FE4                     	;# 
  2700  0FE5                     	;# 
  2701  0FE6                     	;# 
  2702  0FE7                     	;# 
  2703  0FE8                     	;# 
  2704  0FE9                     	;# 
  2705  0FEA                     	;# 
  2706  0FEB                     	;# 
  2707  0FED                     	;# 
  2708  0FEE                     	;# 
  2709  0FEF                     	;# 
  2710  0000                     	;# 
  2711  0001                     	;# 
  2712  0002                     	;# 
  2713  0003                     	;# 
  2714  0004                     	;# 
  2715  0005                     	;# 
  2716  0006                     	;# 
  2717  0007                     	;# 
  2718  0008                     	;# 
  2719  0009                     	;# 
  2720  000A                     	;# 
  2721  000B                     	;# 
  2722  000C                     	;# 
  2723  000D                     	;# 
  2724  000E                     	;# 
  2725  000F                     	;# 
  2726  0010                     	;# 
  2727  0011                     	;# 
  2728  0012                     	;# 
  2729  0013                     	;# 
  2730  0015                     	;# 
  2731  0016                     	;# 
  2732  0016                     	;# 
  2733  0017                     	;# 
  2734  0018                     	;# 
  2735  0019                     	;# 
  2736  001A                     	;# 
  2737  001B                     	;# 
  2738  001C                     	;# 
  2739  001E                     	;# 
  2740  001F                     	;# 
  2741  008C                     	;# 
  2742  008D                     	;# 
  2743  008E                     	;# 
  2744  008F                     	;# 
  2745  0090                     	;# 
  2746  0091                     	;# 
  2747  0092                     	;# 
  2748  0093                     	;# 
  2749  0095                     	;# 
  2750  0096                     	;# 
  2751  0097                     	;# 
  2752  0098                     	;# 
  2753  0099                     	;# 
  2754  009A                     	;# 
  2755  009B                     	;# 
  2756  009B                     	;# 
  2757  009C                     	;# 
  2758  009D                     	;# 
  2759  009E                     	;# 
  2760  010C                     	;# 
  2761  010D                     	;# 
  2762  010E                     	;# 
  2763  010F                     	;# 
  2764  0110                     	;# 
  2765  0111                     	;# 
  2766  0112                     	;# 
  2767  0113                     	;# 
  2768  0114                     	;# 
  2769  0115                     	;# 
  2770  0116                     	;# 
  2771  0117                     	;# 
  2772  0118                     	;# 
  2773  0119                     	;# 
  2774  011A                     	;# 
  2775  011B                     	;# 
  2776  011D                     	;# 
  2777  018C                     	;# 
  2778  018D                     	;# 
  2779  018F                     	;# 
  2780  0190                     	;# 
  2781  0191                     	;# 
  2782  0191                     	;# 
  2783  0192                     	;# 
  2784  0193                     	;# 
  2785  0193                     	;# 
  2786  0193                     	;# 
  2787  0194                     	;# 
  2788  0195                     	;# 
  2789  0196                     	;# 
  2790  0199                     	;# 
  2791  019A                     	;# 
  2792  019B                     	;# 
  2793  019B                     	;# 
  2794  019B                     	;# 
  2795  019B                     	;# 
  2796  019C                     	;# 
  2797  019C                     	;# 
  2798  019D                     	;# 
  2799  019E                     	;# 
  2800  019F                     	;# 
  2801  020D                     	;# 
  2802  0210                     	;# 
  2803  0211                     	;# 
  2804  0212                     	;# 
  2805  0213                     	;# 
  2806  0214                     	;# 
  2807  0215                     	;# 
  2808  0215                     	;# 
  2809  0216                     	;# 
  2810  0217                     	;# 
  2811  0291                     	;# 
  2812  0291                     	;# 
  2813  0292                     	;# 
  2814  0293                     	;# 
  2815  0294                     	;# 
  2816  0295                     	;# 
  2817  0295                     	;# 
  2818  0296                     	;# 
  2819  0298                     	;# 
  2820  0298                     	;# 
  2821  0299                     	;# 
  2822  029A                     	;# 
  2823  029B                     	;# 
  2824  029C                     	;# 
  2825  029C                     	;# 
  2826  029D                     	;# 
  2827  029E                     	;# 
  2828  029F                     	;# 
  2829  0311                     	;# 
  2830  0311                     	;# 
  2831  0312                     	;# 
  2832  0313                     	;# 
  2833  0314                     	;# 
  2834  0315                     	;# 
  2835  0315                     	;# 
  2836  0316                     	;# 
  2837  0318                     	;# 
  2838  0318                     	;# 
  2839  0319                     	;# 
  2840  031A                     	;# 
  2841  031C                     	;# 
  2842  031C                     	;# 
  2843  031D                     	;# 
  2844  031E                     	;# 
  2845  0394                     	;# 
  2846  0395                     	;# 
  2847  0396                     	;# 
  2848  0415                     	;# 
  2849  0416                     	;# 
  2850  0417                     	;# 
  2851  041C                     	;# 
  2852  041D                     	;# 
  2853  041E                     	;# 
  2854  0791                     	;# 
  2855  0792                     	;# 
  2856  0793                     	;# 
  2857  0794                     	;# 
  2858  0795                     	;# 
  2859  0798                     	;# 
  2860  0799                     	;# 
  2861  079A                     	;# 
  2862  07A0                     	;# 
  2863  07A1                     	;# 
  2864  07A2                     	;# 
  2865  07A3                     	;# 
  2866  07A4                     	;# 
  2867  07A5                     	;# 
  2868  07A6                     	;# 
  2869  07A7                     	;# 
  2870  07A8                     	;# 
  2871  07A9                     	;# 
  2872  07AA                     	;# 
  2873  07AB                     	;# 
  2874  0FE4                     	;# 
  2875  0FE5                     	;# 
  2876  0FE6                     	;# 
  2877  0FE7                     	;# 
  2878  0FE8                     	;# 
  2879  0FE9                     	;# 
  2880  0FEA                     	;# 
  2881  0FEB                     	;# 
  2882  0FED                     	;# 
  2883  0FEE                     	;# 
  2884  0FEF                     	;# 
  2885  0000                     	;# 
  2886  0001                     	;# 
  2887  0002                     	;# 
  2888  0003                     	;# 
  2889  0004                     	;# 
  2890  0005                     	;# 
  2891  0006                     	;# 
  2892  0007                     	;# 
  2893  0008                     	;# 
  2894  0009                     	;# 
  2895  000A                     	;# 
  2896  000B                     	;# 
  2897  000C                     	;# 
  2898  000D                     	;# 
  2899  000E                     	;# 
  2900  000F                     	;# 
  2901  0010                     	;# 
  2902  0011                     	;# 
  2903  0012                     	;# 
  2904  0013                     	;# 
  2905  0015                     	;# 
  2906  0016                     	;# 
  2907  0016                     	;# 
  2908  0017                     	;# 
  2909  0018                     	;# 
  2910  0019                     	;# 
  2911  001A                     	;# 
  2912  001B                     	;# 
  2913  001C                     	;# 
  2914  001E                     	;# 
  2915  001F                     	;# 
  2916  008C                     	;# 
  2917  008D                     	;# 
  2918  008E                     	;# 
  2919  008F                     	;# 
  2920  0090                     	;# 
  2921  0091                     	;# 
  2922  0092                     	;# 
  2923  0093                     	;# 
  2924  0095                     	;# 
  2925  0096                     	;# 
  2926  0097                     	;# 
  2927  0098                     	;# 
  2928  0099                     	;# 
  2929  009A                     	;# 
  2930  009B                     	;# 
  2931  009B                     	;# 
  2932  009C                     	;# 
  2933  009D                     	;# 
  2934  009E                     	;# 
  2935  010C                     	;# 
  2936  010D                     	;# 
  2937  010E                     	;# 
  2938  010F                     	;# 
  2939  0110                     	;# 
  2940  0111                     	;# 
  2941  0112                     	;# 
  2942  0113                     	;# 
  2943  0114                     	;# 
  2944  0115                     	;# 
  2945  0116                     	;# 
  2946  0117                     	;# 
  2947  0118                     	;# 
  2948  0119                     	;# 
  2949  011A                     	;# 
  2950  011B                     	;# 
  2951  011D                     	;# 
  2952  018C                     	;# 
  2953  018D                     	;# 
  2954  018F                     	;# 
  2955  0190                     	;# 
  2956  0191                     	;# 
  2957  0191                     	;# 
  2958  0192                     	;# 
  2959  0193                     	;# 
  2960  0193                     	;# 
  2961  0193                     	;# 
  2962  0194                     	;# 
  2963  0195                     	;# 
  2964  0196                     	;# 
  2965  0199                     	;# 
  2966  019A                     	;# 
  2967  019B                     	;# 
  2968  019B                     	;# 
  2969  019B                     	;# 
  2970  019B                     	;# 
  2971  019C                     	;# 
  2972  019C                     	;# 
  2973  019D                     	;# 
  2974  019E                     	;# 
  2975  019F                     	;# 
  2976  020D                     	;# 
  2977  0210                     	;# 
  2978  0211                     	;# 
  2979  0212                     	;# 
  2980  0213                     	;# 
  2981  0214                     	;# 
  2982  0215                     	;# 
  2983  0215                     	;# 
  2984  0216                     	;# 
  2985  0217                     	;# 
  2986  0291                     	;# 
  2987  0291                     	;# 
  2988  0292                     	;# 
  2989  0293                     	;# 
  2990  0294                     	;# 
  2991  0295                     	;# 
  2992  0295                     	;# 
  2993  0296                     	;# 
  2994  0298                     	;# 
  2995  0298                     	;# 
  2996  0299                     	;# 
  2997  029A                     	;# 
  2998  029B                     	;# 
  2999  029C                     	;# 
  3000  029C                     	;# 
  3001  029D                     	;# 
  3002  029E                     	;# 
  3003  029F                     	;# 
  3004  0311                     	;# 
  3005  0311                     	;# 
  3006  0312                     	;# 
  3007  0313                     	;# 
  3008  0314                     	;# 
  3009  0315                     	;# 
  3010  0315                     	;# 
  3011  0316                     	;# 
  3012  0318                     	;# 
  3013  0318                     	;# 
  3014  0319                     	;# 
  3015  031A                     	;# 
  3016  031C                     	;# 
  3017  031C                     	;# 
  3018  031D                     	;# 
  3019  031E                     	;# 
  3020  0394                     	;# 
  3021  0395                     	;# 
  3022  0396                     	;# 
  3023  0415                     	;# 
  3024  0416                     	;# 
  3025  0417                     	;# 
  3026  041C                     	;# 
  3027  041D                     	;# 
  3028  041E                     	;# 
  3029  0791                     	;# 
  3030  0792                     	;# 
  3031  0793                     	;# 
  3032  0794                     	;# 
  3033  0795                     	;# 
  3034  0798                     	;# 
  3035  0799                     	;# 
  3036  079A                     	;# 
  3037  07A0                     	;# 
  3038  07A1                     	;# 
  3039  07A2                     	;# 
  3040  07A3                     	;# 
  3041  07A4                     	;# 
  3042  07A5                     	;# 
  3043  07A6                     	;# 
  3044  07A7                     	;# 
  3045  07A8                     	;# 
  3046  07A9                     	;# 
  3047  07AA                     	;# 
  3048  07AB                     	;# 
  3049  0FE4                     	;# 
  3050  0FE5                     	;# 
  3051  0FE6                     	;# 
  3052  0FE7                     	;# 
  3053  0FE8                     	;# 
  3054  0FE9                     	;# 
  3055  0FEA                     	;# 
  3056  0FEB                     	;# 
  3057  0FED                     	;# 
  3058  0FEE                     	;# 
  3059  0FEF                     	;# 
  3060  0000                     	;# 
  3061  0001                     	;# 
  3062  0002                     	;# 
  3063  0003                     	;# 
  3064  0004                     	;# 
  3065  0005                     	;# 
  3066  0006                     	;# 
  3067  0007                     	;# 
  3068  0008                     	;# 
  3069  0009                     	;# 
  3070  000A                     	;# 
  3071  000B                     	;# 
  3072  000C                     	;# 
  3073  000D                     	;# 
  3074  000E                     	;# 
  3075  000F                     	;# 
  3076  0010                     	;# 
  3077  0011                     	;# 
  3078  0012                     	;# 
  3079  0013                     	;# 
  3080  0015                     	;# 
  3081  0016                     	;# 
  3082  0016                     	;# 
  3083  0017                     	;# 
  3084  0018                     	;# 
  3085  0019                     	;# 
  3086  001A                     	;# 
  3087  001B                     	;# 
  3088  001C                     	;# 
  3089  001E                     	;# 
  3090  001F                     	;# 
  3091  008C                     	;# 
  3092  008D                     	;# 
  3093  008E                     	;# 
  3094  008F                     	;# 
  3095  0090                     	;# 
  3096  0091                     	;# 
  3097  0092                     	;# 
  3098  0093                     	;# 
  3099  0095                     	;# 
  3100  0096                     	;# 
  3101  0097                     	;# 
  3102  0098                     	;# 
  3103  0099                     	;# 
  3104  009A                     	;# 
  3105  009B                     	;# 
  3106  009B                     	;# 
  3107  009C                     	;# 
  3108  009D                     	;# 
  3109  009E                     	;# 
  3110  010C                     	;# 
  3111  010D                     	;# 
  3112  010E                     	;# 
  3113  010F                     	;# 
  3114  0110                     	;# 
  3115  0111                     	;# 
  3116  0112                     	;# 
  3117  0113                     	;# 
  3118  0114                     	;# 
  3119  0115                     	;# 
  3120  0116                     	;# 
  3121  0117                     	;# 
  3122  0118                     	;# 
  3123  0119                     	;# 
  3124  011A                     	;# 
  3125  011B                     	;# 
  3126  011D                     	;# 
  3127  018C                     	;# 
  3128  018D                     	;# 
  3129  018F                     	;# 
  3130  0190                     	;# 
  3131  0191                     	;# 
  3132  0191                     	;# 
  3133  0192                     	;# 
  3134  0193                     	;# 
  3135  0193                     	;# 
  3136  0193                     	;# 
  3137  0194                     	;# 
  3138  0195                     	;# 
  3139  0196                     	;# 
  3140  0199                     	;# 
  3141  019A                     	;# 
  3142  019B                     	;# 
  3143  019B                     	;# 
  3144  019B                     	;# 
  3145  019B                     	;# 
  3146  019C                     	;# 
  3147  019C                     	;# 
  3148  019D                     	;# 
  3149  019E                     	;# 
  3150  019F                     	;# 
  3151  020D                     	;# 
  3152  0210                     	;# 
  3153  0211                     	;# 
  3154  0212                     	;# 
  3155  0213                     	;# 
  3156  0214                     	;# 
  3157  0215                     	;# 
  3158  0215                     	;# 
  3159  0216                     	;# 
  3160  0217                     	;# 
  3161  0291                     	;# 
  3162  0291                     	;# 
  3163  0292                     	;# 
  3164  0293                     	;# 
  3165  0294                     	;# 
  3166  0295                     	;# 
  3167  0295                     	;# 
  3168  0296                     	;# 
  3169  0298                     	;# 
  3170  0298                     	;# 
  3171  0299                     	;# 
  3172  029A                     	;# 
  3173  029B                     	;# 
  3174  029C                     	;# 
  3175  029C                     	;# 
  3176  029D                     	;# 
  3177  029E                     	;# 
  3178  029F                     	;# 
  3179  0311                     	;# 
  3180  0311                     	;# 
  3181  0312                     	;# 
  3182  0313                     	;# 
  3183  0314                     	;# 
  3184  0315                     	;# 
  3185  0315                     	;# 
  3186  0316                     	;# 
  3187  0318                     	;# 
  3188  0318                     	;# 
  3189  0319                     	;# 
  3190  031A                     	;# 
  3191  031C                     	;# 
  3192  031C                     	;# 
  3193  031D                     	;# 
  3194  031E                     	;# 
  3195  0394                     	;# 
  3196  0395                     	;# 
  3197  0396                     	;# 
  3198  0415                     	;# 
  3199  0416                     	;# 
  3200  0417                     	;# 
  3201  041C                     	;# 
  3202  041D                     	;# 
  3203  041E                     	;# 
  3204  0791                     	;# 
  3205  0792                     	;# 
  3206  0793                     	;# 
  3207  0794                     	;# 
  3208  0795                     	;# 
  3209  0798                     	;# 
  3210  0799                     	;# 
  3211  079A                     	;# 
  3212  07A0                     	;# 
  3213  07A1                     	;# 
  3214  07A2                     	;# 
  3215  07A3                     	;# 
  3216  07A4                     	;# 
  3217  07A5                     	;# 
  3218  07A6                     	;# 
  3219  07A7                     	;# 
  3220  07A8                     	;# 
  3221  07A9                     	;# 
  3222  07AA                     	;# 
  3223  07AB                     	;# 
  3224  0FE4                     	;# 
  3225  0FE5                     	;# 
  3226  0FE6                     	;# 
  3227  0FE7                     	;# 
  3228  0FE8                     	;# 
  3229  0FE9                     	;# 
  3230  0FEA                     	;# 
  3231  0FEB                     	;# 
  3232  0FED                     	;# 
  3233  0FEE                     	;# 
  3234  0FEF                     	;# 
  3235                           
  3236                           	psect	idataBANK0
  3237  1315                     __pidataBANK0:	
  3238                           
  3239                           ;initializer for _I2C_Address
  3240  1315  344D               	retlw	77
  3241  1316  3400               	retlw	0
  3242                           
  3243                           ;initializer for _pwm_freq
  3244  1317  3405               	retlw	5
  3245                           
  3246                           ;initializer for _pwm_on
  3247  1318  3405               	retlw	5
  3248                           
  3249                           	psect	nvBANK0
  3250  0061                     __pnvBANK0:	
  3251  0061                     _i2c_object:	
  3252  0061                     	ds	5
  3253  0066                     _timer1ReloadVal:	
  3254  0066                     	ds	2
  3255  0068                     _eusartTxBufferRemaining:	
  3256  0068                     	ds	1
  3257  000B                     _INTCONbits	set	11
  3258  0011                     _PIR1bits	set	17
  3259  0012                     _PIR2bits	set	18
  3260  0013                     _PIR3bits	set	19
  3261  000C                     _PORTAbits	set	12
  3262  000D                     _PORTBbits	set	13
  3263  000F                     _PORTD	set	15
  3264  000F                     _PORTDbits	set	15
  3265  0018                     _T1CON	set	24
  3266  0018                     _T1CONbits	set	24
  3267  0019                     _T1GCON	set	25
  3268  0019                     _T1GCONbits	set	25
  3269  0015                     _TMR0	set	21
  3270  0017                     _TMR1H	set	23
  3271  0016                     _TMR1L	set	22
  3272  005A                     _TMR0IF	set	90
  3273  0088                     _TMR1IF	set	136
  3274  009D                     _ADCON0	set	157
  3275  009D                     _ADCON0bits	set	157
  3276  009E                     _ADCON1	set	158
  3277  009C                     _ADRESH	set	156
  3278  009B                     _ADRESL	set	155
  3279  0095                     _OPTION_REG	set	149
  3280  0095                     _OPTION_REGbits	set	149
  3281  0099                     _OSCCON	set	153
  3282  009A                     _OSCSTAT	set	154
  3283  0098                     _OSCTUNE	set	152
  3284  0091                     _PIE1bits	set	145
  3285  0092                     _PIE2bits	set	146
  3286  008C                     _TRISA	set	140
  3287  008D                     _TRISB	set	141
  3288  008E                     _TRISC	set	142
  3289  008F                     _TRISD	set	143
  3290  0090                     _TRISE	set	144
  3291  0472                     _TRISC2	set	1138
  3292  011D                     _APFCON	set	285
  3293  010C                     _LATA	set	268
  3294  010D                     _LATB	set	269
  3295  010E                     _LATC	set	270
  3296  010F                     _LATD	set	271
  3297  0110                     _LATE	set	272
  3298  018C                     _ANSELA	set	396
  3299  018D                     _ANSELB	set	397
  3300  018F                     _ANSELD	set	399
  3301  0190                     _ANSELE	set	400
  3302  019F                     _BAUDCON	set	415
  3303  0199                     _RCREG	set	409
  3304  019D                     _RCSTA	set	413
  3305  019D                     _RCSTAbits	set	413
  3306  019C                     _SPBRGH	set	412
  3307  019B                     _SPBRGL	set	411
  3308  019A                     _TXREG	set	410
  3309  019E                     _TXSTA	set	414
  3310  0212                     _SSPADD	set	530
  3311  0211                     _SSPBUF	set	529
  3312  0215                     _SSPCON1	set	533
  3313  0215                     _SSPCON1bits	set	533
  3314  0216                     _SSPCON2bits	set	534
  3315  0217                     _SSPCON3	set	535
  3316  0214                     _SSPSTAT	set	532
  3317  020D                     _WPUB	set	525
  3318  0210                     _WPUE	set	528
  3319  0293                     _CCP1CON	set	659
  3320  0292                     _CCPR1H	set	658
  3321  0291                     _CCPR1L	set	657
  3322  029E                     _CCPTMRS0bits	set	670
  3323  0295                     _ECCP1AS	set	661
  3324  0296                     _PSTR1CON	set	662
  3325  0294                     _PWM1CON	set	660
  3326  0416                     _PR4	set	1046
  3327  0417                     _T4CON	set	1047
  3328  0417                     _T4CONbits	set	1047
  3329  0415                     _TMR4	set	1045
  3330                           
  3331                           	psect	stringtext
  3332  1000                     __pstringtext:	
  3333  1000                     __stringdata:	
  3334  1000                     STR_107:	
  3335  1000  3452               	retlw	82	;'R'
  3336  1001  3441               	retlw	65	;'A'
  3337  1002  3434               	retlw	52	;'4'
  3338  1003  343D               	retlw	61	;'='
  3339  1004  345B               	retlw	91	;'['
  3340  1005  3443               	retlw	67	;'C'
  3341  1006  345D               	retlw	93	;']'
  3342  1007  3420               	retlw	32	;' '
  3343  1008  3452               	retlw	82	;'R'
  3344  1009  3442               	retlw	66	;'B'
  3345  100A  3430               	retlw	48	;'0'
  3346  100B  343D               	retlw	61	;'='
  3347  100C  3445               	retlw	69	;'E'
  3348  100D  3478               	retlw	120	;'x'
  3349  100E  3469               	retlw	105	;'i'
  3350  100F  3474               	retlw	116	;'t'
  3351  1010  3400               	retlw	0
  3352  1011                     STR_108:	
  3353  1011  3452               	retlw	82	;'R'
  3354  1012  3441               	retlw	65	;'A'
  3355  1013  3434               	retlw	52	;'4'
  3356  1014  343D               	retlw	61	;'='
  3357  1015  345B               	retlw	91	;'['
  3358  1016  3446               	retlw	70	;'F'
  3359  1017  345D               	retlw	93	;']'
  3360  1018  3420               	retlw	32	;' '
  3361  1019  3452               	retlw	82	;'R'
  3362  101A  3442               	retlw	66	;'B'
  3363  101B  3430               	retlw	48	;'0'
  3364  101C  343D               	retlw	61	;'='
  3365  101D  3445               	retlw	69	;'E'
  3366  101E  3478               	retlw	120	;'x'
  3367  101F  3469               	retlw	105	;'i'
  3368  1020  3474               	retlw	116	;'t'
  3369  1021  3400               	retlw	0
  3370  1022                     STR_100:	
  3371  1022  3452               	retlw	82	;'R'
  3372  1023  3441               	retlw	65	;'A'
  3373  1024  3434               	retlw	52	;'4'
  3374  1025  343D               	retlw	61	;'='
  3375  1026  3453               	retlw	83	;'S'
  3376  1027  3465               	retlw	101	;'e'
  3377  1028  3474               	retlw	116	;'t'
  3378  1029  3420               	retlw	32	;' '
  3379  102A  3452               	retlw	82	;'R'
  3380  102B  3442               	retlw	66	;'B'
  3381  102C  3430               	retlw	48	;'0'
  3382  102D  343D               	retlw	61	;'='
  3383  102E  344D               	retlw	77	;'M'
  3384  102F  3465               	retlw	101	;'e'
  3385  1030  346E               	retlw	110	;'n'
  3386  1031  3475               	retlw	117	;'u'
  3387  1032  3400               	retlw	0
  3388  1033                     STR_50:	
  3389  1033  3452               	retlw	82	;'R'
  3390  1034  3441               	retlw	65	;'A'
  3391  1035  3434               	retlw	52	;'4'
  3392  1036  343D               	retlw	61	;'='
  3393  1037  342B               	retlw	43	;'+'
  3394  1038  3432               	retlw	50	;'2'
  3395  1039  3425               	retlw	37	;'%'
  3396  103A  3420               	retlw	32	;' '
  3397  103B  3452               	retlw	82	;'R'
  3398  103C  3442               	retlw	66	;'B'
  3399  103D  3430               	retlw	48	;'0'
  3400  103E  343D               	retlw	61	;'='
  3401  103F  3445               	retlw	69	;'E'
  3402  1040  3478               	retlw	120	;'x'
  3403  1041  3469               	retlw	105	;'i'
  3404  1042  3474               	retlw	116	;'t'
  3405  1043  3400               	retlw	0
  3406  1044                     STR_9:	
  3407  1044  3420               	retlw	32	;' '
  3408  1045  3456               	retlw	86	;'V'
  3409  1046  3420               	retlw	32	;' '
  3410  1047  3420               	retlw	32	;' '
  3411  1048  3420               	retlw	32	;' '
  3412  1049  3420               	retlw	32	;' '
  3413  104A  3441               	retlw	65	;'A'
  3414  104B  3444               	retlw	68	;'D'
  3415  104C  3443               	retlw	67	;'C'
  3416  104D  3420               	retlw	32	;' '
  3417  104E  3443               	retlw	67	;'C'
  3418  104F  346F               	retlw	111	;'o'
  3419  1050  3475               	retlw	117	;'u'
  3420  1051  346E               	retlw	110	;'n'
  3421  1052  3474               	retlw	116	;'t'
  3422  1053  343A               	retlw	58	;':'
  3423  1054  3400               	retlw	0
  3424  1055                     STR_4:	
  3425  1055  3452               	retlw	82	;'R'
  3426  1056  3441               	retlw	65	;'A'
  3427  1057  3434               	retlw	52	;'4'
  3428  1058  343D               	retlw	61	;'='
  3429  1059  344E               	retlw	78	;'N'
  3430  105A  3465               	retlw	101	;'e'
  3431  105B  3478               	retlw	120	;'x'
  3432  105C  3474               	retlw	116	;'t'
  3433  105D  3420               	retlw	32	;' '
  3434  105E  3452               	retlw	82	;'R'
  3435  105F  3442               	retlw	66	;'B'
  3436  1060  3430               	retlw	48	;'0'
  3437  1061  343D               	retlw	61	;'='
  3438  1062  344E               	retlw	78	;'N'
  3439  1063  346F               	retlw	111	;'o'
  3440  1064  3477               	retlw	119	;'w'
  3441  1065  3400               	retlw	0
  3442  1066                     STR_90:	
  3443  1066  3452               	retlw	82	;'R'
  3444  1067  3442               	retlw	66	;'B'
  3445  1068  343A               	retlw	58	;':'
  3446  1069  345B               	retlw	91	;'['
  3447  106A  344D               	retlw	77	;'M'
  3448  106B  3449               	retlw	73	;'I'
  3449  106C  344E               	retlw	78	;'N'
  3450  106D  345D               	retlw	93	;']'
  3451  106E  3420               	retlw	32	;' '
  3452  106F  3420               	retlw	32	;' '
  3453  1070  3454               	retlw	84	;'T'
  3454  1071  3449               	retlw	73	;'I'
  3455  1072  344D               	retlw	77	;'M'
  3456  1073  3445               	retlw	69	;'E'
  3457  1074  3420               	retlw	32	;' '
  3458  1075  3400               	retlw	0
  3459  1076                     STR_101:	
  3460  1076  340D               	retlw	13
  3461  1077  340A               	retlw	10
  3462  1078  3453               	retlw	83	;'S'
  3463  1079  3479               	retlw	121	;'y'
  3464  107A  3473               	retlw	115	;'s'
  3465  107B  3474               	retlw	116	;'t'
  3466  107C  3465               	retlw	101	;'e'
  3467  107D  346D               	retlw	109	;'m'
  3468  107E  3420               	retlw	32	;' '
  3469  107F  3454               	retlw	84	;'T'
  3470  1080  3469               	retlw	105	;'i'
  3471  1081  346D               	retlw	109	;'m'
  3472  1082  3465               	retlw	101	;'e'
  3473  1083  3420               	retlw	32	;' '
  3474  1084  343A               	retlw	58	;':'
  3475  1085  3400               	retlw	0
  3476  1086                     STR_52:	
  3477  1086  3420               	retlw	32	;' '
  3478  1087  3420               	retlw	32	;' '
  3479  1088  3420               	retlw	32	;' '
  3480  1089  3420               	retlw	32	;' '
  3481  108A  3420               	retlw	32	;' '
  3482  108B  3420               	retlw	32	;' '
  3483  108C  3420               	retlw	32	;' '
  3484  108D  3420               	retlw	32	;' '
  3485  108E  3420               	retlw	32	;' '
  3486  108F  3420               	retlw	32	;' '
  3487  1090  344B               	retlw	75	;'K'
  3488  1091  3465               	retlw	101	;'e'
  3489  1092  3479               	retlw	121	;'y'
  3490  1093  343A               	retlw	58	;':'
  3491  1094  3400               	retlw	0
  3492  1095                     STR_2:	
  3493  1095  3420               	retlw	32	;' '
  3494  1096  3450               	retlw	80	;'P'
  3495  1097  3449               	retlw	73	;'I'
  3496  1098  3443               	retlw	67	;'C'
  3497  1099  3444               	retlw	68	;'D'
  3498  109A  3445               	retlw	69	;'E'
  3499  109B  344D               	retlw	77	;'M'
  3500  109C  3420               	retlw	32	;' '
  3501  109D  3432               	retlw	50	;'2'
  3502  109E  3420               	retlw	32	;' '
  3503  109F  3450               	retlw	80	;'P'
  3504  10A0  344C               	retlw	76	;'L'
  3505  10A1  3455               	retlw	85	;'U'
  3506  10A2  3453               	retlw	83	;'S'
  3507  10A3  3400               	retlw	0
  3508  10A4                     STR_102:	
  3509  10A4  3420               	retlw	32	;' '
  3510  10A5  3420               	retlw	32	;' '
  3511  10A6  3454               	retlw	84	;'T'
  3512  10A7  3465               	retlw	101	;'e'
  3513  10A8  346D               	retlw	109	;'m'
  3514  10A9  3470               	retlw	112	;'p'
  3515  10AA  3465               	retlw	101	;'e'
  3516  10AB  3472               	retlw	114	;'r'
  3517  10AC  3461               	retlw	97	;'a'
  3518  10AD  3474               	retlw	116	;'t'
  3519  10AE  3475               	retlw	117	;'u'
  3520  10AF  3472               	retlw	114	;'r'
  3521  10B0  3465               	retlw	101	;'e'
  3522  10B1  3400               	retlw	0
  3523  10B2                     STR_3:	
  3524  10B2  3420               	retlw	32	;' '
  3525  10B3  3420               	retlw	32	;' '
  3526  10B4  3420               	retlw	32	;' '
  3527  10B5  3456               	retlw	86	;'V'
  3528  10B6  346F               	retlw	111	;'o'
  3529  10B7  346C               	retlw	108	;'l'
  3530  10B8  3474               	retlw	116	;'t'
  3531  10B9  346D               	retlw	109	;'m'
  3532  10BA  3465               	retlw	101	;'e'
  3533  10BB  3474               	retlw	116	;'t'
  3534  10BC  3465               	retlw	101	;'e'
  3535  10BD  3472               	retlw	114	;'r'
  3536  10BE  3400               	retlw	0
  3537  10BF                     STR_1:	
  3538  10BF  3420               	retlw	32	;' '
  3539  10C0  3420               	retlw	32	;' '
  3540  10C1  3420               	retlw	32	;' '
  3541  10C2  344D               	retlw	77	;'M'
  3542  10C3  3469               	retlw	105	;'i'
  3543  10C4  3463               	retlw	99	;'c'
  3544  10C5  3472               	retlw	114	;'r'
  3545  10C6  346F               	retlw	111	;'o'
  3546  10C7  3463               	retlw	99	;'c'
  3547  10C8  3468               	retlw	104	;'h'
  3548  10C9  3469               	retlw	105	;'i'
  3549  10CA  3470               	retlw	112	;'p'
  3550  10CB  3400               	retlw	0
  3551  10CC                     STR_93:	
  3552  10CC  3420               	retlw	32	;' '
  3553  10CD  3420               	retlw	32	;' '
  3554  10CE  3420               	retlw	32	;' '
  3555  10CF  3420               	retlw	32	;' '
  3556  10D0  3452               	retlw	82	;'R'
  3557  10D1  3442               	retlw	66	;'B'
  3558  10D2  343A               	retlw	58	;':'
  3559  10D3  344E               	retlw	78	;'N'
  3560  10D4  3465               	retlw	101	;'e'
  3561  10D5  3478               	retlw	120	;'x'
  3562  10D6  3474               	retlw	116	;'t'
  3563  10D7  3400               	retlw	0
  3564  10D8                     STR_10:	
  3565  10D8  3420               	retlw	32	;' '
  3566  10D9  3420               	retlw	32	;' '
  3567  10DA  3420               	retlw	32	;' '
  3568  10DB  3420               	retlw	32	;' '
  3569  10DC  3420               	retlw	32	;' '
  3570  10DD  3442               	retlw	66	;'B'
  3571  10DE  3475               	retlw	117	;'u'
  3572  10DF  347A               	retlw	122	;'z'
  3573  10E0  347A               	retlw	122	;'z'
  3574  10E1  3465               	retlw	101	;'e'
  3575  10E2  3472               	retlw	114	;'r'
  3576  10E3  3400               	retlw	0
  3577  10E4                     STR_7:	
  3578  10E4  345D               	retlw	93	;']'
  3579  10E5  3420               	retlw	32	;' '
  3580  10E6  3452               	retlw	82	;'R'
  3581  10E7  3442               	retlw	66	;'B'
  3582  10E8  3430               	retlw	48	;'0'
  3583  10E9  343D               	retlw	61	;'='
  3584  10EA  3420               	retlw	32	;' '
  3585  10EB  3445               	retlw	69	;'E'
  3586  10EC  3478               	retlw	120	;'x'
  3587  10ED  3469               	retlw	105	;'i'
  3588  10EE  3474               	retlw	116	;'t'
  3589  10EF  3400               	retlw	0
  3590  10F0                     STR_97:	
  3591  10F0  3420               	retlw	32	;' '
  3592  10F1  3420               	retlw	32	;' '
  3593  10F2  3420               	retlw	32	;' '
  3594  10F3  3420               	retlw	32	;' '
  3595  10F4  3420               	retlw	32	;' '
  3596  10F5  3443               	retlw	67	;'C'
  3597  10F6  346C               	retlw	108	;'l'
  3598  10F7  346F               	retlw	111	;'o'
  3599  10F8  3463               	retlw	99	;'c'
  3600  10F9  346B               	retlw	107	;'k'
  3601  10FA  3400               	retlw	0
  3602  10FB                     STR_8:	
  3603  10FB  340D               	retlw	13
  3604  10FC  340A               	retlw	10
  3605  10FD  3456               	retlw	86	;'V'
  3606  10FE  346F               	retlw	111	;'o'
  3607  10FF  346C               	retlw	108	;'l'
  3608  1100  3474               	retlw	116	;'t'
  3609  1101  3473               	retlw	115	;'s'
  3610  1102  3420               	retlw	32	;' '
  3611  1103  343D               	retlw	61	;'='
  3612  1104  3420               	retlw	32	;' '
  3613  1105  3400               	retlw	0
  3614  1106                     STR_109:	
  3615  1106  340A               	retlw	10
  3616  1107  340D               	retlw	13
  3617  1108  3454               	retlw	84	;'T'
  3618  1109  3465               	retlw	101	;'e'
  3619  110A  346D               	retlw	109	;'m'
  3620  110B  3470               	retlw	112	;'p'
  3621  110C  3420               	retlw	32	;' '
  3622  110D  343D               	retlw	61	;'='
  3623  110E  3420               	retlw	32	;' '
  3624  110F  3400               	retlw	0
  3625  1110                     STR_89:	
  3626  1110  3452               	retlw	82	;'R'
  3627  1111  3441               	retlw	65	;'A'
  3628  1112  343A               	retlw	58	;':'
  3629  1113  345B               	retlw	91	;'['
  3630  1114  3448               	retlw	72	;'H'
  3631  1115  3452               	retlw	82	;'R'
  3632  1116  345D               	retlw	93	;']'
  3633  1117  3420               	retlw	32	;' '
  3634  1118  3400               	retlw	0
  3635  1119                     STR_94:	
  3636  1119  3420               	retlw	32	;' '
  3637  111A  3420               	retlw	32	;' '
  3638  111B  342A               	retlw	42	;'*'
  3639  111C  345B               	retlw	91	;'['
  3640  111D  344D               	retlw	77	;'M'
  3641  111E  3449               	retlw	73	;'I'
  3642  111F  344E               	retlw	78	;'N'
  3643  1120  345D               	retlw	93	;']'
  3644  1121  3400               	retlw	0
  3645  1122                     STR_91:	
  3646  1122  3420               	retlw	32	;' '
  3647  1123  3420               	retlw	32	;' '
  3648  1124  342A               	retlw	42	;'*'
  3649  1125  345B               	retlw	91	;'['
  3650  1126  3448               	retlw	72	;'H'
  3651  1127  3452               	retlw	82	;'R'
  3652  1128  3453               	retlw	83	;'S'
  3653  1129  345D               	retlw	93	;']'
  3654  112A  3400               	retlw	0
  3655  112B                     STR_51:	
  3656  112B  340D               	retlw	13
  3657  112C  340A               	retlw	10
  3658  112D  3450               	retlw	80	;'P'
  3659  112E  3457               	retlw	87	;'W'
  3660  112F  344D               	retlw	77	;'M'
  3661  1130  343A               	retlw	58	;':'
  3662  1131  3420               	retlw	32	;' '
  3663  1132  3400               	retlw	0
  3664  1133                     STR_106:	
  3665  1133  345B               	retlw	91	;'['
  3666  1134  3443               	retlw	67	;'C'
  3667  1135  345D               	retlw	93	;']'
  3668  1136  3420               	retlw	32	;' '
  3669  1137  3420               	retlw	32	;' '
  3670  1138  3420               	retlw	32	;' '
  3671  1139  3400               	retlw	0
  3672  113A                     STR_105:	
  3673  113A  345B               	retlw	91	;'['
  3674  113B  3446               	retlw	70	;'F'
  3675  113C  345D               	retlw	93	;']'
  3676  113D  3420               	retlw	32	;' '
  3677  113E  3420               	retlw	32	;' '
  3678  113F  3420               	retlw	32	;' '
  3679  1140  3400               	retlw	0
  3680  1141                     STR_99:	
  3681  1141  3454               	retlw	84	;'T'
  3682  1142  3449               	retlw	73	;'I'
  3683  1143  344D               	retlw	77	;'M'
  3684  1144  3445               	retlw	69	;'E'
  3685  1145  3420               	retlw	32	;' '
  3686  1146  3420               	retlw	32	;' '
  3687  1147  3400               	retlw	0
  3688  1148                     STR_6:	
  3689  1148  3420               	retlw	32	;' '
  3690  1149  3456               	retlw	86	;'V'
  3691  114A  3420               	retlw	32	;' '
  3692  114B  3420               	retlw	32	;' '
  3693  114C  3420               	retlw	32	;' '
  3694  114D  3400               	retlw	0
  3695  114E                     STR_12:	
  3696  114E  3450               	retlw	80	;'P'
  3697  114F  3457               	retlw	87	;'W'
  3698  1150  344D               	retlw	77	;'M'
  3699  1151  343A               	retlw	58	;':'
  3700  1152  3400               	retlw	0
  3701  1153                     STR_92:	
  3702  1153  3452               	retlw	82	;'R'
  3703  1154  3441               	retlw	65	;'A'
  3704  1155  343A               	retlw	58	;':'
  3705  1156  3400               	retlw	0
  3706  1157                     STR_48:	
  3707  1157  3442               	retlw	66	;'B'
  3708  1158  3433               	retlw	51	;'3'
  3709  1159  3420               	retlw	32	;' '
  3710  115A  3400               	retlw	0
  3711  115B                     STR_38:	
  3712  115B  3441               	retlw	65	;'A'
  3713  115C  3434               	retlw	52	;'4'
  3714  115D  3420               	retlw	32	;' '
  3715  115E  3400               	retlw	0
  3716  115F                     STR_36:	
  3717  115F  3442               	retlw	66	;'B'
  3718  1160  3434               	retlw	52	;'4'
  3719  1161  3420               	retlw	32	;' '
  3720  1162  3400               	retlw	0
  3721  1163                     STR_47:	
  3722  1163  3443               	retlw	67	;'C'
  3723  1164  3434               	retlw	52	;'4'
  3724  1165  3420               	retlw	32	;' '
  3725  1166  3400               	retlw	0
  3726  1167                     STR_45:	
  3727  1167  3444               	retlw	68	;'D'
  3728  1168  3434               	retlw	52	;'4'
  3729  1169  3420               	retlw	32	;' '
  3730  116A  3400               	retlw	0
  3731  116B                     STR_43:	
  3732  116B  3445               	retlw	69	;'E'
  3733  116C  3434               	retlw	52	;'4'
  3734  116D  3420               	retlw	32	;' '
  3735  116E  3400               	retlw	0
  3736  116F                     STR_42:	
  3737  116F  3446               	retlw	70	;'F'
  3738  1170  3434               	retlw	52	;'4'
  3739  1171  3420               	retlw	32	;' '
  3740  1172  3400               	retlw	0
  3741  1173                     STR_40:	
  3742  1173  3447               	retlw	71	;'G'
  3743  1174  3434               	retlw	52	;'4'
  3744  1175  3420               	retlw	32	;' '
  3745  1176  3400               	retlw	0
  3746  1177                     STR_26:	
  3747  1177  3441               	retlw	65	;'A'
  3748  1178  3435               	retlw	53	;'5'
  3749  1179  3420               	retlw	32	;' '
  3750  117A  3400               	retlw	0
  3751  117B                     STR_35:	
  3752  117B  3443               	retlw	67	;'C'
  3753  117C  3435               	retlw	53	;'5'
  3754  117D  3420               	retlw	32	;' '
  3755  117E  3400               	retlw	0
  3756  117F                     STR_33:	
  3757  117F  3444               	retlw	68	;'D'
  3758  1180  3435               	retlw	53	;'5'
  3759  1181  3420               	retlw	32	;' '
  3760  1182  3400               	retlw	0
  3761  1183                     STR_31:	
  3762  1183  3445               	retlw	69	;'E'
  3763  1184  3435               	retlw	53	;'5'
  3764  1185  3420               	retlw	32	;' '
  3765  1186  3400               	retlw	0
  3766  1187                     STR_30:	
  3767  1187  3446               	retlw	70	;'F'
  3768  1188  3435               	retlw	53	;'5'
  3769  1189  3420               	retlw	32	;' '
  3770  118A  3400               	retlw	0
  3771  118B                     STR_28:	
  3772  118B  3447               	retlw	71	;'G'
  3773  118C  3435               	retlw	53	;'5'
  3774  118D  3420               	retlw	32	;' '
  3775  118E  3400               	retlw	0
  3776  118F                     STR_19:	
  3777  118F  3441               	retlw	65	;'A'
  3778  1190  3436               	retlw	54	;'6'
  3779  1191  3420               	retlw	32	;' '
  3780  1192  3400               	retlw	0
  3781  1193                     STR_23:	
  3782  1193  3444               	retlw	68	;'D'
  3783  1194  3436               	retlw	54	;'6'
  3784  1195  3420               	retlw	32	;' '
  3785  1196  3400               	retlw	0
  3786  1197                     STR_21:	
  3787  1197  3446               	retlw	70	;'F'
  3788  1198  3436               	retlw	54	;'6'
  3789  1199  3420               	retlw	32	;' '
  3790  119A  3400               	retlw	0
  3791  119B                     STR_20:	
  3792  119B  3447               	retlw	71	;'G'
  3793  119C  3436               	retlw	54	;'6'
  3794  119D  3420               	retlw	32	;' '
  3795  119E  3400               	retlw	0
  3796  119F                     STR_15:	
  3797  119F  3442               	retlw	66	;'B'
  3798  11A0  3437               	retlw	55	;'7'
  3799  11A1  3420               	retlw	32	;' '
  3800  11A2  3400               	retlw	0
  3801  11A3                     STR_18:	
  3802  11A3  3443               	retlw	67	;'C'
  3803  11A4  3437               	retlw	55	;'7'
  3804  11A5  3420               	retlw	32	;' '
  3805  11A6  3400               	retlw	0
  3806  11A7                     STR_37:	
  3807  11A7  3441               	retlw	65	;'A'
  3808  11A8  3434               	retlw	52	;'4'
  3809  11A9  3423               	retlw	35	;'#'
  3810  11AA  3400               	retlw	0
  3811  11AB                     STR_46:	
  3812  11AB  3443               	retlw	67	;'C'
  3813  11AC  3434               	retlw	52	;'4'
  3814  11AD  3423               	retlw	35	;'#'
  3815  11AE  3400               	retlw	0
  3816  11AF                     STR_44:	
  3817  11AF  3444               	retlw	68	;'D'
  3818  11B0  3434               	retlw	52	;'4'
  3819  11B1  3423               	retlw	35	;'#'
  3820  11B2  3400               	retlw	0
  3821  11B3                     STR_41:	
  3822  11B3  3446               	retlw	70	;'F'
  3823  11B4  3434               	retlw	52	;'4'
  3824  11B5  3423               	retlw	35	;'#'
  3825  11B6  3400               	retlw	0
  3826  11B7                     STR_39:	
  3827  11B7  3447               	retlw	71	;'G'
  3828  11B8  3434               	retlw	52	;'4'
  3829  11B9  3423               	retlw	35	;'#'
  3830  11BA  3400               	retlw	0
  3831  11BB                     STR_25:	
  3832  11BB  3441               	retlw	65	;'A'
  3833  11BC  3435               	retlw	53	;'5'
  3834  11BD  3423               	retlw	35	;'#'
  3835  11BE  3400               	retlw	0
  3836  11BF                     STR_34:	
  3837  11BF  3443               	retlw	67	;'C'
  3838  11C0  3435               	retlw	53	;'5'
  3839  11C1  3423               	retlw	35	;'#'
  3840  11C2  3400               	retlw	0
  3841  11C3                     STR_32:	
  3842  11C3  3444               	retlw	68	;'D'
  3843  11C4  3435               	retlw	53	;'5'
  3844  11C5  3423               	retlw	35	;'#'
  3845  11C6  3400               	retlw	0
  3846  11C7                     STR_29:	
  3847  11C7  3446               	retlw	70	;'F'
  3848  11C8  3435               	retlw	53	;'5'
  3849  11C9  3423               	retlw	35	;'#'
  3850  11CA  3400               	retlw	0
  3851  11CB                     STR_27:	
  3852  11CB  3447               	retlw	71	;'G'
  3853  11CC  3435               	retlw	53	;'5'
  3854  11CD  3423               	retlw	35	;'#'
  3855  11CE  3400               	retlw	0
  3856  11CF                     STR_22:	
  3857  11CF  3444               	retlw	68	;'D'
  3858  11D0  3436               	retlw	54	;'6'
  3859  11D1  3423               	retlw	35	;'#'
  3860  11D2  3400               	retlw	0
  3861  11D3                     STR_17:	
  3862  11D3  3444               	retlw	68	;'D'
  3863  11D4  3437               	retlw	55	;'7'
  3864  11D5  3423               	retlw	35	;'#'
  3865  11D6  3400               	retlw	0
  3866  11D7                     STR_16:	
  3867  11D7  3446               	retlw	70	;'F'
  3868  11D8  3437               	retlw	55	;'7'
  3869  11D9  3423               	retlw	35	;'#'
  3870  11DA  3400               	retlw	0
  3871  11DB                     STR_14:	
  3872  11DB  3444               	retlw	68	;'D'
  3873  11DC  3438               	retlw	56	;'8'
  3874  11DD  3423               	retlw	35	;'#'
  3875  11DE  3400               	retlw	0
  3876  11DF                     STR_49:	
  3877  11DF  342D               	retlw	45	;'-'
  3878  11E0  342D               	retlw	45	;'-'
  3879  11E1  342D               	retlw	45	;'-'
  3880  11E2  3400               	retlw	0
  3881  11E3                     STR_24:	
  3882  11E3  3443               	retlw	67	;'C'
  3883  11E4  3436               	retlw	54	;'6'
  3884  11E5  3400               	retlw	0
  3885  11E6                     __end_of__stringdata:	
  3886                           
  3887                           ; #config settings
  3888  0000                     
  3889                           	psect	cinit
  3890  0047                     start_initialization:	
  3891  0047                     __initialization:	
  3892                           
  3893                           ; Clear objects allocated to COMMON
  3894  0047  01F0               	clrf	__pbssCOMMON& (0+127)
  3895  0048  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  3896  0049  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  3897  004A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  3898  004B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  3899  004C  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  3900  004D  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  3901                           
  3902                           ; Clear objects allocated to BANK0
  3903  004E  3020               	movlw	low __pbssBANK0
  3904  004F  0084               	movwf	4
  3905  0050  3000               	movlw	high __pbssBANK0
  3906  0051  0085               	movwf	5
  3907  0052  3021               	movlw	33
  3908  0053  3193  2325  3180   	fcall	clear_ram0
  3909                           
  3910                           ; Clear objects allocated to BANK1
  3911  0056  30A0               	movlw	low __pbssBANK1
  3912  0057  0084               	movwf	4
  3913  0058  3000               	movlw	high __pbssBANK1
  3914  0059  0085               	movwf	5
  3915  005A  304C               	movlw	76
  3916  005B  3193  2325  3180   	fcall	clear_ram0
  3917                           
  3918                           ; Initialize objects allocated to BANK0
  3919  005E  3193  2315  3180   	fcall	__pidataBANK0	;fetch initializer
  3920  0061  00E9               	movwf	__pdataBANK0& (0+127)
  3921  0062  3193  2316  3180   	fcall	__pidataBANK0+1	;fetch initializer
  3922  0065  00EA               	movwf	(__pdataBANK0+1)& (0+127)
  3923  0066  3193  2317  3180   	fcall	__pidataBANK0+2	;fetch initializer
  3924  0069  00EB               	movwf	(__pdataBANK0+2)& (0+127)
  3925  006A  3193  2318         	fcall	__pidataBANK0+3	;fetch initializer
  3926  006C  00EC               	movwf	(__pdataBANK0+3)& (0+127)
  3927  006D                     end_of_initialization:	
  3928                           ;End of C runtime variable initialization code
  3929                           
  3930  006D                     __end_of__initialization:	
  3931  006D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  3932  006E  0020               	movlb	0
  3933  006F  3194  2C93         	ljmp	_main	;jump to C main() function
  3934                           
  3935                           	psect	bssCOMMON
  3936  0070                     __pbssCOMMON:	
  3937  0070                     _TempButtons:	
  3938  0070                     	ds	1
  3939  0071                     _p_i2c_current:	
  3940  0071                     	ds	1
  3941  0072                     _p_i2c_trb_current:	
  3942  0072                     	ds	1
  3943  0073                     _timer0ReloadVal:	
  3944  0073                     	ds	1
  3945  0074                     _tmrCount:	
  3946  0074                     	ds	1
  3947  0075                     I2C_ISR@i2c_address:	
  3948  0075                     	ds	2
  3949                           
  3950                           	psect	bssBANK0
  3951  0020                     __pbssBANK0:	
  3952  0020                     _dateTime:	
  3953  0020                     	ds	7
  3954  0027                     I2C_ISR@i2c_10bit_address_restart:	
  3955  0027                     	ds	1
  3956  0028                     I2C_ISR@i2c_bytes_left:	
  3957  0028                     	ds	1
  3958  0029                     I2C_ISR@pi2c_buf_ptr:	
  3959  0029                     	ds	1
  3960  002A                     _count:	
  3961  002A                     	ds	1
  3962  002B                     _debCnt1:	
  3963  002B                     	ds	1
  3964  002C                     _debCnt2:	
  3965  002C                     	ds	1
  3966  002D                     _eusartRxCount:	
  3967  002D                     	ds	1
  3968  002E                     _eusartRxHead:	
  3969  002E                     	ds	1
  3970  002F                     _eusartRxTail:	
  3971  002F                     	ds	1
  3972  0030                     _eusartTxHead:	
  3973  0030                     	ds	1
  3974  0031                     _eusartTxTail:	
  3975  0031                     	ds	1
  3976  0032                     _i2c_state:	
  3977  0032                     	ds	1
  3978  0033                     _i2c_trb_count:	
  3979  0033                     	ds	1
  3980  0034                     _set:	
  3981  0034                     	ds	1
  3982  0035                     _timeHasChgd:	
  3983  0035                     	ds	1
  3984  0036                     I2C_MasterWrite@trBlock:	
  3985  0036                     	ds	4
  3986  003A                     _i2c_tr_queue:	
  3987  003A                     	ds	3
  3988  003D                     _Buttons:	
  3989  003D                     	ds	1
  3990  003E                     _I2C_status:	
  3991  003E                     	ds	1
  3992  003F                     _TC74_cmd:	
  3993  003F                     	ds	1
  3994  0040                     _readValue:	
  3995  0040                     	ds	1
  3996                           
  3997                           	psect	dataBANK0
  3998  0069                     __pdataBANK0:	
  3999  0069                     _I2C_Address:	
  4000  0069                     	ds	2
  4001  006B                     _pwm_freq:	
  4002  006B                     	ds	1
  4003  006C                     _pwm_on:	
  4004  006C                     	ds	1
  4005                           
  4006                           	psect	bssBANK1
  4007  00A0                     __pbssBANK1:	
  4008  00A0                     _eusartTxBuffer:	
  4009  00A0                     	ds	64
  4010  00E0                     _eusartRxBuffer:	
  4011  00E0                     	ds	8
  4012  00E8                     I2C_MasterRead@trBlock:	
  4013  00E8                     	ds	4
  4014                           
  4015                           	psect	clrtext
  4016  1325                     clear_ram0:	
  4017                           ;	Called with FSR0 containing the base address, and
  4018                           ;	WREG with the size to clear
  4019                           
  4020  1325  0064               	clrwdt	;clear the watchdog before getting into this loop
  4021  1326                     clrloop0:	
  4022  1326  0180               	clrf	0	;clear RAM location pointed to by FSR
  4023  1327  3101               	addfsr 0,1
  4024  1328  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4025  1329  2B26               	goto	clrloop0	;have we reached the end yet?
  4026  132A  3400               	retlw	0	;all done for this memory range, return
  4027                           
  4028                           	psect	cstackCOMMON
  4029  0077                     __pcstackCOMMON:	
  4030  0077                     ?_OSCILLATOR_Initialize:	
  4031  0077                     ?_TMR0_Initialize:	
  4032                           ; 0 bytes @ 0x0
  4033                           
  4034  0077                     ?_ADC_Initialize:	
  4035                           ; 0 bytes @ 0x0
  4036                           
  4037  0077                     ?_EPWM1_Initialize:	
  4038                           ; 0 bytes @ 0x0
  4039                           
  4040  0077                     ?_TMR4_Initialize:	
  4041                           ; 0 bytes @ 0x0
  4042                           
  4043  0077                     ?_TMR1_Initialize:	
  4044                           ; 0 bytes @ 0x0
  4045                           
  4046  0077                     ?_I2C_Initialize:	
  4047                           ; 0 bytes @ 0x0
  4048                           
  4049  0077                     ?_EUSART_Initialize:	
  4050                           ; 0 bytes @ 0x0
  4051                           
  4052  0077                     ?_CheckButtons:	
  4053                           ; 0 bytes @ 0x0
  4054                           
  4055  0077                     ??_CheckButtons:	
  4056                           ; 0 bytes @ 0x0
  4057                           
  4058  0077                     ?_TMR1_ISR:	
  4059                           ; 0 bytes @ 0x0
  4060                           
  4061  0077                     ?_I2C_ISR:	
  4062                           ; 0 bytes @ 0x0
  4063                           
  4064  0077                     ?_I2C_BusCollisionISR:	
  4065                           ; 0 bytes @ 0x0
  4066                           
  4067  0077                     ??_I2C_BusCollisionISR:	
  4068                           ; 0 bytes @ 0x0
  4069                           
  4070  0077                     ?_EUSART_Receive_ISR:	
  4071                           ; 0 bytes @ 0x0
  4072                           
  4073  0077                     ??_EUSART_Receive_ISR:	
  4074                           ; 0 bytes @ 0x0
  4075                           
  4076  0077                     ?_EUSART_Transmit_ISR:	
  4077                           ; 0 bytes @ 0x0
  4078                           
  4079  0077                     ??_EUSART_Transmit_ISR:	
  4080                           ; 0 bytes @ 0x0
  4081                           
  4082  0077                     ?_I2C_Stop:	
  4083                           ; 0 bytes @ 0x0
  4084                           
  4085  0077                     ??_I2C_Stop:	
  4086                           ; 0 bytes @ 0x0
  4087                           
  4088  0077                     ?_I2C_FunctionComplete:	
  4089                           ; 0 bytes @ 0x0
  4090                           
  4091  0077                     ??_I2C_FunctionComplete:	
  4092                           ; 0 bytes @ 0x0
  4093                           
  4094  0077                     ?_RTCisr:	
  4095                           ; 0 bytes @ 0x0
  4096                           
  4097  0077                     ?_LCD_Initialize:	
  4098                           ; 0 bytes @ 0x0
  4099                           
  4100  0077                     ?_Buttons_Initialize:	
  4101                           ; 0 bytes @ 0x0
  4102                           
  4103  0077                     ?_StateInitial:	
  4104                           ; 0 bytes @ 0x0
  4105                           
  4106  0077                     ?_StateVoltage:	
  4107                           ; 0 bytes @ 0x0
  4108                           
  4109  0077                     ?_StateBuzzer:	
  4110                           ; 0 bytes @ 0x0
  4111                           
  4112  0077                     ?_StateTemperature:	
  4113                           ; 0 bytes @ 0x0
  4114                           
  4115  0077                     ?_StateClock:	
  4116                           ; 0 bytes @ 0x0
  4117                           
  4118  0077                     ?_DisplaySplashText:	
  4119                           ; 0 bytes @ 0x0
  4120                           
  4121  0077                     ?_Wait2s:	
  4122                           ; 0 bytes @ 0x0
  4123                           
  4124  0077                     ?_LCDPutCmd:	
  4125                           ; 0 bytes @ 0x0
  4126                           
  4127  0077                     ?_DisplayVoltMenu:	
  4128                           ; 0 bytes @ 0x0
  4129                           
  4130  0077                     ?_LCDPutChar:	
  4131                           ; 0 bytes @ 0x0
  4132                           
  4133  0077                     ?_DisplayBuzMenu:	
  4134                           ; 0 bytes @ 0x0
  4135                           
  4136  0077                     ?_DisplayBuzzerData:	
  4137                           ; 0 bytes @ 0x0
  4138                           
  4139  0077                     ?_DisplayClockMenu:	
  4140                           ; 0 bytes @ 0x0
  4141                           
  4142  0077                     ?_DisplayTime:	
  4143                           ; 0 bytes @ 0x0
  4144                           
  4145  0077                     ?_StateClockSet:	
  4146                           ; 0 bytes @ 0x0
  4147                           
  4148  0077                     ?_RTCIncHrs:	
  4149                           ; 0 bytes @ 0x0
  4150                           
  4151  0077                     ?_RTCDecHrs:	
  4152                           ; 0 bytes @ 0x0
  4153                           
  4154  0077                     ?_RTCIncMinutes:	
  4155                           ; 0 bytes @ 0x0
  4156                           
  4157  0077                     ?_RTCDecMinutes:	
  4158                           ; 0 bytes @ 0x0
  4159                           
  4160  0077                     ?_DisplayTempMenu:	
  4161                           ; 0 bytes @ 0x0
  4162                           
  4163  0077                     ?_PIN_MANAGER_Initialize:	
  4164                           ; 0 bytes @ 0x0
  4165                           
  4166  0077                     ?_SYSTEM_Initialize:	
  4167                           ; 0 bytes @ 0x0
  4168                           
  4169  0077                     ?_TMR0_ISR:	
  4170                           ; 0 bytes @ 0x0
  4171                           
  4172  0077                     ?_INTERRUPT_InterruptManager:	
  4173                           ; 0 bytes @ 0x0
  4174                           
  4175  0077                     ?_TMR4_StartTimer:	
  4176                           ; 0 bytes @ 0x0
  4177                           
  4178  0077                     ?_TMR4_StopTimer:	
  4179                           ; 0 bytes @ 0x0
  4180                           
  4181  0077                     ?_TMR1_StartTimer:	
  4182                           ; 0 bytes @ 0x0
  4183                           
  4184  0077                     ?_EUSART_Write:	
  4185                           ; 0 bytes @ 0x0
  4186                           
  4187  0077                     ?_putch:	
  4188                           ; 0 bytes @ 0x0
  4189                           
  4190  0077                     ?_main:	
  4191                           ; 0 bytes @ 0x0
  4192                           
  4193  0077                     ?_RTCIncDateTime:	
  4194                           ; 0 bytes @ 0x0
  4195                           
  4196  0077                     ??_RTCIncDateTime:	
  4197                           ; 0 bytes @ 0x0
  4198                           
  4199                           
  4200                           ; 0 bytes @ 0x0
  4201  0077                     	ds	1
  4202  0078                     ??_TMR1_ISR:	
  4203  0078                     ??_RTCisr:	
  4204                           ; 0 bytes @ 0x1
  4205                           
  4206  0078                     ??_TMR0_ISR:	
  4207                           ; 0 bytes @ 0x1
  4208                           
  4209  0078                     I2C_Stop@completion_code:	
  4210                           ; 0 bytes @ 0x1
  4211                           
  4212                           
  4213                           ; 1 bytes @ 0x1
  4214  0078                     	ds	1
  4215  0079                     ??_I2C_ISR:	
  4216                           
  4217                           ; 0 bytes @ 0x2
  4218  0079                     	ds	4
  4219  007D                     ??_INTERRUPT_InterruptManager:	
  4220                           
  4221                           ; 0 bytes @ 0x6
  4222  007D                     	ds	1
  4223                           
  4224                           	psect	cstackBANK0
  4225  0041                     __pcstackBANK0:	
  4226  0041                     ??_OSCILLATOR_Initialize:	
  4227  0041                     ??_TMR0_Initialize:	
  4228                           ; 0 bytes @ 0x0
  4229                           
  4230  0041                     ??_ADC_Initialize:	
  4231                           ; 0 bytes @ 0x0
  4232                           
  4233  0041                     ??_EPWM1_Initialize:	
  4234                           ; 0 bytes @ 0x0
  4235                           
  4236  0041                     ??_TMR4_Initialize:	
  4237                           ; 0 bytes @ 0x0
  4238                           
  4239  0041                     ??_TMR1_Initialize:	
  4240                           ; 0 bytes @ 0x0
  4241                           
  4242  0041                     ??_I2C_Initialize:	
  4243                           ; 0 bytes @ 0x0
  4244                           
  4245  0041                     ??_EUSART_Initialize:	
  4246                           ; 0 bytes @ 0x0
  4247                           
  4248  0041                     ?_I2C_MasterWriteTRBBuild:	
  4249                           ; 0 bytes @ 0x0
  4250                           
  4251  0041                     ?_I2C_MasterTRBInsert:	
  4252                           ; 0 bytes @ 0x0
  4253                           
  4254  0041                     ?_I2C_MasterReadTRBBuild:	
  4255                           ; 0 bytes @ 0x0
  4256                           
  4257  0041                     ??_Buttons_Initialize:	
  4258                           ; 0 bytes @ 0x0
  4259                           
  4260  0041                     ??_Wait2s:	
  4261                           ; 0 bytes @ 0x0
  4262                           
  4263  0041                     ?_SNDSound:	
  4264                           ; 0 bytes @ 0x0
  4265                           
  4266  0041                     ??_RTCIncHrs:	
  4267                           ; 0 bytes @ 0x0
  4268                           
  4269  0041                     ??_RTCDecHrs:	
  4270                           ; 0 bytes @ 0x0
  4271                           
  4272  0041                     ??_RTCIncMinutes:	
  4273                           ; 0 bytes @ 0x0
  4274                           
  4275  0041                     ??_RTCDecMinutes:	
  4276                           ; 0 bytes @ 0x0
  4277                           
  4278  0041                     ??_PIN_MANAGER_Initialize:	
  4279                           ; 0 bytes @ 0x0
  4280                           
  4281  0041                     ??_TMR4_StartTimer:	
  4282                           ; 0 bytes @ 0x0
  4283                           
  4284  0041                     ??_TMR4_StopTimer:	
  4285                           ; 0 bytes @ 0x0
  4286                           
  4287  0041                     ??_TMR1_StartTimer:	
  4288                           ; 0 bytes @ 0x0
  4289                           
  4290  0041                     ??_EUSART_Write:	
  4291                           ; 0 bytes @ 0x0
  4292                           
  4293  0041                     ?_LCDWriteNibble:	
  4294                           ; 0 bytes @ 0x0
  4295                           
  4296  0041                     ?_ADC_GetConversion:	
  4297                           ; 0 bytes @ 0x0
  4298                           
  4299  0041                     ?___wmul:	
  4300                           ; 2 bytes @ 0x0
  4301                           
  4302  0041                     I2C_MasterTRBInsert@ptrb_list:	
  4303                           ; 2 bytes @ 0x0
  4304                           
  4305  0041                     I2C_MasterReadTRBBuild@pdata:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0041                     I2C_MasterWriteTRBBuild@pdata:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0041                     SNDSound@pwm_period:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0041                     LCDWriteNibble@rs:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0041                     ___wmul@multiplier:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320                           
  4321                           ; 2 bytes @ 0x0
  4322  0041                     	ds	1
  4323  0042                     ??_SNDSound:	
  4324  0042                     ??_SYSTEM_Initialize:	
  4325                           ; 0 bytes @ 0x1
  4326                           
  4327  0042                     ??_LCDWriteNibble:	
  4328                           ; 0 bytes @ 0x1
  4329                           
  4330  0042                     I2C_MasterTRBInsert@pflag:	
  4331                           ; 0 bytes @ 0x1
  4332                           
  4333  0042                     I2C_MasterReadTRBBuild@length:	
  4334                           ; 1 bytes @ 0x1
  4335                           
  4336  0042                     I2C_MasterWriteTRBBuild@length:	
  4337                           ; 1 bytes @ 0x1
  4338                           
  4339  0042                     EUSART_Write@txData:	
  4340                           ; 1 bytes @ 0x1
  4341                           
  4342  0042                     SNDSound@onoff:	
  4343                           ; 1 bytes @ 0x1
  4344                           
  4345                           
  4346                           ; 1 bytes @ 0x1
  4347  0042                     	ds	1
  4348  0043                     ??_I2C_MasterTRBInsert:	
  4349  0043                     ??_ADC_GetConversion:	
  4350                           ; 0 bytes @ 0x2
  4351                           
  4352  0043                     ??_putch:	
  4353                           ; 0 bytes @ 0x2
  4354                           
  4355  0043                     putch@txData:	
  4356                           ; 0 bytes @ 0x2
  4357                           
  4358  0043                     I2C_MasterReadTRBBuild@address:	
  4359                           ; 1 bytes @ 0x2
  4360                           
  4361  0043                     I2C_MasterWriteTRBBuild@address:	
  4362                           ; 2 bytes @ 0x2
  4363                           
  4364  0043                     ___wmul@multiplicand:	
  4365                           ; 2 bytes @ 0x2
  4366                           
  4367                           
  4368                           ; 2 bytes @ 0x2
  4369  0043                     	ds	1
  4370  0044                     ?_printf:	
  4371  0044                     ADC_GetConversion@channel:	
  4372                           ; 2 bytes @ 0x3
  4373                           
  4374  0044                     I2C_MasterTRBInsert@count:	
  4375                           ; 1 bytes @ 0x3
  4376                           
  4377  0044                     LCDWriteNibble@ch:	
  4378                           ; 1 bytes @ 0x3
  4379                           
  4380  0044                     printf@f:	
  4381                           ; 1 bytes @ 0x3
  4382                           
  4383                           
  4384                           ; 2 bytes @ 0x3
  4385  0044                     	ds	1
  4386  0045                     ??_I2C_MasterWriteTRBBuild:	
  4387  0045                     ??_I2C_MasterReadTRBBuild:	
  4388                           ; 0 bytes @ 0x4
  4389                           
  4390  0045                     ??_LCDPutCmd:	
  4391                           ; 0 bytes @ 0x4
  4392                           
  4393  0045                     ??_LCDPutChar:	
  4394                           ; 0 bytes @ 0x4
  4395                           
  4396  0045                     ??___wmul:	
  4397                           ; 0 bytes @ 0x4
  4398                           
  4399  0045                     ___wmul@product:	
  4400                           ; 0 bytes @ 0x4
  4401                           
  4402                           
  4403                           ; 2 bytes @ 0x4
  4404  0045                     	ds	1
  4405  0046                     ??_printf:	
  4406                           
  4407                           ; 0 bytes @ 0x5
  4408  0046                     	ds	1
  4409  0047                     ?___awdiv:	
  4410  0047                     ?___lwdiv:	
  4411                           ; 2 bytes @ 0x6
  4412                           
  4413  0047                     I2C_MasterReadTRBBuild@ptrb:	
  4414                           ; 2 bytes @ 0x6
  4415                           
  4416  0047                     I2C_MasterWriteTRBBuild@ptrb:	
  4417                           ; 1 bytes @ 0x6
  4418                           
  4419  0047                     LCDPutChar@ch:	
  4420                           ; 1 bytes @ 0x6
  4421                           
  4422  0047                     LCDPutCmd@ch:	
  4423                           ; 1 bytes @ 0x6
  4424                           
  4425  0047                     ___awdiv@divisor:	
  4426                           ; 1 bytes @ 0x6
  4427                           
  4428  0047                     ___lwdiv@divisor:	
  4429                           ; 2 bytes @ 0x6
  4430                           
  4431                           
  4432                           ; 2 bytes @ 0x6
  4433  0047                     	ds	1
  4434  0048                     ??_LCD_Initialize:	
  4435  0048                     ?_LCDPutStr:	
  4436                           ; 0 bytes @ 0x7
  4437                           
  4438  0048                     ?_LCDGoto:	
  4439                           ; 0 bytes @ 0x7
  4440                           
  4441  0048                     ?_I2C_MasterWrite:	
  4442                           ; 0 bytes @ 0x7
  4443                           
  4444  0048                     ?_I2C_MasterRead:	
  4445                           ; 0 bytes @ 0x7
  4446                           
  4447  0048                     I2C_MasterWrite@length:	
  4448                           ; 0 bytes @ 0x7
  4449                           
  4450  0048                     I2C_MasterRead@length:	
  4451                           ; 1 bytes @ 0x7
  4452                           
  4453  0048                     LCDGoto@ln:	
  4454                           ; 1 bytes @ 0x7
  4455                           
  4456  0048                     LCDPutStr@str:	
  4457                           ; 1 bytes @ 0x7
  4458                           
  4459                           
  4460                           ; 2 bytes @ 0x7
  4461  0048                     	ds	1
  4462  0049                     ??_LCDGoto:	
  4463  0049                     printf@ap:	
  4464                           ; 0 bytes @ 0x8
  4465                           
  4466  0049                     I2C_MasterWrite@address:	
  4467                           ; 1 bytes @ 0x8
  4468                           
  4469  0049                     I2C_MasterRead@address:	
  4470                           ; 2 bytes @ 0x8
  4471                           
  4472  0049                     ___awdiv@dividend:	
  4473                           ; 2 bytes @ 0x8
  4474                           
  4475  0049                     ___lwdiv@dividend:	
  4476                           ; 2 bytes @ 0x8
  4477                           
  4478                           
  4479                           ; 2 bytes @ 0x8
  4480  0049                     	ds	1
  4481  004A                     ??_LCDPutStr:	
  4482  004A                     printf@c:	
  4483                           ; 0 bytes @ 0x9
  4484                           
  4485                           
  4486                           ; 1 bytes @ 0x9
  4487  004A                     	ds	1
  4488  004B                     ??___awdiv:	
  4489  004B                     ??___lwdiv:	
  4490                           ; 0 bytes @ 0xA
  4491                           
  4492  004B                     I2C_MasterWrite@pflag:	
  4493                           ; 0 bytes @ 0xA
  4494                           
  4495  004B                     I2C_MasterRead@pflag:	
  4496                           ; 1 bytes @ 0xA
  4497                           
  4498  004B                     _LCDGoto$1533:	
  4499                           ; 1 bytes @ 0xA
  4500                           
  4501                           
  4502                           ; 2 bytes @ 0xA
  4503  004B                     	ds	1
  4504  004C                     ??_I2C_MasterWrite:	
  4505  004C                     ??_I2C_MasterRead:	
  4506                           ; 0 bytes @ 0xB
  4507                           
  4508  004C                     LCDPutStr@i:	
  4509                           ; 0 bytes @ 0xB
  4510                           
  4511  004C                     ___awdiv@counter:	
  4512                           ; 1 bytes @ 0xB
  4513                           
  4514  004C                     ___lwdiv@quotient:	
  4515                           ; 1 bytes @ 0xB
  4516                           
  4517                           
  4518                           ; 2 bytes @ 0xB
  4519  004C                     	ds	1
  4520  004D                     LCDGoto@pos:	
  4521  004D                     ___awdiv@sign:	
  4522                           ; 1 bytes @ 0xC
  4523                           
  4524                           
  4525                           ; 1 bytes @ 0xC
  4526  004D                     	ds	1
  4527  004E                     ??_StateInitial:	
  4528  004E                     ??_DisplaySplashText:	
  4529                           ; 0 bytes @ 0xD
  4530                           
  4531  004E                     ??_DisplayVoltMenu:	
  4532                           ; 0 bytes @ 0xD
  4533                           
  4534  004E                     ??_DisplayBuzMenu:	
  4535                           ; 0 bytes @ 0xD
  4536                           
  4537  004E                     ??_DisplayClockMenu:	
  4538                           ; 0 bytes @ 0xD
  4539                           
  4540  004E                     ??_DisplayTempMenu:	
  4541                           ; 0 bytes @ 0xD
  4542                           
  4543  004E                     I2C_MasterWrite@pdata:	
  4544                           ; 0 bytes @ 0xD
  4545                           
  4546  004E                     I2C_MasterRead@pdata:	
  4547                           ; 1 bytes @ 0xD
  4548                           
  4549  004E                     ___lwdiv@counter:	
  4550                           ; 1 bytes @ 0xD
  4551                           
  4552  004E                     ___awdiv@quotient:	
  4553                           ; 1 bytes @ 0xD
  4554                           
  4555                           
  4556                           ; 2 bytes @ 0xD
  4557  004E                     	ds	1
  4558  004F                     ?___lwmod:	
  4559  004F                     ___lwmod@divisor:	
  4560                           ; 2 bytes @ 0xE
  4561                           
  4562                           
  4563                           ; 2 bytes @ 0xE
  4564  004F                     	ds	1
  4565  0050                     ?___awmod:	
  4566  0050                     ___awmod@divisor:	
  4567                           ; 2 bytes @ 0xF
  4568                           
  4569                           
  4570                           ; 2 bytes @ 0xF
  4571  0050                     	ds	1
  4572  0051                     ___lwmod@dividend:	
  4573                           
  4574                           ; 2 bytes @ 0x10
  4575  0051                     	ds	1
  4576  0052                     ___awmod@dividend:	
  4577                           
  4578                           ; 2 bytes @ 0x11
  4579  0052                     	ds	1
  4580  0053                     ??___lwmod:	
  4581                           
  4582                           ; 0 bytes @ 0x12
  4583  0053                     	ds	1
  4584  0054                     ??___awmod:	
  4585  0054                     ___lwmod@counter:	
  4586                           ; 0 bytes @ 0x13
  4587                           
  4588                           
  4589                           ; 1 bytes @ 0x13
  4590  0054                     	ds	1
  4591  0055                     ?_DisplayVoltage:	
  4592  0055                     ___awmod@counter:	
  4593                           ; 0 bytes @ 0x14
  4594                           
  4595  0055                     DisplayVoltage@volt:	
  4596                           ; 1 bytes @ 0x14
  4597                           
  4598                           
  4599                           ; 2 bytes @ 0x14
  4600  0055                     	ds	1
  4601  0056                     ___awmod@sign:	
  4602                           
  4603                           ; 1 bytes @ 0x15
  4604  0056                     	ds	1
  4605  0057                     ??_DisplayVoltage:	
  4606  0057                     ??_DisplayBuzzerData:	
  4607                           ; 0 bytes @ 0x16
  4608                           
  4609  0057                     ??_DisplayTime:	
  4610                           ; 0 bytes @ 0x16
  4611                           
  4612  0057                     ??_StateClockSet:	
  4613                           ; 0 bytes @ 0x16
  4614                           
  4615  0057                     ?_DisplayTemperature:	
  4616                           ; 0 bytes @ 0x16
  4617                           
  4618  0057                     DisplayTemperature@type:	
  4619                           ; 0 bytes @ 0x16
  4620                           
  4621  0057                     _DisplayVoltage$2034:	
  4622                           ; 1 bytes @ 0x16
  4623                           
  4624                           
  4625                           ; 2 bytes @ 0x16
  4626  0057                     	ds	1
  4627  0058                     ??_DisplayTemperature:	
  4628                           
  4629                           ; 0 bytes @ 0x17
  4630  0058                     	ds	1
  4631  0059                     ??_StateClock:	
  4632  0059                     DisplayVoltage@ADC_Conversion:	
  4633                           ; 0 bytes @ 0x18
  4634                           
  4635                           
  4636                           ; 2 bytes @ 0x18
  4637  0059                     	ds	2
  4638  005B                     ??_StateVoltage:	
  4639  005B                     DisplayTemperature@thermal:	
  4640                           ; 0 bytes @ 0x1A
  4641                           
  4642  005B                     StateVoltage@Volt:	
  4643                           ; 1 bytes @ 0x1A
  4644                           
  4645  005B                     _DisplayBuzzerData$2035:	
  4646                           ; 2 bytes @ 0x1A
  4647                           
  4648                           
  4649                           ; 2 bytes @ 0x1A
  4650  005B                     	ds	1
  4651  005C                     DisplayTemperature@negValue:	
  4652                           
  4653                           ; 1 bytes @ 0x1B
  4654  005C                     	ds	1
  4655  005D                     ??_StateTemperature:	
  4656  005D                     DisplayBuzzerData@pwm_freq:	
  4657                           ; 0 bytes @ 0x1C
  4658                           
  4659                           
  4660                           ; 1 bytes @ 0x1C
  4661  005D                     	ds	1
  4662  005E                     ??_StateBuzzer:	
  4663  005E                     StateTemperature@tempValue:	
  4664                           ; 0 bytes @ 0x1D
  4665                           
  4666                           
  4667                           ; 1 bytes @ 0x1D
  4668  005E                     	ds	1
  4669  005F                     StateBuzzer@sound:	
  4670  005F                     StateTemperature@degreeType:	
  4671                           ; 1 bytes @ 0x1E
  4672                           
  4673                           
  4674                           ; 1 bytes @ 0x1E
  4675  005F                     	ds	1
  4676  0060                     StateTemperature@sChange:	
  4677                           
  4678                           ; 1 bytes @ 0x1F
  4679  0060                     	ds	1
  4680  0061                     ??_main:	
  4681                           
  4682                           	psect	maintext
  4683  1493                     __pmaintext:	
  4684                           ; 0 bytes @ 0x20
  4685 ;;
  4686 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4687 ;;
  4688 ;; *************** function _main *****************
  4689 ;; Defined at:
  4690 ;;		line 54 in file "main.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;		None
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;		None
  4695 ;; Return value:  Size  Location     Type
  4696 ;;		None               void
  4697 ;; Registers used:
  4698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4699 ;; Tracked objects:
  4700 ;;		On entry : 17F/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4704 ;;      Params:         0       0       0       0       0       0       0       0
  4705 ;;      Locals:         0       0       0       0       0       0       0       0
  4706 ;;      Temps:          0       0       0       0       0       0       0       0
  4707 ;;      Totals:         0       0       0       0       0       0       0       0
  4708 ;;Total ram usage:        0 bytes
  4709 ;; Hardware stack levels required when called:    9
  4710 ;; This function calls:
  4711 ;;		_Buttons_Initialize
  4712 ;;		_LCD_Initialize
  4713 ;;		_SYSTEM_Initialize
  4714 ;;		_StateBuzzer
  4715 ;;		_StateClock
  4716 ;;		_StateInitial
  4717 ;;		_StateTemperature
  4718 ;;		_StateVoltage
  4719 ;; This function is called by:
  4720 ;;		Startup code after reset
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           
  4725                           ;psect for function _main
  4726  1493                     _main:	
  4727                           
  4728                           ;main.c: 57: SYSTEM_Initialize();
  4729                           
  4730                           ;incstack = 0
  4731                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4732  1493  3194  245D  3194   	fcall	_SYSTEM_Initialize
  4733                           
  4734                           ;main.c: 60: LCD_Initialize();
  4735  1496  3195  25F7  3194   	fcall	_LCD_Initialize
  4736                           
  4737                           ;main.c: 63: Buttons_Initialize();
  4738  1499  3189  214E  3194   	fcall	_Buttons_Initialize
  4739                           
  4740                           ;main.c: 69: (INTCONbits.GIE = 1);
  4741  149C  178B               	bsf	11,7	;volatile
  4742                           
  4743                           ;main.c: 72: (INTCONbits.PEIE = 1);
  4744  149D  170B               	bsf	11,6	;volatile
  4745                           
  4746                           ;main.c: 81: StateInitial();
  4747  149E  3193  2357  3194   	fcall	_StateInitial
  4748  14A1                     l5223:	
  4749                           ;main.c: 83: while (1)
  4750                           
  4751                           
  4752                           ;main.c: 84: {
  4753                           ;main.c: 86: StateVoltage();
  4754  14A1  3188  2011  3194   	fcall	_StateVoltage
  4755                           
  4756                           ;main.c: 89: StateBuzzer();
  4757  14A4  3189  2104  3194   	fcall	_StateBuzzer
  4758                           
  4759                           ;main.c: 92: StateTemperature();
  4760  14A7  3187  2783  3194   	fcall	_StateTemperature
  4761                           
  4762                           ;main.c: 95: StateClock();
  4763  14AA  3197  27A3  3194   	fcall	_StateClock
  4764  14AD  2CA1               	goto	l5223
  4765  14AE                     __end_of_main:	
  4766                           
  4767                           	psect	text1
  4768  0811                     __ptext1:	
  4769 ;; *************** function _StateVoltage *****************
  4770 ;; Defined at:
  4771 ;;		line 53 in file "StateVoltmeter.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;		None
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  Volt            2   26[BANK0 ] unsigned int 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;		None               void
  4778 ;; Registers used:
  4779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4785 ;;      Params:         0       0       0       0       0       0       0       0
  4786 ;;      Locals:         0       2       0       0       0       0       0       0
  4787 ;;      Temps:          0       0       0       0       0       0       0       0
  4788 ;;      Totals:         0       2       0       0       0       0       0       0
  4789 ;;Total ram usage:        2 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    8
  4792 ;; This function calls:
  4793 ;;		_ADC_GetConversion
  4794 ;;		_DisplayVoltMenu
  4795 ;;		_DisplayVoltage
  4796 ;;		_LCDPutCmd
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           
  4803                           ;psect for function _StateVoltage
  4804  0811                     _StateVoltage:	
  4805                           
  4806                           ;StateVoltmeter.c: 56: DisplayVoltMenu();
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _StateVoltage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4810  0811  3195  255C  3188   	fcall	_DisplayVoltMenu
  4811  0814  281A               	goto	l5063
  4812  0815                     l5065:	
  4813                           
  4814                           ;StateVoltmeter.c: 63: {
  4815                           ;StateVoltmeter.c: 65: Buttons.But1Pressed = 0;
  4816  0815  103D               	bcf	_Buttons,0
  4817                           
  4818                           ;StateVoltmeter.c: 68: LCDPutCmd(0x01);
  4819  0816  3001               	movlw	1
  4820  0817  3196  26FB         	fcall	_LCDPutCmd
  4821                           
  4822                           ;StateVoltmeter.c: 71: return;
  4823  0819  0008               	return
  4824  081A                     l5063:	
  4825                           ;StateVoltmeter.c: 59: while (1)
  4826                           
  4827                           ;StateVoltmeter.c: 72: }
  4828                           
  4829                           
  4830                           ;StateVoltmeter.c: 60: {
  4831                           ;StateVoltmeter.c: 62: if((Buttons.But1Pressed))
  4832  081A  0020               	movlb	0	; select bank0
  4833  081B  183D               	btfsc	_Buttons,0
  4834  081C  2815               	goto	l5065
  4835                           
  4836                           ;StateVoltmeter.c: 75: else if((Buttons.But2Pressed))
  4837  081D  1CBD               	btfss	_Buttons,1
  4838  081E  281A               	goto	l5063
  4839                           
  4840                           ;StateVoltmeter.c: 76: {
  4841                           ;StateVoltmeter.c: 78: Buttons.But2Pressed = 0;
  4842  081F  10BD               	bcf	_Buttons,1
  4843  0820                     l5075:	
  4844                           ;StateVoltmeter.c: 81: while (1)
  4845                           
  4846                           
  4847                           ;StateVoltmeter.c: 82: {
  4848                           ;StateVoltmeter.c: 84: uint16_t Volt = ADC_GetConversion(0);
  4849  0820  3000               	movlw	0
  4850  0821  3195  25D7  3188   	fcall	_ADC_GetConversion
  4851  0824  0020               	movlb	0	; select bank0
  4852  0825  0842               	movf	?_ADC_GetConversion+1,w
  4853  0826  01DC               	clrf	StateVoltage@Volt+1
  4854  0827  07DC               	addwf	StateVoltage@Volt+1,f
  4855  0828  0841               	movf	?_ADC_GetConversion,w
  4856  0829  01DB               	clrf	StateVoltage@Volt
  4857  082A  07DB               	addwf	StateVoltage@Volt,f
  4858                           
  4859                           ;StateVoltmeter.c: 87: DisplayVoltage(Volt);
  4860  082B  085C               	movf	StateVoltage@Volt+1,w
  4861  082C  01D6               	clrf	DisplayVoltage@volt+1
  4862  082D  07D6               	addwf	DisplayVoltage@volt+1,f
  4863  082E  085B               	movf	StateVoltage@Volt,w
  4864  082F  01D5               	clrf	DisplayVoltage@volt
  4865  0830  07D5               	addwf	DisplayVoltage@volt,f
  4866  0831  318E  260F  3188   	fcall	_DisplayVoltage
  4867                           
  4868                           ;StateVoltmeter.c: 90: if((Buttons.But2Pressed))
  4869  0834  0020               	movlb	0	; select bank0
  4870  0835  1CBD               	btfss	_Buttons,1
  4871  0836  2820               	goto	l5075
  4872                           
  4873                           ;StateVoltmeter.c: 91: {
  4874                           ;StateVoltmeter.c: 93: Buttons.But2Pressed = 0;
  4875  0837  10BD               	bcf	_Buttons,1
  4876                           
  4877                           ;StateVoltmeter.c: 96: LCDPutCmd(0x01);
  4878  0838  3001               	movlw	1
  4879  0839  3196  26FB  3188   	fcall	_LCDPutCmd
  4880                           
  4881                           ;StateVoltmeter.c: 100: }
  4882                           ;StateVoltmeter.c: 102: }
  4883                           ;StateVoltmeter.c: 104: LCDPutCmd(0x01);
  4884                           
  4885                           ;StateVoltmeter.c: 99: break;
  4886  083C  3001               	movlw	1
  4887  083D  3196  26FB         	fcall	_LCDPutCmd
  4888                           
  4889                           ;StateVoltmeter.c: 107: break;
  4890  083F  0008               	return
  4891  0840                     __end_of_StateVoltage:	
  4892                           
  4893                           	psect	text2
  4894  0E0F                     __ptext2:	
  4895 ;; *************** function _DisplayVoltage *****************
  4896 ;; Defined at:
  4897 ;;		line 122 in file "StateVoltmeter.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  volt            2   20[BANK0 ] unsigned int 
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;  ADC_Conversi    2   24[BANK0 ] unsigned int 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;		None               void
  4904 ;; Registers used:
  4905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4911 ;;      Params:         0       2       0       0       0       0       0       0
  4912 ;;      Locals:         0       4       0       0       0       0       0       0
  4913 ;;      Temps:          0       0       0       0       0       0       0       0
  4914 ;;      Totals:         0       6       0       0       0       0       0       0
  4915 ;;Total ram usage:        6 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    7
  4918 ;; This function calls:
  4919 ;;		_EUSART_Write
  4920 ;;		_LCDGoto
  4921 ;;		_LCDPutChar
  4922 ;;		_LCDPutStr
  4923 ;;		___lwdiv
  4924 ;;		___lwmod
  4925 ;;		___wmul
  4926 ;;		_printf
  4927 ;; This function is called by:
  4928 ;;		_StateVoltage
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _DisplayVoltage
  4934  0E0F                     _DisplayVoltage:	
  4935                           
  4936                           ;StateVoltmeter.c: 124: uint16_t ADC_Conversion;
  4937                           ;StateVoltmeter.c: 126: ADC_Conversion = volt;
  4938                           
  4939                           ;incstack = 0
  4940                           ; Regs used in _DisplayVoltage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4941  0E0F  0020               	movlb	0	; select bank0
  4942  0E10  0856               	movf	DisplayVoltage@volt+1,w
  4943  0E11  01DA               	clrf	DisplayVoltage@ADC_Conversion+1
  4944  0E12  07DA               	addwf	DisplayVoltage@ADC_Conversion+1,f
  4945  0E13  0855               	movf	DisplayVoltage@volt,w
  4946  0E14  01D9               	clrf	DisplayVoltage@ADC_Conversion
  4947  0E15  07D9               	addwf	DisplayVoltage@ADC_Conversion,f
  4948                           
  4949                           ;StateVoltmeter.c: 129: volt = ((volt*49)/10)/10;
  4950  0E16  300A               	movlw	10
  4951  0E17  00C7               	movwf	___lwdiv@divisor
  4952  0E18  3000               	movlw	0
  4953  0E19  00C8               	movwf	___lwdiv@divisor+1
  4954  0E1A  0856               	movf	DisplayVoltage@volt+1,w
  4955  0E1B  01C2               	clrf	___wmul@multiplier+1
  4956  0E1C  07C2               	addwf	___wmul@multiplier+1,f
  4957  0E1D  0855               	movf	DisplayVoltage@volt,w
  4958  0E1E  01C1               	clrf	___wmul@multiplier
  4959  0E1F  07C1               	addwf	___wmul@multiplier,f
  4960  0E20  3031               	movlw	49
  4961  0E21  00C3               	movwf	___wmul@multiplicand
  4962  0E22  3000               	movlw	0
  4963  0E23  00C4               	movwf	___wmul@multiplicand+1
  4964  0E24  3195  2579  318E   	fcall	___wmul
  4965  0E27  0020               	movlb	0	; select bank0
  4966  0E28  0842               	movf	?___wmul+1,w
  4967  0E29  01CA               	clrf	___lwdiv@dividend+1
  4968  0E2A  07CA               	addwf	___lwdiv@dividend+1,f
  4969  0E2B  0841               	movf	?___wmul,w
  4970  0E2C  01C9               	clrf	___lwdiv@dividend
  4971  0E2D  07C9               	addwf	___lwdiv@dividend,f
  4972  0E2E  3188  2040  318E   	fcall	___lwdiv
  4973  0E31  0020               	movlb	0	; select bank0
  4974  0E32  0848               	movf	?___lwdiv+1,w
  4975  0E33  01D8               	clrf	_DisplayVoltage$2034+1
  4976  0E34  07D8               	addwf	_DisplayVoltage$2034+1,f
  4977  0E35  0847               	movf	?___lwdiv,w
  4978  0E36  01D7               	clrf	_DisplayVoltage$2034
  4979  0E37  07D7               	addwf	_DisplayVoltage$2034,f
  4980                           
  4981                           ;StateVoltmeter.c: 129: volt = ((volt*49)/10)/10;
  4982  0E38  300A               	movlw	10
  4983  0E39  00C7               	movwf	___lwdiv@divisor
  4984  0E3A  3000               	movlw	0
  4985  0E3B  00C8               	movwf	___lwdiv@divisor+1
  4986  0E3C  0858               	movf	_DisplayVoltage$2034+1,w
  4987  0E3D  01CA               	clrf	___lwdiv@dividend+1
  4988  0E3E  07CA               	addwf	___lwdiv@dividend+1,f
  4989  0E3F  0857               	movf	_DisplayVoltage$2034,w
  4990  0E40  01C9               	clrf	___lwdiv@dividend
  4991  0E41  07C9               	addwf	___lwdiv@dividend,f
  4992  0E42  3188  2040  318E   	fcall	___lwdiv
  4993  0E45  0020               	movlb	0	; select bank0
  4994  0E46  0848               	movf	?___lwdiv+1,w
  4995  0E47  01D6               	clrf	DisplayVoltage@volt+1
  4996  0E48  07D6               	addwf	DisplayVoltage@volt+1,f
  4997  0E49  0847               	movf	?___lwdiv,w
  4998  0E4A  01D5               	clrf	DisplayVoltage@volt
  4999  0E4B  07D5               	addwf	DisplayVoltage@volt,f
  5000                           
  5001                           ;StateVoltmeter.c: 132: do { LCDGoto(0,0); LCDPutStr("Volts = "); LCDPutChar(volt/100+'0
      +                          '); LCDPutChar('.'); LCDPutChar((volt / 10)%10+'0'); LCDPutChar((volt /1)% 10+'0'); LCDP
      +                          utStr(" V   "); LCDGoto(0,1); LCDPutChar('['); LCDPutChar((ADC_Conversion/1000)+'0'); LC
      +                          DPutChar((
  5002  0E4C  01C8               	clrf	LCDGoto@ln
  5003  0E4D  3000               	movlw	0
  5004  0E4E  3196  261A  318E   	fcall	_LCDGoto
  5005  0E51  30FD               	movlw	low ((STR_8+2)| (0+32768))
  5006  0E52  0020               	movlb	0	; select bank0
  5007  0E53  00C8               	movwf	LCDPutStr@str
  5008  0E54  3090               	movlw	high ((STR_8+2)| (0+32768))
  5009  0E55  00C9               	movwf	LCDPutStr@str+1
  5010  0E56  3196  2684  318E   	fcall	_LCDPutStr
  5011  0E59  3064               	movlw	100
  5012  0E5A  0020               	movlb	0	; select bank0
  5013  0E5B  00C7               	movwf	___lwdiv@divisor
  5014  0E5C  3000               	movlw	0
  5015  0E5D  00C8               	movwf	___lwdiv@divisor+1
  5016  0E5E  0856               	movf	DisplayVoltage@volt+1,w
  5017  0E5F  01CA               	clrf	___lwdiv@dividend+1
  5018  0E60  07CA               	addwf	___lwdiv@dividend+1,f
  5019  0E61  0855               	movf	DisplayVoltage@volt,w
  5020  0E62  01C9               	clrf	___lwdiv@dividend
  5021  0E63  07C9               	addwf	___lwdiv@dividend,f
  5022  0E64  3188  2040  318E   	fcall	___lwdiv
  5023  0E67  0020               	movlb	0	; select bank0
  5024  0E68  0847               	movf	?___lwdiv,w
  5025  0E69  3E30               	addlw	48
  5026  0E6A  3196  263D  318E   	fcall	_LCDPutChar
  5027  0E6D  302E               	movlw	46
  5028  0E6E  3196  263D  318E   	fcall	_LCDPutChar
  5029  0E71  300A               	movlw	10
  5030  0E72  0020               	movlb	0	; select bank0
  5031  0E73  00CF               	movwf	___lwmod@divisor
  5032  0E74  3000               	movlw	0
  5033  0E75  00D0               	movwf	___lwmod@divisor+1
  5034  0E76  300A               	movlw	10
  5035  0E77  00C7               	movwf	___lwdiv@divisor
  5036  0E78  3000               	movlw	0
  5037  0E79  00C8               	movwf	___lwdiv@divisor+1
  5038  0E7A  0856               	movf	DisplayVoltage@volt+1,w
  5039  0E7B  01CA               	clrf	___lwdiv@dividend+1
  5040  0E7C  07CA               	addwf	___lwdiv@dividend+1,f
  5041  0E7D  0855               	movf	DisplayVoltage@volt,w
  5042  0E7E  01C9               	clrf	___lwdiv@dividend
  5043  0E7F  07C9               	addwf	___lwdiv@dividend,f
  5044  0E80  3188  2040  318E   	fcall	___lwdiv
  5045  0E83  0020               	movlb	0	; select bank0
  5046  0E84  0848               	movf	?___lwdiv+1,w
  5047  0E85  01D2               	clrf	___lwmod@dividend+1
  5048  0E86  07D2               	addwf	___lwmod@dividend+1,f
  5049  0E87  0847               	movf	?___lwdiv,w
  5050  0E88  01D1               	clrf	___lwmod@dividend
  5051  0E89  07D1               	addwf	___lwmod@dividend,f
  5052  0E8A  3197  27D1  318E   	fcall	___lwmod
  5053  0E8D  0020               	movlb	0	; select bank0
  5054  0E8E  084F               	movf	?___lwmod,w
  5055  0E8F  3E30               	addlw	48
  5056  0E90  3196  263D  318E   	fcall	_LCDPutChar
  5057  0E93  300A               	movlw	10
  5058  0E94  0020               	movlb	0	; select bank0
  5059  0E95  00CF               	movwf	___lwmod@divisor
  5060  0E96  3000               	movlw	0
  5061  0E97  00D0               	movwf	___lwmod@divisor+1
  5062  0E98  0856               	movf	DisplayVoltage@volt+1,w
  5063  0E99  01D2               	clrf	___lwmod@dividend+1
  5064  0E9A  07D2               	addwf	___lwmod@dividend+1,f
  5065  0E9B  0855               	movf	DisplayVoltage@volt,w
  5066  0E9C  01D1               	clrf	___lwmod@dividend
  5067  0E9D  07D1               	addwf	___lwmod@dividend,f
  5068  0E9E  3197  27D1  318E   	fcall	___lwmod
  5069  0EA1  0020               	movlb	0	; select bank0
  5070  0EA2  084F               	movf	?___lwmod,w
  5071  0EA3  3E30               	addlw	48
  5072  0EA4  3196  263D  318E   	fcall	_LCDPutChar
  5073  0EA7  3048               	movlw	low (STR_6| (0+32768))
  5074  0EA8  0020               	movlb	0	; select bank0
  5075  0EA9  00C8               	movwf	LCDPutStr@str
  5076  0EAA  3091               	movlw	high (STR_6| (0+32768))
  5077  0EAB  00C9               	movwf	LCDPutStr@str+1
  5078  0EAC  3196  2684  318E   	fcall	_LCDPutStr
  5079  0EAF  0020               	movlb	0	; select bank0
  5080  0EB0  01C8               	clrf	LCDGoto@ln
  5081  0EB1  0AC8               	incf	LCDGoto@ln,f
  5082  0EB2  3000               	movlw	0
  5083  0EB3  3196  261A  318E   	fcall	_LCDGoto
  5084  0EB6  305B               	movlw	91
  5085  0EB7  3196  263D  318E   	fcall	_LCDPutChar
  5086  0EBA  30E8               	movlw	232
  5087  0EBB  0020               	movlb	0	; select bank0
  5088  0EBC  00C7               	movwf	___lwdiv@divisor
  5089  0EBD  3003               	movlw	3
  5090  0EBE  00C8               	movwf	___lwdiv@divisor+1
  5091  0EBF  085A               	movf	DisplayVoltage@ADC_Conversion+1,w
  5092  0EC0  01CA               	clrf	___lwdiv@dividend+1
  5093  0EC1  07CA               	addwf	___lwdiv@dividend+1,f
  5094  0EC2  0859               	movf	DisplayVoltage@ADC_Conversion,w
  5095  0EC3  01C9               	clrf	___lwdiv@dividend
  5096  0EC4  07C9               	addwf	___lwdiv@dividend,f
  5097  0EC5  3188  2040  318E   	fcall	___lwdiv
  5098  0EC8  0020               	movlb	0	; select bank0
  5099  0EC9  0847               	movf	?___lwdiv,w
  5100  0ECA  3E30               	addlw	48
  5101  0ECB  3196  263D  318E   	fcall	_LCDPutChar
  5102  0ECE  300A               	movlw	10
  5103  0ECF  0020               	movlb	0	; select bank0
  5104  0ED0  00CF               	movwf	___lwmod@divisor
  5105  0ED1  3000               	movlw	0
  5106  0ED2  00D0               	movwf	___lwmod@divisor+1
  5107  0ED3  3064               	movlw	100
  5108  0ED4  00C7               	movwf	___lwdiv@divisor
  5109  0ED5  3000               	movlw	0
  5110  0ED6  00C8               	movwf	___lwdiv@divisor+1
  5111  0ED7  085A               	movf	DisplayVoltage@ADC_Conversion+1,w
  5112  0ED8  01CA               	clrf	___lwdiv@dividend+1
  5113  0ED9  07CA               	addwf	___lwdiv@dividend+1,f
  5114  0EDA  0859               	movf	DisplayVoltage@ADC_Conversion,w
  5115  0EDB  01C9               	clrf	___lwdiv@dividend
  5116  0EDC  07C9               	addwf	___lwdiv@dividend,f
  5117  0EDD  3188  2040  318E   	fcall	___lwdiv
  5118  0EE0  0020               	movlb	0	; select bank0
  5119  0EE1  0848               	movf	?___lwdiv+1,w
  5120  0EE2  01D2               	clrf	___lwmod@dividend+1
  5121  0EE3  07D2               	addwf	___lwmod@dividend+1,f
  5122  0EE4  0847               	movf	?___lwdiv,w
  5123  0EE5  01D1               	clrf	___lwmod@dividend
  5124  0EE6  07D1               	addwf	___lwmod@dividend,f
  5125  0EE7  3197  27D1  318E   	fcall	___lwmod
  5126  0EEA  0020               	movlb	0	; select bank0
  5127  0EEB  084F               	movf	?___lwmod,w
  5128  0EEC  3E30               	addlw	48
  5129  0EED  3196  263D  318E   	fcall	_LCDPutChar
  5130  0EF0  300A               	movlw	10
  5131  0EF1  0020               	movlb	0	; select bank0
  5132  0EF2  00CF               	movwf	___lwmod@divisor
  5133  0EF3  3000               	movlw	0
  5134  0EF4  00D0               	movwf	___lwmod@divisor+1
  5135  0EF5  300A               	movlw	10
  5136  0EF6  00C7               	movwf	___lwdiv@divisor
  5137  0EF7  3000               	movlw	0
  5138  0EF8  00C8               	movwf	___lwdiv@divisor+1
  5139  0EF9  085A               	movf	DisplayVoltage@ADC_Conversion+1,w
  5140  0EFA  01CA               	clrf	___lwdiv@dividend+1
  5141  0EFB  07CA               	addwf	___lwdiv@dividend+1,f
  5142  0EFC  0859               	movf	DisplayVoltage@ADC_Conversion,w
  5143  0EFD  01C9               	clrf	___lwdiv@dividend
  5144  0EFE  07C9               	addwf	___lwdiv@dividend,f
  5145  0EFF  3188  2040  318E   	fcall	___lwdiv
  5146  0F02  0020               	movlb	0	; select bank0
  5147  0F03  0848               	movf	?___lwdiv+1,w
  5148  0F04  01D2               	clrf	___lwmod@dividend+1
  5149  0F05  07D2               	addwf	___lwmod@dividend+1,f
  5150  0F06  0847               	movf	?___lwdiv,w
  5151  0F07  01D1               	clrf	___lwmod@dividend
  5152  0F08  07D1               	addwf	___lwmod@dividend,f
  5153  0F09  3197  27D1  318E   	fcall	___lwmod
  5154  0F0C  0020               	movlb	0	; select bank0
  5155  0F0D  084F               	movf	?___lwmod,w
  5156  0F0E  3E30               	addlw	48
  5157  0F0F  3196  263D  318E   	fcall	_LCDPutChar
  5158  0F12  300A               	movlw	10
  5159  0F13  0020               	movlb	0	; select bank0
  5160  0F14  00CF               	movwf	___lwmod@divisor
  5161  0F15  3000               	movlw	0
  5162  0F16  00D0               	movwf	___lwmod@divisor+1
  5163  0F17  085A               	movf	DisplayVoltage@ADC_Conversion+1,w
  5164  0F18  01D2               	clrf	___lwmod@dividend+1
  5165  0F19  07D2               	addwf	___lwmod@dividend+1,f
  5166  0F1A  0859               	movf	DisplayVoltage@ADC_Conversion,w
  5167  0F1B  01D1               	clrf	___lwmod@dividend
  5168  0F1C  07D1               	addwf	___lwmod@dividend,f
  5169  0F1D  3197  27D1  318E   	fcall	___lwmod
  5170  0F20  0020               	movlb	0	; select bank0
  5171  0F21  084F               	movf	?___lwmod,w
  5172  0F22  3E30               	addlw	48
  5173  0F23  3196  263D  318E   	fcall	_LCDPutChar
  5174  0F26  30E4               	movlw	low (STR_7| (0+32768))
  5175  0F27  0020               	movlb	0	; select bank0
  5176  0F28  00C8               	movwf	LCDPutStr@str
  5177  0F29  3090               	movlw	high (STR_7| (0+32768))
  5178  0F2A  00C9               	movwf	LCDPutStr@str+1
  5179  0F2B  3196  2684  318E   	fcall	_LCDPutStr
  5180                           
  5181                           ;StateVoltmeter.c: 135: do { printf("\r\nVolts = "); EUSART_Write(volt/100+'0'); EUSART_
      +                          Write('.'); EUSART_Write((volt / 10)%10+'0'); EUSART_Write((volt /1)% 10+'0'); printf(" 
      +                          V    ADC Count:"); EUSART_Write('['); EUSART_Write((ADC_Conversion/1000)+'0'); EUSART_Wr
      +                          ite(((ADC_
  5182  0F2E  30FB               	movlw	low (STR_8| (0+32768))
  5183  0F2F  0020               	movlb	0	; select bank0
  5184  0F30  00C4               	movwf	printf@f
  5185  0F31  3090               	movlw	high (STR_8| (0+32768))
  5186  0F32  00C5               	movwf	printf@f+1
  5187  0F33  3195  2505  318E   	fcall	_printf
  5188  0F36  3064               	movlw	100
  5189  0F37  0020               	movlb	0	; select bank0
  5190  0F38  00C7               	movwf	___lwdiv@divisor
  5191  0F39  3000               	movlw	0
  5192  0F3A  00C8               	movwf	___lwdiv@divisor+1
  5193  0F3B  0856               	movf	DisplayVoltage@volt+1,w
  5194  0F3C  01CA               	clrf	___lwdiv@dividend+1
  5195  0F3D  07CA               	addwf	___lwdiv@dividend+1,f
  5196  0F3E  0855               	movf	DisplayVoltage@volt,w
  5197  0F3F  01C9               	clrf	___lwdiv@dividend
  5198  0F40  07C9               	addwf	___lwdiv@dividend,f
  5199  0F41  3188  2040  318E   	fcall	___lwdiv
  5200  0F44  0020               	movlb	0	; select bank0
  5201  0F45  0847               	movf	?___lwdiv,w
  5202  0F46  3E30               	addlw	48
  5203  0F47  3196  2660  318E   	fcall	_EUSART_Write
  5204  0F4A  302E               	movlw	46
  5205  0F4B  3196  2660  318E   	fcall	_EUSART_Write
  5206  0F4E  300A               	movlw	10
  5207  0F4F  0020               	movlb	0	; select bank0
  5208  0F50  00CF               	movwf	___lwmod@divisor
  5209  0F51  3000               	movlw	0
  5210  0F52  00D0               	movwf	___lwmod@divisor+1
  5211  0F53  300A               	movlw	10
  5212  0F54  00C7               	movwf	___lwdiv@divisor
  5213  0F55  3000               	movlw	0
  5214  0F56  00C8               	movwf	___lwdiv@divisor+1
  5215  0F57  0856               	movf	DisplayVoltage@volt+1,w
  5216  0F58  01CA               	clrf	___lwdiv@dividend+1
  5217  0F59  07CA               	addwf	___lwdiv@dividend+1,f
  5218  0F5A  0855               	movf	DisplayVoltage@volt,w
  5219  0F5B  01C9               	clrf	___lwdiv@dividend
  5220  0F5C  07C9               	addwf	___lwdiv@dividend,f
  5221  0F5D  3188  2040  318E   	fcall	___lwdiv
  5222  0F60  0020               	movlb	0	; select bank0
  5223  0F61  0848               	movf	?___lwdiv+1,w
  5224  0F62  01D2               	clrf	___lwmod@dividend+1
  5225  0F63  07D2               	addwf	___lwmod@dividend+1,f
  5226  0F64  0847               	movf	?___lwdiv,w
  5227  0F65  01D1               	clrf	___lwmod@dividend
  5228  0F66  07D1               	addwf	___lwmod@dividend,f
  5229  0F67  3197  27D1  318E   	fcall	___lwmod
  5230  0F6A  0020               	movlb	0	; select bank0
  5231  0F6B  084F               	movf	?___lwmod,w
  5232  0F6C  3E30               	addlw	48
  5233  0F6D  3196  2660  318E   	fcall	_EUSART_Write
  5234  0F70  300A               	movlw	10
  5235  0F71  0020               	movlb	0	; select bank0
  5236  0F72  00CF               	movwf	___lwmod@divisor
  5237  0F73  3000               	movlw	0
  5238  0F74  00D0               	movwf	___lwmod@divisor+1
  5239  0F75  0856               	movf	DisplayVoltage@volt+1,w
  5240  0F76  01D2               	clrf	___lwmod@dividend+1
  5241  0F77  07D2               	addwf	___lwmod@dividend+1,f
  5242  0F78  0855               	movf	DisplayVoltage@volt,w
  5243  0F79  01D1               	clrf	___lwmod@dividend
  5244  0F7A  07D1               	addwf	___lwmod@dividend,f
  5245  0F7B  3197  27D1  318E   	fcall	___lwmod
  5246  0F7E  0020               	movlb	0	; select bank0
  5247  0F7F  084F               	movf	?___lwmod,w
  5248  0F80  3E30               	addlw	48
  5249  0F81  3196  2660  318E   	fcall	_EUSART_Write
  5250  0F84  3044               	movlw	low (STR_9| (0+32768))
  5251  0F85  0020               	movlb	0	; select bank0
  5252  0F86  00C4               	movwf	printf@f
  5253  0F87  3090               	movlw	high (STR_9| (0+32768))
  5254  0F88  00C5               	movwf	printf@f+1
  5255  0F89  3195  2505  318E   	fcall	_printf
  5256  0F8C  305B               	movlw	91
  5257  0F8D  3196  2660  318E   	fcall	_EUSART_Write
  5258  0F90  30E8               	movlw	232
  5259  0F91  0020               	movlb	0	; select bank0
  5260  0F92  00C7               	movwf	___lwdiv@divisor
  5261  0F93  3003               	movlw	3
  5262  0F94  00C8               	movwf	___lwdiv@divisor+1
  5263  0F95  085A               	movf	DisplayVoltage@ADC_Conversion+1,w
  5264  0F96  01CA               	clrf	___lwdiv@dividend+1
  5265  0F97  07CA               	addwf	___lwdiv@dividend+1,f
  5266  0F98  0859               	movf	DisplayVoltage@ADC_Conversion,w
  5267  0F99  01C9               	clrf	___lwdiv@dividend
  5268  0F9A  07C9               	addwf	___lwdiv@dividend,f
  5269  0F9B  3188  2040  318E   	fcall	___lwdiv
  5270  0F9E  0020               	movlb	0	; select bank0
  5271  0F9F  0847               	movf	?___lwdiv,w
  5272  0FA0  3E30               	addlw	48
  5273  0FA1  3196  2660  318E   	fcall	_EUSART_Write
  5274  0FA4  300A               	movlw	10
  5275  0FA5  0020               	movlb	0	; select bank0
  5276  0FA6  00CF               	movwf	___lwmod@divisor
  5277  0FA7  3000               	movlw	0
  5278  0FA8  00D0               	movwf	___lwmod@divisor+1
  5279  0FA9  3064               	movlw	100
  5280  0FAA  00C7               	movwf	___lwdiv@divisor
  5281  0FAB  3000               	movlw	0
  5282  0FAC  00C8               	movwf	___lwdiv@divisor+1
  5283  0FAD  085A               	movf	DisplayVoltage@ADC_Conversion+1,w
  5284  0FAE  01CA               	clrf	___lwdiv@dividend+1
  5285  0FAF  07CA               	addwf	___lwdiv@dividend+1,f
  5286  0FB0  0859               	movf	DisplayVoltage@ADC_Conversion,w
  5287  0FB1  01C9               	clrf	___lwdiv@dividend
  5288  0FB2  07C9               	addwf	___lwdiv@dividend,f
  5289  0FB3  3188  2040  318E   	fcall	___lwdiv
  5290  0FB6  0020               	movlb	0	; select bank0
  5291  0FB7  0848               	movf	?___lwdiv+1,w
  5292  0FB8  01D2               	clrf	___lwmod@dividend+1
  5293  0FB9  07D2               	addwf	___lwmod@dividend+1,f
  5294  0FBA  0847               	movf	?___lwdiv,w
  5295  0FBB  01D1               	clrf	___lwmod@dividend
  5296  0FBC  07D1               	addwf	___lwmod@dividend,f
  5297  0FBD  3197  27D1  318E   	fcall	___lwmod
  5298  0FC0  0020               	movlb	0	; select bank0
  5299  0FC1  084F               	movf	?___lwmod,w
  5300  0FC2  3E30               	addlw	48
  5301  0FC3  3196  2660  318E   	fcall	_EUSART_Write
  5302  0FC6  300A               	movlw	10
  5303  0FC7  0020               	movlb	0	; select bank0
  5304  0FC8  00CF               	movwf	___lwmod@divisor
  5305  0FC9  3000               	movlw	0
  5306  0FCA  00D0               	movwf	___lwmod@divisor+1
  5307  0FCB  300A               	movlw	10
  5308  0FCC  00C7               	movwf	___lwdiv@divisor
  5309  0FCD  3000               	movlw	0
  5310  0FCE  00C8               	movwf	___lwdiv@divisor+1
  5311  0FCF  085A               	movf	DisplayVoltage@ADC_Conversion+1,w
  5312  0FD0  01CA               	clrf	___lwdiv@dividend+1
  5313  0FD1  07CA               	addwf	___lwdiv@dividend+1,f
  5314  0FD2  0859               	movf	DisplayVoltage@ADC_Conversion,w
  5315  0FD3  01C9               	clrf	___lwdiv@dividend
  5316  0FD4  07C9               	addwf	___lwdiv@dividend,f
  5317  0FD5  3188  2040  318E   	fcall	___lwdiv
  5318  0FD8  0020               	movlb	0	; select bank0
  5319  0FD9  0848               	movf	?___lwdiv+1,w
  5320  0FDA  01D2               	clrf	___lwmod@dividend+1
  5321  0FDB  07D2               	addwf	___lwmod@dividend+1,f
  5322  0FDC  0847               	movf	?___lwdiv,w
  5323  0FDD  01D1               	clrf	___lwmod@dividend
  5324  0FDE  07D1               	addwf	___lwmod@dividend,f
  5325  0FDF  3197  27D1  318E   	fcall	___lwmod
  5326  0FE2  0020               	movlb	0	; select bank0
  5327  0FE3  084F               	movf	?___lwmod,w
  5328  0FE4  3E30               	addlw	48
  5329  0FE5  3196  2660  318E   	fcall	_EUSART_Write
  5330  0FE8  300A               	movlw	10
  5331  0FE9  0020               	movlb	0	; select bank0
  5332  0FEA  00CF               	movwf	___lwmod@divisor
  5333  0FEB  3000               	movlw	0
  5334  0FEC  00D0               	movwf	___lwmod@divisor+1
  5335  0FED  085A               	movf	DisplayVoltage@ADC_Conversion+1,w
  5336  0FEE  01D2               	clrf	___lwmod@dividend+1
  5337  0FEF  07D2               	addwf	___lwmod@dividend+1,f
  5338  0FF0  0859               	movf	DisplayVoltage@ADC_Conversion,w
  5339  0FF1  01D1               	clrf	___lwmod@dividend
  5340  0FF2  07D1               	addwf	___lwmod@dividend,f
  5341  0FF3  3197  27D1  318E   	fcall	___lwmod
  5342  0FF6  0020               	movlb	0	; select bank0
  5343  0FF7  084F               	movf	?___lwmod,w
  5344  0FF8  3E30               	addlw	48
  5345  0FF9  3196  2660  318E   	fcall	_EUSART_Write
  5346  0FFC  305D               	movlw	93
  5347  0FFD  3196  2660         	fcall	_EUSART_Write
  5348  0FFF  0008               	return
  5349  1000                     __end_of_DisplayVoltage:	
  5350                           
  5351                           	psect	text3
  5352  17D1                     __ptext3:	
  5353 ;; *************** function ___lwmod *****************
  5354 ;; Defined at:
  5355 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;  divisor         2   14[BANK0 ] unsigned int 
  5358 ;;  dividend        2   16[BANK0 ] unsigned int 
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  counter         1   19[BANK0 ] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  2   14[BANK0 ] unsigned int 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2, status,0
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5370 ;;      Params:         0       4       0       0       0       0       0       0
  5371 ;;      Locals:         0       1       0       0       0       0       0       0
  5372 ;;      Temps:          0       1       0       0       0       0       0       0
  5373 ;;      Totals:         0       6       0       0       0       0       0       0
  5374 ;;Total ram usage:        6 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    4
  5377 ;; This function calls:
  5378 ;;		Nothing
  5379 ;; This function is called by:
  5380 ;;		_DisplayVoltage
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function ___lwmod
  5386  17D1                     ___lwmod:	
  5387                           
  5388                           ;incstack = 0
  5389                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5390  17D1  0020               	movlb	0	; select bank0
  5391  17D2  0850               	movf	___lwmod@divisor+1,w
  5392  17D3  044F               	iorwf	___lwmod@divisor,w
  5393  17D4  1903               	skipnz
  5394  17D5  2FF9               	goto	l3397
  5395  17D6  01D4               	clrf	___lwmod@counter
  5396  17D7  0AD4               	incf	___lwmod@counter,f
  5397  17D8                     l3387:	
  5398  17D8  1BD0               	btfsc	___lwmod@divisor+1,7
  5399  17D9  2FE4               	goto	l3389
  5400  17DA  3001               	movlw	1
  5401  17DB                     u2505:	
  5402  17DB  35CF               	lslf	___lwmod@divisor,f
  5403  17DC  0DD0               	rlf	___lwmod@divisor+1,f
  5404  17DD  0B89               	decfsz	9,f
  5405  17DE  2FDB               	goto	u2505
  5406  17DF  3001               	movlw	1
  5407  17E0  00D3               	movwf	??___lwmod
  5408  17E1  0853               	movf	??___lwmod,w
  5409  17E2  07D4               	addwf	___lwmod@counter,f
  5410  17E3  2FD8               	goto	l3387
  5411  17E4                     l3389:	
  5412  17E4  0850               	movf	___lwmod@divisor+1,w
  5413  17E5  0252               	subwf	___lwmod@dividend+1,w
  5414  17E6  1D03               	skipz
  5415  17E7  2FEA               	goto	u2525
  5416  17E8  084F               	movf	___lwmod@divisor,w
  5417  17E9  0251               	subwf	___lwmod@dividend,w
  5418  17EA                     u2525:	
  5419  17EA  1C03               	skipc
  5420  17EB  2FF0               	goto	l3393
  5421  17EC  084F               	movf	___lwmod@divisor,w
  5422  17ED  02D1               	subwf	___lwmod@dividend,f
  5423  17EE  0850               	movf	___lwmod@divisor+1,w
  5424  17EF  3BD2               	subwfb	___lwmod@dividend+1,f
  5425  17F0                     l3393:	
  5426  17F0  3001               	movlw	1
  5427  17F1                     u2535:	
  5428  17F1  36D0               	lsrf	___lwmod@divisor+1,f
  5429  17F2  0CCF               	rrf	___lwmod@divisor,f
  5430  17F3  0B89               	decfsz	9,f
  5431  17F4  2FF1               	goto	u2535
  5432  17F5  3001               	movlw	1
  5433  17F6  02D4               	subwf	___lwmod@counter,f
  5434  17F7  1D03               	btfss	3,2
  5435  17F8  2FE4               	goto	l3389
  5436  17F9                     l3397:	
  5437  17F9  0852               	movf	___lwmod@dividend+1,w
  5438  17FA  01D0               	clrf	?___lwmod+1
  5439  17FB  07D0               	addwf	?___lwmod+1,f
  5440  17FC  0851               	movf	___lwmod@dividend,w
  5441  17FD  01CF               	clrf	?___lwmod
  5442  17FE  07CF               	addwf	?___lwmod,f
  5443  17FF  0008               	return
  5444  1800                     __end_of___lwmod:	
  5445                           
  5446                           	psect	text4
  5447  0840                     __ptext4:	
  5448 ;; *************** function ___lwdiv *****************
  5449 ;; Defined at:
  5450 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  divisor         2    6[BANK0 ] unsigned int 
  5453 ;;  dividend        2    8[BANK0 ] unsigned int 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  quotient        2   11[BANK0 ] unsigned int 
  5456 ;;  counter         1   13[BANK0 ] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  2    6[BANK0 ] unsigned int 
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5466 ;;      Params:         0       4       0       0       0       0       0       0
  5467 ;;      Locals:         0       3       0       0       0       0       0       0
  5468 ;;      Temps:          0       1       0       0       0       0       0       0
  5469 ;;      Totals:         0       8       0       0       0       0       0       0
  5470 ;;Total ram usage:        8 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    4
  5473 ;; This function calls:
  5474 ;;		Nothing
  5475 ;; This function is called by:
  5476 ;;		_DisplayVoltage
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           
  5481                           ;psect for function ___lwdiv
  5482  0840                     ___lwdiv:	
  5483                           
  5484                           ;incstack = 0
  5485                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5486  0840  0020               	movlb	0	; select bank0
  5487  0841  01CC               	clrf	___lwdiv@quotient
  5488  0842  01CD               	clrf	___lwdiv@quotient+1
  5489  0843  0848               	movf	___lwdiv@divisor+1,w
  5490  0844  0447               	iorwf	___lwdiv@divisor,w
  5491  0845  1903               	skipnz
  5492  0846  2870               	goto	l3375
  5493  0847  01CE               	clrf	___lwdiv@counter
  5494  0848  0ACE               	incf	___lwdiv@counter,f
  5495  0849                     l3363:	
  5496  0849  1BC8               	btfsc	___lwdiv@divisor+1,7
  5497  084A  2855               	goto	l3365
  5498  084B  3001               	movlw	1
  5499  084C                     u2435:	
  5500  084C  35C7               	lslf	___lwdiv@divisor,f
  5501  084D  0DC8               	rlf	___lwdiv@divisor+1,f
  5502  084E  0B89               	decfsz	9,f
  5503  084F  284C               	goto	u2435
  5504  0850  3001               	movlw	1
  5505  0851  00CB               	movwf	??___lwdiv
  5506  0852  084B               	movf	??___lwdiv,w
  5507  0853  07CE               	addwf	___lwdiv@counter,f
  5508  0854  2849               	goto	l3363
  5509  0855                     l3365:	
  5510  0855  3001               	movlw	1
  5511  0856                     u2455:	
  5512  0856  35CC               	lslf	___lwdiv@quotient,f
  5513  0857  0DCD               	rlf	___lwdiv@quotient+1,f
  5514  0858  0B89               	decfsz	9,f
  5515  0859  2856               	goto	u2455
  5516  085A  0848               	movf	___lwdiv@divisor+1,w
  5517  085B  024A               	subwf	___lwdiv@dividend+1,w
  5518  085C  1D03               	skipz
  5519  085D  2860               	goto	u2465
  5520  085E  0847               	movf	___lwdiv@divisor,w
  5521  085F  0249               	subwf	___lwdiv@dividend,w
  5522  0860                     u2465:	
  5523  0860  1C03               	skipc
  5524  0861  2867               	goto	l3371
  5525  0862  0847               	movf	___lwdiv@divisor,w
  5526  0863  02C9               	subwf	___lwdiv@dividend,f
  5527  0864  0848               	movf	___lwdiv@divisor+1,w
  5528  0865  3BCA               	subwfb	___lwdiv@dividend+1,f
  5529  0866  144C               	bsf	___lwdiv@quotient,0
  5530  0867                     l3371:	
  5531  0867  3001               	movlw	1
  5532  0868                     u2475:	
  5533  0868  36C8               	lsrf	___lwdiv@divisor+1,f
  5534  0869  0CC7               	rrf	___lwdiv@divisor,f
  5535  086A  0B89               	decfsz	9,f
  5536  086B  2868               	goto	u2475
  5537  086C  3001               	movlw	1
  5538  086D  02CE               	subwf	___lwdiv@counter,f
  5539  086E  1D03               	btfss	3,2
  5540  086F  2855               	goto	l3365
  5541  0870                     l3375:	
  5542  0870  084D               	movf	___lwdiv@quotient+1,w
  5543  0871  01C8               	clrf	?___lwdiv+1
  5544  0872  07C8               	addwf	?___lwdiv+1,f
  5545  0873  084C               	movf	___lwdiv@quotient,w
  5546  0874  01C7               	clrf	?___lwdiv
  5547  0875  07C7               	addwf	?___lwdiv,f
  5548  0876  0008               	return
  5549  0877                     __end_of___lwdiv:	
  5550                           
  5551                           	psect	text5
  5552  155C                     __ptext5:	
  5553 ;; *************** function _DisplayVoltMenu *****************
  5554 ;; Defined at:
  5555 ;;		line 112 in file "StateVoltmeter.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;		None
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;		None
  5560 ;; Return value:  Size  Location     Type
  5561 ;;		None               void
  5562 ;; Registers used:
  5563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5569 ;;      Params:         0       0       0       0       0       0       0       0
  5570 ;;      Locals:         0       0       0       0       0       0       0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0       0
  5572 ;;      Totals:         0       0       0       0       0       0       0       0
  5573 ;;Total ram usage:        0 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    7
  5576 ;; This function calls:
  5577 ;;		_LCDGoto
  5578 ;;		_LCDPutStr
  5579 ;; This function is called by:
  5580 ;;		_StateVoltage
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _DisplayVoltMenu
  5586  155C                     _DisplayVoltMenu:	
  5587                           
  5588                           ;incstack = 0
  5589                           ; Regs used in _DisplayVoltMenu: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5590                           ;StateVoltmeter.c: 115: do { LCDGoto(0,0); LCDPutStr("   Voltmeter"); }while (0);;
  5591  155C  0020               	movlb	0	; select bank0
  5592  155D  01C8               	clrf	LCDGoto@ln
  5593  155E  3000               	movlw	0
  5594  155F  3196  261A  3195   	fcall	_LCDGoto
  5595  1562  30B2               	movlw	low (STR_3| (0+32768))
  5596  1563  0020               	movlb	0	; select bank0
  5597  1564  00C8               	movwf	LCDPutStr@str
  5598  1565  3090               	movlw	high (STR_3| (0+32768))
  5599  1566  00C9               	movwf	LCDPutStr@str+1
  5600  1567  3196  2684  3195   	fcall	_LCDPutStr
  5601                           
  5602                           ;StateVoltmeter.c: 118: do { LCDGoto(0,1); LCDPutStr("RA4=Next RB0=Now"); } while (0);;
  5603  156A  0020               	movlb	0	; select bank0
  5604  156B  01C8               	clrf	LCDGoto@ln
  5605  156C  0AC8               	incf	LCDGoto@ln,f
  5606  156D  3000               	movlw	0
  5607  156E  3196  261A  3195   	fcall	_LCDGoto
  5608  1571  3055               	movlw	low (STR_4| (0+32768))
  5609  1572  0020               	movlb	0	; select bank0
  5610  1573  00C8               	movwf	LCDPutStr@str
  5611  1574  3090               	movlw	high (STR_4| (0+32768))
  5612  1575  00C9               	movwf	LCDPutStr@str+1
  5613  1576  3196  2684         	fcall	_LCDPutStr
  5614  1578  0008               	return
  5615  1579                     __end_of_DisplayVoltMenu:	
  5616                           
  5617                           	psect	text6
  5618  15D7                     __ptext6:	
  5619 ;; *************** function _ADC_GetConversion *****************
  5620 ;; Defined at:
  5621 ;;		line 110 in file "mcc_generated_files/adc.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  channel         1    wreg     enum E3522
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  channel         1    3[BANK0 ] enum E3522
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  2    0[BANK0 ] unsigned int 
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5635 ;;      Params:         0       2       0       0       0       0       0       0
  5636 ;;      Locals:         0       1       0       0       0       0       0       0
  5637 ;;      Temps:          0       1       0       0       0       0       0       0
  5638 ;;      Totals:         0       4       0       0       0       0       0       0
  5639 ;;Total ram usage:        4 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    4
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		_StateVoltage
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           
  5650                           ;psect for function _ADC_GetConversion
  5651  15D7                     _ADC_GetConversion:	
  5652                           
  5653                           ;incstack = 0
  5654                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5655                           ;ADC_GetConversion@channel stored from wreg
  5656  15D7  0020               	movlb	0	; select bank0
  5657  15D8  00C4               	movwf	ADC_GetConversion@channel
  5658                           
  5659                           ;adc.c: 113: ADCON0bits.CHS = channel;
  5660  15D9  0844               	movf	ADC_GetConversion@channel,w
  5661  15DA  00C3               	movwf	??_ADC_GetConversion
  5662  15DB  0DC3               	rlf	??_ADC_GetConversion,f
  5663  15DC  0DC3               	rlf	??_ADC_GetConversion,f
  5664  15DD  0021               	movlb	1	; select bank1
  5665  15DE  081D               	movf	29,w	;volatile
  5666  15DF  0020               	movlb	0	; select bank0
  5667  15E0  0643               	xorwf	??_ADC_GetConversion,w
  5668  15E1  3983               	andlw	-125
  5669  15E2  0643               	xorwf	??_ADC_GetConversion,w
  5670  15E3  0021               	movlb	1	; select bank1
  5671  15E4  009D               	movwf	29	;volatile
  5672                           
  5673                           ;adc.c: 116: ADCON0bits.ADON = 1;
  5674  15E5  141D               	bsf	29,0	;volatile
  5675                           
  5676                           ;adc.c: 119: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5677  15E6  3200               	nop2	;2 cycle nop
  5678  15E7  3200               	nop2	;2 cycle nop
  5679  15E8  0000               	nop
  5680                           
  5681                           ;adc.c: 122: ADCON0bits.GO_nDONE = 1;
  5682  15E9  0021               	movlb	1	; select bank1
  5683  15EA  149D               	bsf	29,1	;volatile
  5684  15EB                     l165:	
  5685                           ;adc.c: 126: {
  5686                           
  5687                           ;adc.c: 125: while (ADCON0bits.GO_nDONE)
  5688                           
  5689  15EB  189D               	btfsc	29,1	;volatile
  5690  15EC  2DEB               	goto	l165
  5691                           
  5692                           ;adc.c: 127: }
  5693                           ;adc.c: 130: return ((ADRESH << 8) + ADRESL);
  5694  15ED  081C               	movf	28,w	;volatile
  5695  15EE  0020               	movlb	0	; select bank0
  5696  15EF  01C2               	clrf	?_ADC_GetConversion+1
  5697  15F0  07C2               	addwf	?_ADC_GetConversion+1,f
  5698  15F1  0021               	movlb	1	; select bank1
  5699  15F2  081B               	movf	27,w	;volatile
  5700  15F3  0020               	movlb	0	; select bank0
  5701  15F4  01C1               	clrf	?_ADC_GetConversion
  5702  15F5  07C1               	addwf	?_ADC_GetConversion,f
  5703  15F6  0008               	return
  5704  15F7                     __end_of_ADC_GetConversion:	
  5705                           
  5706                           	psect	text7
  5707  0783                     __ptext7:	
  5708 ;; *************** function _StateTemperature *****************
  5709 ;; Defined at:
  5710 ;;		line 62 in file "StateTemp.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;		None
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;  sChange         1   31[BANK0 ] unsigned char 
  5715 ;;  degreeType      1   30[BANK0 ] unsigned char 
  5716 ;;  tempValue       1   29[BANK0 ] unsigned char 
  5717 ;; Return value:  Size  Location     Type
  5718 ;;		None               void
  5719 ;; Registers used:
  5720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5726 ;;      Params:         0       0       0       0       0       0       0       0
  5727 ;;      Locals:         0       3       0       0       0       0       0       0
  5728 ;;      Temps:          0       1       0       0       0       0       0       0
  5729 ;;      Totals:         0       4       0       0       0       0       0       0
  5730 ;;Total ram usage:        4 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    8
  5733 ;; This function calls:
  5734 ;;		_DisplayTempMenu
  5735 ;;		_DisplayTemperature
  5736 ;;		_I2C_MasterRead
  5737 ;;		_I2C_MasterWrite
  5738 ;;		_LCDPutCmd
  5739 ;; This function is called by:
  5740 ;;		_main
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function _StateTemperature
  5746  0783                     _StateTemperature:	
  5747                           
  5748                           ;StateTemp.c: 64: uint8_t tempValue =0;
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _StateTemperature: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5752  0783  0020               	movlb	0	; select bank0
  5753  0784  01DE               	clrf	StateTemperature@tempValue
  5754                           
  5755                           ;StateTemp.c: 65: uint8_t degreeType = 0;
  5756  0785  01DF               	clrf	StateTemperature@degreeType
  5757                           
  5758                           ;StateTemp.c: 66: uint8_t sChange = 0;
  5759  0786  01E0               	clrf	StateTemperature@sChange
  5760                           
  5761                           ;StateTemp.c: 69: DisplayTempMenu();
  5762  0787  3195  253F  3187   	fcall	_DisplayTempMenu
  5763  078A  2F90               	goto	l5135
  5764  078B                     l5137:	
  5765                           
  5766                           ;StateTemp.c: 75: {
  5767                           ;StateTemp.c: 77: Buttons.But1Pressed = 0;
  5768  078B  103D               	bcf	_Buttons,0
  5769                           
  5770                           ;StateTemp.c: 80: LCDPutCmd(0x01);
  5771  078C  3001               	movlw	1
  5772  078D  3196  26FB         	fcall	_LCDPutCmd
  5773                           
  5774                           ;StateTemp.c: 83: return;
  5775  078F  0008               	return
  5776  0790                     l5135:	
  5777                           ;StateTemp.c: 71: while (1)
  5778                           
  5779                           ;StateTemp.c: 84: }
  5780                           
  5781                           
  5782                           ;StateTemp.c: 72: {
  5783                           ;StateTemp.c: 74: if((Buttons.But1Pressed))
  5784  0790  0020               	movlb	0	; select bank0
  5785  0791  183D               	btfsc	_Buttons,0
  5786  0792  2F8B               	goto	l5137
  5787                           
  5788                           ;StateTemp.c: 87: else if((Buttons.But2Pressed))
  5789  0793  1CBD               	btfss	_Buttons,1
  5790  0794  2F90               	goto	l5135
  5791                           
  5792                           ;StateTemp.c: 88: {
  5793                           ;StateTemp.c: 90: Buttons.But2Pressed = 0;
  5794  0795  10BD               	bcf	_Buttons,1
  5795                           
  5796                           ;StateTemp.c: 119: break;
  5797  0796  2FA5               	goto	l5147
  5798  0797                     l961:	
  5799                           ;StateTemp.c: 120: }
  5800                           
  5801                           
  5802                           ;StateTemp.c: 123: else if((Buttons.But1Pressed))
  5803  0797  1C3D               	btfss	_Buttons,0
  5804  0798  2FA5               	goto	l5147
  5805                           
  5806                           ;StateTemp.c: 124: {
  5807                           ;StateTemp.c: 126: Buttons.But1Pressed = 0;
  5808  0799  103D               	bcf	_Buttons,0
  5809                           
  5810                           ;StateTemp.c: 128: if(sChange == 1)
  5811  079A  0860               	movf	StateTemperature@sChange,w
  5812  079B  3A01               	xorlw	1
  5813  079C  1D03               	skipz
  5814  079D  2FA2               	goto	l965
  5815                           
  5816                           ;StateTemp.c: 129: {
  5817                           ;StateTemp.c: 130: sChange = 0;
  5818  079E  01E0               	clrf	StateTemperature@sChange
  5819                           
  5820                           ;StateTemp.c: 131: degreeType = 1;
  5821  079F  01DF               	clrf	StateTemperature@degreeType
  5822  07A0  0ADF               	incf	StateTemperature@degreeType,f
  5823                           
  5824                           ;StateTemp.c: 132: }
  5825  07A1  2FA5               	goto	l5147
  5826  07A2                     l965:	
  5827                           
  5828                           ;StateTemp.c: 133: else
  5829                           ;StateTemp.c: 134: {
  5830                           ;StateTemp.c: 135: sChange = 1;
  5831  07A2  01E0               	clrf	StateTemperature@sChange
  5832  07A3  0AE0               	incf	StateTemperature@sChange,f
  5833                           
  5834                           ;StateTemp.c: 136: degreeType = 0;
  5835  07A4  01DF               	clrf	StateTemperature@degreeType
  5836  07A5                     l5147:	
  5837                           ;StateTemp.c: 93: while (1)
  5838                           
  5839                           
  5840                           ;StateTemp.c: 94: {
  5841                           ;StateTemp.c: 96: I2C_MasterWrite( &TC74_cmd, 1, I2C_Address, &I2C_status);
  5842  07A5  0020               	movlb	0	; select bank0
  5843  07A6  01C8               	clrf	I2C_MasterWrite@length
  5844  07A7  0AC8               	incf	I2C_MasterWrite@length,f
  5845  07A8  086A               	movf	_I2C_Address+1,w
  5846  07A9  01CA               	clrf	I2C_MasterWrite@address+1
  5847  07AA  07CA               	addwf	I2C_MasterWrite@address+1,f
  5848  07AB  0869               	movf	_I2C_Address,w
  5849  07AC  01C9               	clrf	I2C_MasterWrite@address
  5850  07AD  07C9               	addwf	I2C_MasterWrite@address,f
  5851  07AE  303E               	movlw	_I2C_status& (0+255)
  5852  07AF  00DD               	movwf	??_StateTemperature
  5853  07B0  085D               	movf	??_StateTemperature,w
  5854  07B1  00CB               	movwf	I2C_MasterWrite@pflag
  5855  07B2  303F               	movlw	_TC74_cmd& (0+255)
  5856  07B3  3197  274E  3187   	fcall	_I2C_MasterWrite
  5857  07B6                     l5149:	
  5858                           ;StateTemp.c: 97: while (I2C_MESSAGE_PENDING == I2C_status);
  5859                           
  5860  07B6  0020               	movlb	0	; select bank0
  5861  07B7  083E               	movf	_I2C_status,w
  5862  07B8  3A02               	xorlw	2
  5863  07B9  1903               	skipnz
  5864  07BA  2FB6               	goto	l5149
  5865                           
  5866                           ;StateTemp.c: 100: I2C_MasterRead( &readValue, 1, I2C_Address, &I2C_status);
  5867  07BB  01C8               	clrf	I2C_MasterRead@length
  5868  07BC  0AC8               	incf	I2C_MasterRead@length,f
  5869  07BD  086A               	movf	_I2C_Address+1,w
  5870  07BE  01CA               	clrf	I2C_MasterRead@address+1
  5871  07BF  07CA               	addwf	I2C_MasterRead@address+1,f
  5872  07C0  0869               	movf	_I2C_Address,w
  5873  07C1  01C9               	clrf	I2C_MasterRead@address
  5874  07C2  07C9               	addwf	I2C_MasterRead@address,f
  5875  07C3  303E               	movlw	_I2C_status& (0+255)
  5876  07C4  00DD               	movwf	??_StateTemperature
  5877  07C5  085D               	movf	??_StateTemperature,w
  5878  07C6  00CB               	movwf	I2C_MasterRead@pflag
  5879  07C7  3040               	movlw	_readValue& (0+255)
  5880  07C8  3197  2724  3187   	fcall	_I2C_MasterRead
  5881  07CB                     l5153:	
  5882                           ;StateTemp.c: 101: while (I2C_MESSAGE_PENDING == I2C_status );
  5883                           
  5884  07CB  0020               	movlb	0	; select bank0
  5885  07CC  083E               	movf	_I2C_status,w
  5886  07CD  3A02               	xorlw	2
  5887  07CE  1903               	skipnz
  5888  07CF  2FCB               	goto	l5153
  5889                           
  5890                           ;StateTemp.c: 104: tempValue = readValue;
  5891  07D0  0840               	movf	_readValue,w
  5892  07D1  00DD               	movwf	??_StateTemperature
  5893  07D2  085D               	movf	??_StateTemperature,w
  5894  07D3  00DE               	movwf	StateTemperature@tempValue
  5895                           
  5896                           ;StateTemp.c: 107: DisplayTemperature(tempValue,degreeType);
  5897  07D4  085F               	movf	StateTemperature@degreeType,w
  5898  07D5  00DD               	movwf	??_StateTemperature
  5899  07D6  085D               	movf	??_StateTemperature,w
  5900  07D7  00D7               	movwf	DisplayTemperature@type
  5901  07D8  085E               	movf	StateTemperature@tempValue,w
  5902  07D9  318C  2465  3187   	fcall	_DisplayTemperature
  5903                           
  5904                           ;StateTemp.c: 110: if((Buttons.But2Pressed))
  5905  07DC  0020               	movlb	0	; select bank0
  5906  07DD  1CBD               	btfss	_Buttons,1
  5907  07DE  2F97               	goto	l961
  5908                           
  5909                           ;StateTemp.c: 111: {
  5910                           ;StateTemp.c: 113: Buttons.But2Pressed = 0;
  5911  07DF  10BD               	bcf	_Buttons,1
  5912                           
  5913                           ;StateTemp.c: 116: LCDPutCmd(0x01);
  5914  07E0  3001               	movlw	1
  5915  07E1  3196  26FB  3187   	fcall	_LCDPutCmd
  5916                           
  5917                           ;StateTemp.c: 137: }
  5918                           ;StateTemp.c: 138: }
  5919                           ;StateTemp.c: 139: }
  5920                           ;StateTemp.c: 142: LCDPutCmd(0x01);
  5921  07E4  3001               	movlw	1
  5922  07E5  3196  26FB         	fcall	_LCDPutCmd
  5923                           
  5924                           ;StateTemp.c: 145: break;
  5925  07E7  0008               	return
  5926  07E8                     __end_of_StateTemperature:	
  5927                           
  5928                           	psect	text8
  5929  174E                     __ptext8:	
  5930 ;; *************** function _I2C_MasterWrite *****************
  5931 ;; Defined at:
  5932 ;;		line 599 in file "mcc_generated_files/i2c.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  pdata           1    wreg     PTR unsigned char 
  5935 ;;		 -> TC74_cmd(1), 
  5936 ;;  length          1    7[BANK0 ] unsigned char 
  5937 ;;  address         2    8[BANK0 ] unsigned int 
  5938 ;;  pflag           1   10[BANK0 ] PTR enum E3525
  5939 ;;		 -> I2C_status(1), 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  5942 ;;		 -> TC74_cmd(1), 
  5943 ;; Return value:  Size  Location     Type
  5944 ;;		None               void
  5945 ;; Registers used:
  5946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5952 ;;      Params:         0       4       0       0       0       0       0       0
  5953 ;;      Locals:         0       1       0       0       0       0       0       0
  5954 ;;      Temps:          0       2       0       0       0       0       0       0
  5955 ;;      Totals:         0       7       0       0       0       0       0       0
  5956 ;;Total ram usage:        7 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    5
  5959 ;; This function calls:
  5960 ;;		_I2C_MasterTRBInsert
  5961 ;;		_I2C_MasterWriteTRBBuild
  5962 ;; This function is called by:
  5963 ;;		_StateTemperature
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function _I2C_MasterWrite
  5969  174E                     _I2C_MasterWrite:	
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _I2C_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5973                           ;I2C_MasterWrite@pdata stored from wreg
  5974  174E  0020               	movlb	0	; select bank0
  5975  174F  00CE               	movwf	I2C_MasterWrite@pdata
  5976                           
  5977                           ;i2c.c: 605: static I2C_TRANSACTION_REQUEST_BLOCK trBlock;
  5978                           ;i2c.c: 608: if (i2c_object.trStatus.s.full != 1)
  5979  1750  1863               	btfsc	_i2c_object+2,0
  5980  1751  2F71               	goto	l3509
  5981                           
  5982                           ;i2c.c: 609: {
  5983                           ;i2c.c: 610: I2C_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  5984  1752  084E               	movf	I2C_MasterWrite@pdata,w
  5985  1753  00CC               	movwf	??_I2C_MasterWrite
  5986  1754  084C               	movf	??_I2C_MasterWrite,w
  5987  1755  00C1               	movwf	I2C_MasterWriteTRBBuild@pdata
  5988  1756  0848               	movf	I2C_MasterWrite@length,w
  5989  1757  00CD               	movwf	??_I2C_MasterWrite+1
  5990  1758  084D               	movf	??_I2C_MasterWrite+1,w
  5991  1759  00C2               	movwf	I2C_MasterWriteTRBBuild@length
  5992  175A  084A               	movf	I2C_MasterWrite@address+1,w
  5993  175B  01C4               	clrf	I2C_MasterWriteTRBBuild@address+1
  5994  175C  07C4               	addwf	I2C_MasterWriteTRBBuild@address+1,f
  5995  175D  0849               	movf	I2C_MasterWrite@address,w
  5996  175E  01C3               	clrf	I2C_MasterWriteTRBBuild@address
  5997  175F  07C3               	addwf	I2C_MasterWriteTRBBuild@address,f
  5998  1760  3036               	movlw	I2C_MasterWrite@trBlock& (0+255)
  5999  1761  3195  25B7  3197   	fcall	_I2C_MasterWriteTRBBuild
  6000                           
  6001                           ;i2c.c: 611: I2C_MasterTRBInsert(1, &trBlock, pflag);
  6002  1764  3036               	movlw	I2C_MasterWrite@trBlock& (0+255)
  6003  1765  0020               	movlb	0	; select bank0
  6004  1766  00CC               	movwf	??_I2C_MasterWrite
  6005  1767  084C               	movf	??_I2C_MasterWrite,w
  6006  1768  00C1               	movwf	I2C_MasterTRBInsert@ptrb_list
  6007  1769  084B               	movf	I2C_MasterWrite@pflag,w
  6008  176A  00CD               	movwf	??_I2C_MasterWrite+1
  6009  176B  084D               	movf	??_I2C_MasterWrite+1,w
  6010  176C  00C2               	movwf	I2C_MasterTRBInsert@pflag
  6011  176D  3001               	movlw	1
  6012  176E  3188  2077         	fcall	_I2C_MasterTRBInsert
  6013                           
  6014                           ;i2c.c: 612: }
  6015  1770  0008               	return
  6016  1771                     l3509:	
  6017                           
  6018                           ;i2c.c: 613: else
  6019                           ;i2c.c: 614: {
  6020                           ;i2c.c: 615: *pflag = I2C_MESSAGE_FAIL;
  6021  1771  0020               	movlb	0	; select bank0
  6022  1772  084B               	movf	I2C_MasterWrite@pflag,w
  6023  1773  0086               	movwf	6
  6024  1774  0187               	clrf	7
  6025  1775  0181               	clrf	1
  6026  1776  0A81               	incf	1,f
  6027  1777  0008               	return
  6028  1778                     __end_of_I2C_MasterWrite:	
  6029                           
  6030                           	psect	text9
  6031  15B7                     __ptext9:	
  6032 ;; *************** function _I2C_MasterWriteTRBBuild *****************
  6033 ;; Defined at:
  6034 ;;		line 708 in file "mcc_generated_files/i2c.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  ptrb            1    wreg     PTR struct .
  6037 ;;		 -> I2C_MasterWrite@trBlock(4), 
  6038 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  6039 ;;		 -> TC74_cmd(1), 
  6040 ;;  length          1    1[BANK0 ] unsigned char 
  6041 ;;  address         2    2[BANK0 ] unsigned int 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  ptrb            1    6[BANK0 ] PTR struct .
  6044 ;;		 -> I2C_MasterWrite@trBlock(4), 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;		None               void
  6047 ;; Registers used:
  6048 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6054 ;;      Params:         0       4       0       0       0       0       0       0
  6055 ;;      Locals:         0       1       0       0       0       0       0       0
  6056 ;;      Temps:          0       2       0       0       0       0       0       0
  6057 ;;      Totals:         0       7       0       0       0       0       0       0
  6058 ;;Total ram usage:        7 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    4
  6061 ;; This function calls:
  6062 ;;		Nothing
  6063 ;; This function is called by:
  6064 ;;		_I2C_MasterWrite
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           
  6069                           ;psect for function _I2C_MasterWriteTRBBuild
  6070  15B7                     _I2C_MasterWriteTRBBuild:	
  6071                           
  6072                           ;incstack = 0
  6073                           ; Regs used in _I2C_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  6074                           ;I2C_MasterWriteTRBBuild@ptrb stored from wreg
  6075  15B7  0020               	movlb	0	; select bank0
  6076  15B8  00C7               	movwf	I2C_MasterWriteTRBBuild@ptrb
  6077                           
  6078                           ;i2c.c: 714: ptrb->address = address << 1;
  6079  15B9  0844               	movf	I2C_MasterWriteTRBBuild@address+1,w
  6080  15BA  00C6               	movwf	??_I2C_MasterWriteTRBBuild+1
  6081  15BB  0843               	movf	I2C_MasterWriteTRBBuild@address,w
  6082  15BC  00C5               	movwf	??_I2C_MasterWriteTRBBuild
  6083  15BD  35C5               	lslf	??_I2C_MasterWriteTRBBuild,f
  6084  15BE  0DC6               	rlf	??_I2C_MasterWriteTRBBuild+1,f
  6085  15BF  0847               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  6086  15C0  0086               	movwf	6
  6087  15C1  0187               	clrf	7
  6088  15C2  0845               	movf	??_I2C_MasterWriteTRBBuild,w
  6089  15C3  3FC0               	movwi [0]fsr1
  6090  15C4  0846               	movf	??_I2C_MasterWriteTRBBuild+1,w
  6091  15C5  3FC1               	movwi [1]fsr1
  6092                           
  6093                           ;i2c.c: 715: ptrb->length = length;
  6094  15C6  0842               	movf	I2C_MasterWriteTRBBuild@length,w
  6095  15C7  00C5               	movwf	??_I2C_MasterWriteTRBBuild
  6096  15C8  0847               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  6097  15C9  3E02               	addlw	2
  6098  15CA  0086               	movwf	6
  6099  15CB  0187               	clrf	7
  6100  15CC  0845               	movf	??_I2C_MasterWriteTRBBuild,w
  6101  15CD  0081               	movwf	1
  6102                           
  6103                           ;i2c.c: 716: ptrb->pbuffer = pdata;
  6104  15CE  0841               	movf	I2C_MasterWriteTRBBuild@pdata,w
  6105  15CF  00C5               	movwf	??_I2C_MasterWriteTRBBuild
  6106  15D0  0847               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  6107  15D1  3E03               	addlw	3
  6108  15D2  0086               	movwf	6
  6109  15D3  0187               	clrf	7
  6110  15D4  0845               	movf	??_I2C_MasterWriteTRBBuild,w
  6111  15D5  0081               	movwf	1
  6112  15D6  0008               	return
  6113  15D7                     __end_of_I2C_MasterWriteTRBBuild:	
  6114                           
  6115                           	psect	text10
  6116  1724                     __ptext10:	
  6117 ;; *************** function _I2C_MasterRead *****************
  6118 ;; Defined at:
  6119 ;;		line 620 in file "mcc_generated_files/i2c.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  pdata           1    wreg     PTR unsigned char 
  6122 ;;		 -> readValue(1), 
  6123 ;;  length          1    7[BANK0 ] unsigned char 
  6124 ;;  address         2    8[BANK0 ] unsigned int 
  6125 ;;  pflag           1   10[BANK0 ] PTR enum E3525
  6126 ;;		 -> I2C_status(1), 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  6129 ;;		 -> readValue(1), 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;		None               void
  6132 ;; Registers used:
  6133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6139 ;;      Params:         0       4       0       0       0       0       0       0
  6140 ;;      Locals:         0       1       0       0       0       0       0       0
  6141 ;;      Temps:          0       2       0       0       0       0       0       0
  6142 ;;      Totals:         0       7       0       0       0       0       0       0
  6143 ;;Total ram usage:        7 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    5
  6146 ;; This function calls:
  6147 ;;		_I2C_MasterReadTRBBuild
  6148 ;;		_I2C_MasterTRBInsert
  6149 ;; This function is called by:
  6150 ;;		_StateTemperature
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           
  6155                           ;psect for function _I2C_MasterRead
  6156  1724                     _I2C_MasterRead:	
  6157                           
  6158                           ;incstack = 0
  6159                           ; Regs used in _I2C_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6160                           ;I2C_MasterRead@pdata stored from wreg
  6161  1724  0020               	movlb	0	; select bank0
  6162  1725  00CE               	movwf	I2C_MasterRead@pdata
  6163                           
  6164                           ;i2c.c: 626: static I2C_TRANSACTION_REQUEST_BLOCK trBlock;
  6165                           ;i2c.c: 630: if (i2c_object.trStatus.s.full != 1)
  6166  1726  1863               	btfsc	_i2c_object+2,0
  6167  1727  2F47               	goto	l3515
  6168                           
  6169                           ;i2c.c: 631: {
  6170                           ;i2c.c: 632: I2C_MasterReadTRBBuild(&trBlock, pdata, length, address);
  6171  1728  084E               	movf	I2C_MasterRead@pdata,w
  6172  1729  00CC               	movwf	??_I2C_MasterRead
  6173  172A  084C               	movf	??_I2C_MasterRead,w
  6174  172B  00C1               	movwf	I2C_MasterReadTRBBuild@pdata
  6175  172C  0848               	movf	I2C_MasterRead@length,w
  6176  172D  00CD               	movwf	??_I2C_MasterRead+1
  6177  172E  084D               	movf	??_I2C_MasterRead+1,w
  6178  172F  00C2               	movwf	I2C_MasterReadTRBBuild@length
  6179  1730  084A               	movf	I2C_MasterRead@address+1,w
  6180  1731  01C4               	clrf	I2C_MasterReadTRBBuild@address+1
  6181  1732  07C4               	addwf	I2C_MasterReadTRBBuild@address+1,f
  6182  1733  0849               	movf	I2C_MasterRead@address,w
  6183  1734  01C3               	clrf	I2C_MasterReadTRBBuild@address
  6184  1735  07C3               	addwf	I2C_MasterReadTRBBuild@address,f
  6185  1736  30E8               	movlw	I2C_MasterRead@trBlock& (0+255)
  6186  1737  3196  26AA  3197   	fcall	_I2C_MasterReadTRBBuild
  6187                           
  6188                           ;i2c.c: 633: I2C_MasterTRBInsert(1, &trBlock, pflag);
  6189  173A  30E8               	movlw	I2C_MasterRead@trBlock& (0+255)
  6190  173B  0020               	movlb	0	; select bank0
  6191  173C  00CC               	movwf	??_I2C_MasterRead
  6192  173D  084C               	movf	??_I2C_MasterRead,w
  6193  173E  00C1               	movwf	I2C_MasterTRBInsert@ptrb_list
  6194  173F  084B               	movf	I2C_MasterRead@pflag,w
  6195  1740  00CD               	movwf	??_I2C_MasterRead+1
  6196  1741  084D               	movf	??_I2C_MasterRead+1,w
  6197  1742  00C2               	movwf	I2C_MasterTRBInsert@pflag
  6198  1743  3001               	movlw	1
  6199  1744  3188  2077         	fcall	_I2C_MasterTRBInsert
  6200                           
  6201                           ;i2c.c: 634: }
  6202  1746  0008               	return
  6203  1747                     l3515:	
  6204                           
  6205                           ;i2c.c: 635: else
  6206                           ;i2c.c: 636: {
  6207                           ;i2c.c: 637: *pflag = I2C_MESSAGE_FAIL;
  6208  1747  0020               	movlb	0	; select bank0
  6209  1748  084B               	movf	I2C_MasterRead@pflag,w
  6210  1749  0086               	movwf	6
  6211  174A  0187               	clrf	7
  6212  174B  0181               	clrf	1
  6213  174C  0A81               	incf	1,f
  6214  174D  0008               	return
  6215  174E                     __end_of_I2C_MasterRead:	
  6216                           
  6217                           	psect	text11
  6218  0877                     __ptext11:	
  6219 ;; *************** function _I2C_MasterTRBInsert *****************
  6220 ;; Defined at:
  6221 ;;		line 642 in file "mcc_generated_files/i2c.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  count           1    wreg     unsigned char 
  6224 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  6225 ;;		 -> I2C_MasterRead@trBlock(4), I2C_MasterWrite@trBlock(4), 
  6226 ;;  pflag           1    1[BANK0 ] PTR enum E3525
  6227 ;;		 -> I2C_status(1), 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  count           1    3[BANK0 ] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;		None               void
  6232 ;; Registers used:
  6233 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6239 ;;      Params:         0       2       0       0       0       0       0       0
  6240 ;;      Locals:         0       1       0       0       0       0       0       0
  6241 ;;      Temps:          0       1       0       0       0       0       0       0
  6242 ;;      Totals:         0       4       0       0       0       0       0       0
  6243 ;;Total ram usage:        4 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    4
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		_I2C_MasterWrite
  6250 ;;		_I2C_MasterRead
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           
  6255                           ;psect for function _I2C_MasterTRBInsert
  6256  0877                     _I2C_MasterTRBInsert:	
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _I2C_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  6260                           ;I2C_MasterTRBInsert@count stored from wreg
  6261  0877  0020               	movlb	0	; select bank0
  6262  0878  00C4               	movwf	I2C_MasterTRBInsert@count
  6263                           
  6264                           ;i2c.c: 649: if (i2c_object.trStatus.s.full != 1)
  6265  0879  1863               	btfsc	_i2c_object+2,0
  6266  087A  28AB               	goto	l3175
  6267                           
  6268                           ;i2c.c: 650: {
  6269                           ;i2c.c: 651: *pflag = I2C_MESSAGE_PENDING;
  6270  087B  3002               	movlw	2
  6271  087C  00C3               	movwf	??_I2C_MasterTRBInsert
  6272  087D  0842               	movf	I2C_MasterTRBInsert@pflag,w
  6273  087E  0086               	movwf	6
  6274  087F  0187               	clrf	7
  6275  0880  0843               	movf	??_I2C_MasterTRBInsert,w
  6276  0881  0081               	movwf	1
  6277                           
  6278                           ;i2c.c: 653: i2c_object.pTrTail->ptrb_list = ptrb_list;
  6279  0882  0841               	movf	I2C_MasterTRBInsert@ptrb_list,w
  6280  0883  00C3               	movwf	??_I2C_MasterTRBInsert
  6281  0884  0A61               	incf	_i2c_object,w
  6282  0885  0086               	movwf	6
  6283  0886  0187               	clrf	7
  6284  0887  0843               	movf	??_I2C_MasterTRBInsert,w
  6285  0888  0081               	movwf	1
  6286                           
  6287                           ;i2c.c: 654: i2c_object.pTrTail->count = count;
  6288  0889  0844               	movf	I2C_MasterTRBInsert@count,w
  6289  088A  00C3               	movwf	??_I2C_MasterTRBInsert
  6290  088B  0861               	movf	_i2c_object,w
  6291  088C  0086               	movwf	6
  6292  088D  0187               	clrf	7
  6293  088E  0843               	movf	??_I2C_MasterTRBInsert,w
  6294  088F  0081               	movwf	1
  6295                           
  6296                           ;i2c.c: 655: i2c_object.pTrTail->pTrFlag = pflag;
  6297  0890  0842               	movf	I2C_MasterTRBInsert@pflag,w
  6298  0891  00C3               	movwf	??_I2C_MasterTRBInsert
  6299  0892  0861               	movf	_i2c_object,w
  6300  0893  3E02               	addlw	2
  6301  0894  0086               	movwf	6
  6302  0895  0187               	clrf	7
  6303  0896  0843               	movf	??_I2C_MasterTRBInsert,w
  6304  0897  0081               	movwf	1
  6305                           
  6306                           ;i2c.c: 656: i2c_object.pTrTail++;
  6307  0898  3003               	movlw	3
  6308  0899  00C3               	movwf	??_I2C_MasterTRBInsert
  6309  089A  0843               	movf	??_I2C_MasterTRBInsert,w
  6310  089B  07E1               	addwf	_i2c_object,f
  6311                           
  6312                           ;i2c.c: 659: if (i2c_object.pTrTail == (i2c_tr_queue + 1))
  6313  089C  0861               	movf	_i2c_object,w
  6314  089D  3A3D               	xorlw	(_i2c_tr_queue+3)& (0+255)
  6315  089E  1D03               	skipz
  6316  089F  28A4               	goto	l3171
  6317                           
  6318                           ;i2c.c: 660: {
  6319                           ;i2c.c: 662: i2c_object.pTrTail = i2c_tr_queue;
  6320  08A0  303A               	movlw	_i2c_tr_queue& (0+255)
  6321  08A1  00C3               	movwf	??_I2C_MasterTRBInsert
  6322  08A2  0843               	movf	??_I2C_MasterTRBInsert,w
  6323  08A3  00E1               	movwf	_i2c_object
  6324  08A4                     l3171:	
  6325                           
  6326                           ;i2c.c: 663: }
  6327                           ;i2c.c: 667: i2c_object.trStatus.s.empty = 0;
  6328  08A4  10E3               	bcf	_i2c_object+2,1
  6329                           
  6330                           ;i2c.c: 670: if (i2c_object.pTrHead == i2c_object.pTrTail)
  6331  08A5  0862               	movf	_i2c_object+1,w
  6332  08A6  0661               	xorwf	_i2c_object,w
  6333  08A7  1D03               	skipz
  6334  08A8  28B0               	goto	l347
  6335                           
  6336                           ;i2c.c: 671: {
  6337                           ;i2c.c: 673: i2c_object.trStatus.s.full = 1;
  6338  08A9  1463               	bsf	_i2c_object+2,0
  6339                           
  6340                           ;i2c.c: 674: }
  6341                           ;i2c.c: 676: }
  6342  08AA  28B0               	goto	l347
  6343  08AB                     l3175:	
  6344                           
  6345                           ;i2c.c: 677: else
  6346                           ;i2c.c: 678: {
  6347                           ;i2c.c: 679: *pflag = I2C_MESSAGE_FAIL;
  6348  08AB  0842               	movf	I2C_MasterTRBInsert@pflag,w
  6349  08AC  0086               	movwf	6
  6350  08AD  0187               	clrf	7
  6351  08AE  0181               	clrf	1
  6352  08AF  0A81               	incf	1,f
  6353  08B0                     l347:	
  6354                           
  6355                           ;i2c.c: 680: }
  6356                           ;i2c.c: 683: if (*pflag == I2C_MESSAGE_PENDING)
  6357  08B0  0842               	movf	I2C_MasterTRBInsert@pflag,w
  6358  08B1  0086               	movwf	6
  6359  08B2  0187               	clrf	7
  6360  08B3  0801               	movf	1,w
  6361  08B4  3A02               	xorlw	2
  6362  08B5  1D03               	skipz
  6363  08B6  0008               	return
  6364  08B7                     l3179:	
  6365                           ;i2c.c: 684: {
  6366                           ;i2c.c: 685: while(i2c_state != S_MASTER_IDLE);
  6367                           
  6368  08B7  08B2               	movf	_i2c_state,f
  6369  08B8  1D03               	skipz
  6370  08B9  28B7               	goto	l3179
  6371                           
  6372                           ;i2c.c: 686: {
  6373                           ;i2c.c: 689: PIR1bits.SSPIF = 1;
  6374  08BA  1591               	bsf	17,3	;volatile
  6375  08BB  0008               	return
  6376  08BC                     __end_of_I2C_MasterTRBInsert:	
  6377                           
  6378                           	psect	text12
  6379  16AA                     __ptext12:	
  6380 ;; *************** function _I2C_MasterReadTRBBuild *****************
  6381 ;; Defined at:
  6382 ;;		line 695 in file "mcc_generated_files/i2c.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  ptrb            1    wreg     PTR struct .
  6385 ;;		 -> I2C_MasterRead@trBlock(4), 
  6386 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  6387 ;;		 -> readValue(1), 
  6388 ;;  length          1    1[BANK0 ] unsigned char 
  6389 ;;  address         2    2[BANK0 ] unsigned int 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  ptrb            1    6[BANK0 ] PTR struct .
  6392 ;;		 -> I2C_MasterRead@trBlock(4), 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;		None               void
  6395 ;; Registers used:
  6396 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6402 ;;      Params:         0       4       0       0       0       0       0       0
  6403 ;;      Locals:         0       1       0       0       0       0       0       0
  6404 ;;      Temps:          0       2       0       0       0       0       0       0
  6405 ;;      Totals:         0       7       0       0       0       0       0       0
  6406 ;;Total ram usage:        7 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    4
  6409 ;; This function calls:
  6410 ;;		Nothing
  6411 ;; This function is called by:
  6412 ;;		_I2C_MasterRead
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           
  6417                           ;psect for function _I2C_MasterReadTRBBuild
  6418  16AA                     _I2C_MasterReadTRBBuild:	
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _I2C_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  6422                           ;I2C_MasterReadTRBBuild@ptrb stored from wreg
  6423  16AA  0020               	movlb	0	; select bank0
  6424  16AB  00C7               	movwf	I2C_MasterReadTRBBuild@ptrb
  6425                           
  6426                           ;i2c.c: 701: ptrb->address = address << 1;
  6427  16AC  0844               	movf	I2C_MasterReadTRBBuild@address+1,w
  6428  16AD  00C6               	movwf	??_I2C_MasterReadTRBBuild+1
  6429  16AE  0843               	movf	I2C_MasterReadTRBBuild@address,w
  6430  16AF  00C5               	movwf	??_I2C_MasterReadTRBBuild
  6431  16B0  35C5               	lslf	??_I2C_MasterReadTRBBuild,f
  6432  16B1  0DC6               	rlf	??_I2C_MasterReadTRBBuild+1,f
  6433  16B2  0847               	movf	I2C_MasterReadTRBBuild@ptrb,w
  6434  16B3  0086               	movwf	6
  6435  16B4  0187               	clrf	7
  6436  16B5  0845               	movf	??_I2C_MasterReadTRBBuild,w
  6437  16B6  3FC0               	movwi [0]fsr1
  6438  16B7  0846               	movf	??_I2C_MasterReadTRBBuild+1,w
  6439  16B8  3FC1               	movwi [1]fsr1
  6440                           
  6441                           ;i2c.c: 703: ptrb->address |= 0x01;
  6442  16B9  0847               	movf	I2C_MasterReadTRBBuild@ptrb,w
  6443  16BA  0086               	movwf	6
  6444  16BB  0187               	clrf	7
  6445  16BC  3001               	movlw	1
  6446  16BD  0481               	iorwf	1,f
  6447  16BE  3141               	addfsr 1,1
  6448  16BF  3000               	movlw	0
  6449  16C0  0481               	iorwf	1,f
  6450                           
  6451                           ;i2c.c: 704: ptrb->length = length;
  6452  16C1  0842               	movf	I2C_MasterReadTRBBuild@length,w
  6453  16C2  00C5               	movwf	??_I2C_MasterReadTRBBuild
  6454  16C3  0847               	movf	I2C_MasterReadTRBBuild@ptrb,w
  6455  16C4  3E02               	addlw	2
  6456  16C5  0086               	movwf	6
  6457  16C6  0187               	clrf	7
  6458  16C7  0845               	movf	??_I2C_MasterReadTRBBuild,w
  6459  16C8  0081               	movwf	1
  6460                           
  6461                           ;i2c.c: 705: ptrb->pbuffer = pdata;
  6462  16C9  0841               	movf	I2C_MasterReadTRBBuild@pdata,w
  6463  16CA  00C5               	movwf	??_I2C_MasterReadTRBBuild
  6464  16CB  0847               	movf	I2C_MasterReadTRBBuild@ptrb,w
  6465  16CC  3E03               	addlw	3
  6466  16CD  0086               	movwf	6
  6467  16CE  0187               	clrf	7
  6468  16CF  0845               	movf	??_I2C_MasterReadTRBBuild,w
  6469  16D0  0081               	movwf	1
  6470  16D1  0008               	return
  6471  16D2                     __end_of_I2C_MasterReadTRBBuild:	
  6472                           
  6473                           	psect	text13
  6474  0C65                     __ptext13:	
  6475 ;; *************** function _DisplayTemperature *****************
  6476 ;; Defined at:
  6477 ;;		line 159 in file "StateTemp.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  thermal         1    wreg     unsigned char 
  6480 ;;  type            1   22[BANK0 ] unsigned char 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  thermal         1   26[BANK0 ] unsigned char 
  6483 ;;  negValue        1   27[BANK0 ] volatile unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;		None               void
  6486 ;; Registers used:
  6487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6493 ;;      Params:         0       1       0       0       0       0       0       0
  6494 ;;      Locals:         0       2       0       0       0       0       0       0
  6495 ;;      Temps:          0       3       0       0       0       0       0       0
  6496 ;;      Totals:         0       6       0       0       0       0       0       0
  6497 ;;Total ram usage:        6 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    7
  6500 ;; This function calls:
  6501 ;;		_EUSART_Write
  6502 ;;		_LCDGoto
  6503 ;;		_LCDPutChar
  6504 ;;		_LCDPutStr
  6505 ;;		___awdiv
  6506 ;;		___awmod
  6507 ;;		___wmul
  6508 ;;		_printf
  6509 ;; This function is called by:
  6510 ;;		_StateTemperature
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           
  6515                           ;psect for function _DisplayTemperature
  6516  0C65                     _DisplayTemperature:	
  6517                           
  6518                           ;incstack = 0
  6519                           ; Regs used in _DisplayTemperature: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6520                           ;DisplayTemperature@thermal stored from wreg
  6521  0C65  0020               	movlb	0	; select bank0
  6522  0C66  00DB               	movwf	DisplayTemperature@thermal
  6523                           
  6524                           ;StateTemp.c: 161: volatile uint8_t negValue;
  6525                           ;StateTemp.c: 164: if (thermal >= 128)
  6526  0C67  3080               	movlw	128
  6527  0C68  025B               	subwf	DisplayTemperature@thermal,w
  6528  0C69  1C03               	skipc
  6529  0C6A  2C72               	goto	l4977
  6530                           
  6531                           ;StateTemp.c: 165: {
  6532                           ;StateTemp.c: 166: thermal = 256 - thermal;
  6533  0C6B  09DB               	comf	DisplayTemperature@thermal,f
  6534  0C6C  0ADB               	incf	DisplayTemperature@thermal,f
  6535                           
  6536                           ;StateTemp.c: 167: negValue = 1;
  6537  0C6D  3001               	movlw	1
  6538  0C6E  00D8               	movwf	??_DisplayTemperature
  6539  0C6F  0858               	movf	??_DisplayTemperature,w
  6540  0C70  00DC               	movwf	DisplayTemperature@negValue	;volatile
  6541                           
  6542                           ;StateTemp.c: 168: }
  6543  0C71  2C73               	goto	l4979
  6544  0C72                     l4977:	
  6545                           
  6546                           ;StateTemp.c: 172: negValue = 0;
  6547  0C72  01DC               	clrf	DisplayTemperature@negValue	;volatile
  6548  0C73                     l4979:	
  6549                           
  6550                           ;StateTemp.c: 173: }
  6551                           ;StateTemp.c: 176: if (type == 1)
  6552  0C73  0857               	movf	DisplayTemperature@type,w
  6553  0C74  3A01               	xorlw	1
  6554  0C75  1D03               	skipz
  6555  0C76  2CF4               	goto	l4999
  6556                           
  6557                           ;StateTemp.c: 177: {
  6558                           ;StateTemp.c: 178: if (negValue == 0)
  6559  0C77  08DC               	movf	DisplayTemperature@negValue,f	;volatile
  6560  0C78  1D03               	skipz
  6561  0C79  2C9D               	goto	l4985
  6562                           
  6563                           ;StateTemp.c: 179: {
  6564                           ;StateTemp.c: 180: thermal = (((thermal*9)/5)+32);
  6565  0C7A  3005               	movlw	5
  6566  0C7B  00C7               	movwf	___awdiv@divisor
  6567  0C7C  3000               	movlw	0
  6568  0C7D  00C8               	movwf	___awdiv@divisor+1
  6569  0C7E  085B               	movf	DisplayTemperature@thermal,w
  6570  0C7F  00D8               	movwf	??_DisplayTemperature
  6571  0C80  01D9               	clrf	??_DisplayTemperature+1
  6572  0C81  0858               	movf	??_DisplayTemperature,w
  6573  0C82  00C1               	movwf	___wmul@multiplier
  6574  0C83  0859               	movf	??_DisplayTemperature+1,w
  6575  0C84  00C2               	movwf	___wmul@multiplier+1
  6576  0C85  3009               	movlw	9
  6577  0C86  00C3               	movwf	___wmul@multiplicand
  6578  0C87  3000               	movlw	0
  6579  0C88  00C4               	movwf	___wmul@multiplicand+1
  6580  0C89  3195  2579  318C   	fcall	___wmul
  6581  0C8C  0020               	movlb	0	; select bank0
  6582  0C8D  0842               	movf	?___wmul+1,w
  6583  0C8E  01CA               	clrf	___awdiv@dividend+1
  6584  0C8F  07CA               	addwf	___awdiv@dividend+1,f
  6585  0C90  0841               	movf	?___wmul,w
  6586  0C91  01C9               	clrf	___awdiv@dividend
  6587  0C92  07C9               	addwf	___awdiv@dividend,f
  6588  0C93  3189  2199  318C   	fcall	___awdiv
  6589  0C96  0020               	movlb	0	; select bank0
  6590  0C97  0847               	movf	?___awdiv,w
  6591  0C98  3E20               	addlw	32
  6592  0C99  00DA               	movwf	??_DisplayTemperature+2
  6593  0C9A  085A               	movf	??_DisplayTemperature+2,w
  6594  0C9B  00DB               	movwf	DisplayTemperature@thermal
  6595                           
  6596                           ;StateTemp.c: 181: }
  6597  0C9C  2CF4               	goto	l4999
  6598  0C9D                     l4985:	
  6599                           
  6600                           ;StateTemp.c: 182: else if (negValue == 1)
  6601  0C9D  085C               	movf	DisplayTemperature@negValue,w	;volatile
  6602  0C9E  3A01               	xorlw	1
  6603  0C9F  1D03               	skipz
  6604  0CA0  2CF4               	goto	l4999
  6605                           
  6606                           ;StateTemp.c: 183: {
  6607                           ;StateTemp.c: 185: if (thermal < 18)
  6608  0CA1  3012               	movlw	18
  6609  0CA2  025B               	subwf	DisplayTemperature@thermal,w
  6610  0CA3  1803               	skipnc
  6611  0CA4  2CCE               	goto	l4995
  6612                           
  6613                           ;StateTemp.c: 186: {
  6614                           ;StateTemp.c: 187: thermal = (((thermal)*9)/5);
  6615  0CA5  3005               	movlw	5
  6616  0CA6  00C7               	movwf	___awdiv@divisor
  6617  0CA7  3000               	movlw	0
  6618  0CA8  00C8               	movwf	___awdiv@divisor+1
  6619  0CA9  085B               	movf	DisplayTemperature@thermal,w
  6620  0CAA  00D8               	movwf	??_DisplayTemperature
  6621  0CAB  01D9               	clrf	??_DisplayTemperature+1
  6622  0CAC  0858               	movf	??_DisplayTemperature,w
  6623  0CAD  00C1               	movwf	___wmul@multiplier
  6624  0CAE  0859               	movf	??_DisplayTemperature+1,w
  6625  0CAF  00C2               	movwf	___wmul@multiplier+1
  6626  0CB0  3009               	movlw	9
  6627  0CB1  00C3               	movwf	___wmul@multiplicand
  6628  0CB2  3000               	movlw	0
  6629  0CB3  00C4               	movwf	___wmul@multiplicand+1
  6630  0CB4  3195  2579  318C   	fcall	___wmul
  6631  0CB7  0020               	movlb	0	; select bank0
  6632  0CB8  0842               	movf	?___wmul+1,w
  6633  0CB9  01CA               	clrf	___awdiv@dividend+1
  6634  0CBA  07CA               	addwf	___awdiv@dividend+1,f
  6635  0CBB  0841               	movf	?___wmul,w
  6636  0CBC  01C9               	clrf	___awdiv@dividend
  6637  0CBD  07C9               	addwf	___awdiv@dividend,f
  6638  0CBE  3189  2199  318C   	fcall	___awdiv
  6639  0CC1  0020               	movlb	0	; select bank0
  6640  0CC2  0847               	movf	?___awdiv,w
  6641  0CC3  00DA               	movwf	??_DisplayTemperature+2
  6642  0CC4  085A               	movf	??_DisplayTemperature+2,w
  6643  0CC5  00DB               	movwf	DisplayTemperature@thermal
  6644                           
  6645                           ;StateTemp.c: 188: thermal = 32-thermal;
  6646  0CC6  035B               	decf	DisplayTemperature@thermal,w
  6647  0CC7  3AFF               	xorlw	255
  6648  0CC8  3E20               	addlw	32
  6649  0CC9  00D8               	movwf	??_DisplayTemperature
  6650  0CCA  0858               	movf	??_DisplayTemperature,w
  6651  0CCB  00DB               	movwf	DisplayTemperature@thermal
  6652                           
  6653                           ;StateTemp.c: 189: negValue = 0;
  6654  0CCC  01DC               	clrf	DisplayTemperature@negValue	;volatile
  6655                           
  6656                           ;StateTemp.c: 190: }
  6657  0CCD  2CF4               	goto	l4999
  6658  0CCE                     l4995:	
  6659                           
  6660                           ;StateTemp.c: 191: else
  6661                           ;StateTemp.c: 192: {
  6662                           ;StateTemp.c: 193: thermal = ((((thermal)*9)/5)-32);
  6663  0CCE  3005               	movlw	5
  6664  0CCF  00C7               	movwf	___awdiv@divisor
  6665  0CD0  3000               	movlw	0
  6666  0CD1  00C8               	movwf	___awdiv@divisor+1
  6667  0CD2  085B               	movf	DisplayTemperature@thermal,w
  6668  0CD3  00D8               	movwf	??_DisplayTemperature
  6669  0CD4  01D9               	clrf	??_DisplayTemperature+1
  6670  0CD5  0858               	movf	??_DisplayTemperature,w
  6671  0CD6  00C1               	movwf	___wmul@multiplier
  6672  0CD7  0859               	movf	??_DisplayTemperature+1,w
  6673  0CD8  00C2               	movwf	___wmul@multiplier+1
  6674  0CD9  3009               	movlw	9
  6675  0CDA  00C3               	movwf	___wmul@multiplicand
  6676  0CDB  3000               	movlw	0
  6677  0CDC  00C4               	movwf	___wmul@multiplicand+1
  6678  0CDD  3195  2579  318C   	fcall	___wmul
  6679  0CE0  0020               	movlb	0	; select bank0
  6680  0CE1  0842               	movf	?___wmul+1,w
  6681  0CE2  01CA               	clrf	___awdiv@dividend+1
  6682  0CE3  07CA               	addwf	___awdiv@dividend+1,f
  6683  0CE4  0841               	movf	?___wmul,w
  6684  0CE5  01C9               	clrf	___awdiv@dividend
  6685  0CE6  07C9               	addwf	___awdiv@dividend,f
  6686  0CE7  3189  2199  318C   	fcall	___awdiv
  6687  0CEA  0020               	movlb	0	; select bank0
  6688  0CEB  0847               	movf	?___awdiv,w
  6689  0CEC  3EE0               	addlw	224
  6690  0CED  00DA               	movwf	??_DisplayTemperature+2
  6691  0CEE  085A               	movf	??_DisplayTemperature+2,w
  6692  0CEF  00DB               	movwf	DisplayTemperature@thermal
  6693                           
  6694                           ;StateTemp.c: 194: negValue = 1;
  6695  0CF0  3001               	movlw	1
  6696  0CF1  00D8               	movwf	??_DisplayTemperature
  6697  0CF2  0858               	movf	??_DisplayTemperature,w
  6698  0CF3  00DC               	movwf	DisplayTemperature@negValue	;volatile
  6699  0CF4                     l4999:	
  6700                           ;StateTemp.c: 195: }
  6701                           ;StateTemp.c: 196: }
  6702                           ;StateTemp.c: 197: }
  6703                           ;StateTemp.c: 200: do { LCDGoto(0,0); LCDPutStr("Temp = "); if (negValue == 1) { LCDPutC
      +                          har('-'); } else { if (!(thermal/100)) { LCDPutChar(' '); } else { LCDPutChar(thermal/10
      +                          0+'0'); } } LCDPutChar(thermal/10+'0'); LCDPutChar(thermal % 10+'0'); LCDPutChar(223); i
      +                          f (ty
  6704                           
  6705  0CF4  01C8               	clrf	LCDGoto@ln
  6706  0CF5  3000               	movlw	0
  6707  0CF6  3196  261A  318C   	fcall	_LCDGoto
  6708  0CF9  3008               	movlw	low ((STR_109+2)| (0+32768))
  6709  0CFA  0020               	movlb	0	; select bank0
  6710  0CFB  00C8               	movwf	LCDPutStr@str
  6711  0CFC  3091               	movlw	high ((STR_109+2)| (0+32768))
  6712  0CFD  00C9               	movwf	LCDPutStr@str+1
  6713  0CFE  3196  2684  318C   	fcall	_LCDPutStr
  6714  0D01  0020               	movlb	0	; select bank0
  6715  0D02  085C               	movf	DisplayTemperature@negValue,w	;volatile
  6716  0D03  3A01               	xorlw	1
  6717  0D04  1D03               	skipz
  6718  0D05  2D08               	goto	l5007
  6719  0D06  302D               	movlw	45
  6720  0D07  2D30               	goto	L1
  6721  0D08                     l5007:	
  6722  0D08  3064               	movlw	100
  6723  0D09  0020               	movlb	0	; select bank0
  6724  0D0A  00C7               	movwf	___awdiv@divisor
  6725  0D0B  3000               	movlw	0
  6726  0D0C  00C8               	movwf	___awdiv@divisor+1
  6727  0D0D  085B               	movf	DisplayTemperature@thermal,w
  6728  0D0E  00D8               	movwf	??_DisplayTemperature
  6729  0D0F  01D9               	clrf	??_DisplayTemperature+1
  6730  0D10  0858               	movf	??_DisplayTemperature,w
  6731  0D11  00C9               	movwf	___awdiv@dividend
  6732  0D12  0859               	movf	??_DisplayTemperature+1,w
  6733  0D13  00CA               	movwf	___awdiv@dividend+1
  6734  0D14  3189  2199  318C   	fcall	___awdiv
  6735  0D17  0020               	movlb	0	; select bank0
  6736  0D18  0848               	movf	?___awdiv+1,w
  6737  0D19  0447               	iorwf	?___awdiv,w
  6738  0D1A  1D03               	skipz
  6739  0D1B  2D1E               	goto	l5011
  6740  0D1C  3020               	movlw	32
  6741  0D1D  2D30               	goto	L1
  6742  0D1E                     l5011:	
  6743  0D1E  3064               	movlw	100
  6744  0D1F  0020               	movlb	0	; select bank0
  6745  0D20  00C7               	movwf	___awdiv@divisor
  6746  0D21  3000               	movlw	0
  6747  0D22  00C8               	movwf	___awdiv@divisor+1
  6748  0D23  085B               	movf	DisplayTemperature@thermal,w
  6749  0D24  00D8               	movwf	??_DisplayTemperature
  6750  0D25  01D9               	clrf	??_DisplayTemperature+1
  6751  0D26  0858               	movf	??_DisplayTemperature,w
  6752  0D27  00C9               	movwf	___awdiv@dividend
  6753  0D28  0859               	movf	??_DisplayTemperature+1,w
  6754  0D29  00CA               	movwf	___awdiv@dividend+1
  6755  0D2A  3189  2199  318C   	fcall	___awdiv
  6756  0D2D  0020               	movlb	0	; select bank0
  6757  0D2E  0847               	movf	?___awdiv,w
  6758  0D2F  3E30               	addlw	48
  6759  0D30                     L1:	
  6760  0D30  3196  263D  318C   	fcall	_LCDPutChar
  6761  0D33  300A               	movlw	10
  6762  0D34  0020               	movlb	0	; select bank0
  6763  0D35  00C7               	movwf	___awdiv@divisor
  6764  0D36  3000               	movlw	0
  6765  0D37  00C8               	movwf	___awdiv@divisor+1
  6766  0D38  085B               	movf	DisplayTemperature@thermal,w
  6767  0D39  00D8               	movwf	??_DisplayTemperature
  6768  0D3A  01D9               	clrf	??_DisplayTemperature+1
  6769  0D3B  0858               	movf	??_DisplayTemperature,w
  6770  0D3C  00C9               	movwf	___awdiv@dividend
  6771  0D3D  0859               	movf	??_DisplayTemperature+1,w
  6772  0D3E  00CA               	movwf	___awdiv@dividend+1
  6773  0D3F  3189  2199  318C   	fcall	___awdiv
  6774  0D42  0020               	movlb	0	; select bank0
  6775  0D43  0847               	movf	?___awdiv,w
  6776  0D44  3E30               	addlw	48
  6777  0D45  3196  263D  318C   	fcall	_LCDPutChar
  6778  0D48  300A               	movlw	10
  6779  0D49  0020               	movlb	0	; select bank0
  6780  0D4A  00D0               	movwf	___awmod@divisor
  6781  0D4B  3000               	movlw	0
  6782  0D4C  00D1               	movwf	___awmod@divisor+1
  6783  0D4D  085B               	movf	DisplayTemperature@thermal,w
  6784  0D4E  00D8               	movwf	??_DisplayTemperature
  6785  0D4F  01D9               	clrf	??_DisplayTemperature+1
  6786  0D50  0858               	movf	??_DisplayTemperature,w
  6787  0D51  00D2               	movwf	___awmod@dividend
  6788  0D52  0859               	movf	??_DisplayTemperature+1,w
  6789  0D53  00D3               	movwf	___awmod@dividend+1
  6790  0D54  3188  20BC  318C   	fcall	___awmod
  6791  0D57  0020               	movlb	0	; select bank0
  6792  0D58  0850               	movf	?___awmod,w
  6793  0D59  3E30               	addlw	48
  6794  0D5A  3196  263D  318C   	fcall	_LCDPutChar
  6795  0D5D  30DF               	movlw	223
  6796  0D5E  3196  263D  318C   	fcall	_LCDPutChar
  6797  0D61  0020               	movlb	0	; select bank0
  6798  0D62  0857               	movf	DisplayTemperature@type,w
  6799  0D63  3A01               	xorlw	1
  6800  0D64  1D03               	skipz
  6801  0D65  2D6A               	goto	l5017
  6802  0D66  303A               	movlw	low (STR_105| (0+32768))
  6803  0D67  00C8               	movwf	LCDPutStr@str
  6804  0D68  3091               	movlw	high (STR_105| (0+32768))
  6805  0D69  2D71               	goto	L2
  6806  0D6A                     l5017:	
  6807  0D6A  0020               	movlb	0	; select bank0
  6808  0D6B  08D7               	movf	DisplayTemperature@type,f
  6809  0D6C  1D03               	skipz
  6810  0D6D  2D75               	goto	l5021
  6811  0D6E  3033               	movlw	low (STR_106| (0+32768))
  6812  0D6F  00C8               	movwf	LCDPutStr@str
  6813  0D70  3091               	movlw	high (STR_106| (0+32768))
  6814  0D71                     L2:	
  6815  0D71  00C9               	movwf	LCDPutStr@str+1
  6816  0D72  3196  2684  318C   	fcall	_LCDPutStr
  6817  0D75                     l5021:	
  6818  0D75  0020               	movlb	0	; select bank0
  6819  0D76  01C8               	clrf	LCDGoto@ln
  6820  0D77  0AC8               	incf	LCDGoto@ln,f
  6821  0D78  3000               	movlw	0
  6822  0D79  3196  261A  318C   	fcall	_LCDGoto
  6823  0D7C  0020               	movlb	0	; select bank0
  6824  0D7D  0857               	movf	DisplayTemperature@type,w
  6825  0D7E  3A01               	xorlw	1
  6826  0D7F  1D03               	skipz
  6827  0D80  2D85               	goto	l5027
  6828  0D81  3000               	movlw	low (STR_107| (0+32768))
  6829  0D82  00C8               	movwf	LCDPutStr@str
  6830  0D83  3090               	movlw	high (STR_107| (0+32768))
  6831  0D84  2D8C               	goto	L3
  6832  0D85                     l5027:	
  6833  0D85  0020               	movlb	0	; select bank0
  6834  0D86  08D7               	movf	DisplayTemperature@type,f
  6835  0D87  1D03               	skipz
  6836  0D88  2D90               	goto	l5031
  6837  0D89  3011               	movlw	low (STR_108| (0+32768))
  6838  0D8A  00C8               	movwf	LCDPutStr@str
  6839  0D8B  3090               	movlw	high (STR_108| (0+32768))
  6840  0D8C                     L3:	
  6841  0D8C  00C9               	movwf	LCDPutStr@str+1
  6842  0D8D  3196  2684  318C   	fcall	_LCDPutStr
  6843  0D90                     l5031:	
  6844                           ;StateTemp.c: 203: do { printf("\n\rTemp = "); if (negValue == 1) { EUSART_Write('-'); }
      +                           else { if (!(thermal/100)) { EUSART_Write(' '); } else { EUSART_Write(thermal/100+'0');
      +                           } } EUSART_Write(thermal/10+'0'); EUSART_Write(thermal % 10+'0'); EUSART_Write(248); if
      +                           (typ
  6845                           
  6846  0D90  3006               	movlw	low (STR_109| (0+32768))
  6847  0D91  0020               	movlb	0	; select bank0
  6848  0D92  00C4               	movwf	printf@f
  6849  0D93  3091               	movlw	high (STR_109| (0+32768))
  6850  0D94  00C5               	movwf	printf@f+1
  6851  0D95  3195  2505  318C   	fcall	_printf
  6852  0D98  0020               	movlb	0	; select bank0
  6853  0D99  085C               	movf	DisplayTemperature@negValue,w	;volatile
  6854  0D9A  3A01               	xorlw	1
  6855  0D9B  1D03               	skipz
  6856  0D9C  2D9F               	goto	l5037
  6857  0D9D  302D               	movlw	45
  6858  0D9E  2DC7               	goto	L4
  6859  0D9F                     l5037:	
  6860  0D9F  3064               	movlw	100
  6861  0DA0  0020               	movlb	0	; select bank0
  6862  0DA1  00C7               	movwf	___awdiv@divisor
  6863  0DA2  3000               	movlw	0
  6864  0DA3  00C8               	movwf	___awdiv@divisor+1
  6865  0DA4  085B               	movf	DisplayTemperature@thermal,w
  6866  0DA5  00D8               	movwf	??_DisplayTemperature
  6867  0DA6  01D9               	clrf	??_DisplayTemperature+1
  6868  0DA7  0858               	movf	??_DisplayTemperature,w
  6869  0DA8  00C9               	movwf	___awdiv@dividend
  6870  0DA9  0859               	movf	??_DisplayTemperature+1,w
  6871  0DAA  00CA               	movwf	___awdiv@dividend+1
  6872  0DAB  3189  2199  318C   	fcall	___awdiv
  6873  0DAE  0020               	movlb	0	; select bank0
  6874  0DAF  0848               	movf	?___awdiv+1,w
  6875  0DB0  0447               	iorwf	?___awdiv,w
  6876  0DB1  1D03               	skipz
  6877  0DB2  2DB5               	goto	l5041
  6878  0DB3  3020               	movlw	32
  6879  0DB4  2DC7               	goto	L4
  6880  0DB5                     l5041:	
  6881  0DB5  3064               	movlw	100
  6882  0DB6  0020               	movlb	0	; select bank0
  6883  0DB7  00C7               	movwf	___awdiv@divisor
  6884  0DB8  3000               	movlw	0
  6885  0DB9  00C8               	movwf	___awdiv@divisor+1
  6886  0DBA  085B               	movf	DisplayTemperature@thermal,w
  6887  0DBB  00D8               	movwf	??_DisplayTemperature
  6888  0DBC  01D9               	clrf	??_DisplayTemperature+1
  6889  0DBD  0858               	movf	??_DisplayTemperature,w
  6890  0DBE  00C9               	movwf	___awdiv@dividend
  6891  0DBF  0859               	movf	??_DisplayTemperature+1,w
  6892  0DC0  00CA               	movwf	___awdiv@dividend+1
  6893  0DC1  3189  2199  318C   	fcall	___awdiv
  6894  0DC4  0020               	movlb	0	; select bank0
  6895  0DC5  0847               	movf	?___awdiv,w
  6896  0DC6  3E30               	addlw	48
  6897  0DC7                     L4:	
  6898  0DC7  3196  2660  318C   	fcall	_EUSART_Write
  6899  0DCA  300A               	movlw	10
  6900  0DCB  0020               	movlb	0	; select bank0
  6901  0DCC  00C7               	movwf	___awdiv@divisor
  6902  0DCD  3000               	movlw	0
  6903  0DCE  00C8               	movwf	___awdiv@divisor+1
  6904  0DCF  085B               	movf	DisplayTemperature@thermal,w
  6905  0DD0  00D8               	movwf	??_DisplayTemperature
  6906  0DD1  01D9               	clrf	??_DisplayTemperature+1
  6907  0DD2  0858               	movf	??_DisplayTemperature,w
  6908  0DD3  00C9               	movwf	___awdiv@dividend
  6909  0DD4  0859               	movf	??_DisplayTemperature+1,w
  6910  0DD5  00CA               	movwf	___awdiv@dividend+1
  6911  0DD6  3189  2199  318C   	fcall	___awdiv
  6912  0DD9  0020               	movlb	0	; select bank0
  6913  0DDA  0847               	movf	?___awdiv,w
  6914  0DDB  3E30               	addlw	48
  6915  0DDC  3196  2660  318C   	fcall	_EUSART_Write
  6916  0DDF  300A               	movlw	10
  6917  0DE0  0020               	movlb	0	; select bank0
  6918  0DE1  00D0               	movwf	___awmod@divisor
  6919  0DE2  3000               	movlw	0
  6920  0DE3  00D1               	movwf	___awmod@divisor+1
  6921  0DE4  085B               	movf	DisplayTemperature@thermal,w
  6922  0DE5  00D8               	movwf	??_DisplayTemperature
  6923  0DE6  01D9               	clrf	??_DisplayTemperature+1
  6924  0DE7  0858               	movf	??_DisplayTemperature,w
  6925  0DE8  00D2               	movwf	___awmod@dividend
  6926  0DE9  0859               	movf	??_DisplayTemperature+1,w
  6927  0DEA  00D3               	movwf	___awmod@dividend+1
  6928  0DEB  3188  20BC  318C   	fcall	___awmod
  6929  0DEE  0020               	movlb	0	; select bank0
  6930  0DEF  0850               	movf	?___awmod,w
  6931  0DF0  3E30               	addlw	48
  6932  0DF1  3196  2660  318C   	fcall	_EUSART_Write
  6933  0DF4  30F8               	movlw	248
  6934  0DF5  3196  2660  318C   	fcall	_EUSART_Write
  6935  0DF8  0020               	movlb	0	; select bank0
  6936  0DF9  0857               	movf	DisplayTemperature@type,w
  6937  0DFA  3A01               	xorlw	1
  6938  0DFB  1D03               	skipz
  6939  0DFC  2E04               	goto	l5047
  6940  0DFD  303A               	movlw	low (STR_105| (0+32768))
  6941  0DFE  00C4               	movwf	printf@f
  6942  0DFF  3091               	movlw	high (STR_105| (0+32768))
  6943  0E00  00C5               	movwf	printf@f+1
  6944  0E01  3195  2505         	fcall	_printf
  6945  0E03  0008               	return
  6946  0E04                     l5047:	
  6947  0E04  0020               	movlb	0	; select bank0
  6948  0E05  08D7               	movf	DisplayTemperature@type,f
  6949  0E06  1D03               	skipz
  6950  0E07  0008               	return
  6951  0E08  3033               	movlw	low (STR_106| (0+32768))
  6952  0E09  00C4               	movwf	printf@f
  6953  0E0A  3091               	movlw	high (STR_106| (0+32768))
  6954  0E0B  00C5               	movwf	printf@f+1
  6955  0E0C  3195  2505         	fcall	_printf
  6956  0E0E  0008               	return
  6957  0E0F                     __end_of_DisplayTemperature:	
  6958                           
  6959                           	psect	text14
  6960  1579                     __ptext14:	
  6961 ;; *************** function ___wmul *****************
  6962 ;; Defined at:
  6963 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6966 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  product         2    4[BANK0 ] unsigned int 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  2    0[BANK0 ] unsigned int 
  6971 ;; Registers used:
  6972 ;;		wreg, status,2, status,0
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6978 ;;      Params:         0       4       0       0       0       0       0       0
  6979 ;;      Locals:         0       2       0       0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0
  6981 ;;      Totals:         0       6       0       0       0       0       0       0
  6982 ;;Total ram usage:        6 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    4
  6985 ;; This function calls:
  6986 ;;		Nothing
  6987 ;; This function is called by:
  6988 ;;		_DisplayVoltage
  6989 ;;		_DisplayTemperature
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function ___wmul
  6995  1579                     ___wmul:	
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6999  1579  0020               	movlb	0	; select bank0
  7000  157A  01C5               	clrf	___wmul@product
  7001  157B  01C6               	clrf	___wmul@product+1
  7002  157C                     l4551:	
  7003  157C  1C41               	btfss	___wmul@multiplier,0
  7004  157D  2D82               	goto	l1140
  7005  157E  0843               	movf	___wmul@multiplicand,w
  7006  157F  07C5               	addwf	___wmul@product,f
  7007  1580  0844               	movf	___wmul@multiplicand+1,w
  7008  1581  3DC6               	addwfc	___wmul@product+1,f
  7009  1582                     l1140:	
  7010  1582  3001               	movlw	1
  7011  1583                     u3865:	
  7012  1583  35C3               	lslf	___wmul@multiplicand,f
  7013  1584  0DC4               	rlf	___wmul@multiplicand+1,f
  7014  1585  0B89               	decfsz	9,f
  7015  1586  2D83               	goto	u3865
  7016  1587  3001               	movlw	1
  7017  1588                     u3875:	
  7018  1588  36C2               	lsrf	___wmul@multiplier+1,f
  7019  1589  0CC1               	rrf	___wmul@multiplier,f
  7020  158A  0B89               	decfsz	9,f
  7021  158B  2D88               	goto	u3875
  7022  158C  0842               	movf	___wmul@multiplier+1,w
  7023  158D  0441               	iorwf	___wmul@multiplier,w
  7024  158E  1D03               	skipz
  7025  158F  2D7C               	goto	l4551
  7026  1590  0846               	movf	___wmul@product+1,w
  7027  1591  01C2               	clrf	?___wmul+1
  7028  1592  07C2               	addwf	?___wmul+1,f
  7029  1593  0845               	movf	___wmul@product,w
  7030  1594  01C1               	clrf	?___wmul
  7031  1595  07C1               	addwf	?___wmul,f
  7032  1596  0008               	return
  7033  1597                     __end_of___wmul:	
  7034                           
  7035                           	psect	text15
  7036  153F                     __ptext15:	
  7037 ;; *************** function _DisplayTempMenu *****************
  7038 ;; Defined at:
  7039 ;;		line 150 in file "StateTemp.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;		None
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;		None
  7044 ;; Return value:  Size  Location     Type
  7045 ;;		None               void
  7046 ;; Registers used:
  7047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7053 ;;      Params:         0       0       0       0       0       0       0       0
  7054 ;;      Locals:         0       0       0       0       0       0       0       0
  7055 ;;      Temps:          0       0       0       0       0       0       0       0
  7056 ;;      Totals:         0       0       0       0       0       0       0       0
  7057 ;;Total ram usage:        0 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    7
  7060 ;; This function calls:
  7061 ;;		_LCDGoto
  7062 ;;		_LCDPutStr
  7063 ;; This function is called by:
  7064 ;;		_StateTemperature
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           
  7069                           ;psect for function _DisplayTempMenu
  7070  153F                     _DisplayTempMenu:	
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in _DisplayTempMenu: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7074                           ;StateTemp.c: 153: do { LCDGoto(0,0); LCDPutStr("  Temperature"); }while (0);;
  7075  153F  0020               	movlb	0	; select bank0
  7076  1540  01C8               	clrf	LCDGoto@ln
  7077  1541  3000               	movlw	0
  7078  1542  3196  261A  3195   	fcall	_LCDGoto
  7079  1545  30A4               	movlw	low (STR_102| (0+32768))
  7080  1546  0020               	movlb	0	; select bank0
  7081  1547  00C8               	movwf	LCDPutStr@str
  7082  1548  3090               	movlw	high (STR_102| (0+32768))
  7083  1549  00C9               	movwf	LCDPutStr@str+1
  7084  154A  3196  2684  3195   	fcall	_LCDPutStr
  7085                           
  7086                           ;StateTemp.c: 156: do { LCDGoto(0,1); LCDPutStr("RA4=Next RB0=Now"); } while (0);;
  7087  154D  0020               	movlb	0	; select bank0
  7088  154E  01C8               	clrf	LCDGoto@ln
  7089  154F  0AC8               	incf	LCDGoto@ln,f
  7090  1550  3000               	movlw	0
  7091  1551  3196  261A  3195   	fcall	_LCDGoto
  7092  1554  3055               	movlw	low (STR_4| (0+32768))
  7093  1555  0020               	movlb	0	; select bank0
  7094  1556  00C8               	movwf	LCDPutStr@str
  7095  1557  3090               	movlw	high (STR_4| (0+32768))
  7096  1558  00C9               	movwf	LCDPutStr@str+1
  7097  1559  3196  2684         	fcall	_LCDPutStr
  7098  155B  0008               	return
  7099  155C                     __end_of_DisplayTempMenu:	
  7100                           
  7101                           	psect	text16
  7102  1357                     __ptext16:	
  7103 ;; *************** function _StateInitial *****************
  7104 ;; Defined at:
  7105 ;;		line 54 in file "StateInitial.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;		None
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;		None
  7110 ;; Return value:  Size  Location     Type
  7111 ;;		None               void
  7112 ;; Registers used:
  7113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7119 ;;      Params:         0       0       0       0       0       0       0       0
  7120 ;;      Locals:         0       0       0       0       0       0       0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0       0
  7122 ;;      Totals:         0       0       0       0       0       0       0       0
  7123 ;;Total ram usage:        0 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    8
  7126 ;; This function calls:
  7127 ;;		_DisplaySplashText
  7128 ;;		_LCDPutCmd
  7129 ;;		_Wait2s
  7130 ;; This function is called by:
  7131 ;;		_main
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           
  7136                           ;psect for function _StateInitial
  7137  1357                     _StateInitial:	
  7138                           
  7139                           ;StateInitial.c: 57: DisplaySplashText();
  7140                           
  7141                           ;incstack = 0
  7142                           ; Regs used in _StateInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7143  1357  3194  2478  3193   	fcall	_DisplaySplashText
  7144                           
  7145                           ;StateInitial.c: 60: Wait2s();
  7146  135A  3193  234E  3193   	fcall	_Wait2s
  7147                           
  7148                           ;StateInitial.c: 63: LCDPutCmd(0x01);
  7149  135D  3001               	movlw	1
  7150  135E  3196  26FB         	fcall	_LCDPutCmd
  7151  1360  0008               	return
  7152  1361                     __end_of_StateInitial:	
  7153                           
  7154                           	psect	text17
  7155  134E                     __ptext17:	
  7156 ;; *************** function _Wait2s *****************
  7157 ;; Defined at:
  7158 ;;		line 75 in file "StateInitial.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;		None
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;		None               void
  7165 ;; Registers used:
  7166 ;;		wreg, status,2, status,0
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7172 ;;      Params:         0       0       0       0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0       0
  7174 ;;      Temps:          0       1       0       0       0       0       0       0
  7175 ;;      Totals:         0       1       0       0       0       0       0       0
  7176 ;;Total ram usage:        1 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    4
  7179 ;; This function calls:
  7180 ;;		Nothing
  7181 ;; This function is called by:
  7182 ;;		_StateInitial
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           
  7187                           ;psect for function _Wait2s
  7188  134E                     _Wait2s:	
  7189                           
  7190                           ;StateInitial.c: 77: tmrCount = 50;
  7191                           
  7192                           ;incstack = 0
  7193                           ; Regs used in _Wait2s: [wreg+status,2+status,0]
  7194  134E  3032               	movlw	50
  7195  134F  0020               	movlb	0	; select bank0
  7196  1350  00C1               	movwf	??_Wait2s
  7197  1351  0841               	movf	??_Wait2s,w
  7198  1352  00F4               	movwf	_tmrCount
  7199  1353                     l3535:	
  7200                           ;StateInitial.c: 81: {
  7201                           ;StateInitial.c: 82: ;
  7202                           
  7203                           ;StateInitial.c: 80: while(tmrCount)
  7204                           
  7205  1353  08F4               	movf	_tmrCount,f
  7206  1354  1903               	btfsc	3,2
  7207  1355  0008               	return
  7208  1356  2B53               	goto	l3535
  7209  1357                     __end_of_Wait2s:	
  7210                           
  7211                           	psect	text18
  7212  1478                     __ptext18:	
  7213 ;; *************** function _DisplaySplashText *****************
  7214 ;; Defined at:
  7215 ;;		line 66 in file "StateInitial.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;		None
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;		None
  7220 ;; Return value:  Size  Location     Type
  7221 ;;		None               void
  7222 ;; Registers used:
  7223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7229 ;;      Params:         0       0       0       0       0       0       0       0
  7230 ;;      Locals:         0       0       0       0       0       0       0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0       0
  7232 ;;      Totals:         0       0       0       0       0       0       0       0
  7233 ;;Total ram usage:        0 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    7
  7236 ;; This function calls:
  7237 ;;		_LCDGoto
  7238 ;;		_LCDPutCmd
  7239 ;;		_LCDPutStr
  7240 ;; This function is called by:
  7241 ;;		_StateInitial
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           
  7246                           ;psect for function _DisplaySplashText
  7247  1478                     _DisplaySplashText:	
  7248                           
  7249                           ;StateInitial.c: 69: LCDPutCmd(0x01);
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _DisplaySplashText: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7253  1478  3001               	movlw	1
  7254  1479  3196  26FB  3194   	fcall	_LCDPutCmd
  7255                           
  7256                           ;StateInitial.c: 72: do { LCDPutStr("   Microchip"); LCDGoto(0,1); LCDPutStr(" PICDEM 2 
      +                          PLUS"); }while (0);;
  7257  147C  30BF               	movlw	low (STR_1| (0+32768))
  7258  147D  0020               	movlb	0	; select bank0
  7259  147E  00C8               	movwf	LCDPutStr@str
  7260  147F  3090               	movlw	high (STR_1| (0+32768))
  7261  1480  00C9               	movwf	LCDPutStr@str+1
  7262  1481  3196  2684  3194   	fcall	_LCDPutStr
  7263  1484  0020               	movlb	0	; select bank0
  7264  1485  01C8               	clrf	LCDGoto@ln
  7265  1486  0AC8               	incf	LCDGoto@ln,f
  7266  1487  3000               	movlw	0
  7267  1488  3196  261A  3194   	fcall	_LCDGoto
  7268  148B  3095               	movlw	low (STR_2| (0+32768))
  7269  148C  0020               	movlb	0	; select bank0
  7270  148D  00C8               	movwf	LCDPutStr@str
  7271  148E  3090               	movlw	high (STR_2| (0+32768))
  7272  148F  00C9               	movwf	LCDPutStr@str+1
  7273  1490  3196  2684         	fcall	_LCDPutStr
  7274  1492  0008               	return
  7275  1493                     __end_of_DisplaySplashText:	
  7276                           
  7277                           	psect	text19
  7278  17A3                     __ptext19:	
  7279 ;; *************** function _StateClock *****************
  7280 ;; Defined at:
  7281 ;;		line 59 in file "StateRTC.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;		None
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;		None
  7286 ;; Return value:  Size  Location     Type
  7287 ;;		None               void
  7288 ;; Registers used:
  7289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7295 ;;      Params:         0       0       0       0       0       0       0       0
  7296 ;;      Locals:         0       0       0       0       0       0       0       0
  7297 ;;      Temps:          0       0       0       0       0       0       0       0
  7298 ;;      Totals:         0       0       0       0       0       0       0       0
  7299 ;;Total ram usage:        0 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    8
  7302 ;; This function calls:
  7303 ;;		_DisplayClockMenu
  7304 ;;		_DisplayTime
  7305 ;;		_LCDPutCmd
  7306 ;;		_StateClockSet
  7307 ;;		_TMR1_StartTimer
  7308 ;; This function is called by:
  7309 ;;		_main
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           
  7314                           ;psect for function _StateClock
  7315  17A3                     _StateClock:	
  7316                           
  7317                           ;StateRTC.c: 62: DisplayClockMenu();
  7318                           
  7319                           ;incstack = 0
  7320                           ; Regs used in _StateClock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7321  17A3  3195  2522  3197   	fcall	_DisplayClockMenu
  7322  17A6  2FAC               	goto	l5181
  7323  17A7                     l5183:	
  7324                           
  7325                           ;StateRTC.c: 68: {
  7326                           ;StateRTC.c: 70: Buttons.But1Pressed = 0;
  7327  17A7  103D               	bcf	_Buttons,0
  7328                           
  7329                           ;StateRTC.c: 73: LCDPutCmd(0x01);
  7330  17A8  3001               	movlw	1
  7331  17A9  3196  26FB         	fcall	_LCDPutCmd
  7332                           
  7333                           ;StateRTC.c: 76: return;
  7334  17AB  0008               	return
  7335  17AC                     l5181:	
  7336                           ;StateRTC.c: 64: while (1)
  7337                           
  7338                           ;StateRTC.c: 77: }
  7339                           
  7340                           
  7341                           ;StateRTC.c: 65: {
  7342                           ;StateRTC.c: 67: if((Buttons.But1Pressed))
  7343  17AC  0020               	movlb	0	; select bank0
  7344  17AD  183D               	btfsc	_Buttons,0
  7345  17AE  2FA7               	goto	l5183
  7346                           
  7347                           ;StateRTC.c: 80: else if((Buttons.But2Pressed))
  7348  17AF  1CBD               	btfss	_Buttons,1
  7349  17B0  2FAC               	goto	l5181
  7350                           
  7351                           ;StateRTC.c: 81: {
  7352                           ;StateRTC.c: 83: Buttons.But2Pressed = 0;
  7353  17B1  10BD               	bcf	_Buttons,1
  7354                           
  7355                           ;StateRTC.c: 86: TMR1_StartTimer();
  7356  17B2  3193  2312  3197   	fcall	_TMR1_StartTimer
  7357  17B5  2FBC               	goto	l5195
  7358  17B6                     l5199:	
  7359                           
  7360                           ;StateRTC.c: 95: {
  7361                           ;StateRTC.c: 97: Buttons.But2Pressed = 0;
  7362  17B6  10BD               	bcf	_Buttons,1
  7363                           
  7364                           ;StateRTC.c: 100: LCDPutCmd(0x01);
  7365  17B7  3001               	movlw	1
  7366  17B8  3196  26FB  3197   	fcall	_LCDPutCmd
  7367                           
  7368                           ;StateRTC.c: 103: break;
  7369  17BB  2FCD               	goto	l5211
  7370  17BC                     l5195:	
  7371                           ;StateRTC.c: 88: while (1)
  7372                           
  7373                           ;StateRTC.c: 104: }
  7374                           
  7375                           
  7376                           ;StateRTC.c: 89: {
  7377                           ;StateRTC.c: 91: DisplayTime();
  7378  17BC  3189  21ED  3197   	fcall	_DisplayTime
  7379                           
  7380                           ;StateRTC.c: 94: if((Buttons.But2Pressed))
  7381  17BF  0020               	movlb	0	; select bank0
  7382  17C0  18BD               	btfsc	_Buttons,1
  7383  17C1  2FB6               	goto	l5199
  7384                           
  7385                           ;StateRTC.c: 107: else if((Buttons.But1Pressed))
  7386  17C2  1C3D               	btfss	_Buttons,0
  7387  17C3  2FBC               	goto	l5195
  7388                           
  7389                           ;StateRTC.c: 108: {
  7390                           ;StateRTC.c: 110: Buttons.But1Pressed = 0;
  7391  17C4  103D               	bcf	_Buttons,0
  7392                           
  7393                           ;StateRTC.c: 113: StateClockSet();
  7394  17C5  3185  2514  3197   	fcall	_StateClockSet
  7395                           
  7396                           ;StateRTC.c: 116: LCDPutCmd(0x01);
  7397  17C8  3001               	movlw	1
  7398  17C9  3196  26FB  3197   	fcall	_LCDPutCmd
  7399  17CC  2FBC               	goto	l5195
  7400  17CD                     l5211:	
  7401                           
  7402                           ;StateRTC.c: 117: }
  7403                           ;StateRTC.c: 118: }
  7404                           ;StateRTC.c: 121: LCDPutCmd(0x01);
  7405  17CD  3001               	movlw	1
  7406  17CE  3196  26FB         	fcall	_LCDPutCmd
  7407                           
  7408                           ;StateRTC.c: 124: break;
  7409  17D0  0008               	return
  7410  17D1                     __end_of_StateClock:	
  7411                           
  7412                           	psect	text20
  7413  1312                     __ptext20:	
  7414 ;; *************** function _TMR1_StartTimer *****************
  7415 ;; Defined at:
  7416 ;;		line 89 in file "mcc_generated_files/tmr1.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;		None
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;		None
  7421 ;; Return value:  Size  Location     Type
  7422 ;;		None               void
  7423 ;; Registers used:
  7424 ;;		None
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7430 ;;      Params:         0       0       0       0       0       0       0       0
  7431 ;;      Locals:         0       0       0       0       0       0       0       0
  7432 ;;      Temps:          0       0       0       0       0       0       0       0
  7433 ;;      Totals:         0       0       0       0       0       0       0       0
  7434 ;;Total ram usage:        0 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    4
  7437 ;; This function calls:
  7438 ;;		Nothing
  7439 ;; This function is called by:
  7440 ;;		_StateClock
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _TMR1_StartTimer
  7446  1312                     _TMR1_StartTimer:	
  7447                           
  7448                           ;tmr1.c: 92: T1CONbits.TMR1ON = 1;
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _TMR1_StartTimer: []
  7452  1312  0020               	movlb	0	; select bank0
  7453  1313  1418               	bsf	24,0	;volatile
  7454  1314  0008               	return
  7455  1315                     __end_of_TMR1_StartTimer:	
  7456                           
  7457                           	psect	text21
  7458  0514                     __ptext21:	
  7459 ;; *************** function _StateClockSet *****************
  7460 ;; Defined at:
  7461 ;;		line 129 in file "StateRTC.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;		None
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;		None
  7466 ;; Return value:  Size  Location     Type
  7467 ;;		None               void
  7468 ;; Registers used:
  7469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7475 ;;      Params:         0       0       0       0       0       0       0       0
  7476 ;;      Locals:         0       0       0       0       0       0       0       0
  7477 ;;      Temps:          0       2       0       0       0       0       0       0
  7478 ;;      Totals:         0       2       0       0       0       0       0       0
  7479 ;;Total ram usage:        2 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    7
  7482 ;; This function calls:
  7483 ;;		_LCDGoto
  7484 ;;		_LCDPutChar
  7485 ;;		_LCDPutCmd
  7486 ;;		_LCDPutStr
  7487 ;;		_RTCDecHrs
  7488 ;;		_RTCDecMinutes
  7489 ;;		_RTCIncHrs
  7490 ;;		_RTCIncMinutes
  7491 ;;		___awdiv
  7492 ;;		___awmod
  7493 ;; This function is called by:
  7494 ;;		_StateClock
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           
  7499                           ;psect for function _StateClockSet
  7500  0514                     _StateClockSet:	
  7501                           
  7502                           ;StateRTC.c: 132: LCDPutCmd(0x01);
  7503                           
  7504                           ;incstack = 0
  7505                           ; Regs used in _StateClockSet: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7506  0514  3001               	movlw	1
  7507  0515  3196  26FB  3185   	fcall	_LCDPutCmd
  7508  0518  2DFA               	goto	l831
  7509  0519                     l3875:	
  7510                           
  7511                           ;StateRTC.c: 141: {
  7512                           ;StateRTC.c: 143: Buttons.But1Pressed = 0;
  7513  0519  103D               	bcf	_Buttons,0
  7514                           
  7515                           ;StateRTC.c: 146: set = 0;
  7516  051A  01B4               	clrf	_set
  7517  051B                     l3879:	
  7518                           ;StateRTC.c: 149: {
  7519                           ;StateRTC.c: 151: do { LCDGoto(0,0); LCDPutChar(dateTime.Hour/10+'0'); LCDPutChar(dateTi
      +                          me.Hour % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Min/10+'0'); LCDPutChar(dateTime
      +                          .Min % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Sec/10+'0'); LCDPutChar(dateTime.Se
      +                          c % 
  7520                           
  7521                           ;StateRTC.c: 148: while (1)
  7522                           
  7523  051B  0020               	movlb	0	; select bank0
  7524  051C  01C8               	clrf	LCDGoto@ln
  7525  051D  3000               	movlw	0
  7526  051E  3196  261A  3185   	fcall	_LCDGoto
  7527  0521  300A               	movlw	10
  7528  0522  0020               	movlb	0	; select bank0
  7529  0523  00C7               	movwf	___awdiv@divisor
  7530  0524  3000               	movlw	0
  7531  0525  00C8               	movwf	___awdiv@divisor+1
  7532  0526  0822               	movf	_dateTime+2,w
  7533  0527  00D7               	movwf	??_StateClockSet
  7534  0528  01D8               	clrf	??_StateClockSet+1
  7535  0529  0857               	movf	??_StateClockSet,w
  7536  052A  00C9               	movwf	___awdiv@dividend
  7537  052B  0858               	movf	??_StateClockSet+1,w
  7538  052C  00CA               	movwf	___awdiv@dividend+1
  7539  052D  3189  2199  3185   	fcall	___awdiv
  7540  0530  0020               	movlb	0	; select bank0
  7541  0531  0847               	movf	?___awdiv,w
  7542  0532  3E30               	addlw	48
  7543  0533  3196  263D  3185   	fcall	_LCDPutChar
  7544  0536  300A               	movlw	10
  7545  0537  0020               	movlb	0	; select bank0
  7546  0538  00D0               	movwf	___awmod@divisor
  7547  0539  3000               	movlw	0
  7548  053A  00D1               	movwf	___awmod@divisor+1
  7549  053B  0822               	movf	_dateTime+2,w
  7550  053C  00D7               	movwf	??_StateClockSet
  7551  053D  01D8               	clrf	??_StateClockSet+1
  7552  053E  0857               	movf	??_StateClockSet,w
  7553  053F  00D2               	movwf	___awmod@dividend
  7554  0540  0858               	movf	??_StateClockSet+1,w
  7555  0541  00D3               	movwf	___awmod@dividend+1
  7556  0542  3188  20BC  3185   	fcall	___awmod
  7557  0545  0020               	movlb	0	; select bank0
  7558  0546  0850               	movf	?___awmod,w
  7559  0547  3E30               	addlw	48
  7560  0548  3196  263D  3185   	fcall	_LCDPutChar
  7561  054B  303A               	movlw	58
  7562  054C  3196  263D  3185   	fcall	_LCDPutChar
  7563  054F  300A               	movlw	10
  7564  0550  0020               	movlb	0	; select bank0
  7565  0551  00C7               	movwf	___awdiv@divisor
  7566  0552  3000               	movlw	0
  7567  0553  00C8               	movwf	___awdiv@divisor+1
  7568  0554  0821               	movf	_dateTime+1,w
  7569  0555  00D7               	movwf	??_StateClockSet
  7570  0556  01D8               	clrf	??_StateClockSet+1
  7571  0557  0857               	movf	??_StateClockSet,w
  7572  0558  00C9               	movwf	___awdiv@dividend
  7573  0559  0858               	movf	??_StateClockSet+1,w
  7574  055A  00CA               	movwf	___awdiv@dividend+1
  7575  055B  3189  2199  3185   	fcall	___awdiv
  7576  055E  0020               	movlb	0	; select bank0
  7577  055F  0847               	movf	?___awdiv,w
  7578  0560  3E30               	addlw	48
  7579  0561  3196  263D  3185   	fcall	_LCDPutChar
  7580  0564  300A               	movlw	10
  7581  0565  0020               	movlb	0	; select bank0
  7582  0566  00D0               	movwf	___awmod@divisor
  7583  0567  3000               	movlw	0
  7584  0568  00D1               	movwf	___awmod@divisor+1
  7585  0569  0821               	movf	_dateTime+1,w
  7586  056A  00D7               	movwf	??_StateClockSet
  7587  056B  01D8               	clrf	??_StateClockSet+1
  7588  056C  0857               	movf	??_StateClockSet,w
  7589  056D  00D2               	movwf	___awmod@dividend
  7590  056E  0858               	movf	??_StateClockSet+1,w
  7591  056F  00D3               	movwf	___awmod@dividend+1
  7592  0570  3188  20BC  3185   	fcall	___awmod
  7593  0573  0020               	movlb	0	; select bank0
  7594  0574  0850               	movf	?___awmod,w
  7595  0575  3E30               	addlw	48
  7596  0576  3196  263D  3185   	fcall	_LCDPutChar
  7597  0579  303A               	movlw	58
  7598  057A  3196  263D  3185   	fcall	_LCDPutChar
  7599  057D  300A               	movlw	10
  7600  057E  0020               	movlb	0	; select bank0
  7601  057F  00C7               	movwf	___awdiv@divisor
  7602  0580  3000               	movlw	0
  7603  0581  00C8               	movwf	___awdiv@divisor+1
  7604  0582  0820               	movf	_dateTime,w
  7605  0583  00D7               	movwf	??_StateClockSet
  7606  0584  01D8               	clrf	??_StateClockSet+1
  7607  0585  0857               	movf	??_StateClockSet,w
  7608  0586  00C9               	movwf	___awdiv@dividend
  7609  0587  0858               	movf	??_StateClockSet+1,w
  7610  0588  00CA               	movwf	___awdiv@dividend+1
  7611  0589  3189  2199  3185   	fcall	___awdiv
  7612  058C  0020               	movlb	0	; select bank0
  7613  058D  0847               	movf	?___awdiv,w
  7614  058E  3E30               	addlw	48
  7615  058F  3196  263D  3185   	fcall	_LCDPutChar
  7616  0592  300A               	movlw	10
  7617  0593  0020               	movlb	0	; select bank0
  7618  0594  00D0               	movwf	___awmod@divisor
  7619  0595  3000               	movlw	0
  7620  0596  00D1               	movwf	___awmod@divisor+1
  7621  0597  0820               	movf	_dateTime,w
  7622  0598  00D7               	movwf	??_StateClockSet
  7623  0599  01D8               	clrf	??_StateClockSet+1
  7624  059A  0857               	movf	??_StateClockSet,w
  7625  059B  00D2               	movwf	___awmod@dividend
  7626  059C  0858               	movf	??_StateClockSet+1,w
  7627  059D  00D3               	movwf	___awmod@dividend+1
  7628  059E  3188  20BC  3185   	fcall	___awmod
  7629  05A1  0020               	movlb	0	; select bank0
  7630  05A2  0850               	movf	?___awmod,w
  7631  05A3  3E30               	addlw	48
  7632  05A4  3196  263D  3185   	fcall	_LCDPutChar
  7633  05A7  3022               	movlw	low (STR_91| (0+32768))
  7634  05A8  0020               	movlb	0	; select bank0
  7635  05A9  00C8               	movwf	LCDPutStr@str
  7636  05AA  3091               	movlw	high (STR_91| (0+32768))
  7637  05AB  00C9               	movwf	LCDPutStr@str+1
  7638  05AC  3196  2684  3185   	fcall	_LCDPutStr
  7639  05AF  0020               	movlb	0	; select bank0
  7640  05B0  01C8               	clrf	LCDGoto@ln
  7641  05B1  0AC8               	incf	LCDGoto@ln,f
  7642  05B2  3000               	movlw	0
  7643  05B3  3196  261A  3185   	fcall	_LCDGoto
  7644  05B6  3053               	movlw	low (STR_92| (0+32768))
  7645  05B7  0020               	movlb	0	; select bank0
  7646  05B8  00C8               	movwf	LCDPutStr@str
  7647  05B9  3091               	movlw	high (STR_92| (0+32768))
  7648  05BA  00C9               	movwf	LCDPutStr@str+1
  7649  05BB  3196  2684  3185   	fcall	_LCDPutStr
  7650  05BE  0020               	movlb	0	; select bank0
  7651  05BF  08B4               	movf	_set,f
  7652  05C0  1D03               	skipz
  7653  05C1  2DC8               	goto	l3907
  7654  05C2  302B               	movlw	43
  7655  05C3  3196  263D  3185   	fcall	_LCDPutChar
  7656  05C6  302B               	movlw	43
  7657  05C7  2DD2               	goto	L5
  7658  05C8                     l3907:	
  7659  05C8  0020               	movlb	0	; select bank0
  7660  05C9  0834               	movf	_set,w
  7661  05CA  3A01               	xorlw	1
  7662  05CB  1D03               	skipz
  7663  05CC  2DD5               	goto	l3911
  7664  05CD  302D               	movlw	45
  7665  05CE  3196  263D  3185   	fcall	_LCDPutChar
  7666  05D1  302D               	movlw	45
  7667  05D2                     L5:	
  7668  05D2  3196  263D  3185   	fcall	_LCDPutChar
  7669  05D5                     l3911:	
  7670  05D5  30CC               	movlw	low (STR_93| (0+32768))
  7671  05D6  0020               	movlb	0	; select bank0
  7672  05D7  00C8               	movwf	LCDPutStr@str
  7673  05D8  3090               	movlw	high (STR_93| (0+32768))
  7674  05D9  00C9               	movwf	LCDPutStr@str+1
  7675  05DA  3196  2684  3185   	fcall	_LCDPutStr
  7676                           
  7677                           ;StateRTC.c: 154: if((Buttons.But1Pressed))
  7678  05DD  0020               	movlb	0	; select bank0
  7679  05DE  1C3D               	btfss	_Buttons,0
  7680  05DF  2DF1               	goto	l840
  7681                           
  7682                           ;StateRTC.c: 155: {
  7683                           ;StateRTC.c: 157: Buttons.But1Pressed = 0;
  7684  05E0  103D               	bcf	_Buttons,0
  7685                           
  7686                           ;StateRTC.c: 159: if(set == 0)
  7687  05E1  08B4               	movf	_set,f
  7688  05E2  1D03               	skipz
  7689  05E3  2DE8               	goto	l3921
  7690                           
  7691                           ;StateRTC.c: 160: {
  7692                           ;StateRTC.c: 162: RTCIncHrs();
  7693  05E4  3193  236C  3185   	fcall	_RTCIncHrs
  7694                           
  7695                           ;StateRTC.c: 163: }
  7696  05E7  2D1B               	goto	l3879
  7697  05E8                     l3921:	
  7698                           
  7699                           ;StateRTC.c: 164: else if(set == 1)
  7700  05E8  0020               	movlb	0	; select bank0
  7701  05E9  0834               	movf	_set,w
  7702  05EA  3A01               	xorlw	1
  7703  05EB  1D03               	skipz
  7704  05EC  2D1B               	goto	l3879
  7705                           
  7706                           ;StateRTC.c: 165: {
  7707                           ;StateRTC.c: 167: RTCDecHrs();
  7708  05ED  3193  2385  3185   	fcall	_RTCDecHrs
  7709                           
  7710                           ;StateRTC.c: 168: }
  7711                           ;StateRTC.c: 169: }
  7712  05F0  2D1B               	goto	l3879
  7713  05F1                     l840:	
  7714                           
  7715                           ;StateRTC.c: 171: else if((Buttons.But2Pressed))
  7716  05F1  1CBD               	btfss	_Buttons,1
  7717  05F2  2D1B               	goto	l3879
  7718                           
  7719                           ;StateRTC.c: 172: {
  7720                           ;StateRTC.c: 174: Buttons.But2Pressed = 0;
  7721  05F3  10BD               	bcf	_Buttons,1
  7722                           
  7723                           ;StateRTC.c: 176: if(set == 0)
  7724  05F4  08B4               	movf	_set,f
  7725  05F5  1D03               	skipz
  7726  05F6  0008               	return
  7727                           
  7728                           ;StateRTC.c: 177: {
  7729                           ;StateRTC.c: 178: set = 1;
  7730  05F7  01B4               	clrf	_set
  7731  05F8  0AB4               	incf	_set,f
  7732                           
  7733                           ;StateRTC.c: 179: }
  7734  05F9  2D1B               	goto	l3879
  7735  05FA                     l831:	
  7736                           ;StateRTC.c: 135: {
  7737                           ;StateRTC.c: 137: do { LCDGoto(0,0); LCDPutStr("RA:[HR] "); LCDPutChar(dateTime.Hour/10+
      +                          '0'); LCDPutChar(dateTime.Hour % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Min/10+'0
      +                          '); LCDPutChar(dateTime.Min % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Sec/10+'0');
      +                           LCD
  7738                           
  7739                           ;StateRTC.c: 134: while (1)
  7740                           
  7741                           ;StateRTC.c: 187: }
  7742                           
  7743                           ;StateRTC.c: 183: }
  7744                           ;StateRTC.c: 184: }
  7745                           ;StateRTC.c: 185: }
  7746                           ;StateRTC.c: 186: break;
  7747                           
  7748                           ;StateRTC.c: 180: else
  7749                           ;StateRTC.c: 181: {
  7750                           ;StateRTC.c: 182: break;
  7751                           
  7752  05FA  0020               	movlb	0	; select bank0
  7753  05FB  01C8               	clrf	LCDGoto@ln
  7754  05FC  3000               	movlw	0
  7755  05FD  3196  261A  3185   	fcall	_LCDGoto
  7756  0600  3010               	movlw	low (STR_89| (0+32768))
  7757  0601  0020               	movlb	0	; select bank0
  7758  0602  00C8               	movwf	LCDPutStr@str
  7759  0603  3091               	movlw	high (STR_89| (0+32768))
  7760  0604  00C9               	movwf	LCDPutStr@str+1
  7761  0605  3196  2684  3185   	fcall	_LCDPutStr
  7762  0608  300A               	movlw	10
  7763  0609  0020               	movlb	0	; select bank0
  7764  060A  00C7               	movwf	___awdiv@divisor
  7765  060B  3000               	movlw	0
  7766  060C  00C8               	movwf	___awdiv@divisor+1
  7767  060D  0822               	movf	_dateTime+2,w
  7768  060E  00D7               	movwf	??_StateClockSet
  7769  060F  01D8               	clrf	??_StateClockSet+1
  7770  0610  0857               	movf	??_StateClockSet,w
  7771  0611  00C9               	movwf	___awdiv@dividend
  7772  0612  0858               	movf	??_StateClockSet+1,w
  7773  0613  00CA               	movwf	___awdiv@dividend+1
  7774  0614  3189  2199  3185   	fcall	___awdiv
  7775  0617  0020               	movlb	0	; select bank0
  7776  0618  0847               	movf	?___awdiv,w
  7777  0619  3E30               	addlw	48
  7778  061A  3196  263D  3185   	fcall	_LCDPutChar
  7779  061D  300A               	movlw	10
  7780  061E  0020               	movlb	0	; select bank0
  7781  061F  00D0               	movwf	___awmod@divisor
  7782  0620  3000               	movlw	0
  7783  0621  00D1               	movwf	___awmod@divisor+1
  7784  0622  0822               	movf	_dateTime+2,w
  7785  0623  00D7               	movwf	??_StateClockSet
  7786  0624  01D8               	clrf	??_StateClockSet+1
  7787  0625  0857               	movf	??_StateClockSet,w
  7788  0626  00D2               	movwf	___awmod@dividend
  7789  0627  0858               	movf	??_StateClockSet+1,w
  7790  0628  00D3               	movwf	___awmod@dividend+1
  7791  0629  3188  20BC  3185   	fcall	___awmod
  7792  062C  0020               	movlb	0	; select bank0
  7793  062D  0850               	movf	?___awmod,w
  7794  062E  3E30               	addlw	48
  7795  062F  3196  263D  3185   	fcall	_LCDPutChar
  7796  0632  303A               	movlw	58
  7797  0633  3196  263D  3185   	fcall	_LCDPutChar
  7798  0636  300A               	movlw	10
  7799  0637  0020               	movlb	0	; select bank0
  7800  0638  00C7               	movwf	___awdiv@divisor
  7801  0639  3000               	movlw	0
  7802  063A  00C8               	movwf	___awdiv@divisor+1
  7803  063B  0821               	movf	_dateTime+1,w
  7804  063C  00D7               	movwf	??_StateClockSet
  7805  063D  01D8               	clrf	??_StateClockSet+1
  7806  063E  0857               	movf	??_StateClockSet,w
  7807  063F  00C9               	movwf	___awdiv@dividend
  7808  0640  0858               	movf	??_StateClockSet+1,w
  7809  0641  00CA               	movwf	___awdiv@dividend+1
  7810  0642  3189  2199  3185   	fcall	___awdiv
  7811  0645  0020               	movlb	0	; select bank0
  7812  0646  0847               	movf	?___awdiv,w
  7813  0647  3E30               	addlw	48
  7814  0648  3196  263D  3185   	fcall	_LCDPutChar
  7815  064B  300A               	movlw	10
  7816  064C  0020               	movlb	0	; select bank0
  7817  064D  00D0               	movwf	___awmod@divisor
  7818  064E  3000               	movlw	0
  7819  064F  00D1               	movwf	___awmod@divisor+1
  7820  0650  0821               	movf	_dateTime+1,w
  7821  0651  00D7               	movwf	??_StateClockSet
  7822  0652  01D8               	clrf	??_StateClockSet+1
  7823  0653  0857               	movf	??_StateClockSet,w
  7824  0654  00D2               	movwf	___awmod@dividend
  7825  0655  0858               	movf	??_StateClockSet+1,w
  7826  0656  00D3               	movwf	___awmod@dividend+1
  7827  0657  3188  20BC  3185   	fcall	___awmod
  7828  065A  0020               	movlb	0	; select bank0
  7829  065B  0850               	movf	?___awmod,w
  7830  065C  3E30               	addlw	48
  7831  065D  3196  263D  3185   	fcall	_LCDPutChar
  7832  0660  303A               	movlw	58
  7833  0661  3196  263D  3185   	fcall	_LCDPutChar
  7834  0664  300A               	movlw	10
  7835  0665  0020               	movlb	0	; select bank0
  7836  0666  00C7               	movwf	___awdiv@divisor
  7837  0667  3000               	movlw	0
  7838  0668  00C8               	movwf	___awdiv@divisor+1
  7839  0669  0820               	movf	_dateTime,w
  7840  066A  00D7               	movwf	??_StateClockSet
  7841  066B  01D8               	clrf	??_StateClockSet+1
  7842  066C  0857               	movf	??_StateClockSet,w
  7843  066D  00C9               	movwf	___awdiv@dividend
  7844  066E  0858               	movf	??_StateClockSet+1,w
  7845  066F  00CA               	movwf	___awdiv@dividend+1
  7846  0670  3189  2199  3185   	fcall	___awdiv
  7847  0673  0020               	movlb	0	; select bank0
  7848  0674  0847               	movf	?___awdiv,w
  7849  0675  3E30               	addlw	48
  7850  0676  3196  263D  3185   	fcall	_LCDPutChar
  7851  0679  300A               	movlw	10
  7852  067A  0020               	movlb	0	; select bank0
  7853  067B  00D0               	movwf	___awmod@divisor
  7854  067C  3000               	movlw	0
  7855  067D  00D1               	movwf	___awmod@divisor+1
  7856  067E  0820               	movf	_dateTime,w
  7857  067F  00D7               	movwf	??_StateClockSet
  7858  0680  01D8               	clrf	??_StateClockSet+1
  7859  0681  0857               	movf	??_StateClockSet,w
  7860  0682  00D2               	movwf	___awmod@dividend
  7861  0683  0858               	movf	??_StateClockSet+1,w
  7862  0684  00D3               	movwf	___awmod@dividend+1
  7863  0685  3188  20BC  3185   	fcall	___awmod
  7864  0688  0020               	movlb	0	; select bank0
  7865  0689  0850               	movf	?___awmod,w
  7866  068A  3E30               	addlw	48
  7867  068B  3196  263D  3185   	fcall	_LCDPutChar
  7868  068E  0020               	movlb	0	; select bank0
  7869  068F  01C8               	clrf	LCDGoto@ln
  7870  0690  0AC8               	incf	LCDGoto@ln,f
  7871  0691  3000               	movlw	0
  7872  0692  3196  261A  3185   	fcall	_LCDGoto
  7873  0695  3066               	movlw	low (STR_90| (0+32768))
  7874  0696  0020               	movlb	0	; select bank0
  7875  0697  00C8               	movwf	LCDPutStr@str
  7876  0698  3090               	movlw	high (STR_90| (0+32768))
  7877  0699  00C9               	movwf	LCDPutStr@str+1
  7878  069A  3196  2684  3185   	fcall	_LCDPutStr
  7879                           
  7880                           ;StateRTC.c: 140: if((Buttons.But1Pressed))
  7881  069D  0020               	movlb	0	; select bank0
  7882  069E  183D               	btfsc	_Buttons,0
  7883  069F  2D19               	goto	l3875
  7884                           
  7885                           ;StateRTC.c: 189: else if((Buttons.But2Pressed))
  7886  06A0  1CBD               	btfss	_Buttons,1
  7887  06A1  2DFA               	goto	l831
  7888                           
  7889                           ;StateRTC.c: 190: {
  7890                           ;StateRTC.c: 192: Buttons.But2Pressed = 0;
  7891  06A2  10BD               	bcf	_Buttons,1
  7892                           
  7893                           ;StateRTC.c: 195: set = 0;
  7894  06A3  01B4               	clrf	_set
  7895  06A4                     l3937:	
  7896                           ;StateRTC.c: 198: {
  7897                           ;StateRTC.c: 200: do { LCDGoto(0,0); LCDPutChar(dateTime.Hour/10+'0'); LCDPutChar(dateTi
      +                          me.Hour % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Min/10+'0'); LCDPutChar(dateTime
      +                          .Min % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Sec/10+'0'); LCDPutChar(dateTime.Se
      +                          c % 
  7898                           
  7899                           ;StateRTC.c: 197: while(1)
  7900                           
  7901  06A4  0020               	movlb	0	; select bank0
  7902  06A5  01C8               	clrf	LCDGoto@ln
  7903  06A6  3000               	movlw	0
  7904  06A7  3196  261A  3185   	fcall	_LCDGoto
  7905  06AA  300A               	movlw	10
  7906  06AB  0020               	movlb	0	; select bank0
  7907  06AC  00C7               	movwf	___awdiv@divisor
  7908  06AD  3000               	movlw	0
  7909  06AE  00C8               	movwf	___awdiv@divisor+1
  7910  06AF  0822               	movf	_dateTime+2,w
  7911  06B0  00D7               	movwf	??_StateClockSet
  7912  06B1  01D8               	clrf	??_StateClockSet+1
  7913  06B2  0857               	movf	??_StateClockSet,w
  7914  06B3  00C9               	movwf	___awdiv@dividend
  7915  06B4  0858               	movf	??_StateClockSet+1,w
  7916  06B5  00CA               	movwf	___awdiv@dividend+1
  7917  06B6  3189  2199  3185   	fcall	___awdiv
  7918  06B9  0020               	movlb	0	; select bank0
  7919  06BA  0847               	movf	?___awdiv,w
  7920  06BB  3E30               	addlw	48
  7921  06BC  3196  263D  3185   	fcall	_LCDPutChar
  7922  06BF  300A               	movlw	10
  7923  06C0  0020               	movlb	0	; select bank0
  7924  06C1  00D0               	movwf	___awmod@divisor
  7925  06C2  3000               	movlw	0
  7926  06C3  00D1               	movwf	___awmod@divisor+1
  7927  06C4  0822               	movf	_dateTime+2,w
  7928  06C5  00D7               	movwf	??_StateClockSet
  7929  06C6  01D8               	clrf	??_StateClockSet+1
  7930  06C7  0857               	movf	??_StateClockSet,w
  7931  06C8  00D2               	movwf	___awmod@dividend
  7932  06C9  0858               	movf	??_StateClockSet+1,w
  7933  06CA  00D3               	movwf	___awmod@dividend+1
  7934  06CB  3188  20BC  3185   	fcall	___awmod
  7935  06CE  0020               	movlb	0	; select bank0
  7936  06CF  0850               	movf	?___awmod,w
  7937  06D0  3E30               	addlw	48
  7938  06D1  3196  263D  3185   	fcall	_LCDPutChar
  7939  06D4  303A               	movlw	58
  7940  06D5  3196  263D  3185   	fcall	_LCDPutChar
  7941  06D8  300A               	movlw	10
  7942  06D9  0020               	movlb	0	; select bank0
  7943  06DA  00C7               	movwf	___awdiv@divisor
  7944  06DB  3000               	movlw	0
  7945  06DC  00C8               	movwf	___awdiv@divisor+1
  7946  06DD  0821               	movf	_dateTime+1,w
  7947  06DE  00D7               	movwf	??_StateClockSet
  7948  06DF  01D8               	clrf	??_StateClockSet+1
  7949  06E0  0857               	movf	??_StateClockSet,w
  7950  06E1  00C9               	movwf	___awdiv@dividend
  7951  06E2  0858               	movf	??_StateClockSet+1,w
  7952  06E3  00CA               	movwf	___awdiv@dividend+1
  7953  06E4  3189  2199  3185   	fcall	___awdiv
  7954  06E7  0020               	movlb	0	; select bank0
  7955  06E8  0847               	movf	?___awdiv,w
  7956  06E9  3E30               	addlw	48
  7957  06EA  3196  263D  3185   	fcall	_LCDPutChar
  7958  06ED  300A               	movlw	10
  7959  06EE  0020               	movlb	0	; select bank0
  7960  06EF  00D0               	movwf	___awmod@divisor
  7961  06F0  3000               	movlw	0
  7962  06F1  00D1               	movwf	___awmod@divisor+1
  7963  06F2  0821               	movf	_dateTime+1,w
  7964  06F3  00D7               	movwf	??_StateClockSet
  7965  06F4  01D8               	clrf	??_StateClockSet+1
  7966  06F5  0857               	movf	??_StateClockSet,w
  7967  06F6  00D2               	movwf	___awmod@dividend
  7968  06F7  0858               	movf	??_StateClockSet+1,w
  7969  06F8  00D3               	movwf	___awmod@dividend+1
  7970  06F9  3188  20BC  3185   	fcall	___awmod
  7971  06FC  0020               	movlb	0	; select bank0
  7972  06FD  0850               	movf	?___awmod,w
  7973  06FE  3E30               	addlw	48
  7974  06FF  3196  263D  3185   	fcall	_LCDPutChar
  7975  0702  303A               	movlw	58
  7976  0703  3196  263D  3185   	fcall	_LCDPutChar
  7977  0706  300A               	movlw	10
  7978  0707  0020               	movlb	0	; select bank0
  7979  0708  00C7               	movwf	___awdiv@divisor
  7980  0709  3000               	movlw	0
  7981  070A  00C8               	movwf	___awdiv@divisor+1
  7982  070B  0820               	movf	_dateTime,w
  7983  070C  00D7               	movwf	??_StateClockSet
  7984  070D  01D8               	clrf	??_StateClockSet+1
  7985  070E  0857               	movf	??_StateClockSet,w
  7986  070F  00C9               	movwf	___awdiv@dividend
  7987  0710  0858               	movf	??_StateClockSet+1,w
  7988  0711  00CA               	movwf	___awdiv@dividend+1
  7989  0712  3189  2199  3185   	fcall	___awdiv
  7990  0715  0020               	movlb	0	; select bank0
  7991  0716  0847               	movf	?___awdiv,w
  7992  0717  3E30               	addlw	48
  7993  0718  3196  263D  3185   	fcall	_LCDPutChar
  7994  071B  300A               	movlw	10
  7995  071C  0020               	movlb	0	; select bank0
  7996  071D  00D0               	movwf	___awmod@divisor
  7997  071E  3000               	movlw	0
  7998  071F  00D1               	movwf	___awmod@divisor+1
  7999  0720  0820               	movf	_dateTime,w
  8000  0721  00D7               	movwf	??_StateClockSet
  8001  0722  01D8               	clrf	??_StateClockSet+1
  8002  0723  0857               	movf	??_StateClockSet,w
  8003  0724  00D2               	movwf	___awmod@dividend
  8004  0725  0858               	movf	??_StateClockSet+1,w
  8005  0726  00D3               	movwf	___awmod@dividend+1
  8006  0727  3188  20BC  3185   	fcall	___awmod
  8007  072A  0020               	movlb	0	; select bank0
  8008  072B  0850               	movf	?___awmod,w
  8009  072C  3E30               	addlw	48
  8010  072D  3196  263D  3185   	fcall	_LCDPutChar
  8011  0730  3019               	movlw	low (STR_94| (0+32768))
  8012  0731  0020               	movlb	0	; select bank0
  8013  0732  00C8               	movwf	LCDPutStr@str
  8014  0733  3091               	movlw	high (STR_94| (0+32768))
  8015  0734  00C9               	movwf	LCDPutStr@str+1
  8016  0735  3196  2684  3185   	fcall	_LCDPutStr
  8017  0738  0020               	movlb	0	; select bank0
  8018  0739  01C8               	clrf	LCDGoto@ln
  8019  073A  0AC8               	incf	LCDGoto@ln,f
  8020  073B  3000               	movlw	0
  8021  073C  3196  261A  3185   	fcall	_LCDGoto
  8022  073F  3053               	movlw	low (STR_92| (0+32768))
  8023  0740  0020               	movlb	0	; select bank0
  8024  0741  00C8               	movwf	LCDPutStr@str
  8025  0742  3091               	movlw	high (STR_92| (0+32768))
  8026  0743  00C9               	movwf	LCDPutStr@str+1
  8027  0744  3196  2684  3185   	fcall	_LCDPutStr
  8028  0747  0020               	movlb	0	; select bank0
  8029  0748  08B4               	movf	_set,f
  8030  0749  1D03               	skipz
  8031  074A  2F51               	goto	l3965
  8032  074B  302B               	movlw	43
  8033  074C  3196  263D  3185   	fcall	_LCDPutChar
  8034  074F  302B               	movlw	43
  8035  0750  2F5B               	goto	L6
  8036  0751                     l3965:	
  8037  0751  0020               	movlb	0	; select bank0
  8038  0752  0834               	movf	_set,w
  8039  0753  3A01               	xorlw	1
  8040  0754  1D03               	skipz
  8041  0755  2F5E               	goto	l3969
  8042  0756  302D               	movlw	45
  8043  0757  3196  263D  3185   	fcall	_LCDPutChar
  8044  075A  302D               	movlw	45
  8045  075B                     L6:	
  8046  075B  3196  263D  3185   	fcall	_LCDPutChar
  8047  075E                     l3969:	
  8048  075E  30CC               	movlw	low (STR_93| (0+32768))
  8049  075F  0020               	movlb	0	; select bank0
  8050  0760  00C8               	movwf	LCDPutStr@str
  8051  0761  3090               	movlw	high (STR_93| (0+32768))
  8052  0762  00C9               	movwf	LCDPutStr@str+1
  8053  0763  3196  2684  3185   	fcall	_LCDPutStr
  8054                           
  8055                           ;StateRTC.c: 203: if((Buttons.But1Pressed))
  8056  0766  0020               	movlb	0	; select bank0
  8057  0767  1C3D               	btfss	_Buttons,0
  8058  0768  2F7A               	goto	l859
  8059                           
  8060                           ;StateRTC.c: 204: {
  8061                           ;StateRTC.c: 206: Buttons.But1Pressed = 0;
  8062  0769  103D               	bcf	_Buttons,0
  8063                           
  8064                           ;StateRTC.c: 208: if(set == 0)
  8065  076A  08B4               	movf	_set,f
  8066  076B  1D03               	skipz
  8067  076C  2F71               	goto	l3979
  8068                           
  8069                           ;StateRTC.c: 209: {
  8070                           ;StateRTC.c: 211: RTCIncMinutes();
  8071  076D  3193  23B3  3185   	fcall	_RTCIncMinutes
  8072                           
  8073                           ;StateRTC.c: 212: }
  8074  0770  2EA4               	goto	l3937
  8075  0771                     l3979:	
  8076                           
  8077                           ;StateRTC.c: 213: else if(set == 1)
  8078  0771  0020               	movlb	0	; select bank0
  8079  0772  0834               	movf	_set,w
  8080  0773  3A01               	xorlw	1
  8081  0774  1D03               	skipz
  8082  0775  2EA4               	goto	l3937
  8083                           
  8084                           ;StateRTC.c: 214: {
  8085                           ;StateRTC.c: 216: RTCDecMinutes();
  8086  0776  3193  23DE  3185   	fcall	_RTCDecMinutes
  8087                           
  8088                           ;StateRTC.c: 217: }
  8089                           ;StateRTC.c: 218: }
  8090  0779  2EA4               	goto	l3937
  8091  077A                     l859:	
  8092                           
  8093                           ;StateRTC.c: 220: else if((Buttons.But2Pressed))
  8094  077A  1CBD               	btfss	_Buttons,1
  8095  077B  2EA4               	goto	l3937
  8096                           
  8097                           ;StateRTC.c: 221: {
  8098                           ;StateRTC.c: 223: Buttons.But2Pressed = 0;
  8099  077C  10BD               	bcf	_Buttons,1
  8100                           
  8101                           ;StateRTC.c: 225: if(set == 0)
  8102  077D  08B4               	movf	_set,f
  8103  077E  1D03               	skipz
  8104  077F  0008               	return
  8105                           
  8106                           ;StateRTC.c: 226: {
  8107                           ;StateRTC.c: 227: set = 1;
  8108  0780  01B4               	clrf	_set
  8109  0781  0AB4               	incf	_set,f
  8110                           
  8111                           ;StateRTC.c: 228: }
  8112  0782  2EA4               	goto	l3937
  8113  0783                     __end_of_StateClockSet:	
  8114                           ;StateRTC.c: 232: }
  8115                           ;StateRTC.c: 233: }
  8116                           ;StateRTC.c: 234: }
  8117                           ;StateRTC.c: 235: break;
  8118                           
  8119                           ;StateRTC.c: 229: else
  8120                           ;StateRTC.c: 230: {
  8121                           ;StateRTC.c: 231: break;
  8122                           
  8123                           
  8124                           	psect	text22
  8125  13B3                     __ptext22:	
  8126 ;; *************** function _RTCIncMinutes *****************
  8127 ;; Defined at:
  8128 ;;		line 285 in file "StateRTC.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;		None
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;		None
  8133 ;; Return value:  Size  Location     Type
  8134 ;;		None               void
  8135 ;; Registers used:
  8136 ;;		wreg, status,2, status,0
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8142 ;;      Params:         0       0       0       0       0       0       0       0
  8143 ;;      Locals:         0       0       0       0       0       0       0       0
  8144 ;;      Temps:          0       1       0       0       0       0       0       0
  8145 ;;      Totals:         0       1       0       0       0       0       0       0
  8146 ;;Total ram usage:        1 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    4
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_StateClockSet
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           
  8157                           ;psect for function _RTCIncMinutes
  8158  13B3                     _RTCIncMinutes:	
  8159                           
  8160                           ;StateRTC.c: 288: dateTime.Sec = 0;
  8161                           
  8162                           ;incstack = 0
  8163                           ; Regs used in _RTCIncMinutes: [wreg+status,2+status,0]
  8164  13B3  0020               	movlb	0	; select bank0
  8165  13B4  01A0               	clrf	_dateTime
  8166                           
  8167                           ;StateRTC.c: 291: if (++dateTime.Min == 60)
  8168  13B5  3001               	movlw	1
  8169  13B6  00C1               	movwf	??_RTCIncMinutes
  8170  13B7  0841               	movf	??_RTCIncMinutes,w
  8171  13B8  07A1               	addwf	_dateTime+1,f
  8172  13B9  0821               	movf	_dateTime+1,w
  8173  13BA  3A3C               	xorlw	60
  8174  13BB  1D03               	skipz
  8175  13BC  0008               	return
  8176                           
  8177                           ;StateRTC.c: 292: {
  8178                           ;StateRTC.c: 294: dateTime.Min = 0;
  8179  13BD  01A1               	clrf	_dateTime+1
  8180                           
  8181                           ;StateRTC.c: 297: if (++dateTime.Hour == 24)
  8182  13BE  3001               	movlw	1
  8183  13BF  00C1               	movwf	??_RTCIncMinutes
  8184  13C0  0841               	movf	??_RTCIncMinutes,w
  8185  13C1  07A2               	addwf	_dateTime+2,f
  8186  13C2  0822               	movf	_dateTime+2,w
  8187  13C3  3A18               	xorlw	24
  8188  13C4  1D03               	skipz
  8189  13C5  0008               	return
  8190                           
  8191                           ;StateRTC.c: 298: {
  8192                           ;StateRTC.c: 300: dateTime.Hour = 0;
  8193  13C6  01A2               	clrf	_dateTime+2
  8194  13C7  0008               	return
  8195  13C8                     __end_of_RTCIncMinutes:	
  8196                           
  8197                           	psect	text23
  8198  136C                     __ptext23:	
  8199 ;; *************** function _RTCIncHrs *****************
  8200 ;; Defined at:
  8201 ;;		line 325 in file "StateRTC.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;		None
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;		None
  8206 ;; Return value:  Size  Location     Type
  8207 ;;		None               void
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8215 ;;      Params:         0       0       0       0       0       0       0       0
  8216 ;;      Locals:         0       0       0       0       0       0       0       0
  8217 ;;      Temps:          0       1       0       0       0       0       0       0
  8218 ;;      Totals:         0       1       0       0       0       0       0       0
  8219 ;;Total ram usage:        1 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    4
  8222 ;; This function calls:
  8223 ;;		Nothing
  8224 ;; This function is called by:
  8225 ;;		_StateClockSet
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           
  8230                           ;psect for function _RTCIncHrs
  8231  136C                     _RTCIncHrs:	
  8232                           
  8233                           ;StateRTC.c: 328: dateTime.Sec = 0;
  8234                           
  8235                           ;incstack = 0
  8236                           ; Regs used in _RTCIncHrs: [wreg+status,2+status,0]
  8237  136C  0020               	movlb	0	; select bank0
  8238  136D  01A0               	clrf	_dateTime
  8239                           
  8240                           ;StateRTC.c: 331: if (++dateTime.Hour == 24)
  8241  136E  3001               	movlw	1
  8242  136F  00C1               	movwf	??_RTCIncHrs
  8243  1370  0841               	movf	??_RTCIncHrs,w
  8244  1371  07A2               	addwf	_dateTime+2,f
  8245  1372  0822               	movf	_dateTime+2,w
  8246  1373  3A18               	xorlw	24
  8247  1374  1D03               	skipz
  8248  1375  0008               	return
  8249                           
  8250                           ;StateRTC.c: 332: {
  8251                           ;StateRTC.c: 334: dateTime.Hour = 0;
  8252  1376  01A2               	clrf	_dateTime+2
  8253  1377  0008               	return
  8254  1378                     __end_of_RTCIncHrs:	
  8255                           
  8256                           	psect	text24
  8257  13DE                     __ptext24:	
  8258 ;; *************** function _RTCDecMinutes *****************
  8259 ;; Defined at:
  8260 ;;		line 305 in file "StateRTC.c"
  8261 ;; Parameters:    Size  Location     Type
  8262 ;;		None
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;		None
  8265 ;; Return value:  Size  Location     Type
  8266 ;;		None               void
  8267 ;; Registers used:
  8268 ;;		wreg, status,2, status,0
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8274 ;;      Params:         0       0       0       0       0       0       0       0
  8275 ;;      Locals:         0       0       0       0       0       0       0       0
  8276 ;;      Temps:          0       1       0       0       0       0       0       0
  8277 ;;      Totals:         0       1       0       0       0       0       0       0
  8278 ;;Total ram usage:        1 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    4
  8281 ;; This function calls:
  8282 ;;		Nothing
  8283 ;; This function is called by:
  8284 ;;		_StateClockSet
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           
  8289                           ;psect for function _RTCDecMinutes
  8290  13DE                     _RTCDecMinutes:	
  8291                           
  8292                           ;StateRTC.c: 308: dateTime.Sec = 0;
  8293                           
  8294                           ;incstack = 0
  8295                           ; Regs used in _RTCDecMinutes: [wreg+status,2+status,0]
  8296  13DE  0020               	movlb	0	; select bank0
  8297  13DF  01A0               	clrf	_dateTime
  8298                           
  8299                           ;StateRTC.c: 311: if (--dateTime.Min == 255)
  8300  13E0  3001               	movlw	1
  8301  13E1  02A1               	subwf	_dateTime+1,f
  8302  13E2  0821               	movf	_dateTime+1,w
  8303  13E3  3AFF               	xorlw	255
  8304  13E4  1D03               	skipz
  8305  13E5  0008               	return
  8306                           
  8307                           ;StateRTC.c: 312: {
  8308                           ;StateRTC.c: 314: dateTime.Min = (60 - 1);
  8309  13E6  303B               	movlw	59
  8310  13E7  00C1               	movwf	??_RTCDecMinutes
  8311  13E8  0841               	movf	??_RTCDecMinutes,w
  8312  13E9  00A1               	movwf	_dateTime+1
  8313                           
  8314                           ;StateRTC.c: 317: if (--dateTime.Hour == 255)
  8315  13EA  3001               	movlw	1
  8316  13EB  02A2               	subwf	_dateTime+2,f
  8317  13EC  0822               	movf	_dateTime+2,w
  8318  13ED  3AFF               	xorlw	255
  8319  13EE  1D03               	skipz
  8320  13EF  0008               	return
  8321                           
  8322                           ;StateRTC.c: 318: {
  8323                           ;StateRTC.c: 320: dateTime.Hour = (24 - 1);
  8324  13F0  3017               	movlw	23
  8325  13F1  00C1               	movwf	??_RTCDecMinutes
  8326  13F2  0841               	movf	??_RTCDecMinutes,w
  8327  13F3  00A2               	movwf	_dateTime+2
  8328  13F4  0008               	return
  8329  13F5                     __end_of_RTCDecMinutes:	
  8330                           
  8331                           	psect	text25
  8332  1385                     __ptext25:	
  8333 ;; *************** function _RTCDecHrs *****************
  8334 ;; Defined at:
  8335 ;;		line 338 in file "StateRTC.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8349 ;;      Params:         0       0       0       0       0       0       0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0
  8351 ;;      Temps:          0       1       0       0       0       0       0       0
  8352 ;;      Totals:         0       1       0       0       0       0       0       0
  8353 ;;Total ram usage:        1 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    4
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_StateClockSet
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _RTCDecHrs
  8365  1385                     _RTCDecHrs:	
  8366                           
  8367                           ;StateRTC.c: 341: dateTime.Sec = 0;
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _RTCDecHrs: [wreg+status,2+status,0]
  8371  1385  0020               	movlb	0	; select bank0
  8372  1386  01A0               	clrf	_dateTime
  8373                           
  8374                           ;StateRTC.c: 344: if (--dateTime.Hour == 255)
  8375  1387  3001               	movlw	1
  8376  1388  02A2               	subwf	_dateTime+2,f
  8377  1389  0822               	movf	_dateTime+2,w
  8378  138A  3AFF               	xorlw	255
  8379  138B  1D03               	skipz
  8380  138C  0008               	return
  8381                           
  8382                           ;StateRTC.c: 345: {
  8383                           ;StateRTC.c: 347: dateTime.Hour = (24-1);
  8384  138D  3017               	movlw	23
  8385  138E  00C1               	movwf	??_RTCDecHrs
  8386  138F  0841               	movf	??_RTCDecHrs,w
  8387  1390  00A2               	movwf	_dateTime+2
  8388  1391  0008               	return
  8389  1392                     __end_of_RTCDecHrs:	
  8390                           
  8391                           	psect	text26
  8392  09ED                     __ptext26:	
  8393 ;; *************** function _DisplayTime *****************
  8394 ;; Defined at:
  8395 ;;		line 249 in file "StateRTC.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;		None
  8398 ;; Auto vars:     Size  Location     Type
  8399 ;;		None
  8400 ;; Return value:  Size  Location     Type
  8401 ;;		None               void
  8402 ;; Registers used:
  8403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8409 ;;      Params:         0       0       0       0       0       0       0       0
  8410 ;;      Locals:         0       0       0       0       0       0       0       0
  8411 ;;      Temps:          0       2       0       0       0       0       0       0
  8412 ;;      Totals:         0       2       0       0       0       0       0       0
  8413 ;;Total ram usage:        2 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    7
  8416 ;; This function calls:
  8417 ;;		_EUSART_Write
  8418 ;;		_LCDGoto
  8419 ;;		_LCDPutChar
  8420 ;;		_LCDPutStr
  8421 ;;		___awdiv
  8422 ;;		___awmod
  8423 ;;		_printf
  8424 ;; This function is called by:
  8425 ;;		_StateClock
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           
  8430                           ;psect for function _DisplayTime
  8431  09ED                     _DisplayTime:	
  8432                           
  8433                           ;incstack = 0
  8434                           ; Regs used in _DisplayTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8435                           ;StateRTC.c: 252: do { LCDGoto(0,0); LCDPutStr("TIME  "); LCDPutChar(dateTime.Hour/10+'0
      +                          '); LCDPutChar(dateTime.Hour % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Min/10+'0')
      +                          ; LCDPutChar(dateTime.Min % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Sec/10+'0'); L
      +                          CDPu
  8436  09ED  0020               	movlb	0	; select bank0
  8437  09EE  01C8               	clrf	LCDGoto@ln
  8438  09EF  3000               	movlw	0
  8439  09F0  3196  261A  3189   	fcall	_LCDGoto
  8440  09F3  3041               	movlw	low (STR_99| (0+32768))
  8441  09F4  0020               	movlb	0	; select bank0
  8442  09F5  00C8               	movwf	LCDPutStr@str
  8443  09F6  3091               	movlw	high (STR_99| (0+32768))
  8444  09F7  00C9               	movwf	LCDPutStr@str+1
  8445  09F8  3196  2684  3189   	fcall	_LCDPutStr
  8446  09FB  300A               	movlw	10
  8447  09FC  0020               	movlb	0	; select bank0
  8448  09FD  00C7               	movwf	___awdiv@divisor
  8449  09FE  3000               	movlw	0
  8450  09FF  00C8               	movwf	___awdiv@divisor+1
  8451  0A00  0822               	movf	_dateTime+2,w
  8452  0A01  00D7               	movwf	??_DisplayTime
  8453  0A02  01D8               	clrf	??_DisplayTime+1
  8454  0A03  0857               	movf	??_DisplayTime,w
  8455  0A04  00C9               	movwf	___awdiv@dividend
  8456  0A05  0858               	movf	??_DisplayTime+1,w
  8457  0A06  00CA               	movwf	___awdiv@dividend+1
  8458  0A07  3189  2199  3189   	fcall	___awdiv
  8459  0A0A  0020               	movlb	0	; select bank0
  8460  0A0B  0847               	movf	?___awdiv,w
  8461  0A0C  3E30               	addlw	48
  8462  0A0D  3196  263D  3189   	fcall	_LCDPutChar
  8463  0A10  300A               	movlw	10
  8464  0A11  0020               	movlb	0	; select bank0
  8465  0A12  00D0               	movwf	___awmod@divisor
  8466  0A13  3000               	movlw	0
  8467  0A14  00D1               	movwf	___awmod@divisor+1
  8468  0A15  0822               	movf	_dateTime+2,w
  8469  0A16  00D7               	movwf	??_DisplayTime
  8470  0A17  01D8               	clrf	??_DisplayTime+1
  8471  0A18  0857               	movf	??_DisplayTime,w
  8472  0A19  00D2               	movwf	___awmod@dividend
  8473  0A1A  0858               	movf	??_DisplayTime+1,w
  8474  0A1B  00D3               	movwf	___awmod@dividend+1
  8475  0A1C  3188  20BC  3189   	fcall	___awmod
  8476  0A1F  0020               	movlb	0	; select bank0
  8477  0A20  0850               	movf	?___awmod,w
  8478  0A21  3E30               	addlw	48
  8479  0A22  3196  263D  3189   	fcall	_LCDPutChar
  8480  0A25  303A               	movlw	58
  8481  0A26  3196  263D  3189   	fcall	_LCDPutChar
  8482  0A29  300A               	movlw	10
  8483  0A2A  0020               	movlb	0	; select bank0
  8484  0A2B  00C7               	movwf	___awdiv@divisor
  8485  0A2C  3000               	movlw	0
  8486  0A2D  00C8               	movwf	___awdiv@divisor+1
  8487  0A2E  0821               	movf	_dateTime+1,w
  8488  0A2F  00D7               	movwf	??_DisplayTime
  8489  0A30  01D8               	clrf	??_DisplayTime+1
  8490  0A31  0857               	movf	??_DisplayTime,w
  8491  0A32  00C9               	movwf	___awdiv@dividend
  8492  0A33  0858               	movf	??_DisplayTime+1,w
  8493  0A34  00CA               	movwf	___awdiv@dividend+1
  8494  0A35  3189  2199  3189   	fcall	___awdiv
  8495  0A38  0020               	movlb	0	; select bank0
  8496  0A39  0847               	movf	?___awdiv,w
  8497  0A3A  3E30               	addlw	48
  8498  0A3B  3196  263D  3189   	fcall	_LCDPutChar
  8499  0A3E  300A               	movlw	10
  8500  0A3F  0020               	movlb	0	; select bank0
  8501  0A40  00D0               	movwf	___awmod@divisor
  8502  0A41  3000               	movlw	0
  8503  0A42  00D1               	movwf	___awmod@divisor+1
  8504  0A43  0821               	movf	_dateTime+1,w
  8505  0A44  00D7               	movwf	??_DisplayTime
  8506  0A45  01D8               	clrf	??_DisplayTime+1
  8507  0A46  0857               	movf	??_DisplayTime,w
  8508  0A47  00D2               	movwf	___awmod@dividend
  8509  0A48  0858               	movf	??_DisplayTime+1,w
  8510  0A49  00D3               	movwf	___awmod@dividend+1
  8511  0A4A  3188  20BC  3189   	fcall	___awmod
  8512  0A4D  0020               	movlb	0	; select bank0
  8513  0A4E  0850               	movf	?___awmod,w
  8514  0A4F  3E30               	addlw	48
  8515  0A50  3196  263D  3189   	fcall	_LCDPutChar
  8516  0A53  303A               	movlw	58
  8517  0A54  3196  263D  3189   	fcall	_LCDPutChar
  8518  0A57  300A               	movlw	10
  8519  0A58  0020               	movlb	0	; select bank0
  8520  0A59  00C7               	movwf	___awdiv@divisor
  8521  0A5A  3000               	movlw	0
  8522  0A5B  00C8               	movwf	___awdiv@divisor+1
  8523  0A5C  0820               	movf	_dateTime,w
  8524  0A5D  00D7               	movwf	??_DisplayTime
  8525  0A5E  01D8               	clrf	??_DisplayTime+1
  8526  0A5F  0857               	movf	??_DisplayTime,w
  8527  0A60  00C9               	movwf	___awdiv@dividend
  8528  0A61  0858               	movf	??_DisplayTime+1,w
  8529  0A62  00CA               	movwf	___awdiv@dividend+1
  8530  0A63  3189  2199  3189   	fcall	___awdiv
  8531  0A66  0020               	movlb	0	; select bank0
  8532  0A67  0847               	movf	?___awdiv,w
  8533  0A68  3E30               	addlw	48
  8534  0A69  3196  263D  3189   	fcall	_LCDPutChar
  8535  0A6C  300A               	movlw	10
  8536  0A6D  0020               	movlb	0	; select bank0
  8537  0A6E  00D0               	movwf	___awmod@divisor
  8538  0A6F  3000               	movlw	0
  8539  0A70  00D1               	movwf	___awmod@divisor+1
  8540  0A71  0820               	movf	_dateTime,w
  8541  0A72  00D7               	movwf	??_DisplayTime
  8542  0A73  01D8               	clrf	??_DisplayTime+1
  8543  0A74  0857               	movf	??_DisplayTime,w
  8544  0A75  00D2               	movwf	___awmod@dividend
  8545  0A76  0858               	movf	??_DisplayTime+1,w
  8546  0A77  00D3               	movwf	___awmod@dividend+1
  8547  0A78  3188  20BC  3189   	fcall	___awmod
  8548  0A7B  0020               	movlb	0	; select bank0
  8549  0A7C  0850               	movf	?___awmod,w
  8550  0A7D  3E30               	addlw	48
  8551  0A7E  3196  263D  3189   	fcall	_LCDPutChar
  8552                           
  8553                           ;StateRTC.c: 255: do { LCDGoto(0,1); LCDPutStr("RA4=Set RB0=Menu"); } while (0);;
  8554  0A81  0020               	movlb	0	; select bank0
  8555  0A82  01C8               	clrf	LCDGoto@ln
  8556  0A83  0AC8               	incf	LCDGoto@ln,f
  8557  0A84  3000               	movlw	0
  8558  0A85  3196  261A  3189   	fcall	_LCDGoto
  8559  0A88  3022               	movlw	low (STR_100| (0+32768))
  8560  0A89  0020               	movlb	0	; select bank0
  8561  0A8A  00C8               	movwf	LCDPutStr@str
  8562  0A8B  3090               	movlw	high (STR_100| (0+32768))
  8563  0A8C  00C9               	movwf	LCDPutStr@str+1
  8564  0A8D  3196  2684  3189   	fcall	_LCDPutStr
  8565                           
  8566                           ;StateRTC.c: 258: do { if (timeHasChgd) { printf("\r\nSystem Time :"); EUSART_Write(date
      +                          Time.Hour/10+'0'); EUSART_Write(dateTime.Hour % 10+'0'); EUSART_Write(':'); EUSART_Write
      +                          (dateTime.Min/10+'0'); EUSART_Write(dateTime.Min % 10+'0'); EUSART_Write(':'); EUSART_Wr
      +                          ite(
  8567  0A90  0020               	movlb	0	; select bank0
  8568  0A91  0835               	movf	_timeHasChgd,w
  8569  0A92  1903               	btfsc	3,2
  8570  0A93  0008               	return
  8571  0A94  3076               	movlw	low (STR_101| (0+32768))
  8572  0A95  00C4               	movwf	printf@f
  8573  0A96  3090               	movlw	high (STR_101| (0+32768))
  8574  0A97  00C5               	movwf	printf@f+1
  8575  0A98  3195  2505  3189   	fcall	_printf
  8576  0A9B  300A               	movlw	10
  8577  0A9C  0020               	movlb	0	; select bank0
  8578  0A9D  00C7               	movwf	___awdiv@divisor
  8579  0A9E  3000               	movlw	0
  8580  0A9F  00C8               	movwf	___awdiv@divisor+1
  8581  0AA0  0822               	movf	_dateTime+2,w
  8582  0AA1  00D7               	movwf	??_DisplayTime
  8583  0AA2  01D8               	clrf	??_DisplayTime+1
  8584  0AA3  0857               	movf	??_DisplayTime,w
  8585  0AA4  00C9               	movwf	___awdiv@dividend
  8586  0AA5  0858               	movf	??_DisplayTime+1,w
  8587  0AA6  00CA               	movwf	___awdiv@dividend+1
  8588  0AA7  3189  2199  3189   	fcall	___awdiv
  8589  0AAA  0020               	movlb	0	; select bank0
  8590  0AAB  0847               	movf	?___awdiv,w
  8591  0AAC  3E30               	addlw	48
  8592  0AAD  3196  2660  3189   	fcall	_EUSART_Write
  8593  0AB0  300A               	movlw	10
  8594  0AB1  0020               	movlb	0	; select bank0
  8595  0AB2  00D0               	movwf	___awmod@divisor
  8596  0AB3  3000               	movlw	0
  8597  0AB4  00D1               	movwf	___awmod@divisor+1
  8598  0AB5  0822               	movf	_dateTime+2,w
  8599  0AB6  00D7               	movwf	??_DisplayTime
  8600  0AB7  01D8               	clrf	??_DisplayTime+1
  8601  0AB8  0857               	movf	??_DisplayTime,w
  8602  0AB9  00D2               	movwf	___awmod@dividend
  8603  0ABA  0858               	movf	??_DisplayTime+1,w
  8604  0ABB  00D3               	movwf	___awmod@dividend+1
  8605  0ABC  3188  20BC  3189   	fcall	___awmod
  8606  0ABF  0020               	movlb	0	; select bank0
  8607  0AC0  0850               	movf	?___awmod,w
  8608  0AC1  3E30               	addlw	48
  8609  0AC2  3196  2660  3189   	fcall	_EUSART_Write
  8610  0AC5  303A               	movlw	58
  8611  0AC6  3196  2660  3189   	fcall	_EUSART_Write
  8612  0AC9  300A               	movlw	10
  8613  0ACA  0020               	movlb	0	; select bank0
  8614  0ACB  00C7               	movwf	___awdiv@divisor
  8615  0ACC  3000               	movlw	0
  8616  0ACD  00C8               	movwf	___awdiv@divisor+1
  8617  0ACE  0821               	movf	_dateTime+1,w
  8618  0ACF  00D7               	movwf	??_DisplayTime
  8619  0AD0  01D8               	clrf	??_DisplayTime+1
  8620  0AD1  0857               	movf	??_DisplayTime,w
  8621  0AD2  00C9               	movwf	___awdiv@dividend
  8622  0AD3  0858               	movf	??_DisplayTime+1,w
  8623  0AD4  00CA               	movwf	___awdiv@dividend+1
  8624  0AD5  3189  2199  3189   	fcall	___awdiv
  8625  0AD8  0020               	movlb	0	; select bank0
  8626  0AD9  0847               	movf	?___awdiv,w
  8627  0ADA  3E30               	addlw	48
  8628  0ADB  3196  2660  3189   	fcall	_EUSART_Write
  8629  0ADE  300A               	movlw	10
  8630  0ADF  0020               	movlb	0	; select bank0
  8631  0AE0  00D0               	movwf	___awmod@divisor
  8632  0AE1  3000               	movlw	0
  8633  0AE2  00D1               	movwf	___awmod@divisor+1
  8634  0AE3  0821               	movf	_dateTime+1,w
  8635  0AE4  00D7               	movwf	??_DisplayTime
  8636  0AE5  01D8               	clrf	??_DisplayTime+1
  8637  0AE6  0857               	movf	??_DisplayTime,w
  8638  0AE7  00D2               	movwf	___awmod@dividend
  8639  0AE8  0858               	movf	??_DisplayTime+1,w
  8640  0AE9  00D3               	movwf	___awmod@dividend+1
  8641  0AEA  3188  20BC  3189   	fcall	___awmod
  8642  0AED  0020               	movlb	0	; select bank0
  8643  0AEE  0850               	movf	?___awmod,w
  8644  0AEF  3E30               	addlw	48
  8645  0AF0  3196  2660  3189   	fcall	_EUSART_Write
  8646  0AF3  303A               	movlw	58
  8647  0AF4  3196  2660  3189   	fcall	_EUSART_Write
  8648  0AF7  300A               	movlw	10
  8649  0AF8  0020               	movlb	0	; select bank0
  8650  0AF9  00C7               	movwf	___awdiv@divisor
  8651  0AFA  3000               	movlw	0
  8652  0AFB  00C8               	movwf	___awdiv@divisor+1
  8653  0AFC  0820               	movf	_dateTime,w
  8654  0AFD  00D7               	movwf	??_DisplayTime
  8655  0AFE  01D8               	clrf	??_DisplayTime+1
  8656  0AFF  0857               	movf	??_DisplayTime,w
  8657  0B00  00C9               	movwf	___awdiv@dividend
  8658  0B01  0858               	movf	??_DisplayTime+1,w
  8659  0B02  00CA               	movwf	___awdiv@dividend+1
  8660  0B03  3189  2199  3189   	fcall	___awdiv
  8661  0B06  0020               	movlb	0	; select bank0
  8662  0B07  0847               	movf	?___awdiv,w
  8663  0B08  3E30               	addlw	48
  8664  0B09  3196  2660  3189   	fcall	_EUSART_Write
  8665  0B0C  300A               	movlw	10
  8666  0B0D  0020               	movlb	0	; select bank0
  8667  0B0E  00D0               	movwf	___awmod@divisor
  8668  0B0F  3000               	movlw	0
  8669  0B10  00D1               	movwf	___awmod@divisor+1
  8670  0B11  0820               	movf	_dateTime,w
  8671  0B12  00D7               	movwf	??_DisplayTime
  8672  0B13  01D8               	clrf	??_DisplayTime+1
  8673  0B14  0857               	movf	??_DisplayTime,w
  8674  0B15  00D2               	movwf	___awmod@dividend
  8675  0B16  0858               	movf	??_DisplayTime+1,w
  8676  0B17  00D3               	movwf	___awmod@dividend+1
  8677  0B18  3188  20BC  3189   	fcall	___awmod
  8678  0B1B  0020               	movlb	0	; select bank0
  8679  0B1C  0850               	movf	?___awmod,w
  8680  0B1D  3E30               	addlw	48
  8681  0B1E  3196  2660         	fcall	_EUSART_Write
  8682  0B20  0020               	movlb	0	; select bank0
  8683  0B21  01B5               	clrf	_timeHasChgd
  8684  0B22  0008               	return
  8685  0B23                     __end_of_DisplayTime:	
  8686                           
  8687                           	psect	text27
  8688  1522                     __ptext27:	
  8689 ;; *************** function _DisplayClockMenu *****************
  8690 ;; Defined at:
  8691 ;;		line 240 in file "StateRTC.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;		None
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;		None
  8696 ;; Return value:  Size  Location     Type
  8697 ;;		None               void
  8698 ;; Registers used:
  8699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8705 ;;      Params:         0       0       0       0       0       0       0       0
  8706 ;;      Locals:         0       0       0       0       0       0       0       0
  8707 ;;      Temps:          0       0       0       0       0       0       0       0
  8708 ;;      Totals:         0       0       0       0       0       0       0       0
  8709 ;;Total ram usage:        0 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    7
  8712 ;; This function calls:
  8713 ;;		_LCDGoto
  8714 ;;		_LCDPutStr
  8715 ;; This function is called by:
  8716 ;;		_StateClock
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           
  8721                           ;psect for function _DisplayClockMenu
  8722  1522                     _DisplayClockMenu:	
  8723                           
  8724                           ;incstack = 0
  8725                           ; Regs used in _DisplayClockMenu: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8726                           ;StateRTC.c: 243: do { LCDGoto(0,0); LCDPutStr("     Clock"); } while (0);;
  8727  1522  0020               	movlb	0	; select bank0
  8728  1523  01C8               	clrf	LCDGoto@ln
  8729  1524  3000               	movlw	0
  8730  1525  3196  261A  3195   	fcall	_LCDGoto
  8731  1528  30F0               	movlw	low (STR_97| (0+32768))
  8732  1529  0020               	movlb	0	; select bank0
  8733  152A  00C8               	movwf	LCDPutStr@str
  8734  152B  3090               	movlw	high (STR_97| (0+32768))
  8735  152C  00C9               	movwf	LCDPutStr@str+1
  8736  152D  3196  2684  3195   	fcall	_LCDPutStr
  8737                           
  8738                           ;StateRTC.c: 246: do { LCDGoto(0,1); LCDPutStr("RA4=Next RB0=Now"); } while (0);;
  8739  1530  0020               	movlb	0	; select bank0
  8740  1531  01C8               	clrf	LCDGoto@ln
  8741  1532  0AC8               	incf	LCDGoto@ln,f
  8742  1533  3000               	movlw	0
  8743  1534  3196  261A  3195   	fcall	_LCDGoto
  8744  1537  3055               	movlw	low (STR_4| (0+32768))
  8745  1538  0020               	movlb	0	; select bank0
  8746  1539  00C8               	movwf	LCDPutStr@str
  8747  153A  3090               	movlw	high (STR_4| (0+32768))
  8748  153B  00C9               	movwf	LCDPutStr@str+1
  8749  153C  3196  2684         	fcall	_LCDPutStr
  8750  153E  0008               	return
  8751  153F                     __end_of_DisplayClockMenu:	
  8752                           
  8753                           	psect	text28
  8754  0904                     __ptext28:	
  8755 ;; *************** function _StateBuzzer *****************
  8756 ;; Defined at:
  8757 ;;		line 62 in file "StateBuzzer.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;		None
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;  sound           1   30[BANK0 ] unsigned char 
  8762 ;; Return value:  Size  Location     Type
  8763 ;;		None               void
  8764 ;; Registers used:
  8765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8766 ;; Tracked objects:
  8767 ;;		On entry : 0/0
  8768 ;;		On exit  : 0/0
  8769 ;;		Unchanged: 0/0
  8770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8771 ;;      Params:         0       0       0       0       0       0       0       0
  8772 ;;      Locals:         0       1       0       0       0       0       0       0
  8773 ;;      Temps:          0       1       0       0       0       0       0       0
  8774 ;;      Totals:         0       2       0       0       0       0       0       0
  8775 ;;Total ram usage:        2 bytes
  8776 ;; Hardware stack levels used:    1
  8777 ;; Hardware stack levels required when called:    8
  8778 ;; This function calls:
  8779 ;;		_DisplayBuzMenu
  8780 ;;		_DisplayBuzzerData
  8781 ;;		_LCDPutCmd
  8782 ;;		_SNDSound
  8783 ;;		_TMR4_StopTimer
  8784 ;; This function is called by:
  8785 ;;		_main
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           
  8790                           ;psect for function _StateBuzzer
  8791  0904                     _StateBuzzer:	
  8792                           
  8793                           ;StateBuzzer.c: 65: DisplayBuzMenu();
  8794                           
  8795                           ;incstack = 0
  8796                           ; Regs used in _StateBuzzer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8797  0904  3194  24E8  3189   	fcall	_DisplayBuzMenu
  8798  0907  290D               	goto	l5089
  8799  0908                     l5091:	
  8800                           
  8801                           ;StateBuzzer.c: 71: {
  8802                           ;StateBuzzer.c: 73: Buttons.But1Pressed = 0;
  8803  0908  103D               	bcf	_Buttons,0
  8804                           
  8805                           ;StateBuzzer.c: 76: LCDPutCmd(0x01);
  8806  0909  3001               	movlw	1
  8807  090A  3196  26FB         	fcall	_LCDPutCmd
  8808                           
  8809                           ;StateBuzzer.c: 79: return;
  8810  090C  0008               	return
  8811  090D                     l5089:	
  8812                           ;StateBuzzer.c: 67: while (1)
  8813                           
  8814                           ;StateBuzzer.c: 80: }
  8815                           
  8816                           
  8817                           ;StateBuzzer.c: 68: {
  8818                           ;StateBuzzer.c: 70: if((Buttons.But1Pressed))
  8819  090D  0020               	movlb	0	; select bank0
  8820  090E  183D               	btfsc	_Buttons,0
  8821  090F  2908               	goto	l5091
  8822                           
  8823                           ;StateBuzzer.c: 83: else if((Buttons.But2Pressed))
  8824  0910  1CBD               	btfss	_Buttons,1
  8825  0911  290D               	goto	l5089
  8826                           
  8827                           ;StateBuzzer.c: 84: {
  8828                           ;StateBuzzer.c: 86: Buttons.But2Pressed = 0;
  8829  0912  10BD               	bcf	_Buttons,1
  8830  0913  291E               	goto	l660
  8831  0914                     l5107:	
  8832                           
  8833                           ;StateBuzzer.c: 101: {
  8834                           ;StateBuzzer.c: 103: TMR4_StopTimer();
  8835  0914  3193  230F  3189   	fcall	_TMR4_StopTimer
  8836                           
  8837                           ;StateBuzzer.c: 106: Buttons.But2Pressed = 0;
  8838  0917  0020               	movlb	0	; select bank0
  8839  0918  10BD               	bcf	_Buttons,1
  8840                           
  8841                           ;StateBuzzer.c: 109: LCDPutCmd(0x01);
  8842  0919  3001               	movlw	1
  8843  091A  3196  26FB  3189   	fcall	_LCDPutCmd
  8844                           
  8845                           ;StateBuzzer.c: 112: break;
  8846  091D  294A               	goto	l5129
  8847  091E                     l660:	
  8848                           ;StateBuzzer.c: 88: while (1)
  8849                           
  8850                           ;StateBuzzer.c: 113: }
  8851                           
  8852                           
  8853                           ;StateBuzzer.c: 89: {
  8854                           ;StateBuzzer.c: 91: uint8_t sound = 1;
  8855  091E  0020               	movlb	0	; select bank0
  8856  091F  01DF               	clrf	StateBuzzer@sound
  8857  0920  0ADF               	incf	StateBuzzer@sound,f
  8858                           
  8859                           ;StateBuzzer.c: 94: SNDSound(sound,pwm_freq);
  8860  0921  086B               	movf	_pwm_freq,w
  8861  0922  00DE               	movwf	??_StateBuzzer
  8862  0923  085E               	movf	??_StateBuzzer,w
  8863  0924  00C1               	movwf	SNDSound@pwm_period
  8864  0925  085F               	movf	StateBuzzer@sound,w
  8865  0926  3193  23C8  3189   	fcall	_SNDSound
  8866                           
  8867                           ;StateBuzzer.c: 97: DisplayBuzzerData(pwm_freq);
  8868  0929  0020               	movlb	0	; select bank0
  8869  092A  086B               	movf	_pwm_freq,w
  8870  092B  3180  2071  3189   	fcall	_DisplayBuzzerData
  8871                           
  8872                           ;StateBuzzer.c: 100: if((Buttons.But2Pressed))
  8873  092E  0020               	movlb	0	; select bank0
  8874  092F  18BD               	btfsc	_Buttons,1
  8875  0930  2914               	goto	l5107
  8876                           
  8877                           ;StateBuzzer.c: 115: else if((Buttons.But1Pressed))
  8878  0931  1C3D               	btfss	_Buttons,0
  8879  0932  291E               	goto	l660
  8880                           
  8881                           ;StateBuzzer.c: 116: {
  8882                           ;StateBuzzer.c: 118: Buttons.But1Pressed = 0;
  8883  0933  103D               	bcf	_Buttons,0
  8884                           
  8885                           ;StateBuzzer.c: 121: if(pwm_freq >= 251)
  8886  0934  30FB               	movlw	251
  8887  0935  026B               	subwf	_pwm_freq,w
  8888  0936  1803               	btfsc	3,0
  8889  0937  293C               	goto	l5123
  8890                           
  8891                           ;StateBuzzer.c: 125: else if(pwm_freq <= 4)
  8892                           
  8893                           ;StateBuzzer.c: 124: }
  8894                           
  8895                           ;StateBuzzer.c: 122: {
  8896                           ;StateBuzzer.c: 123: pwm_freq = 5;
  8897  0938  3005               	movlw	5
  8898  0939  026B               	subwf	_pwm_freq,w
  8899  093A  1803               	skipnc
  8900  093B  2941               	goto	l5125
  8901  093C                     l5123:	
  8902                           
  8903                           ;StateBuzzer.c: 126: {
  8904                           ;StateBuzzer.c: 127: pwm_freq = 5;
  8905  093C  3005               	movlw	5
  8906  093D  00DE               	movwf	??_StateBuzzer
  8907  093E  085E               	movf	??_StateBuzzer,w
  8908  093F  00EB               	movwf	_pwm_freq
  8909                           
  8910                           ;StateBuzzer.c: 128: }
  8911  0940  291E               	goto	l660
  8912  0941                     l5125:	
  8913                           
  8914                           ;StateBuzzer.c: 129: else
  8915                           ;StateBuzzer.c: 130: {
  8916                           ;StateBuzzer.c: 131: pwm_freq += 5;
  8917  0941  3005               	movlw	5
  8918  0942  00DE               	movwf	??_StateBuzzer
  8919  0943  085E               	movf	??_StateBuzzer,w
  8920  0944  07EB               	addwf	_pwm_freq,f
  8921                           
  8922                           ;StateBuzzer.c: 134: LCDPutCmd(0x01);
  8923  0945  3001               	movlw	1
  8924  0946  3196  26FB  3189   	fcall	_LCDPutCmd
  8925  0949  291E               	goto	l660
  8926  094A                     l5129:	
  8927                           
  8928                           ;StateBuzzer.c: 135: }
  8929                           ;StateBuzzer.c: 136: }
  8930                           ;StateBuzzer.c: 137: }
  8931                           ;StateBuzzer.c: 139: LCDPutCmd(0x01);
  8932  094A  3001               	movlw	1
  8933  094B  3196  26FB         	fcall	_LCDPutCmd
  8934                           
  8935                           ;StateBuzzer.c: 141: break;
  8936  094D  0008               	return
  8937  094E                     __end_of_StateBuzzer:	
  8938                           
  8939                           	psect	text29
  8940  130F                     __ptext29:	
  8941 ;; *************** function _TMR4_StopTimer *****************
  8942 ;; Defined at:
  8943 ;;		line 81 in file "mcc_generated_files/tmr4.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;		None
  8946 ;; Auto vars:     Size  Location     Type
  8947 ;;		None
  8948 ;; Return value:  Size  Location     Type
  8949 ;;		None               void
  8950 ;; Registers used:
  8951 ;;		None
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8957 ;;      Params:         0       0       0       0       0       0       0       0
  8958 ;;      Locals:         0       0       0       0       0       0       0       0
  8959 ;;      Temps:          0       0       0       0       0       0       0       0
  8960 ;;      Totals:         0       0       0       0       0       0       0       0
  8961 ;;Total ram usage:        0 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    4
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_StateBuzzer
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           
  8972                           ;psect for function _TMR4_StopTimer
  8973  130F                     _TMR4_StopTimer:	
  8974                           
  8975                           ;tmr4.c: 84: T4CONbits.TMR4ON = 0;
  8976                           
  8977                           ;incstack = 0
  8978                           ; Regs used in _TMR4_StopTimer: []
  8979  130F  0028               	movlb	8	; select bank8
  8980  1310  1117               	bcf	23,2	;volatile
  8981  1311  0008               	return
  8982  1312                     __end_of_TMR4_StopTimer:	
  8983                           
  8984                           	psect	text30
  8985  13C8                     __ptext30:	
  8986 ;; *************** function _SNDSound *****************
  8987 ;; Defined at:
  8988 ;;		line 146 in file "StateBuzzer.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;  onoff           1    wreg     unsigned char 
  8991 ;;  pwm_period      1    0[BANK0 ] unsigned char 
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;  onoff           1    1[BANK0 ] unsigned char 
  8994 ;; Return value:  Size  Location     Type
  8995 ;;		None               void
  8996 ;; Registers used:
  8997 ;;		wreg, status,2, status,0, pclath, cstack
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9003 ;;      Params:         0       1       0       0       0       0       0       0
  9004 ;;      Locals:         0       1       0       0       0       0       0       0
  9005 ;;      Temps:          0       0       0       0       0       0       0       0
  9006 ;;      Totals:         0       2       0       0       0       0       0       0
  9007 ;;Total ram usage:        2 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; Hardware stack levels required when called:    5
  9010 ;; This function calls:
  9011 ;;		_TMR4_StartTimer
  9012 ;; This function is called by:
  9013 ;;		_StateBuzzer
  9014 ;; This function uses a non-reentrant model
  9015 ;;
  9016                           
  9017                           
  9018                           ;psect for function _SNDSound
  9019  13C8                     _SNDSound:	
  9020                           
  9021                           ;incstack = 0
  9022                           ; Regs used in _SNDSound: [wreg+status,2+status,0+pclath+cstack]
  9023                           ;SNDSound@onoff stored from wreg
  9024  13C8  0020               	movlb	0	; select bank0
  9025  13C9  00C2               	movwf	SNDSound@onoff
  9026                           
  9027                           ;StateBuzzer.c: 149: PR4 = pwm_period;
  9028  13CA  0841               	movf	SNDSound@pwm_period,w
  9029  13CB  0028               	movlb	8	; select bank8
  9030  13CC  0096               	movwf	22	;volatile
  9031                           
  9032                           ;StateBuzzer.c: 152: CCPR1L = pwm_on;
  9033  13CD  0020               	movlb	0	; select bank0
  9034  13CE  086C               	movf	_pwm_on,w
  9035  13CF  0025               	movlb	5	; select bank5
  9036  13D0  0091               	movwf	17	;volatile
  9037                           
  9038                           ;StateBuzzer.c: 155: TMR4_StartTimer();
  9039  13D1  3193  230C  3193   	fcall	_TMR4_StartTimer
  9040                           
  9041                           ;StateBuzzer.c: 158: if (onoff)
  9042  13D4  0020               	movlb	0	; select bank0
  9043  13D5  0842               	movf	SNDSound@onoff,w
  9044  13D6  1903               	btfsc	3,2
  9045  13D7  2BDB               	goto	l674
  9046                           
  9047                           ;StateBuzzer.c: 159: {
  9048                           ;StateBuzzer.c: 160: TRISC2 = 0;
  9049  13D8  0021               	movlb	1	; select bank1
  9050  13D9  110E               	bcf	14,2	;volatile
  9051                           
  9052                           ;StateBuzzer.c: 161: }
  9053  13DA  0008               	return
  9054  13DB                     l674:	
  9055                           
  9056                           ;StateBuzzer.c: 162: else
  9057                           ;StateBuzzer.c: 163: {
  9058                           ;StateBuzzer.c: 164: TRISC2 = 1;
  9059  13DB  0021               	movlb	1	; select bank1
  9060  13DC  150E               	bsf	14,2	;volatile
  9061  13DD  0008               	return
  9062  13DE                     __end_of_SNDSound:	
  9063                           
  9064                           	psect	text31
  9065  130C                     __ptext31:	
  9066 ;; *************** function _TMR4_StartTimer *****************
  9067 ;; Defined at:
  9068 ;;		line 75 in file "mcc_generated_files/tmr4.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;		None
  9073 ;; Return value:  Size  Location     Type
  9074 ;;		None               void
  9075 ;; Registers used:
  9076 ;;		None
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9082 ;;      Params:         0       0       0       0       0       0       0       0
  9083 ;;      Locals:         0       0       0       0       0       0       0       0
  9084 ;;      Temps:          0       0       0       0       0       0       0       0
  9085 ;;      Totals:         0       0       0       0       0       0       0       0
  9086 ;;Total ram usage:        0 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    4
  9089 ;; This function calls:
  9090 ;;		Nothing
  9091 ;; This function is called by:
  9092 ;;		_SNDSound
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function _TMR4_StartTimer
  9098  130C                     _TMR4_StartTimer:	
  9099                           
  9100                           ;tmr4.c: 78: T4CONbits.TMR4ON = 1;
  9101                           
  9102                           ;incstack = 0
  9103                           ; Regs used in _TMR4_StartTimer: []
  9104  130C  0028               	movlb	8	; select bank8
  9105  130D  1517               	bsf	23,2	;volatile
  9106  130E  0008               	return
  9107  130F                     __end_of_TMR4_StartTimer:	
  9108                           
  9109                           	psect	text32
  9110  0071                     __ptext32:	
  9111 ;; *************** function _DisplayBuzzerData *****************
  9112 ;; Defined at:
  9113 ;;		line 177 in file "StateBuzzer.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  pwm_freq        1    wreg     volatile unsigned char 
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  pwm_freq        1   28[BANK0 ] volatile unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;		None               void
  9120 ;; Registers used:
  9121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9127 ;;      Params:         0       0       0       0       0       0       0       0
  9128 ;;      Locals:         0       3       0       0       0       0       0       0
  9129 ;;      Temps:          0       4       0       0       0       0       0       0
  9130 ;;      Totals:         0       7       0       0       0       0       0       0
  9131 ;;Total ram usage:        7 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    7
  9134 ;; This function calls:
  9135 ;;		_EUSART_Write
  9136 ;;		_LCDGoto
  9137 ;;		_LCDPutChar
  9138 ;;		_LCDPutStr
  9139 ;;		___awdiv
  9140 ;;		___awmod
  9141 ;;		_printf
  9142 ;; This function is called by:
  9143 ;;		_StateBuzzer
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           
  9148                           ;psect for function _DisplayBuzzerData
  9149  0071                     _DisplayBuzzerData:	
  9150                           
  9151                           ;incstack = 0
  9152                           ; Regs used in _DisplayBuzzerData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9153                           ;DisplayBuzzerData@pwm_freq stored from wreg
  9154  0071  0020               	movlb	0	; select bank0
  9155  0072  00DD               	movwf	DisplayBuzzerData@pwm_freq	;volatile
  9156                           
  9157                           ;StateBuzzer.c: 180: do { LCDGoto(0,0); LCDPutStr("PWM:"); LCDPutChar(((((pwm_freq/5)-1)
      +                          *2) / 100) + '0'); LCDPutChar(((((((pwm_freq/5)-1)*2) /10)/1) % 10) + '0'); LCDPutChar((
      +                          (((pwm_freq/5)-1)*2) % 10) + '0'); LCDPutChar('%'); } while (0);;
  9158  0073  01C8               	clrf	LCDGoto@ln
  9159  0074  3000               	movlw	0
  9160  0075  3196  261A  3180   	fcall	_LCDGoto
  9161  0078  304E               	movlw	low (STR_12| (0+32768))
  9162  0079  0020               	movlb	0	; select bank0
  9163  007A  00C8               	movwf	LCDPutStr@str
  9164  007B  3091               	movlw	high (STR_12| (0+32768))
  9165  007C  00C9               	movwf	LCDPutStr@str+1
  9166  007D  3196  2684  3180   	fcall	_LCDPutStr
  9167  0080  3005               	movlw	5
  9168  0081  0020               	movlb	0	; select bank0
  9169  0082  00C7               	movwf	___awdiv@divisor
  9170  0083  3000               	movlw	0
  9171  0084  00C8               	movwf	___awdiv@divisor+1
  9172  0085  085D               	movf	DisplayBuzzerData@pwm_freq,w	;volatile
  9173  0086  00D7               	movwf	??_DisplayBuzzerData
  9174  0087  01D8               	clrf	??_DisplayBuzzerData+1
  9175  0088  0857               	movf	??_DisplayBuzzerData,w
  9176  0089  00C9               	movwf	___awdiv@dividend
  9177  008A  0858               	movf	??_DisplayBuzzerData+1,w
  9178  008B  00CA               	movwf	___awdiv@dividend+1
  9179  008C  3189  2199  3180   	fcall	___awdiv
  9180  008F  0020               	movlb	0	; select bank0
  9181  0090  0847               	movf	?___awdiv,w
  9182  0091  00D9               	movwf	??_DisplayBuzzerData+2
  9183  0092  0848               	movf	?___awdiv+1,w
  9184  0093  00DA               	movwf	??_DisplayBuzzerData+3
  9185  0094  35D9               	lslf	??_DisplayBuzzerData+2,f
  9186  0095  0DDA               	rlf	??_DisplayBuzzerData+3,f
  9187  0096  0859               	movf	??_DisplayBuzzerData+2,w
  9188  0097  3EFE               	addlw	254
  9189  0098  00DB               	movwf	_DisplayBuzzerData$2035
  9190  0099  30FF               	movlw	255
  9191  009A  3D5A               	addwfc	??_DisplayBuzzerData+3,w
  9192  009B  00DC               	movwf	_DisplayBuzzerData$2035+1
  9193  009C  3064               	movlw	100
  9194  009D  00C7               	movwf	___awdiv@divisor
  9195  009E  3000               	movlw	0
  9196  009F  00C8               	movwf	___awdiv@divisor+1
  9197  00A0  085C               	movf	_DisplayBuzzerData$2035+1,w
  9198  00A1  01CA               	clrf	___awdiv@dividend+1
  9199  00A2  07CA               	addwf	___awdiv@dividend+1,f
  9200  00A3  085B               	movf	_DisplayBuzzerData$2035,w
  9201  00A4  01C9               	clrf	___awdiv@dividend
  9202  00A5  07C9               	addwf	___awdiv@dividend,f
  9203  00A6  3189  2199  3180   	fcall	___awdiv
  9204  00A9  0020               	movlb	0	; select bank0
  9205  00AA  0847               	movf	?___awdiv,w
  9206  00AB  3E30               	addlw	48
  9207  00AC  3196  263D  3180   	fcall	_LCDPutChar
  9208  00AF  3005               	movlw	5
  9209  00B0  0020               	movlb	0	; select bank0
  9210  00B1  00C7               	movwf	___awdiv@divisor
  9211  00B2  3000               	movlw	0
  9212  00B3  00C8               	movwf	___awdiv@divisor+1
  9213  00B4  085D               	movf	DisplayBuzzerData@pwm_freq,w	;volatile
  9214  00B5  00D7               	movwf	??_DisplayBuzzerData
  9215  00B6  01D8               	clrf	??_DisplayBuzzerData+1
  9216  00B7  0857               	movf	??_DisplayBuzzerData,w
  9217  00B8  00C9               	movwf	___awdiv@dividend
  9218  00B9  0858               	movf	??_DisplayBuzzerData+1,w
  9219  00BA  00CA               	movwf	___awdiv@dividend+1
  9220  00BB  3189  2199  3180   	fcall	___awdiv
  9221  00BE  0020               	movlb	0	; select bank0
  9222  00BF  0847               	movf	?___awdiv,w
  9223  00C0  00D9               	movwf	??_DisplayBuzzerData+2
  9224  00C1  0848               	movf	?___awdiv+1,w
  9225  00C2  00DA               	movwf	??_DisplayBuzzerData+3
  9226  00C3  35D9               	lslf	??_DisplayBuzzerData+2,f
  9227  00C4  0DDA               	rlf	??_DisplayBuzzerData+3,f
  9228  00C5  0859               	movf	??_DisplayBuzzerData+2,w
  9229  00C6  3EFE               	addlw	254
  9230  00C7  00DB               	movwf	_DisplayBuzzerData$2035
  9231  00C8  30FF               	movlw	255
  9232  00C9  3D5A               	addwfc	??_DisplayBuzzerData+3,w
  9233  00CA  00DC               	movwf	_DisplayBuzzerData$2035+1
  9234  00CB  300A               	movlw	10
  9235  00CC  00D0               	movwf	___awmod@divisor
  9236  00CD  3000               	movlw	0
  9237  00CE  00D1               	movwf	___awmod@divisor+1
  9238  00CF  300A               	movlw	10
  9239  00D0  00C7               	movwf	___awdiv@divisor
  9240  00D1  3000               	movlw	0
  9241  00D2  00C8               	movwf	___awdiv@divisor+1
  9242  00D3  085C               	movf	_DisplayBuzzerData$2035+1,w
  9243  00D4  01CA               	clrf	___awdiv@dividend+1
  9244  00D5  07CA               	addwf	___awdiv@dividend+1,f
  9245  00D6  085B               	movf	_DisplayBuzzerData$2035,w
  9246  00D7  01C9               	clrf	___awdiv@dividend
  9247  00D8  07C9               	addwf	___awdiv@dividend,f
  9248  00D9  3189  2199  3180   	fcall	___awdiv
  9249  00DC  0020               	movlb	0	; select bank0
  9250  00DD  0848               	movf	?___awdiv+1,w
  9251  00DE  01D3               	clrf	___awmod@dividend+1
  9252  00DF  07D3               	addwf	___awmod@dividend+1,f
  9253  00E0  0847               	movf	?___awdiv,w
  9254  00E1  01D2               	clrf	___awmod@dividend
  9255  00E2  07D2               	addwf	___awmod@dividend,f
  9256  00E3  3188  20BC  3180   	fcall	___awmod
  9257  00E6  0020               	movlb	0	; select bank0
  9258  00E7  0850               	movf	?___awmod,w
  9259  00E8  3E30               	addlw	48
  9260  00E9  3196  263D  3180   	fcall	_LCDPutChar
  9261  00EC  300A               	movlw	10
  9262  00ED  0020               	movlb	0	; select bank0
  9263  00EE  00D0               	movwf	___awmod@divisor
  9264  00EF  3000               	movlw	0
  9265  00F0  00D1               	movwf	___awmod@divisor+1
  9266  00F1  3005               	movlw	5
  9267  00F2  00C7               	movwf	___awdiv@divisor
  9268  00F3  3000               	movlw	0
  9269  00F4  00C8               	movwf	___awdiv@divisor+1
  9270  00F5  085D               	movf	DisplayBuzzerData@pwm_freq,w	;volatile
  9271  00F6  00D7               	movwf	??_DisplayBuzzerData
  9272  00F7  01D8               	clrf	??_DisplayBuzzerData+1
  9273  00F8  0857               	movf	??_DisplayBuzzerData,w
  9274  00F9  00C9               	movwf	___awdiv@dividend
  9275  00FA  0858               	movf	??_DisplayBuzzerData+1,w
  9276  00FB  00CA               	movwf	___awdiv@dividend+1
  9277  00FC  3189  2199  3180   	fcall	___awdiv
  9278  00FF  0020               	movlb	0	; select bank0
  9279  0100  0847               	movf	?___awdiv,w
  9280  0101  00D9               	movwf	??_DisplayBuzzerData+2
  9281  0102  0848               	movf	?___awdiv+1,w
  9282  0103  00DA               	movwf	??_DisplayBuzzerData+3
  9283  0104  35D9               	lslf	??_DisplayBuzzerData+2,f
  9284  0105  0DDA               	rlf	??_DisplayBuzzerData+3,f
  9285  0106  0859               	movf	??_DisplayBuzzerData+2,w
  9286  0107  3EFE               	addlw	254
  9287  0108  00D2               	movwf	___awmod@dividend
  9288  0109  30FF               	movlw	255
  9289  010A  3D5A               	addwfc	??_DisplayBuzzerData+3,w
  9290  010B  00D3               	movwf	___awmod@dividend+1
  9291  010C  3188  20BC  3180   	fcall	___awmod
  9292  010F  0020               	movlb	0	; select bank0
  9293  0110  0850               	movf	?___awmod,w
  9294  0111  3E30               	addlw	48
  9295  0112  3196  263D  3180   	fcall	_LCDPutChar
  9296  0115  3025               	movlw	37
  9297  0116  3196  263D  3180   	fcall	_LCDPutChar
  9298                           
  9299                           ;StateBuzzer.c: 183: do { LCDPutStr(" Key:"); switch (pwm_freq) { case 10: LCDPutStr("D8
      +                          #"); break; case 15: LCDPutStr("B7 "); break; case 20: LCDPutStr("F7#"); break; case 25:
      +                           LCDPutStr("D7#"); break; case 30: LCDPutStr("C7 "); break; case 35: LCDPutStr("A6 "); b
      +                          reak; c
  9300  0119  308F               	movlw	low ((STR_52+9)| (0+32768))
  9301  011A  0020               	movlb	0	; select bank0
  9302  011B  00C8               	movwf	LCDPutStr@str
  9303  011C  3090               	movlw	high ((STR_52+9)| (0+32768))
  9304  011D  00C9               	movwf	LCDPutStr@str+1
  9305  011E  3196  2684  3180   	fcall	_LCDPutStr
  9306  0121  2A66               	goto	l4821
  9307  0122                     l4747:	
  9308  0122  30DB               	movlw	low (STR_14| (0+32768))
  9309  0123  0020               	movlb	0	; select bank0
  9310  0124  00C8               	movwf	LCDPutStr@str
  9311  0125  3091               	movlw	high (STR_14| (0+32768))
  9312  0126  00C9               	movwf	LCDPutStr@str+1
  9313  0127  3196  2684  3180   	fcall	_LCDPutStr
  9314  012A  2AD2               	goto	l4823
  9315  012B                     l4749:	
  9316  012B  309F               	movlw	low (STR_15| (0+32768))
  9317  012C  0020               	movlb	0	; select bank0
  9318  012D  00C8               	movwf	LCDPutStr@str
  9319  012E  3091               	movlw	high (STR_15| (0+32768))
  9320  012F  00C9               	movwf	LCDPutStr@str+1
  9321  0130  3196  2684  3180   	fcall	_LCDPutStr
  9322  0133  2AD2               	goto	l4823
  9323  0134                     l4751:	
  9324  0134  30D7               	movlw	low (STR_16| (0+32768))
  9325  0135  0020               	movlb	0	; select bank0
  9326  0136  00C8               	movwf	LCDPutStr@str
  9327  0137  3091               	movlw	high (STR_16| (0+32768))
  9328  0138  00C9               	movwf	LCDPutStr@str+1
  9329  0139  3196  2684  3180   	fcall	_LCDPutStr
  9330  013C  2AD2               	goto	l4823
  9331  013D                     l4753:	
  9332  013D  30D3               	movlw	low (STR_17| (0+32768))
  9333  013E  0020               	movlb	0	; select bank0
  9334  013F  00C8               	movwf	LCDPutStr@str
  9335  0140  3091               	movlw	high (STR_17| (0+32768))
  9336  0141  00C9               	movwf	LCDPutStr@str+1
  9337  0142  3196  2684  3180   	fcall	_LCDPutStr
  9338  0145  2AD2               	goto	l4823
  9339  0146                     l4755:	
  9340  0146  30A3               	movlw	low (STR_18| (0+32768))
  9341  0147  0020               	movlb	0	; select bank0
  9342  0148  00C8               	movwf	LCDPutStr@str
  9343  0149  3091               	movlw	high (STR_18| (0+32768))
  9344  014A  00C9               	movwf	LCDPutStr@str+1
  9345  014B  3196  2684  3180   	fcall	_LCDPutStr
  9346  014E  2AD2               	goto	l4823
  9347  014F                     l4757:	
  9348  014F  308F               	movlw	low (STR_19| (0+32768))
  9349  0150  0020               	movlb	0	; select bank0
  9350  0151  00C8               	movwf	LCDPutStr@str
  9351  0152  3091               	movlw	high (STR_19| (0+32768))
  9352  0153  00C9               	movwf	LCDPutStr@str+1
  9353  0154  3196  2684  3180   	fcall	_LCDPutStr
  9354  0157  2AD2               	goto	l4823
  9355  0158                     l4759:	
  9356  0158  309B               	movlw	low (STR_20| (0+32768))
  9357  0159  0020               	movlb	0	; select bank0
  9358  015A  00C8               	movwf	LCDPutStr@str
  9359  015B  3091               	movlw	high (STR_20| (0+32768))
  9360  015C  00C9               	movwf	LCDPutStr@str+1
  9361  015D  3196  2684  3180   	fcall	_LCDPutStr
  9362  0160  2AD2               	goto	l4823
  9363  0161                     l4761:	
  9364  0161  3097               	movlw	low (STR_21| (0+32768))
  9365  0162  0020               	movlb	0	; select bank0
  9366  0163  00C8               	movwf	LCDPutStr@str
  9367  0164  3091               	movlw	high (STR_21| (0+32768))
  9368  0165  00C9               	movwf	LCDPutStr@str+1
  9369  0166  3196  2684  3180   	fcall	_LCDPutStr
  9370  0169  2AD2               	goto	l4823
  9371  016A                     l4763:	
  9372  016A  30CF               	movlw	low (STR_22| (0+32768))
  9373  016B  0020               	movlb	0	; select bank0
  9374  016C  00C8               	movwf	LCDPutStr@str
  9375  016D  3091               	movlw	high (STR_22| (0+32768))
  9376  016E  00C9               	movwf	LCDPutStr@str+1
  9377  016F  3196  2684  3180   	fcall	_LCDPutStr
  9378  0172  2AD2               	goto	l4823
  9379  0173                     l4765:	
  9380  0173  3093               	movlw	low (STR_23| (0+32768))
  9381  0174  0020               	movlb	0	; select bank0
  9382  0175  00C8               	movwf	LCDPutStr@str
  9383  0176  3091               	movlw	high (STR_23| (0+32768))
  9384  0177  00C9               	movwf	LCDPutStr@str+1
  9385  0178  3196  2684  3180   	fcall	_LCDPutStr
  9386  017B  2AD2               	goto	l4823
  9387  017C                     l4767:	
  9388  017C  30E3               	movlw	low (STR_24| (0+32768))
  9389  017D  0020               	movlb	0	; select bank0
  9390  017E  00C8               	movwf	LCDPutStr@str
  9391  017F  3091               	movlw	high (STR_24| (0+32768))
  9392  0180  00C9               	movwf	LCDPutStr@str+1
  9393  0181  3196  2684  3180   	fcall	_LCDPutStr
  9394  0184  2AD2               	goto	l4823
  9395  0185                     l4769:	
  9396  0185  30BB               	movlw	low (STR_25| (0+32768))
  9397  0186  0020               	movlb	0	; select bank0
  9398  0187  00C8               	movwf	LCDPutStr@str
  9399  0188  3091               	movlw	high (STR_25| (0+32768))
  9400  0189  00C9               	movwf	LCDPutStr@str+1
  9401  018A  3196  2684  3180   	fcall	_LCDPutStr
  9402  018D  2AD2               	goto	l4823
  9403  018E                     l4771:	
  9404  018E  3077               	movlw	low (STR_26| (0+32768))
  9405  018F  0020               	movlb	0	; select bank0
  9406  0190  00C8               	movwf	LCDPutStr@str
  9407  0191  3091               	movlw	high (STR_26| (0+32768))
  9408  0192  00C9               	movwf	LCDPutStr@str+1
  9409  0193  3196  2684  3180   	fcall	_LCDPutStr
  9410  0196  2AD2               	goto	l4823
  9411  0197                     l4773:	
  9412  0197  30CB               	movlw	low (STR_27| (0+32768))
  9413  0198  0020               	movlb	0	; select bank0
  9414  0199  00C8               	movwf	LCDPutStr@str
  9415  019A  3091               	movlw	high (STR_27| (0+32768))
  9416  019B  00C9               	movwf	LCDPutStr@str+1
  9417  019C  3196  2684  3180   	fcall	_LCDPutStr
  9418  019F  2AD2               	goto	l4823
  9419  01A0                     l4775:	
  9420  01A0  308B               	movlw	low (STR_28| (0+32768))
  9421  01A1  0020               	movlb	0	; select bank0
  9422  01A2  00C8               	movwf	LCDPutStr@str
  9423  01A3  3091               	movlw	high (STR_28| (0+32768))
  9424  01A4  00C9               	movwf	LCDPutStr@str+1
  9425  01A5  3196  2684  3180   	fcall	_LCDPutStr
  9426  01A8  2AD2               	goto	l4823
  9427  01A9                     l4777:	
  9428  01A9  30C7               	movlw	low (STR_29| (0+32768))
  9429  01AA  0020               	movlb	0	; select bank0
  9430  01AB  00C8               	movwf	LCDPutStr@str
  9431  01AC  3091               	movlw	high (STR_29| (0+32768))
  9432  01AD  00C9               	movwf	LCDPutStr@str+1
  9433  01AE  3196  2684  3180   	fcall	_LCDPutStr
  9434  01B1  2AD2               	goto	l4823
  9435  01B2                     l4779:	
  9436  01B2  3087               	movlw	low (STR_30| (0+32768))
  9437  01B3  0020               	movlb	0	; select bank0
  9438  01B4  00C8               	movwf	LCDPutStr@str
  9439  01B5  3091               	movlw	high (STR_30| (0+32768))
  9440  01B6  00C9               	movwf	LCDPutStr@str+1
  9441  01B7  3196  2684  3180   	fcall	_LCDPutStr
  9442  01BA  2AD2               	goto	l4823
  9443  01BB                     l4781:	
  9444  01BB  3083               	movlw	low (STR_31| (0+32768))
  9445  01BC  0020               	movlb	0	; select bank0
  9446  01BD  00C8               	movwf	LCDPutStr@str
  9447  01BE  3091               	movlw	high (STR_31| (0+32768))
  9448  01BF  00C9               	movwf	LCDPutStr@str+1
  9449  01C0  3196  2684  3180   	fcall	_LCDPutStr
  9450  01C3  2AD2               	goto	l4823
  9451  01C4                     l4783:	
  9452  01C4  30C3               	movlw	low (STR_32| (0+32768))
  9453  01C5  0020               	movlb	0	; select bank0
  9454  01C6  00C8               	movwf	LCDPutStr@str
  9455  01C7  3091               	movlw	high (STR_32| (0+32768))
  9456  01C8  00C9               	movwf	LCDPutStr@str+1
  9457  01C9  3196  2684  3180   	fcall	_LCDPutStr
  9458  01CC  2AD2               	goto	l4823
  9459  01CD                     l4785:	
  9460  01CD  307F               	movlw	low (STR_33| (0+32768))
  9461  01CE  0020               	movlb	0	; select bank0
  9462  01CF  00C8               	movwf	LCDPutStr@str
  9463  01D0  3091               	movlw	high (STR_33| (0+32768))
  9464  01D1  00C9               	movwf	LCDPutStr@str+1
  9465  01D2  3196  2684  3180   	fcall	_LCDPutStr
  9466  01D5  2AD2               	goto	l4823
  9467  01D6                     l4787:	
  9468  01D6  30BF               	movlw	low (STR_34| (0+32768))
  9469  01D7  0020               	movlb	0	; select bank0
  9470  01D8  00C8               	movwf	LCDPutStr@str
  9471  01D9  3091               	movlw	high (STR_34| (0+32768))
  9472  01DA  00C9               	movwf	LCDPutStr@str+1
  9473  01DB  3196  2684  3180   	fcall	_LCDPutStr
  9474  01DE  2AD2               	goto	l4823
  9475  01DF                     l4789:	
  9476  01DF  307B               	movlw	low (STR_35| (0+32768))
  9477  01E0  0020               	movlb	0	; select bank0
  9478  01E1  00C8               	movwf	LCDPutStr@str
  9479  01E2  3091               	movlw	high (STR_35| (0+32768))
  9480  01E3  00C9               	movwf	LCDPutStr@str+1
  9481  01E4  3196  2684  3180   	fcall	_LCDPutStr
  9482  01E7  2AD2               	goto	l4823
  9483  01E8                     l4791:	
  9484  01E8  305F               	movlw	low (STR_36| (0+32768))
  9485  01E9  0020               	movlb	0	; select bank0
  9486  01EA  00C8               	movwf	LCDPutStr@str
  9487  01EB  3091               	movlw	high (STR_36| (0+32768))
  9488  01EC  00C9               	movwf	LCDPutStr@str+1
  9489  01ED  3196  2684  3180   	fcall	_LCDPutStr
  9490  01F0  2AD2               	goto	l4823
  9491  01F1                     l4793:	
  9492  01F1  30A7               	movlw	low (STR_37| (0+32768))
  9493  01F2  0020               	movlb	0	; select bank0
  9494  01F3  00C8               	movwf	LCDPutStr@str
  9495  01F4  3091               	movlw	high (STR_37| (0+32768))
  9496  01F5  00C9               	movwf	LCDPutStr@str+1
  9497  01F6  3196  2684  3180   	fcall	_LCDPutStr
  9498  01F9  2AD2               	goto	l4823
  9499  01FA                     l4795:	
  9500  01FA  305B               	movlw	low (STR_38| (0+32768))
  9501  01FB  0020               	movlb	0	; select bank0
  9502  01FC  00C8               	movwf	LCDPutStr@str
  9503  01FD  3091               	movlw	high (STR_38| (0+32768))
  9504  01FE  00C9               	movwf	LCDPutStr@str+1
  9505  01FF  3196  2684  3180   	fcall	_LCDPutStr
  9506  0202  2AD2               	goto	l4823
  9507  0203                     l4797:	
  9508  0203  30B7               	movlw	low (STR_39| (0+32768))
  9509  0204  0020               	movlb	0	; select bank0
  9510  0205  00C8               	movwf	LCDPutStr@str
  9511  0206  3091               	movlw	high (STR_39| (0+32768))
  9512  0207  00C9               	movwf	LCDPutStr@str+1
  9513  0208  3196  2684  3180   	fcall	_LCDPutStr
  9514  020B  2AD2               	goto	l4823
  9515  020C                     l4799:	
  9516  020C  3073               	movlw	low (STR_40| (0+32768))
  9517  020D  0020               	movlb	0	; select bank0
  9518  020E  00C8               	movwf	LCDPutStr@str
  9519  020F  3091               	movlw	high (STR_40| (0+32768))
  9520  0210  00C9               	movwf	LCDPutStr@str+1
  9521  0211  3196  2684  3180   	fcall	_LCDPutStr
  9522  0214  2AD2               	goto	l4823
  9523  0215                     l4801:	
  9524  0215  30B3               	movlw	low (STR_41| (0+32768))
  9525  0216  0020               	movlb	0	; select bank0
  9526  0217  00C8               	movwf	LCDPutStr@str
  9527  0218  3091               	movlw	high (STR_41| (0+32768))
  9528  0219  00C9               	movwf	LCDPutStr@str+1
  9529  021A  3196  2684  3180   	fcall	_LCDPutStr
  9530  021D  2AD2               	goto	l4823
  9531  021E                     l4803:	
  9532  021E  306F               	movlw	low (STR_42| (0+32768))
  9533  021F  0020               	movlb	0	; select bank0
  9534  0220  00C8               	movwf	LCDPutStr@str
  9535  0221  3091               	movlw	high (STR_42| (0+32768))
  9536  0222  00C9               	movwf	LCDPutStr@str+1
  9537  0223  3196  2684  3180   	fcall	_LCDPutStr
  9538  0226  2AD2               	goto	l4823
  9539  0227                     l4805:	
  9540  0227  306B               	movlw	low (STR_43| (0+32768))
  9541  0228  0020               	movlb	0	; select bank0
  9542  0229  00C8               	movwf	LCDPutStr@str
  9543  022A  3091               	movlw	high (STR_43| (0+32768))
  9544  022B  00C9               	movwf	LCDPutStr@str+1
  9545  022C  3196  2684  3180   	fcall	_LCDPutStr
  9546  022F  2AD2               	goto	l4823
  9547  0230                     l4807:	
  9548  0230  30AF               	movlw	low (STR_44| (0+32768))
  9549  0231  0020               	movlb	0	; select bank0
  9550  0232  00C8               	movwf	LCDPutStr@str
  9551  0233  3091               	movlw	high (STR_44| (0+32768))
  9552  0234  00C9               	movwf	LCDPutStr@str+1
  9553  0235  3196  2684  3180   	fcall	_LCDPutStr
  9554  0238  2AD2               	goto	l4823
  9555  0239                     l4809:	
  9556  0239  3067               	movlw	low (STR_45| (0+32768))
  9557  023A  0020               	movlb	0	; select bank0
  9558  023B  00C8               	movwf	LCDPutStr@str
  9559  023C  3091               	movlw	high (STR_45| (0+32768))
  9560  023D  00C9               	movwf	LCDPutStr@str+1
  9561  023E  3196  2684  3180   	fcall	_LCDPutStr
  9562  0241  2AD2               	goto	l4823
  9563  0242                     l4811:	
  9564  0242  30AB               	movlw	low (STR_46| (0+32768))
  9565  0243  0020               	movlb	0	; select bank0
  9566  0244  00C8               	movwf	LCDPutStr@str
  9567  0245  3091               	movlw	high (STR_46| (0+32768))
  9568  0246  00C9               	movwf	LCDPutStr@str+1
  9569  0247  3196  2684  3180   	fcall	_LCDPutStr
  9570  024A  2AD2               	goto	l4823
  9571  024B                     l4813:	
  9572  024B  3063               	movlw	low (STR_47| (0+32768))
  9573  024C  0020               	movlb	0	; select bank0
  9574  024D  00C8               	movwf	LCDPutStr@str
  9575  024E  3091               	movlw	high (STR_47| (0+32768))
  9576  024F  00C9               	movwf	LCDPutStr@str+1
  9577  0250  3196  2684  3180   	fcall	_LCDPutStr
  9578  0253  2AD2               	goto	l4823
  9579  0254                     l4815:	
  9580  0254  3057               	movlw	low (STR_48| (0+32768))
  9581  0255  0020               	movlb	0	; select bank0
  9582  0256  00C8               	movwf	LCDPutStr@str
  9583  0257  3091               	movlw	high (STR_48| (0+32768))
  9584  0258  00C9               	movwf	LCDPutStr@str+1
  9585  0259  3196  2684  3180   	fcall	_LCDPutStr
  9586  025C  2AD2               	goto	l4823
  9587  025D                     l4817:	
  9588  025D  30DF               	movlw	low (STR_49| (0+32768))
  9589  025E  0020               	movlb	0	; select bank0
  9590  025F  00C8               	movwf	LCDPutStr@str
  9591  0260  3091               	movlw	high (STR_49| (0+32768))
  9592  0261  00C9               	movwf	LCDPutStr@str+1
  9593  0262  3196  2684  3180   	fcall	_LCDPutStr
  9594  0265  2AD2               	goto	l4823
  9595  0266                     l4821:	
  9596  0266  0020               	movlb	0	; select bank0
  9597  0267  085D               	movf	DisplayBuzzerData@pwm_freq,w	;volatile
  9598                           
  9599                           ; Switch size 1, requested type "space"
  9600                           ; Number of cases is 35, Range of values is 10 to 255
  9601                           ; switch strategies available:
  9602                           ; Name         Instructions Cycles
  9603                           ; simple_byte          106    54 (average)
  9604                           ; jumptable            263     9 (fixed)
  9605                           ;	Chosen strategy is simple_byte
  9606  0268  3A0A               	xorlw	10	; case 10
  9607  0269  1903               	skipnz
  9608  026A  2922               	goto	l4747
  9609  026B  3A05               	xorlw	5	; case 15
  9610  026C  1903               	skipnz
  9611  026D  292B               	goto	l4749
  9612  026E  3A1B               	xorlw	27	; case 20
  9613  026F  1903               	skipnz
  9614  0270  2934               	goto	l4751
  9615  0271  3A0D               	xorlw	13	; case 25
  9616  0272  1903               	skipnz
  9617  0273  293D               	goto	l4753
  9618  0274  3A07               	xorlw	7	; case 30
  9619  0275  1903               	skipnz
  9620  0276  2946               	goto	l4755
  9621  0277  3A3D               	xorlw	61	; case 35
  9622  0278  1903               	skipnz
  9623  0279  294F               	goto	l4757
  9624  027A  3A0B               	xorlw	11	; case 40
  9625  027B  1903               	skipnz
  9626  027C  2958               	goto	l4759
  9627  027D  3A05               	xorlw	5	; case 45
  9628  027E  1903               	skipnz
  9629  027F  2961               	goto	l4761
  9630  0280  3A1F               	xorlw	31	; case 50
  9631  0281  1903               	skipnz
  9632  0282  296A               	goto	l4763
  9633  0283  3A05               	xorlw	5	; case 55
  9634  0284  1903               	skipnz
  9635  0285  2973               	goto	l4765
  9636  0286  3A0B               	xorlw	11	; case 60
  9637  0287  1903               	skipnz
  9638  0288  297C               	goto	l4767
  9639  0289  3A7D               	xorlw	125	; case 65
  9640  028A  1903               	skipnz
  9641  028B  2985               	goto	l4769
  9642  028C  3A07               	xorlw	7	; case 70
  9643  028D  1903               	skipnz
  9644  028E  298E               	goto	l4771
  9645  028F  3A0D               	xorlw	13	; case 75
  9646  0290  1903               	skipnz
  9647  0291  2997               	goto	l4773
  9648  0292  3A1B               	xorlw	27	; case 80
  9649  0293  1903               	skipnz
  9650  0294  29A0               	goto	l4775
  9651  0295  3A05               	xorlw	5	; case 85
  9652  0296  1903               	skipnz
  9653  0297  29A9               	goto	l4777
  9654  0298  3A0F               	xorlw	15	; case 90
  9655  0299  1903               	skipnz
  9656  029A  29B2               	goto	l4779
  9657  029B  3A05               	xorlw	5	; case 95
  9658  029C  1903               	skipnz
  9659  029D  29BB               	goto	l4781
  9660  029E  3A3B               	xorlw	59	; case 100
  9661  029F  1903               	skipnz
  9662  02A0  29C4               	goto	l4783
  9663  02A1  3A0D               	xorlw	13	; case 105
  9664  02A2  1903               	skipnz
  9665  02A3  29CD               	goto	l4785
  9666  02A4  3A07               	xorlw	7	; case 110
  9667  02A5  1903               	skipnz
  9668  02A6  29D6               	goto	l4787
  9669  02A7  3A1D               	xorlw	29	; case 115
  9670  02A8  1903               	skipnz
  9671  02A9  29DF               	goto	l4789
  9672  02AA  3A0E               	xorlw	14	; case 125
  9673  02AB  1903               	skipnz
  9674  02AC  29E8               	goto	l4791
  9675  02AD  3AFA               	xorlw	250	; case 135
  9676  02AE  1903               	skipnz
  9677  02AF  29F1               	goto	l4793
  9678  02B0  3A0B               	xorlw	11	; case 140
  9679  02B1  1903               	skipnz
  9680  02B2  29FA               	goto	l4795
  9681  02B3  3A1A               	xorlw	26	; case 150
  9682  02B4  1903               	skipnz
  9683  02B5  2A03               	goto	l4797
  9684  02B6  3A36               	xorlw	54	; case 160
  9685  02B7  1903               	skipnz
  9686  02B8  2A0C               	goto	l4799
  9687  02B9  3A0A               	xorlw	10	; case 170
  9688  02BA  1903               	skipnz
  9689  02BB  2A15               	goto	l4801
  9690  02BC  3A1E               	xorlw	30	; case 180
  9691  02BD  1903               	skipnz
  9692  02BE  2A1E               	goto	l4803
  9693  02BF  3A0A               	xorlw	10	; case 190
  9694  02C0  1903               	skipnz
  9695  02C1  2A27               	goto	l4805
  9696  02C2  3A76               	xorlw	118	; case 200
  9697  02C3  1903               	skipnz
  9698  02C4  2A30               	goto	l4807
  9699  02C5  3A1A               	xorlw	26	; case 210
  9700  02C6  1903               	skipnz
  9701  02C7  2A39               	goto	l4809
  9702  02C8  3A0E               	xorlw	14	; case 220
  9703  02C9  1903               	skipnz
  9704  02CA  2A42               	goto	l4811
  9705  02CB  3A2C               	xorlw	44	; case 240
  9706  02CC  1903               	skipnz
  9707  02CD  2A4B               	goto	l4813
  9708  02CE  3A0F               	xorlw	15	; case 255
  9709  02CF  1903               	skipnz
  9710  02D0  2A54               	goto	l4815
  9711  02D1  2A5D               	goto	l4817
  9712  02D2                     l4823:	
  9713                           ;StateBuzzer.c: 186: do { LCDGoto(0,1); LCDPutStr("RA4=+2% RB0=Exit"); } while (0);;
  9714                           
  9715  02D2  0020               	movlb	0	; select bank0
  9716  02D3  01C8               	clrf	LCDGoto@ln
  9717  02D4  0AC8               	incf	LCDGoto@ln,f
  9718  02D5  3000               	movlw	0
  9719  02D6  3196  261A  3180   	fcall	_LCDGoto
  9720  02D9  3033               	movlw	low (STR_50| (0+32768))
  9721  02DA  0020               	movlb	0	; select bank0
  9722  02DB  00C8               	movwf	LCDPutStr@str
  9723  02DC  3090               	movlw	high (STR_50| (0+32768))
  9724  02DD  00C9               	movwf	LCDPutStr@str+1
  9725  02DE  3196  2684  3180   	fcall	_LCDPutStr
  9726                           
  9727                           ;StateBuzzer.c: 189: do { printf("\r\nPWM: "); EUSART_Write(((((pwm_freq/5)-1)*2) / 100)
      +                           + '0'); EUSART_Write(((((((pwm_freq/5)-1)*2) /10)/1) % 10) + '0'); EUSART_Write(((((pwm
      +                          _freq/5)-1)*2) % 10) + '0'); } while (0);;
  9728  02E1  302B               	movlw	low (STR_51| (0+32768))
  9729  02E2  0020               	movlb	0	; select bank0
  9730  02E3  00C4               	movwf	printf@f
  9731  02E4  3091               	movlw	high (STR_51| (0+32768))
  9732  02E5  00C5               	movwf	printf@f+1
  9733  02E6  3195  2505  3180   	fcall	_printf
  9734  02E9  3005               	movlw	5
  9735  02EA  0020               	movlb	0	; select bank0
  9736  02EB  00C7               	movwf	___awdiv@divisor
  9737  02EC  3000               	movlw	0
  9738  02ED  00C8               	movwf	___awdiv@divisor+1
  9739  02EE  085D               	movf	DisplayBuzzerData@pwm_freq,w	;volatile
  9740  02EF  00D7               	movwf	??_DisplayBuzzerData
  9741  02F0  01D8               	clrf	??_DisplayBuzzerData+1
  9742  02F1  0857               	movf	??_DisplayBuzzerData,w
  9743  02F2  00C9               	movwf	___awdiv@dividend
  9744  02F3  0858               	movf	??_DisplayBuzzerData+1,w
  9745  02F4  00CA               	movwf	___awdiv@dividend+1
  9746  02F5  3189  2199  3180   	fcall	___awdiv
  9747  02F8  0020               	movlb	0	; select bank0
  9748  02F9  0847               	movf	?___awdiv,w
  9749  02FA  00D9               	movwf	??_DisplayBuzzerData+2
  9750  02FB  0848               	movf	?___awdiv+1,w
  9751  02FC  00DA               	movwf	??_DisplayBuzzerData+3
  9752  02FD  35D9               	lslf	??_DisplayBuzzerData+2,f
  9753  02FE  0DDA               	rlf	??_DisplayBuzzerData+3,f
  9754  02FF  0859               	movf	??_DisplayBuzzerData+2,w
  9755  0300  3EFE               	addlw	254
  9756  0301  00DB               	movwf	_DisplayBuzzerData$2035
  9757  0302  30FF               	movlw	255
  9758  0303  3D5A               	addwfc	??_DisplayBuzzerData+3,w
  9759  0304  00DC               	movwf	_DisplayBuzzerData$2035+1
  9760  0305  3064               	movlw	100
  9761  0306  00C7               	movwf	___awdiv@divisor
  9762  0307  3000               	movlw	0
  9763  0308  00C8               	movwf	___awdiv@divisor+1
  9764  0309  085C               	movf	_DisplayBuzzerData$2035+1,w
  9765  030A  01CA               	clrf	___awdiv@dividend+1
  9766  030B  07CA               	addwf	___awdiv@dividend+1,f
  9767  030C  085B               	movf	_DisplayBuzzerData$2035,w
  9768  030D  01C9               	clrf	___awdiv@dividend
  9769  030E  07C9               	addwf	___awdiv@dividend,f
  9770  030F  3189  2199  3180   	fcall	___awdiv
  9771  0312  0020               	movlb	0	; select bank0
  9772  0313  0847               	movf	?___awdiv,w
  9773  0314  3E30               	addlw	48
  9774  0315  3196  2660  3180   	fcall	_EUSART_Write
  9775  0318  3005               	movlw	5
  9776  0319  0020               	movlb	0	; select bank0
  9777  031A  00C7               	movwf	___awdiv@divisor
  9778  031B  3000               	movlw	0
  9779  031C  00C8               	movwf	___awdiv@divisor+1
  9780  031D  085D               	movf	DisplayBuzzerData@pwm_freq,w	;volatile
  9781  031E  00D7               	movwf	??_DisplayBuzzerData
  9782  031F  01D8               	clrf	??_DisplayBuzzerData+1
  9783  0320  0857               	movf	??_DisplayBuzzerData,w
  9784  0321  00C9               	movwf	___awdiv@dividend
  9785  0322  0858               	movf	??_DisplayBuzzerData+1,w
  9786  0323  00CA               	movwf	___awdiv@dividend+1
  9787  0324  3189  2199  3180   	fcall	___awdiv
  9788  0327  0020               	movlb	0	; select bank0
  9789  0328  0847               	movf	?___awdiv,w
  9790  0329  00D9               	movwf	??_DisplayBuzzerData+2
  9791  032A  0848               	movf	?___awdiv+1,w
  9792  032B  00DA               	movwf	??_DisplayBuzzerData+3
  9793  032C  35D9               	lslf	??_DisplayBuzzerData+2,f
  9794  032D  0DDA               	rlf	??_DisplayBuzzerData+3,f
  9795  032E  0859               	movf	??_DisplayBuzzerData+2,w
  9796  032F  3EFE               	addlw	254
  9797  0330  00DB               	movwf	_DisplayBuzzerData$2035
  9798  0331  30FF               	movlw	255
  9799  0332  3D5A               	addwfc	??_DisplayBuzzerData+3,w
  9800  0333  00DC               	movwf	_DisplayBuzzerData$2035+1
  9801  0334  300A               	movlw	10
  9802  0335  00D0               	movwf	___awmod@divisor
  9803  0336  3000               	movlw	0
  9804  0337  00D1               	movwf	___awmod@divisor+1
  9805  0338  300A               	movlw	10
  9806  0339  00C7               	movwf	___awdiv@divisor
  9807  033A  3000               	movlw	0
  9808  033B  00C8               	movwf	___awdiv@divisor+1
  9809  033C  085C               	movf	_DisplayBuzzerData$2035+1,w
  9810  033D  01CA               	clrf	___awdiv@dividend+1
  9811  033E  07CA               	addwf	___awdiv@dividend+1,f
  9812  033F  085B               	movf	_DisplayBuzzerData$2035,w
  9813  0340  01C9               	clrf	___awdiv@dividend
  9814  0341  07C9               	addwf	___awdiv@dividend,f
  9815  0342  3189  2199  3180   	fcall	___awdiv
  9816  0345  0020               	movlb	0	; select bank0
  9817  0346  0848               	movf	?___awdiv+1,w
  9818  0347  01D3               	clrf	___awmod@dividend+1
  9819  0348  07D3               	addwf	___awmod@dividend+1,f
  9820  0349  0847               	movf	?___awdiv,w
  9821  034A  01D2               	clrf	___awmod@dividend
  9822  034B  07D2               	addwf	___awmod@dividend,f
  9823  034C  3188  20BC  3180   	fcall	___awmod
  9824  034F  0020               	movlb	0	; select bank0
  9825  0350  0850               	movf	?___awmod,w
  9826  0351  3E30               	addlw	48
  9827  0352  3196  2660  3180   	fcall	_EUSART_Write
  9828  0355  300A               	movlw	10
  9829  0356  0020               	movlb	0	; select bank0
  9830  0357  00D0               	movwf	___awmod@divisor
  9831  0358  3000               	movlw	0
  9832  0359  00D1               	movwf	___awmod@divisor+1
  9833  035A  3005               	movlw	5
  9834  035B  00C7               	movwf	___awdiv@divisor
  9835  035C  3000               	movlw	0
  9836  035D  00C8               	movwf	___awdiv@divisor+1
  9837  035E  085D               	movf	DisplayBuzzerData@pwm_freq,w	;volatile
  9838  035F  00D7               	movwf	??_DisplayBuzzerData
  9839  0360  01D8               	clrf	??_DisplayBuzzerData+1
  9840  0361  0857               	movf	??_DisplayBuzzerData,w
  9841  0362  00C9               	movwf	___awdiv@dividend
  9842  0363  0858               	movf	??_DisplayBuzzerData+1,w
  9843  0364  00CA               	movwf	___awdiv@dividend+1
  9844  0365  3189  2199  3180   	fcall	___awdiv
  9845  0368  0020               	movlb	0	; select bank0
  9846  0369  0847               	movf	?___awdiv,w
  9847  036A  00D9               	movwf	??_DisplayBuzzerData+2
  9848  036B  0848               	movf	?___awdiv+1,w
  9849  036C  00DA               	movwf	??_DisplayBuzzerData+3
  9850  036D  35D9               	lslf	??_DisplayBuzzerData+2,f
  9851  036E  0DDA               	rlf	??_DisplayBuzzerData+3,f
  9852  036F  0859               	movf	??_DisplayBuzzerData+2,w
  9853  0370  3EFE               	addlw	254
  9854  0371  00D2               	movwf	___awmod@dividend
  9855  0372  30FF               	movlw	255
  9856  0373  3D5A               	addwfc	??_DisplayBuzzerData+3,w
  9857  0374  00D3               	movwf	___awmod@dividend+1
  9858  0375  3188  20BC  3180   	fcall	___awmod
  9859  0378  0020               	movlb	0	; select bank0
  9860  0379  0850               	movf	?___awmod,w
  9861  037A  3E30               	addlw	48
  9862  037B  3196  2660  3180   	fcall	_EUSART_Write
  9863                           
  9864                           ;StateBuzzer.c: 192: do { printf("          Key:"); switch (pwm_freq) { case 10: printf(
      +                          "D8#"); break; case 15: printf("B7 "); break; case 20: printf("F7#"); break; case 25: pr
      +                          intf("D7#"); break; case 30: printf("C7 "); break; case 35: printf("A6 "); break; case 4
      +                          0: prin
  9865  037E  3086               	movlw	low (STR_52| (0+32768))
  9866  037F  0020               	movlb	0	; select bank0
  9867  0380  00C4               	movwf	printf@f
  9868  0381  3090               	movlw	high (STR_52| (0+32768))
  9869  0382  00C5               	movwf	printf@f+1
  9870  0383  3195  2505  3180   	fcall	_printf
  9871  0386  2CA7               	goto	l4913
  9872  0387                     l4839:	
  9873  0387  30DB               	movlw	low (STR_14| (0+32768))
  9874  0388  0020               	movlb	0	; select bank0
  9875  0389  00C4               	movwf	printf@f
  9876  038A  3091               	movlw	high (STR_14| (0+32768))
  9877  038B  00C5               	movwf	printf@f+1
  9878  038C  3195  2505         	fcall	_printf
  9879  038E  0008               	return
  9880  038F                     l4841:	
  9881  038F  309F               	movlw	low (STR_15| (0+32768))
  9882  0390  0020               	movlb	0	; select bank0
  9883  0391  00C4               	movwf	printf@f
  9884  0392  3091               	movlw	high (STR_15| (0+32768))
  9885  0393  00C5               	movwf	printf@f+1
  9886  0394  3195  2505         	fcall	_printf
  9887  0396  0008               	return
  9888  0397                     l4843:	
  9889  0397  30D7               	movlw	low (STR_16| (0+32768))
  9890  0398  0020               	movlb	0	; select bank0
  9891  0399  00C4               	movwf	printf@f
  9892  039A  3091               	movlw	high (STR_16| (0+32768))
  9893  039B  00C5               	movwf	printf@f+1
  9894  039C  3195  2505         	fcall	_printf
  9895  039E  0008               	return
  9896  039F                     l4845:	
  9897  039F  30D3               	movlw	low (STR_17| (0+32768))
  9898  03A0  0020               	movlb	0	; select bank0
  9899  03A1  00C4               	movwf	printf@f
  9900  03A2  3091               	movlw	high (STR_17| (0+32768))
  9901  03A3  00C5               	movwf	printf@f+1
  9902  03A4  3195  2505         	fcall	_printf
  9903  03A6  0008               	return
  9904  03A7                     l4847:	
  9905  03A7  30A3               	movlw	low (STR_18| (0+32768))
  9906  03A8  0020               	movlb	0	; select bank0
  9907  03A9  00C4               	movwf	printf@f
  9908  03AA  3091               	movlw	high (STR_18| (0+32768))
  9909  03AB  00C5               	movwf	printf@f+1
  9910  03AC  3195  2505         	fcall	_printf
  9911  03AE  0008               	return
  9912  03AF                     l4849:	
  9913  03AF  308F               	movlw	low (STR_19| (0+32768))
  9914  03B0  0020               	movlb	0	; select bank0
  9915  03B1  00C4               	movwf	printf@f
  9916  03B2  3091               	movlw	high (STR_19| (0+32768))
  9917  03B3  00C5               	movwf	printf@f+1
  9918  03B4  3195  2505         	fcall	_printf
  9919  03B6  0008               	return
  9920  03B7                     l4851:	
  9921  03B7  309B               	movlw	low (STR_20| (0+32768))
  9922  03B8  0020               	movlb	0	; select bank0
  9923  03B9  00C4               	movwf	printf@f
  9924  03BA  3091               	movlw	high (STR_20| (0+32768))
  9925  03BB  00C5               	movwf	printf@f+1
  9926  03BC  3195  2505         	fcall	_printf
  9927  03BE  0008               	return
  9928  03BF                     l4853:	
  9929  03BF  3097               	movlw	low (STR_21| (0+32768))
  9930  03C0  0020               	movlb	0	; select bank0
  9931  03C1  00C4               	movwf	printf@f
  9932  03C2  3091               	movlw	high (STR_21| (0+32768))
  9933  03C3  00C5               	movwf	printf@f+1
  9934  03C4  3195  2505         	fcall	_printf
  9935  03C6  0008               	return
  9936  03C7                     l4855:	
  9937  03C7  30CF               	movlw	low (STR_22| (0+32768))
  9938  03C8  0020               	movlb	0	; select bank0
  9939  03C9  00C4               	movwf	printf@f
  9940  03CA  3091               	movlw	high (STR_22| (0+32768))
  9941  03CB  00C5               	movwf	printf@f+1
  9942  03CC  3195  2505         	fcall	_printf
  9943  03CE  0008               	return
  9944  03CF                     l4857:	
  9945  03CF  3093               	movlw	low (STR_23| (0+32768))
  9946  03D0  0020               	movlb	0	; select bank0
  9947  03D1  00C4               	movwf	printf@f
  9948  03D2  3091               	movlw	high (STR_23| (0+32768))
  9949  03D3  00C5               	movwf	printf@f+1
  9950  03D4  3195  2505         	fcall	_printf
  9951  03D6  0008               	return
  9952  03D7                     l4859:	
  9953  03D7  30E3               	movlw	low (STR_24| (0+32768))
  9954  03D8  0020               	movlb	0	; select bank0
  9955  03D9  00C4               	movwf	printf@f
  9956  03DA  3091               	movlw	high (STR_24| (0+32768))
  9957  03DB  00C5               	movwf	printf@f+1
  9958  03DC  3195  2505         	fcall	_printf
  9959  03DE  0008               	return
  9960  03DF                     l4861:	
  9961  03DF  30BB               	movlw	low (STR_25| (0+32768))
  9962  03E0  0020               	movlb	0	; select bank0
  9963  03E1  00C4               	movwf	printf@f
  9964  03E2  3091               	movlw	high (STR_25| (0+32768))
  9965  03E3  00C5               	movwf	printf@f+1
  9966  03E4  3195  2505         	fcall	_printf
  9967  03E6  0008               	return
  9968  03E7                     l4863:	
  9969  03E7  3077               	movlw	low (STR_26| (0+32768))
  9970  03E8  0020               	movlb	0	; select bank0
  9971  03E9  00C4               	movwf	printf@f
  9972  03EA  3091               	movlw	high (STR_26| (0+32768))
  9973  03EB  00C5               	movwf	printf@f+1
  9974  03EC  3195  2505         	fcall	_printf
  9975  03EE  0008               	return
  9976  03EF                     l4865:	
  9977  03EF  30CB               	movlw	low (STR_27| (0+32768))
  9978  03F0  0020               	movlb	0	; select bank0
  9979  03F1  00C4               	movwf	printf@f
  9980  03F2  3091               	movlw	high (STR_27| (0+32768))
  9981  03F3  00C5               	movwf	printf@f+1
  9982  03F4  3195  2505         	fcall	_printf
  9983  03F6  0008               	return
  9984  03F7                     l4867:	
  9985  03F7  308B               	movlw	low (STR_28| (0+32768))
  9986  03F8  0020               	movlb	0	; select bank0
  9987  03F9  00C4               	movwf	printf@f
  9988  03FA  3091               	movlw	high (STR_28| (0+32768))
  9989  03FB  00C5               	movwf	printf@f+1
  9990  03FC  3195  2505         	fcall	_printf
  9991  03FE  0008               	return
  9992  03FF                     l4869:	
  9993  03FF  30C7               	movlw	low (STR_29| (0+32768))
  9994  0400  0020               	movlb	0	; select bank0
  9995  0401  00C4               	movwf	printf@f
  9996  0402  3091               	movlw	high (STR_29| (0+32768))
  9997  0403  00C5               	movwf	printf@f+1
  9998  0404  3195  2505         	fcall	_printf
  9999  0406  0008               	return
 10000  0407                     l4871:	
 10001  0407  3087               	movlw	low (STR_30| (0+32768))
 10002  0408  0020               	movlb	0	; select bank0
 10003  0409  00C4               	movwf	printf@f
 10004  040A  3091               	movlw	high (STR_30| (0+32768))
 10005  040B  00C5               	movwf	printf@f+1
 10006  040C  3195  2505         	fcall	_printf
 10007  040E  0008               	return
 10008  040F                     l4873:	
 10009  040F  3083               	movlw	low (STR_31| (0+32768))
 10010  0410  0020               	movlb	0	; select bank0
 10011  0411  00C4               	movwf	printf@f
 10012  0412  3091               	movlw	high (STR_31| (0+32768))
 10013  0413  00C5               	movwf	printf@f+1
 10014  0414  3195  2505         	fcall	_printf
 10015  0416  0008               	return
 10016  0417                     l4875:	
 10017  0417  30C3               	movlw	low (STR_32| (0+32768))
 10018  0418  0020               	movlb	0	; select bank0
 10019  0419  00C4               	movwf	printf@f
 10020  041A  3091               	movlw	high (STR_32| (0+32768))
 10021  041B  00C5               	movwf	printf@f+1
 10022  041C  3195  2505         	fcall	_printf
 10023  041E  0008               	return
 10024  041F                     l4877:	
 10025  041F  307F               	movlw	low (STR_33| (0+32768))
 10026  0420  0020               	movlb	0	; select bank0
 10027  0421  00C4               	movwf	printf@f
 10028  0422  3091               	movlw	high (STR_33| (0+32768))
 10029  0423  00C5               	movwf	printf@f+1
 10030  0424  3195  2505         	fcall	_printf
 10031  0426  0008               	return
 10032  0427                     l4879:	
 10033  0427  30BF               	movlw	low (STR_34| (0+32768))
 10034  0428  0020               	movlb	0	; select bank0
 10035  0429  00C4               	movwf	printf@f
 10036  042A  3091               	movlw	high (STR_34| (0+32768))
 10037  042B  00C5               	movwf	printf@f+1
 10038  042C  3195  2505         	fcall	_printf
 10039  042E  0008               	return
 10040  042F                     l4881:	
 10041  042F  307B               	movlw	low (STR_35| (0+32768))
 10042  0430  0020               	movlb	0	; select bank0
 10043  0431  00C4               	movwf	printf@f
 10044  0432  3091               	movlw	high (STR_35| (0+32768))
 10045  0433  00C5               	movwf	printf@f+1
 10046  0434  3195  2505         	fcall	_printf
 10047  0436  0008               	return
 10048  0437                     l4883:	
 10049  0437  305F               	movlw	low (STR_36| (0+32768))
 10050  0438  0020               	movlb	0	; select bank0
 10051  0439  00C4               	movwf	printf@f
 10052  043A  3091               	movlw	high (STR_36| (0+32768))
 10053  043B  00C5               	movwf	printf@f+1
 10054  043C  3195  2505         	fcall	_printf
 10055  043E  0008               	return
 10056  043F                     l4885:	
 10057  043F  30A7               	movlw	low (STR_37| (0+32768))
 10058  0440  0020               	movlb	0	; select bank0
 10059  0441  00C4               	movwf	printf@f
 10060  0442  3091               	movlw	high (STR_37| (0+32768))
 10061  0443  00C5               	movwf	printf@f+1
 10062  0444  3195  2505         	fcall	_printf
 10063  0446  0008               	return
 10064  0447                     l4887:	
 10065  0447  305B               	movlw	low (STR_38| (0+32768))
 10066  0448  0020               	movlb	0	; select bank0
 10067  0449  00C4               	movwf	printf@f
 10068  044A  3091               	movlw	high (STR_38| (0+32768))
 10069  044B  00C5               	movwf	printf@f+1
 10070  044C  3195  2505         	fcall	_printf
 10071  044E  0008               	return
 10072  044F                     l4889:	
 10073  044F  30B7               	movlw	low (STR_39| (0+32768))
 10074  0450  0020               	movlb	0	; select bank0
 10075  0451  00C4               	movwf	printf@f
 10076  0452  3091               	movlw	high (STR_39| (0+32768))
 10077  0453  00C5               	movwf	printf@f+1
 10078  0454  3195  2505         	fcall	_printf
 10079  0456  0008               	return
 10080  0457                     l4891:	
 10081  0457  3073               	movlw	low (STR_40| (0+32768))
 10082  0458  0020               	movlb	0	; select bank0
 10083  0459  00C4               	movwf	printf@f
 10084  045A  3091               	movlw	high (STR_40| (0+32768))
 10085  045B  00C5               	movwf	printf@f+1
 10086  045C  3195  2505         	fcall	_printf
 10087  045E  0008               	return
 10088  045F                     l4893:	
 10089  045F  30B3               	movlw	low (STR_41| (0+32768))
 10090  0460  0020               	movlb	0	; select bank0
 10091  0461  00C4               	movwf	printf@f
 10092  0462  3091               	movlw	high (STR_41| (0+32768))
 10093  0463  00C5               	movwf	printf@f+1
 10094  0464  3195  2505         	fcall	_printf
 10095  0466  0008               	return
 10096  0467                     l4895:	
 10097  0467  306F               	movlw	low (STR_42| (0+32768))
 10098  0468  0020               	movlb	0	; select bank0
 10099  0469  00C4               	movwf	printf@f
 10100  046A  3091               	movlw	high (STR_42| (0+32768))
 10101  046B  00C5               	movwf	printf@f+1
 10102  046C  3195  2505         	fcall	_printf
 10103  046E  0008               	return
 10104  046F                     l4897:	
 10105  046F  306B               	movlw	low (STR_43| (0+32768))
 10106  0470  0020               	movlb	0	; select bank0
 10107  0471  00C4               	movwf	printf@f
 10108  0472  3091               	movlw	high (STR_43| (0+32768))
 10109  0473  00C5               	movwf	printf@f+1
 10110  0474  3195  2505         	fcall	_printf
 10111  0476  0008               	return
 10112  0477                     l4899:	
 10113  0477  30AF               	movlw	low (STR_44| (0+32768))
 10114  0478  0020               	movlb	0	; select bank0
 10115  0479  00C4               	movwf	printf@f
 10116  047A  3091               	movlw	high (STR_44| (0+32768))
 10117  047B  00C5               	movwf	printf@f+1
 10118  047C  3195  2505         	fcall	_printf
 10119  047E  0008               	return
 10120  047F                     l4901:	
 10121  047F  3067               	movlw	low (STR_45| (0+32768))
 10122  0480  0020               	movlb	0	; select bank0
 10123  0481  00C4               	movwf	printf@f
 10124  0482  3091               	movlw	high (STR_45| (0+32768))
 10125  0483  00C5               	movwf	printf@f+1
 10126  0484  3195  2505         	fcall	_printf
 10127  0486  0008               	return
 10128  0487                     l4903:	
 10129  0487  30AB               	movlw	low (STR_46| (0+32768))
 10130  0488  0020               	movlb	0	; select bank0
 10131  0489  00C4               	movwf	printf@f
 10132  048A  3091               	movlw	high (STR_46| (0+32768))
 10133  048B  00C5               	movwf	printf@f+1
 10134  048C  3195  2505         	fcall	_printf
 10135  048E  0008               	return
 10136  048F                     l4905:	
 10137  048F  3063               	movlw	low (STR_47| (0+32768))
 10138  0490  0020               	movlb	0	; select bank0
 10139  0491  00C4               	movwf	printf@f
 10140  0492  3091               	movlw	high (STR_47| (0+32768))
 10141  0493  00C5               	movwf	printf@f+1
 10142  0494  3195  2505         	fcall	_printf
 10143  0496  0008               	return
 10144  0497                     l4907:	
 10145  0497  3057               	movlw	low (STR_48| (0+32768))
 10146  0498  0020               	movlb	0	; select bank0
 10147  0499  00C4               	movwf	printf@f
 10148  049A  3091               	movlw	high (STR_48| (0+32768))
 10149  049B  00C5               	movwf	printf@f+1
 10150  049C  3195  2505         	fcall	_printf
 10151  049E  0008               	return
 10152  049F                     l4909:	
 10153  049F  30DF               	movlw	low (STR_49| (0+32768))
 10154  04A0  0020               	movlb	0	; select bank0
 10155  04A1  00C4               	movwf	printf@f
 10156  04A2  3091               	movlw	high (STR_49| (0+32768))
 10157  04A3  00C5               	movwf	printf@f+1
 10158  04A4  3195  2505         	fcall	_printf
 10159  04A6  0008               	return
 10160  04A7                     l4913:	
 10161  04A7  0020               	movlb	0	; select bank0
 10162  04A8  085D               	movf	DisplayBuzzerData@pwm_freq,w	;volatile
 10163                           
 10164                           ; Switch size 1, requested type "space"
 10165                           ; Number of cases is 35, Range of values is 10 to 255
 10166                           ; switch strategies available:
 10167                           ; Name         Instructions Cycles
 10168                           ; simple_byte          106    54 (average)
 10169                           ; jumptable            263     9 (fixed)
 10170                           ;	Chosen strategy is simple_byte
 10171  04A9  3A0A               	xorlw	10	; case 10
 10172  04AA  1903               	skipnz
 10173  04AB  2B87               	goto	l4839
 10174  04AC  3A05               	xorlw	5	; case 15
 10175  04AD  1903               	skipnz
 10176  04AE  2B8F               	goto	l4841
 10177  04AF  3A1B               	xorlw	27	; case 20
 10178  04B0  1903               	skipnz
 10179  04B1  2B97               	goto	l4843
 10180  04B2  3A0D               	xorlw	13	; case 25
 10181  04B3  1903               	skipnz
 10182  04B4  2B9F               	goto	l4845
 10183  04B5  3A07               	xorlw	7	; case 30
 10184  04B6  1903               	skipnz
 10185  04B7  2BA7               	goto	l4847
 10186  04B8  3A3D               	xorlw	61	; case 35
 10187  04B9  1903               	skipnz
 10188  04BA  2BAF               	goto	l4849
 10189  04BB  3A0B               	xorlw	11	; case 40
 10190  04BC  1903               	skipnz
 10191  04BD  2BB7               	goto	l4851
 10192  04BE  3A05               	xorlw	5	; case 45
 10193  04BF  1903               	skipnz
 10194  04C0  2BBF               	goto	l4853
 10195  04C1  3A1F               	xorlw	31	; case 50
 10196  04C2  1903               	skipnz
 10197  04C3  2BC7               	goto	l4855
 10198  04C4  3A05               	xorlw	5	; case 55
 10199  04C5  1903               	skipnz
 10200  04C6  2BCF               	goto	l4857
 10201  04C7  3A0B               	xorlw	11	; case 60
 10202  04C8  1903               	skipnz
 10203  04C9  2BD7               	goto	l4859
 10204  04CA  3A7D               	xorlw	125	; case 65
 10205  04CB  1903               	skipnz
 10206  04CC  2BDF               	goto	l4861
 10207  04CD  3A07               	xorlw	7	; case 70
 10208  04CE  1903               	skipnz
 10209  04CF  2BE7               	goto	l4863
 10210  04D0  3A0D               	xorlw	13	; case 75
 10211  04D1  1903               	skipnz
 10212  04D2  2BEF               	goto	l4865
 10213  04D3  3A1B               	xorlw	27	; case 80
 10214  04D4  1903               	skipnz
 10215  04D5  2BF7               	goto	l4867
 10216  04D6  3A05               	xorlw	5	; case 85
 10217  04D7  1903               	skipnz
 10218  04D8  2BFF               	goto	l4869
 10219  04D9  3A0F               	xorlw	15	; case 90
 10220  04DA  1903               	skipnz
 10221  04DB  2C07               	goto	l4871
 10222  04DC  3A05               	xorlw	5	; case 95
 10223  04DD  1903               	skipnz
 10224  04DE  2C0F               	goto	l4873
 10225  04DF  3A3B               	xorlw	59	; case 100
 10226  04E0  1903               	skipnz
 10227  04E1  2C17               	goto	l4875
 10228  04E2  3A0D               	xorlw	13	; case 105
 10229  04E3  1903               	skipnz
 10230  04E4  2C1F               	goto	l4877
 10231  04E5  3A07               	xorlw	7	; case 110
 10232  04E6  1903               	skipnz
 10233  04E7  2C27               	goto	l4879
 10234  04E8  3A1D               	xorlw	29	; case 115
 10235  04E9  1903               	skipnz
 10236  04EA  2C2F               	goto	l4881
 10237  04EB  3A0E               	xorlw	14	; case 125
 10238  04EC  1903               	skipnz
 10239  04ED  2C37               	goto	l4883
 10240  04EE  3AFA               	xorlw	250	; case 135
 10241  04EF  1903               	skipnz
 10242  04F0  2C3F               	goto	l4885
 10243  04F1  3A0B               	xorlw	11	; case 140
 10244  04F2  1903               	skipnz
 10245  04F3  2C47               	goto	l4887
 10246  04F4  3A1A               	xorlw	26	; case 150
 10247  04F5  1903               	skipnz
 10248  04F6  2C4F               	goto	l4889
 10249  04F7  3A36               	xorlw	54	; case 160
 10250  04F8  1903               	skipnz
 10251  04F9  2C57               	goto	l4891
 10252  04FA  3A0A               	xorlw	10	; case 170
 10253  04FB  1903               	skipnz
 10254  04FC  2C5F               	goto	l4893
 10255  04FD  3A1E               	xorlw	30	; case 180
 10256  04FE  1903               	skipnz
 10257  04FF  2C67               	goto	l4895
 10258  0500  3A0A               	xorlw	10	; case 190
 10259  0501  1903               	skipnz
 10260  0502  2C6F               	goto	l4897
 10261  0503  3A76               	xorlw	118	; case 200
 10262  0504  1903               	skipnz
 10263  0505  2C77               	goto	l4899
 10264  0506  3A1A               	xorlw	26	; case 210
 10265  0507  1903               	skipnz
 10266  0508  2C7F               	goto	l4901
 10267  0509  3A0E               	xorlw	14	; case 220
 10268  050A  1903               	skipnz
 10269  050B  2C87               	goto	l4903
 10270  050C  3A2C               	xorlw	44	; case 240
 10271  050D  1903               	skipnz
 10272  050E  2C8F               	goto	l4905
 10273  050F  3A0F               	xorlw	15	; case 255
 10274  0510  1903               	skipnz
 10275  0511  2C97               	goto	l4907
 10276  0512  2C9F               	goto	l4909
 10277  0513  0008               	return
 10278  0514                     __end_of_DisplayBuzzerData:	
 10279                           
 10280                           	psect	text33
 10281  1505                     __ptext33:	
 10282 ;; *************** function _printf *****************
 10283 ;; Defined at:
 10284 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;  f               2    3[BANK0 ] PTR const unsigned char 
 10287 ;;		 -> STR_111(7), STR_110(7), STR_109(10), STR_101(16), 
 10288 ;;		 -> STR_88(4), STR_87(4), STR_86(4), STR_85(4), 
 10289 ;;		 -> STR_84(4), STR_83(4), STR_82(4), STR_81(4), 
 10290 ;;		 -> STR_80(4), STR_79(4), STR_78(4), STR_77(4), 
 10291 ;;		 -> STR_76(4), STR_75(4), STR_74(4), STR_73(4), 
 10292 ;;		 -> STR_72(4), STR_71(4), STR_70(4), STR_69(4), 
 10293 ;;		 -> STR_68(4), STR_67(4), STR_66(4), STR_65(4), 
 10294 ;;		 -> STR_64(4), STR_63(3), STR_62(4), STR_61(4), 
 10295 ;;		 -> STR_60(4), STR_59(4), STR_58(4), STR_57(4), 
 10296 ;;		 -> STR_56(4), STR_55(4), STR_54(4), STR_53(4), 
 10297 ;;		 -> STR_52(15), STR_51(8), STR_9(17), STR_8(11), 
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;  _val            4    0        struct .
 10300 ;;  c               1    9[BANK0 ] char 
 10301 ;;  ap              1    8[BANK0 ] PTR void [1]
 10302 ;;		 -> ?_printf(2), 
 10303 ;;  flag            1    0        unsigned char 
 10304 ;;  prec            1    0        char 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  2    3[BANK0 ] int 
 10307 ;; Registers used:
 10308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10314 ;;      Params:         0       2       0       0       0       0       0       0
 10315 ;;      Locals:         0       2       0       0       0       0       0       0
 10316 ;;      Temps:          0       3       0       0       0       0       0       0
 10317 ;;      Totals:         0       7       0       0       0       0       0       0
 10318 ;;Total ram usage:        7 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    6
 10321 ;; This function calls:
 10322 ;;		_putch
 10323 ;; This function is called by:
 10324 ;;		_DisplayVoltage
 10325 ;;		_DisplayBuzzerData
 10326 ;;		_DisplayTime
 10327 ;;		_DisplayTemperature
 10328 ;; This function uses a non-reentrant model
 10329 ;;
 10330                           
 10331                           
 10332                           ;psect for function _printf
 10333  1505                     _printf:	
 10334                           
 10335                           ;doprnt.c: 466: va_list ap;
 10336                           ;doprnt.c: 499: signed char c;
 10337                           ;doprnt.c: 506: signed char prec;
 10338                           ;doprnt.c: 508: unsigned char flag;
 10339                           ;doprnt.c: 527: union {
 10340                           ;doprnt.c: 528: unsigned int _val;
 10341                           ;doprnt.c: 529: struct {
 10342                           ;doprnt.c: 530: const char * _cp;
 10343                           ;doprnt.c: 531: unsigned _len;
 10344                           ;doprnt.c: 532: } _str;
 10345                           ;doprnt.c: 533: } _val;
 10346                           ;doprnt.c: 542: *ap = __va_start();
 10347                           
 10348                           ;incstack = 0
 10349                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10350  1505  3046               	movlw	(?_printf+2)& (0+255)
 10351  1506  0020               	movlb	0	; select bank0
 10352  1507  00C6               	movwf	??_printf
 10353  1508  0846               	movf	??_printf,w
 10354  1509  00C9               	movwf	printf@ap
 10355  150A                     l4547:	
 10356                           ;doprnt.c: 552: }
 10357                           ;doprnt.c: 1431: {
 10358                           
 10359                           ;doprnt.c: 551: continue;
 10360                           
 10361                           ;doprnt.c: 545: while(c = *f++) {
 10362                           
 10363  150A  0020               	movlb	0	; select bank0
 10364  150B  0845               	movf	printf@f+1,w
 10365  150C  00C7               	movwf	??_printf+1
 10366  150D  0844               	movf	printf@f,w
 10367  150E  00C6               	movwf	??_printf
 10368  150F  0AC4               	incf	printf@f,f
 10369  1510  1903               	skipnz
 10370  1511  0AC5               	incf	printf@f+1,f
 10371  1512  0846               	movf	??_printf,w
 10372  1513  0084               	movwf	4
 10373  1514  0847               	movf	??_printf+1,w
 10374  1515  0085               	movwf	5
 10375  1516  0800               	movf	0,w	;code access
 10376  1517  00C8               	movwf	??_printf+2
 10377  1518  0848               	movf	??_printf+2,w
 10378  1519  00CA               	movwf	printf@c
 10379  151A  08CA               	movf	printf@c,f
 10380  151B  1903               	btfsc	3,2
 10381  151C  0008               	return
 10382                           
 10383                           ;doprnt.c: 549: {
 10384                           ;doprnt.c: 550: (putch(c) );
 10385  151D  084A               	movf	printf@c,w
 10386  151E  3193  231F  3195   	fcall	_putch
 10387  1521  2D0A               	goto	l4547
 10388  1522                     __end_of_printf:	
 10389                           ;doprnt.c: 1478: }
 10390                           ;doprnt.c: 1542: }
 10391                           ;doprnt.c: 1549: return 0;
 10392                           ;	Return value of _printf is never used
 10393                           
 10394                           
 10395                           	psect	text34
 10396  131F                     __ptext34:	
 10397 ;; *************** function _putch *****************
 10398 ;; Defined at:
 10399 ;;		line 162 in file "mcc_generated_files/eusart.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;  txData          1    wreg     unsigned char 
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  txData          1    2[BANK0 ] unsigned char 
 10404 ;; Return value:  Size  Location     Type
 10405 ;;		None               void
 10406 ;; Registers used:
 10407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10413 ;;      Params:         0       0       0       0       0       0       0       0
 10414 ;;      Locals:         0       1       0       0       0       0       0       0
 10415 ;;      Temps:          0       0       0       0       0       0       0       0
 10416 ;;      Totals:         0       1       0       0       0       0       0       0
 10417 ;;Total ram usage:        1 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    5
 10420 ;; This function calls:
 10421 ;;		_EUSART_Write
 10422 ;; This function is called by:
 10423 ;;		_printf
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           
 10428                           ;psect for function _putch
 10429  131F                     _putch:	
 10430                           
 10431                           ;incstack = 0
 10432                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10433                           ;putch@txData stored from wreg
 10434  131F  0020               	movlb	0	; select bank0
 10435  1320  00C3               	movwf	putch@txData
 10436                           
 10437                           ;eusart.c: 164: EUSART_Write(txData);
 10438  1321  0843               	movf	putch@txData,w
 10439  1322  3196  2660         	fcall	_EUSART_Write
 10440  1324  0008               	return
 10441  1325                     __end_of_putch:	
 10442                           
 10443                           	psect	text35
 10444  1660                     __ptext35:	
 10445 ;; *************** function _EUSART_Write *****************
 10446 ;; Defined at:
 10447 ;;		line 134 in file "mcc_generated_files/eusart.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;  txData          1    wreg     unsigned char 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  txData          1    1[BANK0 ] unsigned char 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;		None               void
 10454 ;; Registers used:
 10455 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10461 ;;      Params:         0       0       0       0       0       0       0       0
 10462 ;;      Locals:         0       1       0       0       0       0       0       0
 10463 ;;      Temps:          0       1       0       0       0       0       0       0
 10464 ;;      Totals:         0       2       0       0       0       0       0       0
 10465 ;;Total ram usage:        2 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    4
 10468 ;; This function calls:
 10469 ;;		Nothing
 10470 ;; This function is called by:
 10471 ;;		_putch
 10472 ;;		_DisplayVoltage
 10473 ;;		_DisplayBuzzerData
 10474 ;;		_DisplayTime
 10475 ;;		_DisplayTemperature
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function _EUSART_Write
 10481  1660                     _EUSART_Write:	
 10482                           
 10483                           ;incstack = 0
 10484                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 10485                           ;EUSART_Write@txData stored from wreg
 10486  1660  0020               	movlb	0	; select bank0
 10487  1661  00C2               	movwf	EUSART_Write@txData
 10488  1662                     l465:	
 10489                           ;eusart.c: 137: {
 10490                           
 10491                           ;eusart.c: 136: while(0 == eusartTxBufferRemaining)
 10492                           
 10493  1662  0868               	movf	_eusartTxBufferRemaining,w	;volatile
 10494  1663  1903               	btfsc	3,2
 10495  1664  2E62               	goto	l465
 10496                           
 10497                           ;eusart.c: 138: }
 10498                           ;eusart.c: 140: if(0 == PIE1bits.TXIE)
 10499  1665  0021               	movlb	1	; select bank1
 10500  1666  1A11               	btfsc	17,4	;volatile
 10501  1667  2E6D               	goto	l468
 10502                           
 10503                           ;eusart.c: 141: {
 10504                           ;eusart.c: 142: TXREG = txData;
 10505  1668  0020               	movlb	0	; select bank0
 10506  1669  0842               	movf	EUSART_Write@txData,w
 10507  166A  0023               	movlb	3	; select bank3
 10508  166B  009A               	movwf	26	;volatile
 10509                           
 10510                           ;eusart.c: 143: }
 10511  166C  2E81               	goto	l3117
 10512  166D                     l468:	
 10513                           
 10514                           ;eusart.c: 144: else
 10515                           ;eusart.c: 145: {
 10516                           ;eusart.c: 146: PIE1bits.TXIE = 0;
 10517  166D  1211               	bcf	17,4	;volatile
 10518                           
 10519                           ;eusart.c: 147: eusartTxBuffer[eusartTxHead++] = txData;
 10520  166E  0020               	movlb	0	; select bank0
 10521  166F  0842               	movf	EUSART_Write@txData,w
 10522  1670  00C1               	movwf	??_EUSART_Write
 10523  1671  0830               	movf	_eusartTxHead,w
 10524  1672  3EA0               	addlw	_eusartTxBuffer& (0+255)
 10525  1673  0086               	movwf	6
 10526  1674  0187               	clrf	7
 10527  1675  0841               	movf	??_EUSART_Write,w
 10528  1676  0081               	movwf	1
 10529  1677  3001               	movlw	1
 10530  1678  00C1               	movwf	??_EUSART_Write
 10531  1679  0841               	movf	??_EUSART_Write,w
 10532  167A  07B0               	addwf	_eusartTxHead,f
 10533                           
 10534                           ;eusart.c: 148: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 10535  167B  3040               	movlw	64
 10536  167C  0230               	subwf	_eusartTxHead,w
 10537  167D  1803               	btfsc	3,0
 10538                           
 10539                           ;eusart.c: 149: {
 10540                           ;eusart.c: 150: eusartTxHead = 0;
 10541  167E  01B0               	clrf	_eusartTxHead
 10542                           
 10543                           ;eusart.c: 151: }
 10544                           ;eusart.c: 152: eusartTxBufferRemaining--;
 10545  167F  3001               	movlw	1
 10546  1680  02E8               	subwf	_eusartTxBufferRemaining,f	;volatile
 10547  1681                     l3117:	
 10548                           
 10549                           ;eusart.c: 153: }
 10550                           ;eusart.c: 154: PIE1bits.TXIE = 1;
 10551  1681  0021               	movlb	1	; select bank1
 10552  1682  1611               	bsf	17,4	;volatile
 10553  1683  0008               	return
 10554  1684                     __end_of_EUSART_Write:	
 10555                           
 10556                           	psect	text36
 10557  08BC                     __ptext36:	
 10558 ;; *************** function ___awmod *****************
 10559 ;; Defined at:
 10560 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;  divisor         2   15[BANK0 ] int 
 10563 ;;  dividend        2   17[BANK0 ] int 
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;  sign            1   21[BANK0 ] unsigned char 
 10566 ;;  counter         1   20[BANK0 ] unsigned char 
 10567 ;; Return value:  Size  Location     Type
 10568 ;;                  2   15[BANK0 ] int 
 10569 ;; Registers used:
 10570 ;;		wreg, status,2, status,0
 10571 ;; Tracked objects:
 10572 ;;		On entry : 0/0
 10573 ;;		On exit  : 0/0
 10574 ;;		Unchanged: 0/0
 10575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10576 ;;      Params:         0       4       0       0       0       0       0       0
 10577 ;;      Locals:         0       2       0       0       0       0       0       0
 10578 ;;      Temps:          0       1       0       0       0       0       0       0
 10579 ;;      Totals:         0       7       0       0       0       0       0       0
 10580 ;;Total ram usage:        7 bytes
 10581 ;; Hardware stack levels used:    1
 10582 ;; Hardware stack levels required when called:    4
 10583 ;; This function calls:
 10584 ;;		Nothing
 10585 ;; This function is called by:
 10586 ;;		_DisplayBuzzerData
 10587 ;;		_StateClockSet
 10588 ;;		_DisplayTime
 10589 ;;		_DisplayTemperature
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593                           
 10594                           ;psect for function ___awmod
 10595  08BC                     ___awmod:	
 10596                           
 10597                           ;incstack = 0
 10598                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10599  08BC  0020               	movlb	0	; select bank0
 10600  08BD  01D6               	clrf	___awmod@sign
 10601  08BE  1FD3               	btfss	___awmod@dividend+1,7
 10602  08BF  28C7               	goto	l3323
 10603  08C0  09D2               	comf	___awmod@dividend,f
 10604  08C1  09D3               	comf	___awmod@dividend+1,f
 10605  08C2  0AD2               	incf	___awmod@dividend,f
 10606  08C3  1903               	skipnz
 10607  08C4  0AD3               	incf	___awmod@dividend+1,f
 10608  08C5  01D6               	clrf	___awmod@sign
 10609  08C6  0AD6               	incf	___awmod@sign,f
 10610  08C7                     l3323:	
 10611  08C7  1FD1               	btfss	___awmod@divisor+1,7
 10612  08C8  28CE               	goto	l3327
 10613  08C9  09D0               	comf	___awmod@divisor,f
 10614  08CA  09D1               	comf	___awmod@divisor+1,f
 10615  08CB  0AD0               	incf	___awmod@divisor,f
 10616  08CC  1903               	skipnz
 10617  08CD  0AD1               	incf	___awmod@divisor+1,f
 10618  08CE                     l3327:	
 10619  08CE  0851               	movf	___awmod@divisor+1,w
 10620  08CF  0450               	iorwf	___awmod@divisor,w
 10621  08D0  1903               	skipnz
 10622  08D1  28F5               	goto	l3345
 10623  08D2  01D5               	clrf	___awmod@counter
 10624  08D3  0AD5               	incf	___awmod@counter,f
 10625  08D4                     l3335:	
 10626  08D4  1BD1               	btfsc	___awmod@divisor+1,7
 10627  08D5  28E0               	goto	l3337
 10628  08D6  3001               	movlw	1
 10629  08D7                     u2365:	
 10630  08D7  35D0               	lslf	___awmod@divisor,f
 10631  08D8  0DD1               	rlf	___awmod@divisor+1,f
 10632  08D9  0B89               	decfsz	9,f
 10633  08DA  28D7               	goto	u2365
 10634  08DB  3001               	movlw	1
 10635  08DC  00D4               	movwf	??___awmod
 10636  08DD  0854               	movf	??___awmod,w
 10637  08DE  07D5               	addwf	___awmod@counter,f
 10638  08DF  28D4               	goto	l3335
 10639  08E0                     l3337:	
 10640  08E0  0851               	movf	___awmod@divisor+1,w
 10641  08E1  0253               	subwf	___awmod@dividend+1,w
 10642  08E2  1D03               	skipz
 10643  08E3  28E6               	goto	u2385
 10644  08E4  0850               	movf	___awmod@divisor,w
 10645  08E5  0252               	subwf	___awmod@dividend,w
 10646  08E6                     u2385:	
 10647  08E6  1C03               	skipc
 10648  08E7  28EC               	goto	l3341
 10649  08E8  0850               	movf	___awmod@divisor,w
 10650  08E9  02D2               	subwf	___awmod@dividend,f
 10651  08EA  0851               	movf	___awmod@divisor+1,w
 10652  08EB  3BD3               	subwfb	___awmod@dividend+1,f
 10653  08EC                     l3341:	
 10654  08EC  3001               	movlw	1
 10655  08ED                     u2395:	
 10656  08ED  36D1               	lsrf	___awmod@divisor+1,f
 10657  08EE  0CD0               	rrf	___awmod@divisor,f
 10658  08EF  0B89               	decfsz	9,f
 10659  08F0  28ED               	goto	u2395
 10660  08F1  3001               	movlw	1
 10661  08F2  02D5               	subwf	___awmod@counter,f
 10662  08F3  1D03               	btfss	3,2
 10663  08F4  28E0               	goto	l3337
 10664  08F5                     l3345:	
 10665  08F5  0856               	movf	___awmod@sign,w
 10666  08F6  1903               	btfsc	3,2
 10667  08F7  28FD               	goto	l3349
 10668  08F8  09D2               	comf	___awmod@dividend,f
 10669  08F9  09D3               	comf	___awmod@dividend+1,f
 10670  08FA  0AD2               	incf	___awmod@dividend,f
 10671  08FB  1903               	skipnz
 10672  08FC  0AD3               	incf	___awmod@dividend+1,f
 10673  08FD                     l3349:	
 10674  08FD  0853               	movf	___awmod@dividend+1,w
 10675  08FE  01D1               	clrf	?___awmod+1
 10676  08FF  07D1               	addwf	?___awmod+1,f
 10677  0900  0852               	movf	___awmod@dividend,w
 10678  0901  01D0               	clrf	?___awmod
 10679  0902  07D0               	addwf	?___awmod,f
 10680  0903  0008               	return
 10681  0904                     __end_of___awmod:	
 10682                           
 10683                           	psect	text37
 10684  0999                     __ptext37:	
 10685 ;; *************** function ___awdiv *****************
 10686 ;; Defined at:
 10687 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;  divisor         2    6[BANK0 ] int 
 10690 ;;  dividend        2    8[BANK0 ] int 
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;  quotient        2   13[BANK0 ] int 
 10693 ;;  sign            1   12[BANK0 ] unsigned char 
 10694 ;;  counter         1   11[BANK0 ] unsigned char 
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  2    6[BANK0 ] int 
 10697 ;; Registers used:
 10698 ;;		wreg, status,2, status,0
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10704 ;;      Params:         0       4       0       0       0       0       0       0
 10705 ;;      Locals:         0       4       0       0       0       0       0       0
 10706 ;;      Temps:          0       1       0       0       0       0       0       0
 10707 ;;      Totals:         0       9       0       0       0       0       0       0
 10708 ;;Total ram usage:        9 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:    4
 10711 ;; This function calls:
 10712 ;;		Nothing
 10713 ;; This function is called by:
 10714 ;;		_DisplayBuzzerData
 10715 ;;		_StateClockSet
 10716 ;;		_DisplayTime
 10717 ;;		_DisplayTemperature
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           
 10722                           ;psect for function ___awdiv
 10723  0999                     ___awdiv:	
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10727  0999  0020               	movlb	0	; select bank0
 10728  099A  01CD               	clrf	___awdiv@sign
 10729  099B  1FC8               	btfss	___awdiv@divisor+1,7
 10730  099C  29A4               	goto	l3279
 10731  099D  09C7               	comf	___awdiv@divisor,f
 10732  099E  09C8               	comf	___awdiv@divisor+1,f
 10733  099F  0AC7               	incf	___awdiv@divisor,f
 10734  09A0  1903               	skipnz
 10735  09A1  0AC8               	incf	___awdiv@divisor+1,f
 10736  09A2  01CD               	clrf	___awdiv@sign
 10737  09A3  0ACD               	incf	___awdiv@sign,f
 10738  09A4                     l3279:	
 10739  09A4  1FCA               	btfss	___awdiv@dividend+1,7
 10740  09A5  29AF               	goto	l3285
 10741  09A6  09C9               	comf	___awdiv@dividend,f
 10742  09A7  09CA               	comf	___awdiv@dividend+1,f
 10743  09A8  0AC9               	incf	___awdiv@dividend,f
 10744  09A9  1903               	skipnz
 10745  09AA  0ACA               	incf	___awdiv@dividend+1,f
 10746  09AB  3001               	movlw	1
 10747  09AC  00CB               	movwf	??___awdiv
 10748  09AD  084B               	movf	??___awdiv,w
 10749  09AE  06CD               	xorwf	___awdiv@sign,f
 10750  09AF                     l3285:	
 10751  09AF  01CE               	clrf	___awdiv@quotient
 10752  09B0  01CF               	clrf	___awdiv@quotient+1
 10753  09B1  0848               	movf	___awdiv@divisor+1,w
 10754  09B2  0447               	iorwf	___awdiv@divisor,w
 10755  09B3  1903               	skipnz
 10756  09B4  29DE               	goto	l3307
 10757  09B5  01CC               	clrf	___awdiv@counter
 10758  09B6  0ACC               	incf	___awdiv@counter,f
 10759  09B7                     l3295:	
 10760  09B7  1BC8               	btfsc	___awdiv@divisor+1,7
 10761  09B8  29C3               	goto	l3297
 10762  09B9  3001               	movlw	1
 10763  09BA                     u2265:	
 10764  09BA  35C7               	lslf	___awdiv@divisor,f
 10765  09BB  0DC8               	rlf	___awdiv@divisor+1,f
 10766  09BC  0B89               	decfsz	9,f
 10767  09BD  29BA               	goto	u2265
 10768  09BE  3001               	movlw	1
 10769  09BF  00CB               	movwf	??___awdiv
 10770  09C0  084B               	movf	??___awdiv,w
 10771  09C1  07CC               	addwf	___awdiv@counter,f
 10772  09C2  29B7               	goto	l3295
 10773  09C3                     l3297:	
 10774  09C3  3001               	movlw	1
 10775  09C4                     u2285:	
 10776  09C4  35CE               	lslf	___awdiv@quotient,f
 10777  09C5  0DCF               	rlf	___awdiv@quotient+1,f
 10778  09C6  0B89               	decfsz	9,f
 10779  09C7  29C4               	goto	u2285
 10780  09C8  0848               	movf	___awdiv@divisor+1,w
 10781  09C9  024A               	subwf	___awdiv@dividend+1,w
 10782  09CA  1D03               	skipz
 10783  09CB  29CE               	goto	u2295
 10784  09CC  0847               	movf	___awdiv@divisor,w
 10785  09CD  0249               	subwf	___awdiv@dividend,w
 10786  09CE                     u2295:	
 10787  09CE  1C03               	skipc
 10788  09CF  29D5               	goto	l3303
 10789  09D0  0847               	movf	___awdiv@divisor,w
 10790  09D1  02C9               	subwf	___awdiv@dividend,f
 10791  09D2  0848               	movf	___awdiv@divisor+1,w
 10792  09D3  3BCA               	subwfb	___awdiv@dividend+1,f
 10793  09D4  144E               	bsf	___awdiv@quotient,0
 10794  09D5                     l3303:	
 10795  09D5  3001               	movlw	1
 10796  09D6                     u2305:	
 10797  09D6  36C8               	lsrf	___awdiv@divisor+1,f
 10798  09D7  0CC7               	rrf	___awdiv@divisor,f
 10799  09D8  0B89               	decfsz	9,f
 10800  09D9  29D6               	goto	u2305
 10801  09DA  3001               	movlw	1
 10802  09DB  02CC               	subwf	___awdiv@counter,f
 10803  09DC  1D03               	btfss	3,2
 10804  09DD  29C3               	goto	l3297
 10805  09DE                     l3307:	
 10806  09DE  084D               	movf	___awdiv@sign,w
 10807  09DF  1903               	btfsc	3,2
 10808  09E0  29E6               	goto	l3311
 10809  09E1  09CE               	comf	___awdiv@quotient,f
 10810  09E2  09CF               	comf	___awdiv@quotient+1,f
 10811  09E3  0ACE               	incf	___awdiv@quotient,f
 10812  09E4  1903               	skipnz
 10813  09E5  0ACF               	incf	___awdiv@quotient+1,f
 10814  09E6                     l3311:	
 10815  09E6  084F               	movf	___awdiv@quotient+1,w
 10816  09E7  01C8               	clrf	?___awdiv+1
 10817  09E8  07C8               	addwf	?___awdiv+1,f
 10818  09E9  084E               	movf	___awdiv@quotient,w
 10819  09EA  01C7               	clrf	?___awdiv
 10820  09EB  07C7               	addwf	?___awdiv,f
 10821  09EC  0008               	return
 10822  09ED                     __end_of___awdiv:	
 10823                           
 10824                           	psect	text38
 10825  14E8                     __ptext38:	
 10826 ;; *************** function _DisplayBuzMenu *****************
 10827 ;; Defined at:
 10828 ;;		line 168 in file "StateBuzzer.c"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;		None
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;		None
 10833 ;; Return value:  Size  Location     Type
 10834 ;;		None               void
 10835 ;; Registers used:
 10836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10842 ;;      Params:         0       0       0       0       0       0       0       0
 10843 ;;      Locals:         0       0       0       0       0       0       0       0
 10844 ;;      Temps:          0       0       0       0       0       0       0       0
 10845 ;;      Totals:         0       0       0       0       0       0       0       0
 10846 ;;Total ram usage:        0 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    7
 10849 ;; This function calls:
 10850 ;;		_LCDGoto
 10851 ;;		_LCDPutStr
 10852 ;; This function is called by:
 10853 ;;		_StateBuzzer
 10854 ;; This function uses a non-reentrant model
 10855 ;;
 10856                           
 10857                           
 10858                           ;psect for function _DisplayBuzMenu
 10859  14E8                     _DisplayBuzMenu:	
 10860                           
 10861                           ;incstack = 0
 10862                           ; Regs used in _DisplayBuzMenu: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10863                           ;StateBuzzer.c: 171: do { LCDGoto(0,0); LCDPutStr("     Buzzer"); }while (0);;
 10864  14E8  0020               	movlb	0	; select bank0
 10865  14E9  01C8               	clrf	LCDGoto@ln
 10866  14EA  3000               	movlw	0
 10867  14EB  3196  261A  3194   	fcall	_LCDGoto
 10868  14EE  30D8               	movlw	low (STR_10| (0+32768))
 10869  14EF  0020               	movlb	0	; select bank0
 10870  14F0  00C8               	movwf	LCDPutStr@str
 10871  14F1  3090               	movlw	high (STR_10| (0+32768))
 10872  14F2  00C9               	movwf	LCDPutStr@str+1
 10873  14F3  3196  2684  3194   	fcall	_LCDPutStr
 10874                           
 10875                           ;StateBuzzer.c: 174: do { LCDGoto(0,1); LCDPutStr("RA4=Next RB0=Now"); } while (0);;
 10876  14F6  0020               	movlb	0	; select bank0
 10877  14F7  01C8               	clrf	LCDGoto@ln
 10878  14F8  0AC8               	incf	LCDGoto@ln,f
 10879  14F9  3000               	movlw	0
 10880  14FA  3196  261A  3194   	fcall	_LCDGoto
 10881  14FD  3055               	movlw	low (STR_4| (0+32768))
 10882  14FE  0020               	movlb	0	; select bank0
 10883  14FF  00C8               	movwf	LCDPutStr@str
 10884  1500  3090               	movlw	high (STR_4| (0+32768))
 10885  1501  00C9               	movwf	LCDPutStr@str+1
 10886  1502  3196  2684         	fcall	_LCDPutStr
 10887  1504  0008               	return
 10888  1505                     __end_of_DisplayBuzMenu:	
 10889                           
 10890                           	psect	text39
 10891  1684                     __ptext39:	
 10892 ;; *************** function _LCDPutStr *****************
 10893 ;; Defined at:
 10894 ;;		line 135 in file "lcd.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;  str             2    7[BANK0 ] PTR const unsigned char 
 10897 ;;		 -> STR_108(17), STR_107(17), STR_106(7), STR_105(7), 
 10898 ;;		 -> STR_104(8), STR_103(17), STR_102(14), STR_100(17), 
 10899 ;;		 -> STR_99(7), STR_98(17), STR_97(11), STR_96(12), 
 10900 ;;		 -> STR_95(4), STR_94(9), STR_93(12), STR_92(4), 
 10901 ;;		 -> STR_91(9), STR_90(16), STR_89(9), STR_50(17), 
 10902 ;;		 -> STR_49(4), STR_48(4), STR_47(4), STR_46(4), 
 10903 ;;		 -> STR_45(4), STR_44(4), STR_43(4), STR_42(4), 
 10904 ;;		 -> STR_41(4), STR_40(4), STR_39(4), STR_38(4), 
 10905 ;;		 -> STR_37(4), STR_36(4), STR_35(4), STR_34(4), 
 10906 ;;		 -> STR_33(4), STR_32(4), STR_31(4), STR_30(4), 
 10907 ;;		 -> STR_29(4), STR_28(4), STR_27(4), STR_26(4), 
 10908 ;;		 -> STR_25(4), STR_24(3), STR_23(4), STR_22(4), 
 10909 ;;		 -> STR_21(4), STR_20(4), STR_19(4), STR_18(4), 
 10910 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(4), 
 10911 ;;		 -> STR_13(6), STR_12(5), STR_11(17), STR_10(12), 
 10912 ;;		 -> STR_7(12), STR_6(6), STR_5(9), STR_4(17), 
 10913 ;;		 -> STR_3(13), STR_2(15), STR_1(13), 
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;  i               1   11[BANK0 ] unsigned char 
 10916 ;; Return value:  Size  Location     Type
 10917 ;;		None               void
 10918 ;; Registers used:
 10919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10925 ;;      Params:         0       2       0       0       0       0       0       0
 10926 ;;      Locals:         0       1       0       0       0       0       0       0
 10927 ;;      Temps:          0       2       0       0       0       0       0       0
 10928 ;;      Totals:         0       5       0       0       0       0       0       0
 10929 ;;Total ram usage:        5 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:    6
 10932 ;; This function calls:
 10933 ;;		_LCDPutChar
 10934 ;; This function is called by:
 10935 ;;		_DisplaySplashText
 10936 ;;		_DisplayVoltMenu
 10937 ;;		_DisplayVoltage
 10938 ;;		_DisplayBuzMenu
 10939 ;;		_DisplayBuzzerData
 10940 ;;		_StateClockSet
 10941 ;;		_DisplayClockMenu
 10942 ;;		_DisplayTime
 10943 ;;		_DisplayTempMenu
 10944 ;;		_DisplayTemperature
 10945 ;; This function uses a non-reentrant model
 10946 ;;
 10947                           
 10948                           
 10949                           ;psect for function _LCDPutStr
 10950  1684                     _LCDPutStr:	
 10951                           
 10952                           ;lcd.c: 137: uint8_t i=0;
 10953                           
 10954                           ;incstack = 0
 10955                           ; Regs used in _LCDPutStr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10956  1684  0020               	movlb	0	; select bank0
 10957  1685  01CC               	clrf	LCDPutStr@i
 10958  1686                     l3193:	
 10959                           ;lcd.c: 140: while (str[i])
 10960                           
 10961  1686  0849               	movf	LCDPutStr@str+1,w
 10962  1687  00CB               	movwf	??_LCDPutStr+1
 10963  1688  0848               	movf	LCDPutStr@str,w
 10964  1689  00CA               	movwf	??_LCDPutStr
 10965  168A  084C               	movf	LCDPutStr@i,w
 10966  168B  074A               	addwf	??_LCDPutStr,w
 10967  168C  0084               	movwf	4
 10968  168D  084B               	movf	??_LCDPutStr+1,w
 10969  168E  1803               	skipnc
 10970  168F  0A4B               	incf	??_LCDPutStr+1,w
 10971  1690  0085               	movwf	5
 10972  1691  0800               	movf	0,w	;code access
 10973  1692  3800               	iorlw	0
 10974  1693  1903               	btfsc	3,2
 10975  1694  0008               	return
 10976                           
 10977                           ;lcd.c: 141: {
 10978                           ;lcd.c: 143: LCDPutChar(str[i++]);
 10979  1695  0849               	movf	LCDPutStr@str+1,w
 10980  1696  00CB               	movwf	??_LCDPutStr+1
 10981  1697  0848               	movf	LCDPutStr@str,w
 10982  1698  00CA               	movwf	??_LCDPutStr
 10983  1699  084C               	movf	LCDPutStr@i,w
 10984  169A  074A               	addwf	??_LCDPutStr,w
 10985  169B  0084               	movwf	4
 10986  169C  084B               	movf	??_LCDPutStr+1,w
 10987  169D  1803               	skipnc
 10988  169E  0A4B               	incf	??_LCDPutStr+1,w
 10989  169F  0085               	movwf	5
 10990  16A0  0800               	movf	0,w	;code access
 10991  16A1  3196  263D  3196   	fcall	_LCDPutChar
 10992  16A4  3001               	movlw	1
 10993  16A5  0020               	movlb	0	; select bank0
 10994  16A6  00CA               	movwf	??_LCDPutStr
 10995  16A7  084A               	movf	??_LCDPutStr,w
 10996  16A8  07CC               	addwf	LCDPutStr@i,f
 10997  16A9  2E86               	goto	l3193
 10998  16AA                     __end_of_LCDPutStr:	
 10999                           
 11000                           	psect	text40
 11001  163D                     __ptext40:	
 11002 ;; *************** function _LCDPutChar *****************
 11003 ;; Defined at:
 11004 ;;		line 103 in file "lcd.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;  ch              1    wreg     unsigned char 
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;  ch              1    6[BANK0 ] unsigned char 
 11009 ;; Return value:  Size  Location     Type
 11010 ;;		None               void
 11011 ;; Registers used:
 11012 ;;		wreg, status,2, status,0, pclath, cstack
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11018 ;;      Params:         0       0       0       0       0       0       0       0
 11019 ;;      Locals:         0       1       0       0       0       0       0       0
 11020 ;;      Temps:          0       2       0       0       0       0       0       0
 11021 ;;      Totals:         0       3       0       0       0       0       0       0
 11022 ;;Total ram usage:        3 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; Hardware stack levels required when called:    5
 11025 ;; This function calls:
 11026 ;;		_LCDWriteNibble
 11027 ;; This function is called by:
 11028 ;;		_DisplayVoltage
 11029 ;;		_DisplayBuzzerData
 11030 ;;		_StateClockSet
 11031 ;;		_DisplayTime
 11032 ;;		_DisplayTemperature
 11033 ;;		_LCDPutStr
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           
 11038                           ;psect for function _LCDPutChar
 11039  163D                     _LCDPutChar:	
 11040                           
 11041                           ;incstack = 0
 11042                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+pclath+cstack]
 11043                           ;LCDPutChar@ch stored from wreg
 11044  163D  0020               	movlb	0	; select bank0
 11045  163E  00C7               	movwf	LCDPutChar@ch
 11046                           
 11047                           ;lcd.c: 105: _delay((unsigned long)((5)*(4000000/4000.0)));
 11048  163F  3007               	movlw	7
 11049  1640  00C6               	movwf	??_LCDPutChar+1
 11050  1641  307D               	movlw	125
 11051  1642  00C5               	movwf	??_LCDPutChar
 11052  1643                     u4477:	
 11053  1643  0BC5               	decfsz	??_LCDPutChar,f
 11054  1644  2E43               	goto	u4477
 11055  1645  0BC6               	decfsz	??_LCDPutChar+1,f
 11056  1646  2E43               	goto	u4477
 11057                           
 11058                           ;lcd.c: 108: LCDWriteNibble(ch,1);
 11059  1647  0020               	movlb	0	; select bank0
 11060  1648  01C1               	clrf	LCDWriteNibble@rs
 11061  1649  0AC1               	incf	LCDWriteNibble@rs,f
 11062  164A  0847               	movf	LCDPutChar@ch,w
 11063  164B  3195  2597  3196   	fcall	_LCDWriteNibble
 11064                           
 11065                           ;lcd.c: 111: ch = (ch << 4);
 11066  164E  0020               	movlb	0	; select bank0
 11067  164F  0847               	movf	LCDPutChar@ch,w
 11068  1650  00C5               	movwf	??_LCDPutChar
 11069  1651  3003               	movlw	3
 11070  1652                     u1995:	
 11071  1652  35C5               	lslf	??_LCDPutChar,f
 11072  1653  3EFF               	addlw	-1
 11073  1654  1D03               	skipz
 11074  1655  2E52               	goto	u1995
 11075  1656  3545               	lslf	??_LCDPutChar,w
 11076  1657  00C6               	movwf	??_LCDPutChar+1
 11077  1658  0846               	movf	??_LCDPutChar+1,w
 11078  1659  00C7               	movwf	LCDPutChar@ch
 11079                           
 11080                           ;lcd.c: 114: LCDWriteNibble(ch,1);
 11081  165A  01C1               	clrf	LCDWriteNibble@rs
 11082  165B  0AC1               	incf	LCDWriteNibble@rs,f
 11083  165C  0847               	movf	LCDPutChar@ch,w
 11084  165D  3195  2597         	fcall	_LCDWriteNibble
 11085  165F  0008               	return
 11086  1660                     __end_of_LCDPutChar:	
 11087                           
 11088                           	psect	text41
 11089  161A                     __ptext41:	
 11090 ;; *************** function _LCDGoto *****************
 11091 ;; Defined at:
 11092 ;;		line 148 in file "lcd.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;  pos             1    wreg     unsigned char 
 11095 ;;  ln              1    7[BANK0 ] unsigned char 
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;  pos             1   12[BANK0 ] unsigned char 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;		None               void
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0, pclath, cstack
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11107 ;;      Params:         0       1       0       0       0       0       0       0
 11108 ;;      Locals:         0       3       0       0       0       0       0       0
 11109 ;;      Temps:          0       2       0       0       0       0       0       0
 11110 ;;      Totals:         0       6       0       0       0       0       0       0
 11111 ;;Total ram usage:        6 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    6
 11114 ;; This function calls:
 11115 ;;		_LCDPutCmd
 11116 ;; This function is called by:
 11117 ;;		_DisplaySplashText
 11118 ;;		_DisplayVoltMenu
 11119 ;;		_DisplayVoltage
 11120 ;;		_DisplayBuzMenu
 11121 ;;		_DisplayBuzzerData
 11122 ;;		_StateClockSet
 11123 ;;		_DisplayClockMenu
 11124 ;;		_DisplayTime
 11125 ;;		_DisplayTempMenu
 11126 ;;		_DisplayTemperature
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           
 11131                           ;psect for function _LCDGoto
 11132  161A                     _LCDGoto:	
 11133                           
 11134                           ;incstack = 0
 11135                           ; Regs used in _LCDGoto: [wreg+status,2+status,0+pclath+cstack]
 11136                           ;LCDGoto@pos stored from wreg
 11137  161A  0020               	movlb	0	; select bank0
 11138  161B  00CD               	movwf	LCDGoto@pos
 11139                           
 11140                           ;lcd.c: 151: if ((ln > (2-1)) || (pos > (16-1)))
 11141  161C  3002               	movlw	2
 11142  161D  0248               	subwf	LCDGoto@ln,w
 11143  161E  1803               	skipnc
 11144  161F  0008               	return
 11145  1620  3010               	movlw	16
 11146  1621  024D               	subwf	LCDGoto@pos,w
 11147  1622  1803               	btfsc	3,0
 11148  1623  0008               	return
 11149                           
 11150                           ;lcd.c: 155: }
 11151                           ;lcd.c: 158: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
 11152                           
 11153                           ;lcd.c: 152: {
 11154                           ;lcd.c: 154: return;
 11155  1624  0848               	movf	LCDGoto@ln,w
 11156  1625  3A01               	xorlw	1
 11157  1626  1903               	skipnz
 11158  1627  2E2A               	goto	l3203
 11159  1628  3080               	movlw	128
 11160  1629  2E2B               	goto	L7
 11161  162A                     l3203:	
 11162  162A  30C0               	movlw	192
 11163  162B                     L7:	
 11164  162B  044D               	iorwf	LCDGoto@pos,w
 11165  162C  00CB               	movwf	_LCDGoto$1533
 11166  162D  3000               	movlw	0
 11167  162E  00CC               	movwf	_LCDGoto$1533+1
 11168  162F  084B               	movf	_LCDGoto$1533,w
 11169  1630  3196  26FB  3196   	fcall	_LCDPutCmd
 11170                           
 11171                           ;lcd.c: 161: _delay((unsigned long)((5)*(4000000/4000.0)));
 11172  1633  3007               	movlw	7
 11173  1634  0020               	movlb	0	; select bank0
 11174  1635  00CA               	movwf	??_LCDGoto+1
 11175  1636  307D               	movlw	125
 11176  1637  00C9               	movwf	??_LCDGoto
 11177  1638                     u4487:	
 11178  1638  0BC9               	decfsz	??_LCDGoto,f
 11179  1639  2E38               	goto	u4487
 11180  163A  0BCA               	decfsz	??_LCDGoto+1,f
 11181  163B  2E38               	goto	u4487
 11182  163C  0008               	return
 11183  163D                     __end_of_LCDGoto:	
 11184                           
 11185                           	psect	text42
 11186  145D                     __ptext42:	
 11187 ;; *************** function _SYSTEM_Initialize *****************
 11188 ;; Defined at:
 11189 ;;		line 71 in file "mcc_generated_files/mcc.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;		None
 11192 ;; Auto vars:     Size  Location     Type
 11193 ;;		None
 11194 ;; Return value:  Size  Location     Type
 11195 ;;		None               void
 11196 ;; Registers used:
 11197 ;;		wreg, status,2, status,0, pclath, cstack
 11198 ;; Tracked objects:
 11199 ;;		On entry : 0/0
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11203 ;;      Params:         0       0       0       0       0       0       0       0
 11204 ;;      Locals:         0       0       0       0       0       0       0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0       0
 11206 ;;      Totals:         0       0       0       0       0       0       0       0
 11207 ;;Total ram usage:        0 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    5
 11210 ;; This function calls:
 11211 ;;		_ADC_Initialize
 11212 ;;		_EPWM1_Initialize
 11213 ;;		_EUSART_Initialize
 11214 ;;		_I2C_Initialize
 11215 ;;		_OSCILLATOR_Initialize
 11216 ;;		_PIN_MANAGER_Initialize
 11217 ;;		_TMR0_Initialize
 11218 ;;		_TMR1_Initialize
 11219 ;;		_TMR4_Initialize
 11220 ;; This function is called by:
 11221 ;;		_main
 11222 ;; This function uses a non-reentrant model
 11223 ;;
 11224                           
 11225                           
 11226                           ;psect for function _SYSTEM_Initialize
 11227  145D                     _SYSTEM_Initialize:	
 11228                           
 11229                           ;mcc.c: 73: OSCILLATOR_Initialize();
 11230                           
 11231                           ;incstack = 0
 11232                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11233  145D  3193  2319  3194   	fcall	_OSCILLATOR_Initialize
 11234                           
 11235                           ;mcc.c: 74: PIN_MANAGER_Initialize();
 11236  1460  3197  2778  3194   	fcall	_PIN_MANAGER_Initialize
 11237                           
 11238                           ;mcc.c: 75: TMR0_Initialize();
 11239  1463  3193  2361  3194   	fcall	_TMR0_Initialize
 11240                           
 11241                           ;mcc.c: 76: ADC_Initialize();
 11242  1466  3193  232B  3194   	fcall	_ADC_Initialize
 11243                           
 11244                           ;mcc.c: 77: EPWM1_Initialize();
 11245  1469  3193  2392  3194   	fcall	_EPWM1_Initialize
 11246                           
 11247                           ;mcc.c: 78: TMR4_Initialize();
 11248  146C  3193  2345  3194   	fcall	_TMR4_Initialize
 11249                           
 11250                           ;mcc.c: 79: TMR1_Initialize();
 11251  146F  3188  2000  3194   	fcall	_TMR1_Initialize
 11252                           
 11253                           ;mcc.c: 80: I2C_Initialize();
 11254  1472  3194  240E  3194   	fcall	_I2C_Initialize
 11255                           
 11256                           ;mcc.c: 81: EUSART_Initialize();
 11257  1475  3194  2442         	fcall	_EUSART_Initialize
 11258  1477  0008               	return
 11259  1478                     __end_of_SYSTEM_Initialize:	
 11260                           
 11261                           	psect	text43
 11262  1345                     __ptext43:	
 11263 ;; *************** function _TMR4_Initialize *****************
 11264 ;; Defined at:
 11265 ;;		line 58 in file "mcc_generated_files/tmr4.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;		None
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;		None
 11270 ;; Return value:  Size  Location     Type
 11271 ;;		None               void
 11272 ;; Registers used:
 11273 ;;		wreg, status,2
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11279 ;;      Params:         0       0       0       0       0       0       0       0
 11280 ;;      Locals:         0       0       0       0       0       0       0       0
 11281 ;;      Temps:          0       0       0       0       0       0       0       0
 11282 ;;      Totals:         0       0       0       0       0       0       0       0
 11283 ;;Total ram usage:        0 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:    4
 11286 ;; This function calls:
 11287 ;;		Nothing
 11288 ;; This function is called by:
 11289 ;;		_SYSTEM_Initialize
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           
 11294                           ;psect for function _TMR4_Initialize
 11295  1345                     _TMR4_Initialize:	
 11296                           
 11297                           ;tmr4.c: 63: T4CON = 0x02;
 11298                           
 11299                           ;incstack = 0
 11300                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11301  1345  3002               	movlw	2
 11302  1346  0028               	movlb	8	; select bank8
 11303  1347  0097               	movwf	23	;volatile
 11304                           
 11305                           ;tmr4.c: 66: PR4 = 0x05;
 11306  1348  3005               	movlw	5
 11307  1349  0096               	movwf	22	;volatile
 11308                           
 11309                           ;tmr4.c: 69: TMR4 = 0x00;
 11310  134A  0195               	clrf	21	;volatile
 11311                           
 11312                           ;tmr4.c: 72: PIR3bits.TMR4IF = 0;
 11313  134B  0020               	movlb	0	; select bank0
 11314  134C  1093               	bcf	19,1	;volatile
 11315  134D  0008               	return
 11316  134E                     __end_of_TMR4_Initialize:	
 11317                           
 11318                           	psect	text44
 11319  0800                     __ptext44:	
 11320 ;; *************** function _TMR1_Initialize *****************
 11321 ;; Defined at:
 11322 ;;		line 63 in file "mcc_generated_files/tmr1.c"
 11323 ;; Parameters:    Size  Location     Type
 11324 ;;		None
 11325 ;; Auto vars:     Size  Location     Type
 11326 ;;		None
 11327 ;; Return value:  Size  Location     Type
 11328 ;;		None               void
 11329 ;; Registers used:
 11330 ;;		wreg, status,2, status,0
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11336 ;;      Params:         0       0       0       0       0       0       0       0
 11337 ;;      Locals:         0       0       0       0       0       0       0       0
 11338 ;;      Temps:          0       0       0       0       0       0       0       0
 11339 ;;      Totals:         0       0       0       0       0       0       0       0
 11340 ;;Total ram usage:        0 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; Hardware stack levels required when called:    4
 11343 ;; This function calls:
 11344 ;;		Nothing
 11345 ;; This function is called by:
 11346 ;;		_SYSTEM_Initialize
 11347 ;; This function uses a non-reentrant model
 11348 ;;
 11349                           
 11350                           
 11351                           ;psect for function _TMR1_Initialize
 11352  0800                     _TMR1_Initialize:	
 11353                           
 11354                           ;tmr1.c: 68: T1CON = 0x88;
 11355                           
 11356                           ;incstack = 0
 11357                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0]
 11358  0800  3088               	movlw	136
 11359  0801  0020               	movlb	0	; select bank0
 11360  0802  0098               	movwf	24	;volatile
 11361                           
 11362                           ;tmr1.c: 71: T1GCON = 0x00;
 11363  0803  0199               	clrf	25	;volatile
 11364                           
 11365                           ;tmr1.c: 74: TMR1H = 0x80;
 11366  0804  3080               	movlw	128
 11367  0805  0097               	movwf	23	;volatile
 11368                           
 11369                           ;tmr1.c: 77: TMR1L = 0x00;
 11370  0806  0196               	clrf	22	;volatile
 11371                           
 11372                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
 11373  0807  0817               	movf	23,w	;volatile
 11374  0808  01E7               	clrf	_timer1ReloadVal+1	;volatile
 11375  0809  07E7               	addwf	_timer1ReloadVal+1,f	;volatile
 11376  080A  0816               	movf	22,w	;volatile
 11377  080B  01E6               	clrf	_timer1ReloadVal	;volatile
 11378  080C  07E6               	addwf	_timer1ReloadVal,f	;volatile
 11379                           
 11380                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
 11381  080D  1011               	bcf	17,0	;volatile
 11382                           
 11383                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
 11384  080E  0021               	movlb	1	; select bank1
 11385  080F  1411               	bsf	17,0	;volatile
 11386  0810  0008               	return
 11387  0811                     __end_of_TMR1_Initialize:	
 11388                           
 11389                           	psect	text45
 11390  1361                     __ptext45:	
 11391 ;; *************** function _TMR0_Initialize *****************
 11392 ;; Defined at:
 11393 ;;		line 66 in file "mcc_generated_files/tmr0.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;		None
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;		None
 11398 ;; Return value:  Size  Location     Type
 11399 ;;		None               void
 11400 ;; Registers used:
 11401 ;;		wreg, status,2
 11402 ;; Tracked objects:
 11403 ;;		On entry : 0/0
 11404 ;;		On exit  : 0/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11407 ;;      Params:         0       0       0       0       0       0       0       0
 11408 ;;      Locals:         0       0       0       0       0       0       0       0
 11409 ;;      Temps:          0       0       0       0       0       0       0       0
 11410 ;;      Totals:         0       0       0       0       0       0       0       0
 11411 ;;Total ram usage:        0 bytes
 11412 ;; Hardware stack levels used:    1
 11413 ;; Hardware stack levels required when called:    4
 11414 ;; This function calls:
 11415 ;;		Nothing
 11416 ;; This function is called by:
 11417 ;;		_SYSTEM_Initialize
 11418 ;; This function uses a non-reentrant model
 11419 ;;
 11420                           
 11421                           
 11422                           ;psect for function _TMR0_Initialize
 11423  1361                     _TMR0_Initialize:	
 11424                           
 11425                           ;tmr0.c: 71: OPTION_REG = (OPTION_REG & 0xC0) | 0xC7 & 0x3F;
 11426                           
 11427                           ;incstack = 0
 11428                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
 11429  1361  0021               	movlb	1	; select bank1
 11430  1362  0815               	movf	21,w	;volatile
 11431  1363  39C0               	andlw	192
 11432  1364  3807               	iorlw	7
 11433  1365  0095               	movwf	21	;volatile
 11434                           
 11435                           ;tmr0.c: 74: TMR0 = 0x00;
 11436  1366  0020               	movlb	0	; select bank0
 11437  1367  0195               	clrf	21	;volatile
 11438                           
 11439                           ;tmr0.c: 77: timer0ReloadVal= 0;
 11440  1368  01F3               	clrf	_timer0ReloadVal	;volatile
 11441                           
 11442                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
 11443  1369  110B               	bcf	11,2	;volatile
 11444                           
 11445                           ;tmr0.c: 83: INTCONbits.TMR0IE = 1;
 11446  136A  168B               	bsf	11,5	;volatile
 11447  136B  0008               	return
 11448  136C                     __end_of_TMR0_Initialize:	
 11449                           
 11450                           	psect	text46
 11451  1778                     __ptext46:	
 11452 ;; *************** function _PIN_MANAGER_Initialize *****************
 11453 ;; Defined at:
 11454 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;		None
 11459 ;; Return value:  Size  Location     Type
 11460 ;;		None               void
 11461 ;; Registers used:
 11462 ;;		wreg, status,2
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11468 ;;      Params:         0       0       0       0       0       0       0       0
 11469 ;;      Locals:         0       0       0       0       0       0       0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0
 11471 ;;      Totals:         0       0       0       0       0       0       0       0
 11472 ;;Total ram usage:        0 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    4
 11475 ;; This function calls:
 11476 ;;		Nothing
 11477 ;; This function is called by:
 11478 ;;		_SYSTEM_Initialize
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _PIN_MANAGER_Initialize
 11484  1778                     _PIN_MANAGER_Initialize:	
 11485                           
 11486                           ;pin_manager.c: 52: LATA = 0x00;
 11487                           
 11488                           ;incstack = 0
 11489                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11490  1778  0022               	movlb	2	; select bank2
 11491  1779  018C               	clrf	12	;volatile
 11492                           
 11493                           ;pin_manager.c: 53: TRISA = 0xFF;
 11494  177A  30FF               	movlw	255
 11495  177B  0021               	movlb	1	; select bank1
 11496  177C  008C               	movwf	12	;volatile
 11497                           
 11498                           ;pin_manager.c: 54: ANSELA = 0x01;
 11499  177D  3001               	movlw	1
 11500  177E  0023               	movlb	3	; select bank3
 11501  177F  008C               	movwf	12	;volatile
 11502                           
 11503                           ;pin_manager.c: 56: LATB = 0x00;
 11504  1780  0022               	movlb	2	; select bank2
 11505  1781  018D               	clrf	13	;volatile
 11506                           
 11507                           ;pin_manager.c: 57: TRISB = 0x01;
 11508  1782  3001               	movlw	1
 11509  1783  0021               	movlb	1	; select bank1
 11510  1784  008D               	movwf	13	;volatile
 11511                           
 11512                           ;pin_manager.c: 58: ANSELB = 0x00;
 11513  1785  0023               	movlb	3	; select bank3
 11514  1786  018D               	clrf	13	;volatile
 11515                           
 11516                           ;pin_manager.c: 59: WPUB = 0x00;
 11517  1787  0024               	movlb	4	; select bank4
 11518  1788  018D               	clrf	13	;volatile
 11519                           
 11520                           ;pin_manager.c: 61: LATC = 0x18;
 11521  1789  3018               	movlw	24
 11522  178A  0022               	movlb	2	; select bank2
 11523  178B  008E               	movwf	14	;volatile
 11524                           
 11525                           ;pin_manager.c: 62: TRISC = 0xFB;
 11526  178C  30FB               	movlw	251
 11527  178D  0021               	movlb	1	; select bank1
 11528  178E  008E               	movwf	14	;volatile
 11529                           
 11530                           ;pin_manager.c: 64: LATD = 0x00;
 11531  178F  0022               	movlb	2	; select bank2
 11532  1790  018F               	clrf	15	;volatile
 11533                           
 11534                           ;pin_manager.c: 65: TRISD = 0x00;
 11535  1791  0021               	movlb	1	; select bank1
 11536  1792  018F               	clrf	15	;volatile
 11537                           
 11538                           ;pin_manager.c: 66: ANSELD = 0x00;
 11539  1793  0023               	movlb	3	; select bank3
 11540  1794  018F               	clrf	15	;volatile
 11541                           
 11542                           ;pin_manager.c: 68: LATE = 0x00;
 11543  1795  0022               	movlb	2	; select bank2
 11544  1796  0190               	clrf	16	;volatile
 11545                           
 11546                           ;pin_manager.c: 69: TRISE = 0x0F;
 11547  1797  300F               	movlw	15
 11548  1798  0021               	movlb	1	; select bank1
 11549  1799  0090               	movwf	16	;volatile
 11550                           
 11551                           ;pin_manager.c: 70: ANSELE = 0x00;
 11552  179A  0023               	movlb	3	; select bank3
 11553  179B  0190               	clrf	16	;volatile
 11554                           
 11555                           ;pin_manager.c: 71: WPUE = 0x00;
 11556  179C  0024               	movlb	4	; select bank4
 11557  179D  0190               	clrf	16	;volatile
 11558                           
 11559                           ;pin_manager.c: 73: OPTION_REGbits.nWPUEN = 0x01;
 11560  179E  0021               	movlb	1	; select bank1
 11561  179F  1795               	bsf	21,7	;volatile
 11562                           
 11563                           ;pin_manager.c: 75: APFCON = 0x00;
 11564  17A0  0022               	movlb	2	; select bank2
 11565  17A1  019D               	clrf	29	;volatile
 11566  17A2  0008               	return
 11567  17A3                     __end_of_PIN_MANAGER_Initialize:	
 11568                           
 11569                           	psect	text47
 11570  1319                     __ptext47:	
 11571 ;; *************** function _OSCILLATOR_Initialize *****************
 11572 ;; Defined at:
 11573 ;;		line 84 in file "mcc_generated_files/mcc.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;		None
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;		None
 11578 ;; Return value:  Size  Location     Type
 11579 ;;		None               void
 11580 ;; Registers used:
 11581 ;;		wreg, status,2
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/0
 11584 ;;		On exit  : 0/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11587 ;;      Params:         0       0       0       0       0       0       0       0
 11588 ;;      Locals:         0       0       0       0       0       0       0       0
 11589 ;;      Temps:          0       0       0       0       0       0       0       0
 11590 ;;      Totals:         0       0       0       0       0       0       0       0
 11591 ;;Total ram usage:        0 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    4
 11594 ;; This function calls:
 11595 ;;		Nothing
 11596 ;; This function is called by:
 11597 ;;		_SYSTEM_Initialize
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           
 11602                           ;psect for function _OSCILLATOR_Initialize
 11603  1319                     _OSCILLATOR_Initialize:	
 11604                           
 11605                           ;mcc.c: 87: OSCCON = 0x6A;
 11606                           
 11607                           ;incstack = 0
 11608                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11609  1319  306A               	movlw	106
 11610  131A  0021               	movlb	1	; select bank1
 11611  131B  0099               	movwf	25	;volatile
 11612                           
 11613                           ;mcc.c: 89: OSCSTAT = 0x00;
 11614  131C  019A               	clrf	26	;volatile
 11615                           
 11616                           ;mcc.c: 91: OSCTUNE = 0x00;
 11617  131D  0198               	clrf	24	;volatile
 11618  131E  0008               	return
 11619  131F                     __end_of_OSCILLATOR_Initialize:	
 11620                           
 11621                           	psect	text48
 11622  140E                     __ptext48:	
 11623 ;; *************** function _I2C_Initialize *****************
 11624 ;; Defined at:
 11625 ;;		line 199 in file "mcc_generated_files/i2c.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;		None
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;		None
 11630 ;; Return value:  Size  Location     Type
 11631 ;;		None               void
 11632 ;; Registers used:
 11633 ;;		wreg, status,2
 11634 ;; Tracked objects:
 11635 ;;		On entry : 0/0
 11636 ;;		On exit  : 0/0
 11637 ;;		Unchanged: 0/0
 11638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11639 ;;      Params:         0       0       0       0       0       0       0       0
 11640 ;;      Locals:         0       0       0       0       0       0       0       0
 11641 ;;      Temps:          0       1       0       0       0       0       0       0
 11642 ;;      Totals:         0       1       0       0       0       0       0       0
 11643 ;;Total ram usage:        1 bytes
 11644 ;; Hardware stack levels used:    1
 11645 ;; Hardware stack levels required when called:    4
 11646 ;; This function calls:
 11647 ;;		Nothing
 11648 ;; This function is called by:
 11649 ;;		_SYSTEM_Initialize
 11650 ;; This function uses a non-reentrant model
 11651 ;;
 11652                           
 11653                           
 11654                           ;psect for function _I2C_Initialize
 11655  140E                     _I2C_Initialize:	
 11656                           
 11657                           ;i2c.c: 201: i2c_object.pTrHead = i2c_tr_queue;
 11658                           
 11659                           ;incstack = 0
 11660                           ; Regs used in _I2C_Initialize: [wreg+status,2]
 11661  140E  303A               	movlw	_i2c_tr_queue& (0+255)
 11662  140F  0020               	movlb	0	; select bank0
 11663  1410  00C1               	movwf	??_I2C_Initialize
 11664  1411  0841               	movf	??_I2C_Initialize,w
 11665  1412  00E2               	movwf	_i2c_object+1
 11666                           
 11667                           ;i2c.c: 202: i2c_object.pTrTail = i2c_tr_queue;
 11668  1413  303A               	movlw	_i2c_tr_queue& (0+255)
 11669  1414  00C1               	movwf	??_I2C_Initialize
 11670  1415  0841               	movf	??_I2C_Initialize,w
 11671  1416  00E1               	movwf	_i2c_object
 11672                           
 11673                           ;i2c.c: 203: i2c_object.trStatus.s.empty = 1;
 11674  1417  14E3               	bsf	_i2c_object+2,1
 11675                           
 11676                           ;i2c.c: 204: i2c_object.trStatus.s.full = 0;
 11677  1418  1063               	bcf	_i2c_object+2,0
 11678                           
 11679                           ;i2c.c: 206: i2c_object.i2cErrors = 0;
 11680  1419  01E5               	clrf	_i2c_object+4
 11681                           
 11682                           ;i2c.c: 209: SSPSTAT = 0x80;
 11683  141A  3080               	movlw	128
 11684  141B  0024               	movlb	4	; select bank4
 11685  141C  0094               	movwf	20	;volatile
 11686                           
 11687                           ;i2c.c: 211: SSPCON1 = 0x28;
 11688  141D  3028               	movlw	40
 11689  141E  0095               	movwf	21	;volatile
 11690                           
 11691                           ;i2c.c: 213: SSPCON3 = 0x00;
 11692  141F  0197               	clrf	23	;volatile
 11693                           
 11694                           ;i2c.c: 215: SSPADD = 0x09;
 11695  1420  3009               	movlw	9
 11696  1421  0092               	movwf	18	;volatile
 11697                           
 11698                           ;i2c.c: 219: PIR1bits.SSPIF = 0;
 11699  1422  0020               	movlb	0	; select bank0
 11700  1423  1191               	bcf	17,3	;volatile
 11701                           
 11702                           ;i2c.c: 221: PIE1bits.SSPIE = 1;
 11703  1424  0021               	movlb	1	; select bank1
 11704  1425  1591               	bsf	17,3	;volatile
 11705  1426  0008               	return
 11706  1427                     __end_of_I2C_Initialize:	
 11707                           
 11708                           	psect	text49
 11709  1442                     __ptext49:	
 11710 ;; *************** function _EUSART_Initialize *****************
 11711 ;; Defined at:
 11712 ;;		line 76 in file "mcc_generated_files/eusart.c"
 11713 ;; Parameters:    Size  Location     Type
 11714 ;;		None
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;		None
 11717 ;; Return value:  Size  Location     Type
 11718 ;;		None               void
 11719 ;; Registers used:
 11720 ;;		wreg, status,2
 11721 ;; Tracked objects:
 11722 ;;		On entry : 0/0
 11723 ;;		On exit  : 0/0
 11724 ;;		Unchanged: 0/0
 11725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11726 ;;      Params:         0       0       0       0       0       0       0       0
 11727 ;;      Locals:         0       0       0       0       0       0       0       0
 11728 ;;      Temps:          0       1       0       0       0       0       0       0
 11729 ;;      Totals:         0       1       0       0       0       0       0       0
 11730 ;;Total ram usage:        1 bytes
 11731 ;; Hardware stack levels used:    1
 11732 ;; Hardware stack levels required when called:    4
 11733 ;; This function calls:
 11734 ;;		Nothing
 11735 ;; This function is called by:
 11736 ;;		_SYSTEM_Initialize
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           
 11741                           ;psect for function _EUSART_Initialize
 11742  1442                     _EUSART_Initialize:	
 11743                           
 11744                           ;eusart.c: 79: PIE1bits.RCIE = 0;
 11745                           
 11746                           ;incstack = 0
 11747                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 11748  1442  0021               	movlb	1	; select bank1
 11749  1443  1291               	bcf	17,5	;volatile
 11750                           
 11751                           ;eusart.c: 80: PIE1bits.TXIE = 0;
 11752  1444  1211               	bcf	17,4	;volatile
 11753                           
 11754                           ;eusart.c: 85: BAUDCON = 0x48;
 11755  1445  3048               	movlw	72
 11756  1446  0023               	movlb	3	; select bank3
 11757  1447  009F               	movwf	31	;volatile
 11758                           
 11759                           ;eusart.c: 88: RCSTA = 0x80;
 11760  1448  3080               	movlw	128
 11761  1449  009D               	movwf	29	;volatile
 11762                           
 11763                           ;eusart.c: 91: TXSTA = 0x26;
 11764  144A  3026               	movlw	38
 11765  144B  009E               	movwf	30	;volatile
 11766                           
 11767                           ;eusart.c: 94: SPBRGL = 0xA0;
 11768  144C  30A0               	movlw	160
 11769  144D  009B               	movwf	27	;volatile
 11770                           
 11771                           ;eusart.c: 97: SPBRGH = 0x01;
 11772  144E  3001               	movlw	1
 11773  144F  009C               	movwf	28	;volatile
 11774                           
 11775                           ;eusart.c: 101: eusartTxHead = 0;
 11776  1450  0020               	movlb	0	; select bank0
 11777  1451  01B0               	clrf	_eusartTxHead
 11778                           
 11779                           ;eusart.c: 102: eusartTxTail = 0;
 11780  1452  01B1               	clrf	_eusartTxTail
 11781                           
 11782                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 11783  1453  3040               	movlw	64
 11784  1454  00C1               	movwf	??_EUSART_Initialize
 11785  1455  0841               	movf	??_EUSART_Initialize,w
 11786  1456  00E8               	movwf	_eusartTxBufferRemaining	;volatile
 11787                           
 11788                           ;eusart.c: 105: eusartRxHead = 0;
 11789  1457  01AE               	clrf	_eusartRxHead
 11790                           
 11791                           ;eusart.c: 106: eusartRxTail = 0;
 11792  1458  01AF               	clrf	_eusartRxTail
 11793                           
 11794                           ;eusart.c: 107: eusartRxCount = 0;
 11795  1459  01AD               	clrf	_eusartRxCount	;volatile
 11796                           
 11797                           ;eusart.c: 110: PIE1bits.RCIE = 1;
 11798  145A  0021               	movlb	1	; select bank1
 11799  145B  1691               	bsf	17,5	;volatile
 11800  145C  0008               	return
 11801  145D                     __end_of_EUSART_Initialize:	
 11802                           
 11803                           	psect	text50
 11804  1392                     __ptext50:	
 11805 ;; *************** function _EPWM1_Initialize *****************
 11806 ;; Defined at:
 11807 ;;		line 64 in file "mcc_generated_files/epwm1.c"
 11808 ;; Parameters:    Size  Location     Type
 11809 ;;		None
 11810 ;; Auto vars:     Size  Location     Type
 11811 ;;		None
 11812 ;; Return value:  Size  Location     Type
 11813 ;;		None               void
 11814 ;; Registers used:
 11815 ;;		wreg, status,2, status,0
 11816 ;; Tracked objects:
 11817 ;;		On entry : 0/0
 11818 ;;		On exit  : 0/0
 11819 ;;		Unchanged: 0/0
 11820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11821 ;;      Params:         0       0       0       0       0       0       0       0
 11822 ;;      Locals:         0       0       0       0       0       0       0       0
 11823 ;;      Temps:          0       0       0       0       0       0       0       0
 11824 ;;      Totals:         0       0       0       0       0       0       0       0
 11825 ;;Total ram usage:        0 bytes
 11826 ;; Hardware stack levels used:    1
 11827 ;; Hardware stack levels required when called:    4
 11828 ;; This function calls:
 11829 ;;		Nothing
 11830 ;; This function is called by:
 11831 ;;		_SYSTEM_Initialize
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           
 11836                           ;psect for function _EPWM1_Initialize
 11837  1392                     _EPWM1_Initialize:	
 11838                           
 11839                           ;epwm1.c: 69: CCP1CON = 0x3C;
 11840                           
 11841                           ;incstack = 0
 11842                           ; Regs used in _EPWM1_Initialize: [wreg+status,2+status,0]
 11843  1392  303C               	movlw	60
 11844  1393  0025               	movlb	5	; select bank5
 11845  1394  0093               	movwf	19	;volatile
 11846                           
 11847                           ;epwm1.c: 72: ECCP1AS = 0x00;
 11848  1395  0195               	clrf	21	;volatile
 11849                           
 11850                           ;epwm1.c: 75: PWM1CON = 0x80;
 11851  1396  3080               	movlw	128
 11852  1397  0094               	movwf	20	;volatile
 11853                           
 11854                           ;epwm1.c: 78: PSTR1CON = 0x01;
 11855  1398  3001               	movlw	1
 11856  1399  0096               	movwf	22	;volatile
 11857                           
 11858                           ;epwm1.c: 81: CCPR1L = 0x02;
 11859  139A  3002               	movlw	2
 11860  139B  0091               	movwf	17	;volatile
 11861                           
 11862                           ;epwm1.c: 84: CCPR1H = 0x00;
 11863  139C  0192               	clrf	18	;volatile
 11864                           
 11865                           ;epwm1.c: 88: CCPTMRS0bits.C1TSEL = 0x1;
 11866  139D  081E               	movf	30,w	;volatile
 11867  139E  39FC               	andlw	-4
 11868  139F  3801               	iorlw	1
 11869  13A0  009E               	movwf	30	;volatile
 11870  13A1  0008               	return
 11871  13A2                     __end_of_EPWM1_Initialize:	
 11872                           
 11873                           	psect	text51
 11874  132B                     __ptext51:	
 11875 ;; *************** function _ADC_Initialize *****************
 11876 ;; Defined at:
 11877 ;;		line 65 in file "mcc_generated_files/adc.c"
 11878 ;; Parameters:    Size  Location     Type
 11879 ;;		None
 11880 ;; Auto vars:     Size  Location     Type
 11881 ;;		None
 11882 ;; Return value:  Size  Location     Type
 11883 ;;		None               void
 11884 ;; Registers used:
 11885 ;;		wreg, status,2
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11891 ;;      Params:         0       0       0       0       0       0       0       0
 11892 ;;      Locals:         0       0       0       0       0       0       0       0
 11893 ;;      Temps:          0       0       0       0       0       0       0       0
 11894 ;;      Totals:         0       0       0       0       0       0       0       0
 11895 ;;Total ram usage:        0 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; Hardware stack levels required when called:    4
 11898 ;; This function calls:
 11899 ;;		Nothing
 11900 ;; This function is called by:
 11901 ;;		_SYSTEM_Initialize
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           
 11906                           ;psect for function _ADC_Initialize
 11907  132B                     _ADC_Initialize:	
 11908                           
 11909                           ;adc.c: 70: ADCON0 = 0x01;
 11910                           
 11911                           ;incstack = 0
 11912                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 11913  132B  3001               	movlw	1
 11914  132C  0021               	movlb	1	; select bank1
 11915  132D  009D               	movwf	29	;volatile
 11916                           
 11917                           ;adc.c: 73: ADCON1 = 0xF0;
 11918  132E  30F0               	movlw	240
 11919  132F  009E               	movwf	30	;volatile
 11920                           
 11921                           ;adc.c: 76: ADRESL = 0x00;
 11922  1330  019B               	clrf	27	;volatile
 11923                           
 11924                           ;adc.c: 79: ADRESH = 0x00;
 11925  1331  019C               	clrf	28	;volatile
 11926  1332  0008               	return
 11927  1333                     __end_of_ADC_Initialize:	
 11928                           
 11929                           	psect	text52
 11930  15F7                     __ptext52:	
 11931 ;; *************** function _LCD_Initialize *****************
 11932 ;; Defined at:
 11933 ;;		line 46 in file "lcd.c"
 11934 ;; Parameters:    Size  Location     Type
 11935 ;;		None
 11936 ;; Auto vars:     Size  Location     Type
 11937 ;;		None
 11938 ;; Return value:  Size  Location     Type
 11939 ;;		None               void
 11940 ;; Registers used:
 11941 ;;		wreg, status,2, status,0, pclath, cstack
 11942 ;; Tracked objects:
 11943 ;;		On entry : 0/0
 11944 ;;		On exit  : 0/0
 11945 ;;		Unchanged: 0/0
 11946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11947 ;;      Params:         0       0       0       0       0       0       0       0
 11948 ;;      Locals:         0       0       0       0       0       0       0       0
 11949 ;;      Temps:          0       2       0       0       0       0       0       0
 11950 ;;      Totals:         0       2       0       0       0       0       0       0
 11951 ;;Total ram usage:        2 bytes
 11952 ;; Hardware stack levels used:    1
 11953 ;; Hardware stack levels required when called:    6
 11954 ;; This function calls:
 11955 ;;		_LCDPutCmd
 11956 ;; This function is called by:
 11957 ;;		_main
 11958 ;; This function uses a non-reentrant model
 11959 ;;
 11960                           
 11961                           
 11962                           ;psect for function _LCD_Initialize
 11963  15F7                     _LCD_Initialize:	
 11964                           
 11965                           ;lcd.c: 49: PORTD = 0;
 11966                           
 11967                           ;incstack = 0
 11968                           ; Regs used in _LCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11969  15F7  0020               	movlb	0	; select bank0
 11970  15F8  018F               	clrf	15	;volatile
 11971                           
 11972                           ;lcd.c: 51: TRISD = 0x00;
 11973  15F9  0021               	movlb	1	; select bank1
 11974  15FA  018F               	clrf	15	;volatile
 11975                           
 11976                           ;lcd.c: 54: PORTDbits.RD7 = 1;
 11977  15FB  0020               	movlb	0	; select bank0
 11978  15FC  178F               	bsf	15,7	;volatile
 11979                           
 11980                           ;lcd.c: 57: _delay((unsigned long)((15)*(4000000/4000.0)));
 11981  15FD  3014               	movlw	20
 11982  15FE  00C9               	movwf	??_LCD_Initialize+1
 11983  15FF  3079               	movlw	121
 11984  1600  00C8               	movwf	??_LCD_Initialize
 11985  1601                     u4497:	
 11986  1601  0BC8               	decfsz	??_LCD_Initialize,f
 11987  1602  2E01               	goto	u4497
 11988  1603  0BC9               	decfsz	??_LCD_Initialize+1,f
 11989  1604  2E01               	goto	u4497
 11990  1605  3200               	nop2
 11991                           
 11992                           ;lcd.c: 60: LCDPutCmd(0x32);
 11993  1606  3032               	movlw	50
 11994  1607  3196  26FB  3195   	fcall	_LCDPutCmd
 11995                           
 11996                           ;lcd.c: 63: LCDPutCmd(0x28);
 11997  160A  3028               	movlw	40
 11998  160B  3196  26FB  3195   	fcall	_LCDPutCmd
 11999                           
 12000                           ;lcd.c: 66: LCDPutCmd(0x0C);
 12001  160E  300C               	movlw	12
 12002  160F  3196  26FB  3195   	fcall	_LCDPutCmd
 12003                           
 12004                           ;lcd.c: 68: LCDPutCmd(0x01);
 12005  1612  3001               	movlw	1
 12006  1613  3196  26FB  3195   	fcall	_LCDPutCmd
 12007                           
 12008                           ;lcd.c: 71: LCDPutCmd(0x06);
 12009  1616  3006               	movlw	6
 12010  1617  3196  26FB         	fcall	_LCDPutCmd
 12011  1619  0008               	return
 12012  161A                     __end_of_LCD_Initialize:	
 12013                           
 12014                           	psect	text53
 12015  16FB                     __ptext53:	
 12016 ;; *************** function _LCDPutCmd *****************
 12017 ;; Defined at:
 12018 ;;		line 118 in file "lcd.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;  ch              1    wreg     unsigned char 
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;  ch              1    6[BANK0 ] unsigned char 
 12023 ;; Return value:  Size  Location     Type
 12024 ;;		None               void
 12025 ;; Registers used:
 12026 ;;		wreg, status,2, status,0, pclath, cstack
 12027 ;; Tracked objects:
 12028 ;;		On entry : 0/0
 12029 ;;		On exit  : 0/0
 12030 ;;		Unchanged: 0/0
 12031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12032 ;;      Params:         0       0       0       0       0       0       0       0
 12033 ;;      Locals:         0       1       0       0       0       0       0       0
 12034 ;;      Temps:          0       2       0       0       0       0       0       0
 12035 ;;      Totals:         0       3       0       0       0       0       0       0
 12036 ;;Total ram usage:        3 bytes
 12037 ;; Hardware stack levels used:    1
 12038 ;; Hardware stack levels required when called:    5
 12039 ;; This function calls:
 12040 ;;		_LCDWriteNibble
 12041 ;; This function is called by:
 12042 ;;		_StateInitial
 12043 ;;		_DisplaySplashText
 12044 ;;		_StateVoltage
 12045 ;;		_StateBuzzer
 12046 ;;		_StateClock
 12047 ;;		_StateClockSet
 12048 ;;		_StateTemperature
 12049 ;;		_LCD_Initialize
 12050 ;;		_LCDGoto
 12051 ;; This function uses a non-reentrant model
 12052 ;;
 12053                           
 12054                           
 12055                           ;psect for function _LCDPutCmd
 12056  16FB                     _LCDPutCmd:	
 12057                           
 12058                           ;incstack = 0
 12059                           ; Regs used in _LCDPutCmd: [wreg+status,2+status,0+pclath+cstack]
 12060                           ;LCDPutCmd@ch stored from wreg
 12061  16FB  0020               	movlb	0	; select bank0
 12062  16FC  00C7               	movwf	LCDPutCmd@ch
 12063                           
 12064                           ;lcd.c: 120: _delay((unsigned long)((5)*(4000000/4000.0)));
 12065  16FD  3007               	movlw	7
 12066  16FE  00C6               	movwf	??_LCDPutCmd+1
 12067  16FF  307D               	movlw	125
 12068  1700  00C5               	movwf	??_LCDPutCmd
 12069  1701                     u4507:	
 12070  1701  0BC5               	decfsz	??_LCDPutCmd,f
 12071  1702  2F01               	goto	u4507
 12072  1703  0BC6               	decfsz	??_LCDPutCmd+1,f
 12073  1704  2F01               	goto	u4507
 12074                           
 12075                           ;lcd.c: 123: LCDWriteNibble(ch,0);
 12076  1705  0020               	movlb	0	; select bank0
 12077  1706  01C1               	clrf	LCDWriteNibble@rs
 12078  1707  0847               	movf	LCDPutCmd@ch,w
 12079  1708  3195  2597  3196   	fcall	_LCDWriteNibble
 12080                           
 12081                           ;lcd.c: 126: ch = (ch << 4);
 12082  170B  0020               	movlb	0	; select bank0
 12083  170C  0847               	movf	LCDPutCmd@ch,w
 12084  170D  00C5               	movwf	??_LCDPutCmd
 12085  170E  3003               	movlw	3
 12086  170F                     u1985:	
 12087  170F  35C5               	lslf	??_LCDPutCmd,f
 12088  1710  3EFF               	addlw	-1
 12089  1711  1D03               	skipz
 12090  1712  2F0F               	goto	u1985
 12091  1713  3545               	lslf	??_LCDPutCmd,w
 12092  1714  00C6               	movwf	??_LCDPutCmd+1
 12093  1715  0846               	movf	??_LCDPutCmd+1,w
 12094  1716  00C7               	movwf	LCDPutCmd@ch
 12095                           
 12096                           ;lcd.c: 128: _delay((unsigned long)((1)*(4000000/4000.0)));
 12097  1717  30F9               	movlw	249
 12098  1718  00C5               	movwf	??_LCDPutCmd
 12099  1719                     u4517:	
 12100  1719  0000               	nop
 12101  171A  0BC5               	decfsz	??_LCDPutCmd,f
 12102  171B  2F19               	goto	u4517
 12103  171C  3200               	nop2	;nop
 12104  171D  0000               	nop
 12105                           
 12106                           ;lcd.c: 131: LCDWriteNibble(ch,0);
 12107  171E  0020               	movlb	0	; select bank0
 12108  171F  01C1               	clrf	LCDWriteNibble@rs
 12109  1720  0847               	movf	LCDPutCmd@ch,w
 12110  1721  3195  2597         	fcall	_LCDWriteNibble
 12111  1723  0008               	return
 12112  1724                     __end_of_LCDPutCmd:	
 12113                           
 12114                           	psect	text54
 12115  1597                     __ptext54:	
 12116 ;; *************** function _LCDWriteNibble *****************
 12117 ;; Defined at:
 12118 ;;		line 76 in file "lcd.c"
 12119 ;; Parameters:    Size  Location     Type
 12120 ;;  ch              1    wreg     unsigned char 
 12121 ;;  rs              1    0[BANK0 ] unsigned char 
 12122 ;; Auto vars:     Size  Location     Type
 12123 ;;  ch              1    3[BANK0 ] unsigned char 
 12124 ;; Return value:  Size  Location     Type
 12125 ;;		None               void
 12126 ;; Registers used:
 12127 ;;		wreg, status,2, status,0
 12128 ;; Tracked objects:
 12129 ;;		On entry : 0/0
 12130 ;;		On exit  : 0/0
 12131 ;;		Unchanged: 0/0
 12132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12133 ;;      Params:         0       1       0       0       0       0       0       0
 12134 ;;      Locals:         0       1       0       0       0       0       0       0
 12135 ;;      Temps:          0       2       0       0       0       0       0       0
 12136 ;;      Totals:         0       4       0       0       0       0       0       0
 12137 ;;Total ram usage:        4 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    4
 12140 ;; This function calls:
 12141 ;;		Nothing
 12142 ;; This function is called by:
 12143 ;;		_LCDPutChar
 12144 ;;		_LCDPutCmd
 12145 ;; This function uses a non-reentrant model
 12146 ;;
 12147                           
 12148                           
 12149                           ;psect for function _LCDWriteNibble
 12150  1597                     _LCDWriteNibble:	
 12151                           
 12152                           ;incstack = 0
 12153                           ; Regs used in _LCDWriteNibble: [wreg+status,2+status,0]
 12154                           ;LCDWriteNibble@ch stored from wreg
 12155  1597  0020               	movlb	0	; select bank0
 12156  1598  00C4               	movwf	LCDWriteNibble@ch
 12157                           
 12158                           ;lcd.c: 79: ch = (ch >> 4);
 12159  1599  0844               	movf	LCDWriteNibble@ch,w
 12160  159A  00C2               	movwf	??_LCDWriteNibble
 12161  159B  3004               	movlw	4
 12162  159C                     u1975:	
 12163  159C  36C2               	lsrf	??_LCDWriteNibble,f
 12164  159D  0B89               	decfsz	9,f
 12165  159E  2D9C               	goto	u1975
 12166  159F  0842               	movf	??_LCDWriteNibble,w
 12167  15A0  00C3               	movwf	??_LCDWriteNibble+1
 12168  15A1  0843               	movf	??_LCDWriteNibble+1,w
 12169  15A2  00C4               	movwf	LCDWriteNibble@ch
 12170                           
 12171                           ;lcd.c: 82: ch = (ch & 0x0F);
 12172  15A3  0844               	movf	LCDWriteNibble@ch,w
 12173  15A4  390F               	andlw	15
 12174  15A5  00C2               	movwf	??_LCDWriteNibble
 12175  15A6  0842               	movf	??_LCDWriteNibble,w
 12176  15A7  00C4               	movwf	LCDWriteNibble@ch
 12177                           
 12178                           ;lcd.c: 85: PORTD = (PORTD & 0xF0);
 12179  15A8  080F               	movf	15,w	;volatile
 12180  15A9  39F0               	andlw	240
 12181  15AA  008F               	movwf	15	;volatile
 12182                           
 12183                           ;lcd.c: 88: PORTD = (PORTD | ch);
 12184  15AB  080F               	movf	15,w	;volatile
 12185  15AC  0444               	iorwf	LCDWriteNibble@ch,w
 12186  15AD  008F               	movwf	15	;volatile
 12187                           
 12188                           ;lcd.c: 91: PORTDbits.RD4 = rs;
 12189  15AE  0841               	movf	LCDWriteNibble@rs,w
 12190  15AF  1D03               	skipz
 12191  15B0  160F               	bsf	15,4	;volatile
 12192  15B1  1903               	skipnz
 12193  15B2  120F               	bcf	15,4	;volatile
 12194                           
 12195                           ;lcd.c: 94: PORTDbits.RD5 = 0;
 12196  15B3  128F               	bcf	15,5	;volatile
 12197                           
 12198                           ;lcd.c: 97: PORTDbits.RD6 = 1;
 12199  15B4  170F               	bsf	15,6	;volatile
 12200                           
 12201                           ;lcd.c: 100: PORTDbits.RD6 = 0;
 12202  15B5  130F               	bcf	15,6	;volatile
 12203  15B6  0008               	return
 12204  15B7                     __end_of_LCDWriteNibble:	
 12205                           
 12206                           	psect	text55
 12207  094E                     __ptext55:	
 12208 ;; *************** function _Buttons_Initialize *****************
 12209 ;; Defined at:
 12210 ;;		line 68 in file "Buttons.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;		None
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;		None
 12215 ;; Return value:  Size  Location     Type
 12216 ;;		None               void
 12217 ;; Registers used:
 12218 ;;		None
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12224 ;;      Params:         0       0       0       0       0       0       0       0
 12225 ;;      Locals:         0       0       0       0       0       0       0       0
 12226 ;;      Temps:          0       0       0       0       0       0       0       0
 12227 ;;      Totals:         0       0       0       0       0       0       0       0
 12228 ;;Total ram usage:        0 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    4
 12231 ;; This function calls:
 12232 ;;		Nothing
 12233 ;; This function is called by:
 12234 ;;		_main
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           
 12239                           ;psect for function _Buttons_Initialize
 12240  094E                     _Buttons_Initialize:	
 12241                           
 12242                           ;incstack = 0
 12243                           ; Regs used in _Buttons_Initialize: []
 12244  094E  13F0               	bcf	_TempButtons,7	;volatile
 12245  094F  1370               	bcf	_TempButtons,6	;volatile
 12246  0950  12F0               	bcf	_TempButtons,5	;volatile
 12247  0951  1270               	bcf	_TempButtons,4	;volatile
 12248  0952  11F0               	bcf	_TempButtons,3	;volatile
 12249  0953  1DF0               	btfss	_TempButtons,3	;volatile
 12250  0954  2957               	goto	u4060
 12251  0955  1570               	bsf	_TempButtons,2	;volatile
 12252  0956  2958               	goto	u4074
 12253  0957                     u4060:	
 12254  0957  1170               	bcf	_TempButtons,2	;volatile
 12255  0958                     u4074:	
 12256  0958  1D70               	btfss	_TempButtons,2	;volatile
 12257  0959  295C               	goto	u4080
 12258  095A  14F0               	bsf	_TempButtons,1	;volatile
 12259  095B  295D               	goto	u4094
 12260  095C                     u4080:	
 12261  095C  10F0               	bcf	_TempButtons,1	;volatile
 12262  095D                     u4094:	
 12263  095D  1CF0               	btfss	_TempButtons,1	;volatile
 12264  095E  2961               	goto	u4100
 12265  095F  1470               	bsf	_TempButtons,0	;volatile
 12266  0960  2962               	goto	u4114
 12267  0961                     u4100:	
 12268  0961  1070               	bcf	_TempButtons,0	;volatile
 12269  0962                     u4114:	
 12270  0962  0020               	movlb	0	; select bank0
 12271  0963  13BD               	bcf	_Buttons,7
 12272  0964  1870               	btfsc	_TempButtons,0	;volatile
 12273  0965  17BD               	bsf	_Buttons,7
 12274  0966  0020               	movlb	0	; select bank0
 12275  0967  1FBD               	btfss	_Buttons,7
 12276  0968  296C               	goto	u4130
 12277  0969  0020               	movlb	0	; select bank0
 12278  096A  173D               	bsf	_Buttons,6
 12279  096B  296E               	goto	u4144
 12280  096C                     u4130:	
 12281  096C  0020               	movlb	0	; select bank0
 12282  096D  133D               	bcf	_Buttons,6
 12283  096E                     u4144:	
 12284  096E  1F3D               	btfss	_Buttons,6
 12285  096F  2973               	goto	u4150
 12286  0970  0020               	movlb	0	; select bank0
 12287  0971  16BD               	bsf	_Buttons,5
 12288  0972  2975               	goto	u4164
 12289  0973                     u4150:	
 12290  0973  0020               	movlb	0	; select bank0
 12291  0974  12BD               	bcf	_Buttons,5
 12292  0975                     u4164:	
 12293  0975  1EBD               	btfss	_Buttons,5
 12294  0976  297A               	goto	u4170
 12295  0977  0020               	movlb	0	; select bank0
 12296  0978  163D               	bsf	_Buttons,4
 12297  0979  297C               	goto	u4184
 12298  097A                     u4170:	
 12299  097A  0020               	movlb	0	; select bank0
 12300  097B  123D               	bcf	_Buttons,4
 12301  097C                     u4184:	
 12302  097C  1E3D               	btfss	_Buttons,4
 12303  097D  2981               	goto	u4190
 12304  097E  0020               	movlb	0	; select bank0
 12305  097F  15BD               	bsf	_Buttons,3
 12306  0980  2983               	goto	u4204
 12307  0981                     u4190:	
 12308  0981  0020               	movlb	0	; select bank0
 12309  0982  11BD               	bcf	_Buttons,3
 12310  0983                     u4204:	
 12311  0983  1DBD               	btfss	_Buttons,3
 12312  0984  2988               	goto	u4210
 12313  0985  0020               	movlb	0	; select bank0
 12314  0986  153D               	bsf	_Buttons,2
 12315  0987  298A               	goto	u4224
 12316  0988                     u4210:	
 12317  0988  0020               	movlb	0	; select bank0
 12318  0989  113D               	bcf	_Buttons,2
 12319  098A                     u4224:	
 12320  098A  1D3D               	btfss	_Buttons,2
 12321  098B  298F               	goto	u4230
 12322  098C  0020               	movlb	0	; select bank0
 12323  098D  14BD               	bsf	_Buttons,1
 12324  098E  2991               	goto	u4244
 12325  098F                     u4230:	
 12326  098F  0020               	movlb	0	; select bank0
 12327  0990  10BD               	bcf	_Buttons,1
 12328  0991                     u4244:	
 12329                           
 12330                           ;Buttons.c: 71: Buttons.But1Pressed = Buttons.But2Pressed = Buttons.But3Pressed = Button
      +                          s.But4Pressed =
 12331                           ;Buttons.c: 72: Buttons.But5Pressed = Buttons.But6Pressed = Buttons.But7Pressed = Button
      +                          s.But8Pressed =
 12332                           ;Buttons.c: 73: TempButtons.But1Pressed = TempButtons.But2Pressed = TempButtons.But3Pres
      +                          sed =
 12333                           ;Buttons.c: 74: TempButtons.But4Pressed = TempButtons.But5Pressed = TempButtons.But6Pres
      +                          sed =
 12334                           ;Buttons.c: 75: TempButtons.But7Pressed = TempButtons.But8Pressed = 0;
 12335  0991  1CBD               	btfss	_Buttons,1
 12336  0992  2996               	goto	u4250
 12337  0993  0020               	movlb	0	; select bank0
 12338  0994  143D               	bsf	_Buttons,0
 12339  0995  0008               	return
 12340  0996                     u4250:	
 12341  0996  0020               	movlb	0	; select bank0
 12342  0997  103D               	bcf	_Buttons,0
 12343  0998  0008               	return
 12344  0999                     __end_of_Buttons_Initialize:	
 12345                           
 12346                           	psect	intentry
 12347  0004                     __pintentry:	
 12348 ;; *************** function _INTERRUPT_InterruptManager *****************
 12349 ;; Defined at:
 12350 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12351 ;; Parameters:    Size  Location     Type
 12352 ;;		None
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;		None
 12355 ;; Return value:  Size  Location     Type
 12356 ;;		None               void
 12357 ;; Registers used:
 12358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12359 ;; Tracked objects:
 12360 ;;		On entry : 0/0
 12361 ;;		On exit  : 0/0
 12362 ;;		Unchanged: 0/0
 12363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12364 ;;      Params:         0       0       0       0       0       0       0       0
 12365 ;;      Locals:         0       0       0       0       0       0       0       0
 12366 ;;      Temps:          1       0       0       0       0       0       0       0
 12367 ;;      Totals:         1       0       0       0       0       0       0       0
 12368 ;;Total ram usage:        1 bytes
 12369 ;; Hardware stack levels used:    1
 12370 ;; Hardware stack levels required when called:    3
 12371 ;; This function calls:
 12372 ;;		_EUSART_Receive_ISR
 12373 ;;		_EUSART_Transmit_ISR
 12374 ;;		_I2C_BusCollisionISR
 12375 ;;		_I2C_ISR
 12376 ;;		_TMR0_ISR
 12377 ;;		_TMR1_ISR
 12378 ;; This function is called by:
 12379 ;;		Interrupt level 1
 12380 ;; This function uses a non-reentrant model
 12381 ;;
 12382                           
 12383  0004                     _INTERRUPT_InterruptManager:	
 12384                           
 12385                           ;incstack = 0
 12386                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12387  0004  147E               	bsf	126,0	;set compiler interrupt flag
 12388  0005  3180               	pagesel	$
 12389  0006  0020               	movlb	0	; select bank0
 12390  0007  087F               	movf	127,w
 12391  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 12392                           
 12393                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 12394  0009  1A8B               	btfsc	11,5	;volatile
 12395  000A  1D0B               	btfss	11,2	;volatile
 12396  000B  2810               	goto	i1l126
 12397                           
 12398                           ;interrupt_manager.c: 56: {
 12399                           ;interrupt_manager.c: 57: TMR0_ISR();
 12400  000C  3193  2378  3180   	fcall	_TMR0_ISR
 12401                           
 12402                           ;interrupt_manager.c: 58: }
 12403  000F  2840               	goto	i1l138
 12404  0010                     i1l126:	
 12405                           
 12406                           ;interrupt_manager.c: 59: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 12407  0010  0021               	movlb	1	; select bank1
 12408  0011  1C11               	btfss	17,0	;volatile
 12409  0012  281A               	goto	i1l128
 12410  0013  0020               	movlb	0	; select bank0
 12411  0014  1C11               	btfss	17,0	;volatile
 12412  0015  281A               	goto	i1l128
 12413                           
 12414                           ;interrupt_manager.c: 60: {
 12415                           ;interrupt_manager.c: 61: TMR1_ISR();
 12416  0016  3193  233C  3180   	fcall	_TMR1_ISR
 12417                           
 12418                           ;interrupt_manager.c: 62: }
 12419  0019  2840               	goto	i1l138
 12420  001A                     i1l128:	
 12421                           
 12422                           ;interrupt_manager.c: 63: else if(PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1)
 12423  001A  0021               	movlb	1	; select bank1
 12424  001B  1D91               	btfss	17,3	;volatile
 12425  001C  2824               	goto	i1l130
 12426  001D  0020               	movlb	0	; select bank0
 12427  001E  1D91               	btfss	17,3	;volatile
 12428  001F  2824               	goto	i1l130
 12429                           
 12430                           ;interrupt_manager.c: 64: {
 12431                           ;interrupt_manager.c: 65: I2C_ISR();
 12432  0020  318B  2323  3180   	fcall	_I2C_ISR
 12433                           
 12434                           ;interrupt_manager.c: 66: }
 12435  0023  2840               	goto	i1l138
 12436  0024                     i1l130:	
 12437                           
 12438                           ;interrupt_manager.c: 67: else if(PIE2bits.BCLIE == 1 && PIR2bits.BCLIF == 1)
 12439  0024  0021               	movlb	1	; select bank1
 12440  0025  1D92               	btfss	18,3	;volatile
 12441  0026  282E               	goto	i1l132
 12442  0027  0020               	movlb	0	; select bank0
 12443  0028  1D92               	btfss	18,3	;volatile
 12444  0029  282E               	goto	i1l132
 12445                           
 12446                           ;interrupt_manager.c: 68: {
 12447                           ;interrupt_manager.c: 69: I2C_BusCollisionISR();
 12448  002A  3180  2003  3180   	fcall	_I2C_BusCollisionISR
 12449                           
 12450                           ;interrupt_manager.c: 70: }
 12451  002D  2840               	goto	i1l138
 12452  002E                     i1l132:	
 12453                           
 12454                           ;interrupt_manager.c: 71: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 12455  002E  0021               	movlb	1	; select bank1
 12456  002F  1E91               	btfss	17,5	;volatile
 12457  0030  2838               	goto	i1l134
 12458  0031  0020               	movlb	0	; select bank0
 12459  0032  1E91               	btfss	17,5	;volatile
 12460  0033  2838               	goto	i1l134
 12461                           
 12462                           ;interrupt_manager.c: 72: {
 12463                           ;interrupt_manager.c: 73: EUSART_Receive_ISR();
 12464  0034  3194  2427  3180   	fcall	_EUSART_Receive_ISR
 12465                           
 12466                           ;interrupt_manager.c: 74: }
 12467  0037  2840               	goto	i1l138
 12468  0038                     i1l134:	
 12469                           
 12470                           ;interrupt_manager.c: 75: else if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 12471  0038  0021               	movlb	1	; select bank1
 12472  0039  1E11               	btfss	17,4	;volatile
 12473  003A  2840               	goto	i1l138
 12474  003B  0020               	movlb	0	; select bank0
 12475  003C  1E11               	btfss	17,4	;volatile
 12476  003D  2840               	goto	i1l138
 12477                           
 12478                           ;interrupt_manager.c: 76: {
 12479                           ;interrupt_manager.c: 77: EUSART_Transmit_ISR();
 12480  003E  3194  24AE         	fcall	_EUSART_Transmit_ISR
 12481  0040                     i1l138:	
 12482                           ;interrupt_manager.c: 79: else
 12483                           ;interrupt_manager.c: 80: {
 12484                           
 12485                           ;interrupt_manager.c: 78: }
 12486                           
 12487  0040  087D               	movf	??_INTERRUPT_InterruptManager,w
 12488  0041  0020               	movlb	0	; select bank0
 12489  0042  00FF               	movwf	127
 12490  0043  107E               	bcf	126,0	;clear compiler interrupt flag
 12491  0044  0009               	retfie
 12492  0045                     __end_of_INTERRUPT_InterruptManager:	
 12493                           
 12494                           	psect	text57
 12495  133C                     __ptext57:	
 12496 ;; *************** function _TMR1_ISR *****************
 12497 ;; Defined at:
 12498 ;;		line 149 in file "mcc_generated_files/tmr1.c"
 12499 ;; Parameters:    Size  Location     Type
 12500 ;;		None
 12501 ;; Auto vars:     Size  Location     Type
 12502 ;;		None
 12503 ;; Return value:  Size  Location     Type
 12504 ;;		None               void
 12505 ;; Registers used:
 12506 ;;		wreg, status,2, status,0, pclath, cstack
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12512 ;;      Params:         0       0       0       0       0       0       0       0
 12513 ;;      Locals:         0       0       0       0       0       0       0       0
 12514 ;;      Temps:          0       0       0       0       0       0       0       0
 12515 ;;      Totals:         0       0       0       0       0       0       0       0
 12516 ;;Total ram usage:        0 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    2
 12519 ;; This function calls:
 12520 ;;		_RTCisr
 12521 ;; This function is called by:
 12522 ;;		_INTERRUPT_InterruptManager
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           
 12527                           ;psect for function _TMR1_ISR
 12528  133C                     _TMR1_ISR:	
 12529                           
 12530                           ;tmr1.c: 153: PIR1bits.TMR1IF = 0;
 12531                           
 12532                           ;incstack = 0
 12533                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 12534  133C  0020               	movlb	0	; select bank0
 12535  133D  1011               	bcf	17,0	;volatile
 12536                           
 12537                           ;tmr1.c: 155: TMR1H = (timer1ReloadVal >> 8);
 12538  133E  0867               	movf	_timer1ReloadVal+1,w	;volatile
 12539  133F  0097               	movwf	23	;volatile
 12540                           
 12541                           ;tmr1.c: 156: TMR1L = timer1ReloadVal;
 12542  1340  0866               	movf	_timer1ReloadVal,w	;volatile
 12543  1341  0096               	movwf	22	;volatile
 12544                           
 12545                           ;tmr1.c: 159: RTCisr();
 12546  1342  3193  2333         	fcall	_RTCisr
 12547  1344  0008               	return
 12548  1345                     __end_of_TMR1_ISR:	
 12549                           
 12550                           	psect	text58
 12551  1333                     __ptext58:	
 12552 ;; *************** function _RTCisr *****************
 12553 ;; Defined at:
 12554 ;;		line 351 in file "StateRTC.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;		None
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;		None
 12559 ;; Return value:  Size  Location     Type
 12560 ;;		None               void
 12561 ;; Registers used:
 12562 ;;		wreg, status,2, status,0, pclath, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12568 ;;      Params:         0       0       0       0       0       0       0       0
 12569 ;;      Locals:         0       0       0       0       0       0       0       0
 12570 ;;      Temps:          0       0       0       0       0       0       0       0
 12571 ;;      Totals:         0       0       0       0       0       0       0       0
 12572 ;;Total ram usage:        0 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:    1
 12575 ;; This function calls:
 12576 ;;		_RTCIncDateTime
 12577 ;; This function is called by:
 12578 ;;		_TMR1_ISR
 12579 ;; This function uses a non-reentrant model
 12580 ;;
 12581                           
 12582                           
 12583                           ;psect for function _RTCisr
 12584  1333                     _RTCisr:	
 12585                           
 12586                           ;StateRTC.c: 354: TMR1H |= 0x80;
 12587                           
 12588                           ;incstack = 0
 12589                           ; Regs used in _RTCisr: [wreg+status,2+status,0+pclath+cstack]
 12590  1333  0020               	movlb	0	; select bank0
 12591  1334  1797               	bsf	23,7	;volatile
 12592                           
 12593                           ;StateRTC.c: 357: RTCIncDateTime();
 12594  1335  3194  24CB         	fcall	_RTCIncDateTime
 12595                           
 12596                           ;StateRTC.c: 360: timeHasChgd = 1;
 12597  1337  0020               	movlb	0	; select bank0
 12598  1338  01B5               	clrf	_timeHasChgd
 12599  1339  0AB5               	incf	_timeHasChgd,f
 12600                           
 12601                           ;StateRTC.c: 363: TMR1IF = 0;
 12602  133A  1011               	bcf	17,0	;volatile
 12603  133B  0008               	return
 12604  133C                     __end_of_RTCisr:	
 12605                           
 12606                           	psect	text59
 12607  14CB                     __ptext59:	
 12608 ;; *************** function _RTCIncDateTime *****************
 12609 ;; Defined at:
 12610 ;;		line 261 in file "StateRTC.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;		None
 12613 ;; Auto vars:     Size  Location     Type
 12614 ;;		None
 12615 ;; Return value:  Size  Location     Type
 12616 ;;		None               void
 12617 ;; Registers used:
 12618 ;;		wreg, status,2, status,0
 12619 ;; Tracked objects:
 12620 ;;		On entry : 0/0
 12621 ;;		On exit  : 0/0
 12622 ;;		Unchanged: 0/0
 12623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12624 ;;      Params:         0       0       0       0       0       0       0       0
 12625 ;;      Locals:         0       0       0       0       0       0       0       0
 12626 ;;      Temps:          1       0       0       0       0       0       0       0
 12627 ;;      Totals:         1       0       0       0       0       0       0       0
 12628 ;;Total ram usage:        1 bytes
 12629 ;; Hardware stack levels used:    1
 12630 ;; This function calls:
 12631 ;;		Nothing
 12632 ;; This function is called by:
 12633 ;;		_RTCisr
 12634 ;; This function uses a non-reentrant model
 12635 ;;
 12636                           
 12637                           
 12638                           ;psect for function _RTCIncDateTime
 12639  14CB                     _RTCIncDateTime:	
 12640                           
 12641                           ;StateRTC.c: 264: if (++dateTime.Sec == 60)
 12642                           
 12643                           ;incstack = 0
 12644                           ; Regs used in _RTCIncDateTime: [wreg+status,2+status,0]
 12645  14CB  3001               	movlw	1
 12646  14CC  00F7               	movwf	??_RTCIncDateTime
 12647  14CD  0877               	movf	??_RTCIncDateTime,w
 12648  14CE  0020               	movlb	0	; select bank0
 12649  14CF  07A0               	addwf	_dateTime,f
 12650  14D0  0820               	movf	_dateTime,w
 12651  14D1  3A3C               	xorlw	60
 12652  14D2  1D03               	skipz
 12653  14D3  0008               	return
 12654                           
 12655                           ;StateRTC.c: 265: {
 12656                           ;StateRTC.c: 267: dateTime.Sec = 0;
 12657  14D4  01A0               	clrf	_dateTime
 12658                           
 12659                           ;StateRTC.c: 270: if (++dateTime.Min == 60)
 12660  14D5  3001               	movlw	1
 12661  14D6  00F7               	movwf	??_RTCIncDateTime
 12662  14D7  0877               	movf	??_RTCIncDateTime,w
 12663  14D8  07A1               	addwf	_dateTime+1,f
 12664  14D9  0821               	movf	_dateTime+1,w
 12665  14DA  3A3C               	xorlw	60
 12666  14DB  1D03               	skipz
 12667  14DC  0008               	return
 12668                           
 12669                           ;StateRTC.c: 271: {
 12670                           ;StateRTC.c: 273: dateTime.Min = 0;
 12671  14DD  01A1               	clrf	_dateTime+1
 12672                           
 12673                           ;StateRTC.c: 276: if (++dateTime.Hour == 24)
 12674  14DE  3001               	movlw	1
 12675  14DF  00F7               	movwf	??_RTCIncDateTime
 12676  14E0  0877               	movf	??_RTCIncDateTime,w
 12677  14E1  07A2               	addwf	_dateTime+2,f
 12678  14E2  0822               	movf	_dateTime+2,w
 12679  14E3  3A18               	xorlw	24
 12680  14E4  1D03               	skipz
 12681  14E5  0008               	return
 12682                           
 12683                           ;StateRTC.c: 277: {
 12684                           ;StateRTC.c: 279: dateTime.Hour = 0;
 12685  14E6  01A2               	clrf	_dateTime+2
 12686  14E7  0008               	return
 12687  14E8                     __end_of_RTCIncDateTime:	
 12688                           
 12689                           	psect	text60
 12690  1378                     __ptext60:	
 12691 ;; *************** function _TMR0_ISR *****************
 12692 ;; Defined at:
 12693 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 12694 ;; Parameters:    Size  Location     Type
 12695 ;;		None
 12696 ;; Auto vars:     Size  Location     Type
 12697 ;;		None
 12698 ;; Return value:  Size  Location     Type
 12699 ;;		None               void
 12700 ;; Registers used:
 12701 ;;		wreg, status,2, status,0, pclath, cstack
 12702 ;; Tracked objects:
 12703 ;;		On entry : 0/0
 12704 ;;		On exit  : 0/0
 12705 ;;		Unchanged: 0/0
 12706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12707 ;;      Params:         0       0       0       0       0       0       0       0
 12708 ;;      Locals:         0       0       0       0       0       0       0       0
 12709 ;;      Temps:          0       0       0       0       0       0       0       0
 12710 ;;      Totals:         0       0       0       0       0       0       0       0
 12711 ;;Total ram usage:        0 bytes
 12712 ;; Hardware stack levels used:    1
 12713 ;; Hardware stack levels required when called:    1
 12714 ;; This function calls:
 12715 ;;		_CheckButtons
 12716 ;; This function is called by:
 12717 ;;		_INTERRUPT_InterruptManager
 12718 ;; This function uses a non-reentrant model
 12719 ;;
 12720                           
 12721                           
 12722                           ;psect for function _TMR0_ISR
 12723  1378                     _TMR0_ISR:	
 12724                           
 12725                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
 12726                           
 12727                           ;incstack = 0
 12728                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 12729  1378  110B               	bcf	11,2	;volatile
 12730                           
 12731                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
 12732  1379  0873               	movf	_timer0ReloadVal,w	;volatile
 12733  137A  0020               	movlb	0	; select bank0
 12734  137B  0095               	movwf	21	;volatile
 12735                           
 12736                           ;tmr0.c: 118: if (tmrCount)
 12737  137C  0874               	movf	_tmrCount,w
 12738  137D  1903               	btfsc	3,2
 12739  137E  2B81               	goto	i1l4083
 12740                           
 12741                           ;tmr0.c: 119: {
 12742                           ;tmr0.c: 120: tmrCount--;
 12743  137F  3001               	movlw	1
 12744  1380  02F4               	subwf	_tmrCount,f
 12745  1381                     i1l4083:	
 12746                           
 12747                           ;tmr0.c: 121: }
 12748                           ;tmr0.c: 122: CheckButtons();
 12749  1381  3196  26D2         	fcall	_CheckButtons
 12750                           
 12751                           ;tmr0.c: 125: TMR0IF = 0;
 12752  1383  110B               	bcf	11,2	;volatile
 12753  1384  0008               	return
 12754  1385                     __end_of_TMR0_ISR:	
 12755                           
 12756                           	psect	text61
 12757  16D2                     __ptext61:	
 12758 ;; *************** function _CheckButtons *****************
 12759 ;; Defined at:
 12760 ;;		line 78 in file "Buttons.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;		None
 12763 ;; Auto vars:     Size  Location     Type
 12764 ;;		None
 12765 ;; Return value:  Size  Location     Type
 12766 ;;		None               void
 12767 ;; Registers used:
 12768 ;;		wreg, status,2, status,0
 12769 ;; Tracked objects:
 12770 ;;		On entry : 0/0
 12771 ;;		On exit  : 0/0
 12772 ;;		Unchanged: 0/0
 12773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12774 ;;      Params:         0       0       0       0       0       0       0       0
 12775 ;;      Locals:         0       0       0       0       0       0       0       0
 12776 ;;      Temps:          1       0       0       0       0       0       0       0
 12777 ;;      Totals:         1       0       0       0       0       0       0       0
 12778 ;;Total ram usage:        1 bytes
 12779 ;; Hardware stack levels used:    1
 12780 ;; This function calls:
 12781 ;;		Nothing
 12782 ;; This function is called by:
 12783 ;;		_TMR0_ISR
 12784 ;; This function uses a non-reentrant model
 12785 ;;
 12786                           
 12787                           
 12788                           ;psect for function _CheckButtons
 12789  16D2                     _CheckButtons:	
 12790                           
 12791                           ;Buttons.c: 81: if(!PORTAbits.RA4)
 12792                           
 12793                           ;incstack = 0
 12794                           ; Regs used in _CheckButtons: [wreg+status,2+status,0]
 12795  16D2  0020               	movlb	0	; select bank0
 12796  16D3  1A0C               	btfsc	12,4	;volatile
 12797  16D4  2EE4               	goto	i1l3459
 12798                           
 12799                           ;Buttons.c: 82: {
 12800                           ;Buttons.c: 84: if(debCnt1)
 12801  16D5  082B               	movf	_debCnt1,w
 12802  16D6  1903               	btfsc	3,2
 12803  16D7  2EDE               	goto	i1l3455
 12804                           
 12805                           ;Buttons.c: 85: {
 12806                           ;Buttons.c: 87: if(!--debCnt1)
 12807  16D8  3001               	movlw	1
 12808  16D9  02AB               	subwf	_debCnt1,f
 12809  16DA  1D03               	btfss	3,2
 12810  16DB  2EE6               	goto	i1l3463
 12811                           
 12812                           ;Buttons.c: 88: {
 12813                           ;Buttons.c: 90: Buttons.But1Pressed = 1;
 12814  16DC  143D               	bsf	_Buttons,0
 12815  16DD  2EE5               	goto	i1l3461
 12816  16DE                     i1l3455:	
 12817                           ;Buttons.c: 94: }
 12818                           ;Buttons.c: 95: }
 12819                           
 12820                           ;Buttons.c: 93: TempButtons.But1Pressed = 0;
 12821                           
 12822                           
 12823                           ;Buttons.c: 97: else
 12824                           ;Buttons.c: 98: {
 12825                           ;Buttons.c: 100: debCnt1 = 2;
 12826  16DE  3002               	movlw	2
 12827  16DF  00F7               	movwf	??_CheckButtons
 12828  16E0  0877               	movf	??_CheckButtons,w
 12829  16E1  00AB               	movwf	_debCnt1
 12830                           
 12831                           ;Buttons.c: 103: TempButtons.But1Pressed = 1;
 12832  16E2  1470               	bsf	_TempButtons,0	;volatile
 12833                           
 12834                           ;Buttons.c: 104: }
 12835                           ;Buttons.c: 105: }
 12836  16E3  2EE6               	goto	i1l3463
 12837  16E4                     i1l3459:	
 12838                           
 12839                           ;Buttons.c: 107: else
 12840                           ;Buttons.c: 108: {
 12841                           ;Buttons.c: 110: debCnt1 = 0;
 12842  16E4  01AB               	clrf	_debCnt1
 12843  16E5                     i1l3461:	
 12844                           
 12845                           ;Buttons.c: 113: TempButtons.But1Pressed = 0;
 12846  16E5  1070               	bcf	_TempButtons,0	;volatile
 12847  16E6                     i1l3463:	
 12848                           
 12849                           ;Buttons.c: 114: }
 12850                           ;Buttons.c: 117: if(!PORTBbits.RB0)
 12851  16E6  180D               	btfsc	13,0	;volatile
 12852  16E7  2EF8               	goto	i1l3475
 12853                           
 12854                           ;Buttons.c: 118: {
 12855                           ;Buttons.c: 120: if(debCnt2)
 12856  16E8  082C               	movf	_debCnt2,w
 12857  16E9  1903               	btfsc	3,2
 12858  16EA  2EF2               	goto	i1l3471
 12859                           
 12860                           ;Buttons.c: 121: {
 12861                           ;Buttons.c: 123: if(!--debCnt2)
 12862  16EB  3001               	movlw	1
 12863  16EC  02AC               	subwf	_debCnt2,f
 12864  16ED  1D03               	btfss	3,2
 12865  16EE  0008               	return
 12866                           
 12867                           ;Buttons.c: 124: {
 12868                           ;Buttons.c: 126: Buttons.But2Pressed = 1;
 12869  16EF  14BD               	bsf	_Buttons,1
 12870                           
 12871                           ;Buttons.c: 129: TempButtons.But2Pressed = 0;
 12872  16F0  10F0               	bcf	_TempButtons,1	;volatile
 12873                           
 12874                           ;Buttons.c: 130: }
 12875                           ;Buttons.c: 131: }
 12876  16F1  0008               	return
 12877  16F2                     i1l3471:	
 12878                           
 12879                           ;Buttons.c: 133: else
 12880                           ;Buttons.c: 134: {
 12881                           ;Buttons.c: 136: debCnt2 = 2;
 12882  16F2  3002               	movlw	2
 12883  16F3  00F7               	movwf	??_CheckButtons
 12884  16F4  0877               	movf	??_CheckButtons,w
 12885  16F5  00AC               	movwf	_debCnt2
 12886                           
 12887                           ;Buttons.c: 139: TempButtons.But2Pressed = 1;
 12888  16F6  14F0               	bsf	_TempButtons,1	;volatile
 12889                           
 12890                           ;Buttons.c: 140: }
 12891                           ;Buttons.c: 141: }
 12892  16F7  0008               	return
 12893  16F8                     i1l3475:	
 12894                           
 12895                           ;Buttons.c: 143: else
 12896                           ;Buttons.c: 144: {
 12897                           ;Buttons.c: 146: debCnt2 = 0;
 12898  16F8  01AC               	clrf	_debCnt2
 12899                           
 12900                           ;Buttons.c: 149: TempButtons.But2Pressed = 0;
 12901  16F9  10F0               	bcf	_TempButtons,1	;volatile
 12902  16FA  0008               	return
 12903  16FB                     __end_of_CheckButtons:	
 12904                           
 12905                           	psect	text62
 12906  0B23                     __ptext62:	
 12907 ;; *************** function _I2C_ISR *****************
 12908 ;; Defined at:
 12909 ;;		line 234 in file "mcc_generated_files/i2c.c"
 12910 ;; Parameters:    Size  Location     Type
 12911 ;;		None
 12912 ;; Auto vars:     Size  Location     Type
 12913 ;;		None
 12914 ;; Return value:  Size  Location     Type
 12915 ;;		None               void
 12916 ;; Registers used:
 12917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12918 ;; Tracked objects:
 12919 ;;		On entry : 0/0
 12920 ;;		On exit  : 0/0
 12921 ;;		Unchanged: 0/0
 12922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12923 ;;      Params:         0       0       0       0       0       0       0       0
 12924 ;;      Locals:         0       0       0       0       0       0       0       0
 12925 ;;      Temps:          4       0       0       0       0       0       0       0
 12926 ;;      Totals:         4       0       0       0       0       0       0       0
 12927 ;;Total ram usage:        4 bytes
 12928 ;; Hardware stack levels used:    1
 12929 ;; Hardware stack levels required when called:    1
 12930 ;; This function calls:
 12931 ;;		_I2C_FunctionComplete
 12932 ;;		_I2C_Stop
 12933 ;; This function is called by:
 12934 ;;		_INTERRUPT_InterruptManager
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           
 12939                           ;psect for function _I2C_ISR
 12940  0B23                     _I2C_ISR:	
 12941                           
 12942                           ;i2c.c: 237: static uint8_t *pi2c_buf_ptr;
 12943                           ;i2c.c: 238: static uint16_t i2c_address = 0;
 12944                           ;i2c.c: 239: static uint8_t i2c_bytes_left = 0;
 12945                           ;i2c.c: 240: static uint8_t i2c_10bit_address_restart = 0;
 12946                           ;i2c.c: 242: PIR1bits.SSPIF = 0;
 12947                           
 12948                           ;incstack = 0
 12949                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12950  0B23  0020               	movlb	0	; select bank0
 12951  0B24  1191               	bcf	17,3	;volatile
 12952                           
 12953                           ;i2c.c: 246: if(SSPCON1bits.WCOL)
 12954  0B25  0024               	movlb	4	; select bank4
 12955  0B26  1F95               	btfss	21,7	;volatile
 12956  0B27  2C59               	goto	i1l4231
 12957                           
 12958                           ;i2c.c: 247: {
 12959                           ;i2c.c: 249: SSPCON1bits.WCOL = 0;
 12960  0B28  1395               	bcf	21,7	;volatile
 12961                           
 12962                           ;i2c.c: 250: i2c_state = S_MASTER_IDLE;
 12963  0B29  0020               	movlb	0	; select bank0
 12964  0B2A  01B2               	clrf	_i2c_state
 12965                           
 12966                           ;i2c.c: 251: *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
 12967  0B2B  0871               	movf	_p_i2c_current,w
 12968  0B2C  3E02               	addlw	2
 12969  0B2D  0086               	movwf	6
 12970  0B2E  0187               	clrf	7
 12971  0B2F  0801               	movf	1,w
 12972  0B30  0086               	movwf	6
 12973  0B31  0187               	clrf	7
 12974  0B32  0181               	clrf	1
 12975  0B33  0A81               	incf	1,f
 12976                           
 12977                           ;i2c.c: 254: p_i2c_current = (0);
 12978  0B34  01F1               	clrf	_p_i2c_current
 12979                           
 12980                           ;i2c.c: 256: return;
 12981  0B35  0008               	return
 12982  0B36                     i1l280:	
 12983                           ;i2c.c: 261: {
 12984                           ;i2c.c: 262: case S_MASTER_IDLE:
 12985                           
 12986                           ;i2c.c: 257: }
 12987                           ;i2c.c: 260: switch(i2c_state)
 12988                           
 12989                           
 12990                           ;i2c.c: 264: if(i2c_object.trStatus.s.empty != 1)
 12991  0B36  18E3               	btfsc	_i2c_object+2,1
 12992  0B37  0008               	return
 12993                           
 12994                           ;i2c.c: 265: {
 12995                           ;i2c.c: 267: p_i2c_current = i2c_object.pTrHead;
 12996  0B38  0862               	movf	_i2c_object+1,w
 12997  0B39  00F9               	movwf	??_I2C_ISR
 12998  0B3A  0879               	movf	??_I2C_ISR,w
 12999  0B3B  00F1               	movwf	_p_i2c_current
 13000                           
 13001                           ;i2c.c: 268: i2c_trb_count = i2c_object.pTrHead->count;
 13002  0B3C  0862               	movf	_i2c_object+1,w
 13003  0B3D  0086               	movwf	6
 13004  0B3E  0187               	clrf	7
 13005  0B3F  0801               	movf	1,w
 13006  0B40  00F9               	movwf	??_I2C_ISR
 13007  0B41  0879               	movf	??_I2C_ISR,w
 13008  0B42  00B3               	movwf	_i2c_trb_count
 13009                           
 13010                           ;i2c.c: 269: p_i2c_trb_current = i2c_object.pTrHead->ptrb_list;
 13011  0B43  0862               	movf	_i2c_object+1,w
 13012  0B44  0086               	movwf	6
 13013  0B45  0187               	clrf	7
 13014  0B46  3F41               	moviw [1]fsr1
 13015  0B47  00F2               	movwf	_p_i2c_trb_current
 13016                           
 13017                           ;i2c.c: 271: i2c_object.pTrHead++;
 13018  0B48  3003               	movlw	3
 13019  0B49  00F9               	movwf	??_I2C_ISR
 13020  0B4A  0879               	movf	??_I2C_ISR,w
 13021  0B4B  07E2               	addwf	_i2c_object+1,f
 13022                           
 13023                           ;i2c.c: 274: if(i2c_object.pTrHead == (i2c_tr_queue + 1))
 13024  0B4C  0862               	movf	_i2c_object+1,w
 13025  0B4D  3A3D               	xorlw	(_i2c_tr_queue+3)& (0+255)
 13026  0B4E  1D03               	skipz
 13027  0B4F  2B54               	goto	i1l4119
 13028                           
 13029                           ;i2c.c: 275: {
 13030                           ;i2c.c: 277: i2c_object.pTrHead = i2c_tr_queue;
 13031  0B50  303A               	movlw	_i2c_tr_queue& (0+255)
 13032  0B51  00F9               	movwf	??_I2C_ISR
 13033  0B52  0879               	movf	??_I2C_ISR,w
 13034  0B53  00E2               	movwf	_i2c_object+1
 13035  0B54                     i1l4119:	
 13036                           
 13037                           ;i2c.c: 278: }
 13038                           ;i2c.c: 282: i2c_object.trStatus.s.full = 0;
 13039  0B54  1063               	bcf	_i2c_object+2,0
 13040                           
 13041                           ;i2c.c: 285: if(i2c_object.pTrHead == i2c_object.pTrTail)
 13042  0B55  0862               	movf	_i2c_object+1,w
 13043  0B56  0661               	xorwf	_i2c_object,w
 13044  0B57  1903               	btfsc	3,2
 13045                           
 13046                           ;i2c.c: 286: {
 13047                           ;i2c.c: 288: i2c_object.trStatus.s.empty = 1;
 13048  0B58  14E3               	bsf	_i2c_object+2,1
 13049                           
 13050                           ;i2c.c: 289: }
 13051                           ;i2c.c: 292: SSPCON2bits.SEN = 1;
 13052  0B59  0024               	movlb	4	; select bank4
 13053  0B5A  1416               	bsf	22,0	;volatile
 13054                           
 13055                           ;i2c.c: 295: i2c_state = S_MASTER_SEND_ADDR;
 13056  0B5B  3002               	movlw	2
 13057  0B5C  00F9               	movwf	??_I2C_ISR
 13058  0B5D  0879               	movf	??_I2C_ISR,w
 13059  0B5E  0020               	movlb	0	; select bank0
 13060  0B5F  00B2               	movwf	_i2c_state
 13061                           
 13062                           ;i2c.c: 296: }
 13063                           ;i2c.c: 298: break;
 13064  0B60  0008               	return
 13065  0B61                     i1l285:	
 13066                           ;i2c.c: 300: case S_MASTER_RESTART:
 13067                           
 13068                           
 13069                           ;i2c.c: 305: SSPCON2bits.RSEN = 1;
 13070  0B61  0024               	movlb	4	; select bank4
 13071  0B62  1496               	bsf	22,1	;volatile
 13072                           
 13073                           ;i2c.c: 308: i2c_state = S_MASTER_SEND_ADDR;
 13074  0B63  3002               	movlw	2
 13075  0B64  00F9               	movwf	??_I2C_ISR
 13076  0B65  0879               	movf	??_I2C_ISR,w
 13077  0B66  0020               	movlb	0	; select bank0
 13078  0B67  00B2               	movwf	_i2c_state
 13079                           
 13080                           ;i2c.c: 310: break;
 13081  0B68  0008               	return
 13082  0B69                     i1l286:	
 13083                           ;i2c.c: 312: case S_MASTER_SEND_ADDR_10BIT_LSB:
 13084                           
 13085                           
 13086                           ;i2c.c: 314: if(SSPCON2bits.ACKSTAT)
 13087  0B69  0024               	movlb	4	; select bank4
 13088  0B6A  1F16               	btfss	22,6	;volatile
 13089  0B6B  2B75               	goto	i1l4131
 13090                           
 13091                           ;i2c.c: 315: {
 13092                           ;i2c.c: 316: i2c_object.i2cErrors++;
 13093  0B6C  3001               	movlw	1
 13094  0B6D  00F9               	movwf	??_I2C_ISR
 13095  0B6E  0879               	movf	??_I2C_ISR,w
 13096  0B6F  0020               	movlb	0	; select bank0
 13097  0B70  07E5               	addwf	_i2c_object+4,f
 13098                           
 13099                           ;i2c.c: 317: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 13100  0B71  3004               	movlw	4
 13101  0B72  3193  23F5         	fcall	_I2C_Stop
 13102                           
 13103                           ;i2c.c: 318: }
 13104  0B74  0008               	return
 13105  0B75                     i1l4131:	
 13106                           
 13107                           ;i2c.c: 319: else
 13108                           ;i2c.c: 320: {
 13109                           ;i2c.c: 322: SSPBUF = (i2c_address >> 1) & 0x00FF;
 13110  0B75  0876               	movf	I2C_ISR@i2c_address+1,w
 13111  0B76  00FA               	movwf	??_I2C_ISR+1
 13112  0B77  0875               	movf	I2C_ISR@i2c_address,w
 13113  0B78  00F9               	movwf	??_I2C_ISR
 13114  0B79  36FA               	lsrf	??_I2C_ISR+1,f
 13115  0B7A  0CF9               	rrf	??_I2C_ISR,f
 13116  0B7B  0879               	movf	??_I2C_ISR,w
 13117  0B7C  0024               	movlb	4	; select bank4
 13118  0B7D  0091               	movwf	17	;volatile
 13119                           
 13120                           ;i2c.c: 325: if(i2c_address & 0x01)
 13121  0B7E  1C75               	btfss	I2C_ISR@i2c_address,0
 13122  0B7F  2B86               	goto	i1l4137
 13123                           
 13124                           ;i2c.c: 326: {
 13125                           ;i2c.c: 329: i2c_state = S_MASTER_10BIT_RESTART;
 13126  0B80  300B               	movlw	11
 13127  0B81  00F9               	movwf	??_I2C_ISR
 13128  0B82  0879               	movf	??_I2C_ISR,w
 13129  0B83  0020               	movlb	0	; select bank0
 13130  0B84  00B2               	movwf	_i2c_state
 13131                           
 13132                           ;i2c.c: 330: }
 13133  0B85  0008               	return
 13134  0B86                     i1l4137:	
 13135                           
 13136                           ;i2c.c: 331: else
 13137                           ;i2c.c: 332: {
 13138                           ;i2c.c: 334: i2c_state = S_MASTER_SEND_DATA;
 13139  0B86  3003               	movlw	3
 13140  0B87  00F9               	movwf	??_I2C_ISR
 13141  0B88  0879               	movf	??_I2C_ISR,w
 13142  0B89  0020               	movlb	0	; select bank0
 13143  0B8A  00B2               	movwf	_i2c_state
 13144                           
 13145                           ;i2c.c: 335: }
 13146                           ;i2c.c: 336: }
 13147                           ;i2c.c: 338: break;
 13148  0B8B  0008               	return
 13149  0B8C                     i1l291:	
 13150                           ;i2c.c: 340: case S_MASTER_10BIT_RESTART:
 13151                           
 13152                           
 13153                           ;i2c.c: 342: if(SSPCON2bits.ACKSTAT)
 13154  0B8C  0024               	movlb	4	; select bank4
 13155  0B8D  1F16               	btfss	22,6	;volatile
 13156  0B8E  2B98               	goto	i1l292
 13157                           
 13158                           ;i2c.c: 343: {
 13159                           ;i2c.c: 344: i2c_object.i2cErrors++;
 13160  0B8F  3001               	movlw	1
 13161  0B90  00F9               	movwf	??_I2C_ISR
 13162  0B91  0879               	movf	??_I2C_ISR,w
 13163  0B92  0020               	movlb	0	; select bank0
 13164  0B93  07E5               	addwf	_i2c_object+4,f
 13165                           
 13166                           ;i2c.c: 345: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 13167  0B94  3004               	movlw	4
 13168  0B95  3193  23F5         	fcall	_I2C_Stop
 13169                           
 13170                           ;i2c.c: 346: }
 13171  0B97  0008               	return
 13172  0B98                     i1l292:	
 13173                           
 13174                           ;i2c.c: 347: else
 13175                           ;i2c.c: 348: {
 13176                           ;i2c.c: 351: SSPCON2bits.RSEN = 1;
 13177  0B98  1496               	bsf	22,1	;volatile
 13178                           
 13179                           ;i2c.c: 355: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 13180  0B99  0876               	movf	I2C_ISR@i2c_address+1,w
 13181  0B9A  00FA               	movwf	??_I2C_ISR+1
 13182  0B9B  0875               	movf	I2C_ISR@i2c_address,w
 13183  0B9C  00F9               	movwf	??_I2C_ISR
 13184  0B9D  087A               	movf	??_I2C_ISR+1,w
 13185  0B9E  00F9               	movwf	??_I2C_ISR
 13186  0B9F  01FA               	clrf	??_I2C_ISR+1
 13187  0BA0  3006               	movlw	6
 13188  0BA1  0579               	andwf	??_I2C_ISR,w
 13189  0BA2  00FB               	movwf	??_I2C_ISR+2
 13190  0BA3  3000               	movlw	0
 13191  0BA4  057A               	andwf	??_I2C_ISR+1,w
 13192  0BA5  00FC               	movwf	??_I2C_ISR+3
 13193  0BA6  30F0               	movlw	240
 13194  0BA7  047B               	iorwf	??_I2C_ISR+2,w
 13195  0BA8  00F5               	movwf	I2C_ISR@i2c_address
 13196  0BA9  3000               	movlw	0
 13197  0BAA  047C               	iorwf	??_I2C_ISR+3,w
 13198  0BAB  00F6               	movwf	I2C_ISR@i2c_address+1
 13199                           
 13200                           ;i2c.c: 358: i2c_address |= 0x0001;
 13201  0BAC  1475               	bsf	I2C_ISR@i2c_address,0
 13202                           
 13203                           ;i2c.c: 361: i2c_10bit_address_restart = 1;
 13204  0BAD  0020               	movlb	0	; select bank0
 13205  0BAE  01A7               	clrf	I2C_ISR@i2c_10bit_address_restart
 13206  0BAF  0AA7               	incf	I2C_ISR@i2c_10bit_address_restart,f
 13207                           
 13208                           ;i2c.c: 364: i2c_state = S_MASTER_SEND_ADDR;
 13209  0BB0  3002               	movlw	2
 13210  0BB1  00F9               	movwf	??_I2C_ISR
 13211  0BB2  0879               	movf	??_I2C_ISR,w
 13212  0BB3  00B2               	movwf	_i2c_state
 13213                           
 13214                           ;i2c.c: 365: }
 13215                           ;i2c.c: 367: break;
 13216  0BB4  0008               	return
 13217  0BB5                     i1l4151:	
 13218                           ;i2c.c: 369: case S_MASTER_SEND_ADDR:
 13219                           
 13220                           
 13221                           ;i2c.c: 382: if(i2c_10bit_address_restart != 1)
 13222  0BB5  0827               	movf	I2C_ISR@i2c_10bit_address_restart,w
 13223  0BB6  3A01               	xorlw	1
 13224  0BB7  1903               	skipnz
 13225  0BB8  2BCA               	goto	i1l4171
 13226                           
 13227                           ;i2c.c: 383: {
 13228                           ;i2c.c: 385: i2c_address = p_i2c_trb_current->address;
 13229  0BB9  0872               	movf	_p_i2c_trb_current,w
 13230  0BBA  0086               	movwf	6
 13231  0BBB  0187               	clrf	7
 13232  0BBC  3F40               	moviw [0]fsr1
 13233  0BBD  00F5               	movwf	I2C_ISR@i2c_address
 13234  0BBE  3F41               	moviw [1]fsr1
 13235  0BBF  00F6               	movwf	I2C_ISR@i2c_address+1
 13236                           
 13237                           ;i2c.c: 386: pi2c_buf_ptr = p_i2c_trb_current->pbuffer;
 13238  0BC0  0872               	movf	_p_i2c_trb_current,w
 13239  0BC1  0086               	movwf	6
 13240  0BC2  0187               	clrf	7
 13241  0BC3  3F43               	moviw [3]fsr1
 13242  0BC4  00A9               	movwf	I2C_ISR@pi2c_buf_ptr
 13243                           
 13244                           ;i2c.c: 387: i2c_bytes_left = p_i2c_trb_current->length;
 13245  0BC5  0872               	movf	_p_i2c_trb_current,w
 13246  0BC6  0086               	movwf	6
 13247  0BC7  0187               	clrf	7
 13248  0BC8  3F42               	moviw [2]fsr1
 13249  0BC9  00A8               	movwf	I2C_ISR@i2c_bytes_left
 13250  0BCA                     i1l4171:	
 13251                           ;i2c.c: 408: }
 13252                           ;i2c.c: 409: }
 13253                           
 13254                           ;i2c.c: 407: i2c_10bit_address_restart = 0;
 13255                           
 13256                           ;i2c.c: 405: i2c_state = S_MASTER_ACK_ADDR;
 13257                           
 13258                           ;i2c.c: 401: else
 13259                           ;i2c.c: 402: {
 13260                           ;i2c.c: 404: SSPBUF = i2c_address;
 13261                           
 13262                           ;i2c.c: 400: }
 13263                           
 13264                           ;i2c.c: 399: i2c_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 13265                           
 13266                           ;i2c.c: 394: {
 13267                           ;i2c.c: 398: SSPBUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 13268                           
 13269                           ;i2c.c: 392: {
 13270                           ;i2c.c: 393: if (0 == i2c_10bit_address_restart)
 13271                           
 13272                           ;i2c.c: 388: }
 13273                           ;i2c.c: 391: if(!1 && (0x0 != i2c_address))
 13274                           
 13275                           
 13276                           ;i2c.c: 410: else
 13277                           ;i2c.c: 411: {
 13278                           ;i2c.c: 413: SSPBUF = i2c_address;
 13279  0BCA  0875               	movf	I2C_ISR@i2c_address,w
 13280  0BCB  0024               	movlb	4	; select bank4
 13281  0BCC  0091               	movwf	17	;volatile
 13282                           
 13283                           ;i2c.c: 414: if(i2c_address & 0x01)
 13284  0BCD  1C75               	btfss	I2C_ISR@i2c_address,0
 13285  0BCE  2BD5               	goto	i1l4177
 13286                           
 13287                           ;i2c.c: 415: {
 13288                           ;i2c.c: 417: i2c_state = S_MASTER_ACK_ADDR;
 13289  0BCF  3005               	movlw	5
 13290  0BD0  00F9               	movwf	??_I2C_ISR
 13291  0BD1  0879               	movf	??_I2C_ISR,w
 13292  0BD2  0020               	movlb	0	; select bank0
 13293  0BD3  00B2               	movwf	_i2c_state
 13294                           
 13295                           ;i2c.c: 418: }
 13296  0BD4  0008               	return
 13297  0BD5                     i1l4177:	
 13298                           
 13299                           ;i2c.c: 419: else
 13300                           ;i2c.c: 420: {
 13301                           ;i2c.c: 422: i2c_state = S_MASTER_SEND_DATA;
 13302  0BD5  3003               	movlw	3
 13303  0BD6  00F9               	movwf	??_I2C_ISR
 13304  0BD7  0879               	movf	??_I2C_ISR,w
 13305  0BD8  0020               	movlb	0	; select bank0
 13306  0BD9  00B2               	movwf	_i2c_state
 13307                           
 13308                           ;i2c.c: 423: }
 13309                           ;i2c.c: 424: }
 13310                           ;i2c.c: 425: break;
 13311  0BDA  0008               	return
 13312  0BDB                     i1l302:	
 13313                           ;i2c.c: 427: case S_MASTER_SEND_DATA:
 13314                           
 13315                           
 13316                           ;i2c.c: 430: if(SSPCON2bits.ACKSTAT)
 13317  0BDB  0024               	movlb	4	; select bank4
 13318  0BDC  1F16               	btfss	22,6	;volatile
 13319  0BDD  2BE9               	goto	i1l4185
 13320                           
 13321                           ;i2c.c: 431: {
 13322                           ;i2c.c: 433: i2c_object.i2cErrors++;
 13323  0BDE  3001               	movlw	1
 13324  0BDF  00F9               	movwf	??_I2C_ISR
 13325  0BE0  0879               	movf	??_I2C_ISR,w
 13326  0BE1  0020               	movlb	0	; select bank0
 13327  0BE2  07E5               	addwf	_i2c_object+4,f
 13328                           
 13329                           ;i2c.c: 436: SSPCON2bits.ACKSTAT = 0;
 13330  0BE3  0024               	movlb	4	; select bank4
 13331  0BE4  1316               	bcf	22,6	;volatile
 13332                           
 13333                           ;i2c.c: 439: I2C_Stop(I2C_DATA_NO_ACK);
 13334  0BE5  3005               	movlw	5
 13335  0BE6  3193  23F5         	fcall	_I2C_Stop
 13336                           
 13337                           ;i2c.c: 441: }
 13338  0BE8  0008               	return
 13339  0BE9                     i1l4185:	
 13340                           
 13341                           ;i2c.c: 442: else
 13342                           ;i2c.c: 443: {
 13343                           ;i2c.c: 445: if(i2c_bytes_left-- == 0U)
 13344  0BE9  3001               	movlw	1
 13345  0BEA  0020               	movlb	0	; select bank0
 13346  0BEB  02A8               	subwf	I2C_ISR@i2c_bytes_left,f
 13347  0BEC  0828               	movf	I2C_ISR@i2c_bytes_left,w
 13348  0BED  3AFF               	xorlw	255
 13349  0BEE  1D03               	skipz
 13350  0BEF  2C04               	goto	i1l4193
 13351                           
 13352                           ;i2c.c: 446: {
 13353                           ;i2c.c: 450: p_i2c_trb_current++;
 13354  0BF0  3004               	movlw	4
 13355  0BF1  00F9               	movwf	??_I2C_ISR
 13356  0BF2  0879               	movf	??_I2C_ISR,w
 13357  0BF3  07F2               	addwf	_p_i2c_trb_current,f
 13358                           
 13359                           ;i2c.c: 453: if(--i2c_trb_count == 0)
 13360  0BF4  3001               	movlw	1
 13361  0BF5  02B3               	subwf	_i2c_trb_count,f
 13362  0BF6  1D03               	btfss	3,2
 13363  0BF7  2BFC               	goto	i1l306
 13364                           
 13365                           ;i2c.c: 454: {
 13366                           ;i2c.c: 455: I2C_Stop(I2C_MESSAGE_COMPLETE);
 13367  0BF8  3000               	movlw	0
 13368  0BF9  3193  23F5         	fcall	_I2C_Stop
 13369                           
 13370                           ;i2c.c: 456: }
 13371  0BFB  0008               	return
 13372  0BFC                     i1l306:	
 13373                           
 13374                           ;i2c.c: 457: else
 13375                           ;i2c.c: 458: {
 13376                           ;i2c.c: 465: SSPCON2bits.RSEN = 1;
 13377  0BFC  0024               	movlb	4	; select bank4
 13378  0BFD  1496               	bsf	22,1	;volatile
 13379                           
 13380                           ;i2c.c: 468: i2c_state = S_MASTER_SEND_ADDR;
 13381  0BFE  3002               	movlw	2
 13382  0BFF  00F9               	movwf	??_I2C_ISR
 13383  0C00  0879               	movf	??_I2C_ISR,w
 13384  0C01  0020               	movlb	0	; select bank0
 13385  0C02  00B2               	movwf	_i2c_state
 13386                           
 13387                           ;i2c.c: 470: }
 13388                           ;i2c.c: 471: }
 13389  0C03  0008               	return
 13390  0C04                     i1l4193:	
 13391                           
 13392                           ;i2c.c: 472: else
 13393                           ;i2c.c: 473: {
 13394                           ;i2c.c: 475: SSPBUF = *pi2c_buf_ptr++;
 13395  0C04  0829               	movf	I2C_ISR@pi2c_buf_ptr,w
 13396  0C05  0086               	movwf	6
 13397  0C06  0187               	clrf	7
 13398  0C07  0801               	movf	1,w
 13399  0C08  0024               	movlb	4	; select bank4
 13400  0C09  0091               	movwf	17	;volatile
 13401  0C0A  3001               	movlw	1
 13402  0C0B  00F9               	movwf	??_I2C_ISR
 13403  0C0C  0879               	movf	??_I2C_ISR,w
 13404  0C0D  0020               	movlb	0	; select bank0
 13405  0C0E  07A9               	addwf	I2C_ISR@pi2c_buf_ptr,f
 13406                           
 13407                           ;i2c.c: 476: }
 13408                           ;i2c.c: 477: }
 13409                           ;i2c.c: 478: break;
 13410  0C0F  0008               	return
 13411  0C10                     i1l309:	
 13412                           ;i2c.c: 480: case S_MASTER_ACK_ADDR:
 13413                           
 13414                           
 13415                           ;i2c.c: 483: if(SSPCON2bits.ACKSTAT)
 13416  0C10  0024               	movlb	4	; select bank4
 13417  0C11  1F16               	btfss	22,6	;volatile
 13418  0C12  2C1E               	goto	i1l310
 13419                           
 13420                           ;i2c.c: 484: {
 13421                           ;i2c.c: 487: i2c_object.i2cErrors++;
 13422  0C13  3001               	movlw	1
 13423  0C14  00F9               	movwf	??_I2C_ISR
 13424  0C15  0879               	movf	??_I2C_ISR,w
 13425  0C16  0020               	movlb	0	; select bank0
 13426  0C17  07E5               	addwf	_i2c_object+4,f
 13427                           
 13428                           ;i2c.c: 490: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 13429  0C18  3004               	movlw	4
 13430  0C19  3193  23F5         	fcall	_I2C_Stop
 13431                           
 13432                           ;i2c.c: 493: SSPCON2bits.ACKSTAT = 0;
 13433  0C1B  0024               	movlb	4	; select bank4
 13434  0C1C  1316               	bcf	22,6	;volatile
 13435                           
 13436                           ;i2c.c: 494: }
 13437  0C1D  0008               	return
 13438  0C1E                     i1l310:	
 13439                           
 13440                           ;i2c.c: 495: else
 13441                           ;i2c.c: 496: {
 13442                           ;i2c.c: 497: SSPCON2bits.RCEN = 1;
 13443  0C1E  1596               	bsf	22,3	;volatile
 13444                           
 13445                           ;i2c.c: 498: i2c_state = S_MASTER_ACK_RCV_DATA;
 13446  0C1F  3008               	movlw	8
 13447  0C20  00F9               	movwf	??_I2C_ISR
 13448  0C21  0879               	movf	??_I2C_ISR,w
 13449  0C22  0020               	movlb	0	; select bank0
 13450  0C23  00B2               	movwf	_i2c_state
 13451                           
 13452                           ;i2c.c: 499: }
 13453                           ;i2c.c: 500: break;
 13454  0C24  0008               	return
 13455  0C25                     i1l4205:	
 13456                           ;i2c.c: 502: case S_MASTER_RCV_DATA:
 13457                           
 13458                           
 13459                           ;i2c.c: 507: i2c_state = S_MASTER_ACK_RCV_DATA;
 13460  0C25  3008               	movlw	8
 13461  0C26  00F9               	movwf	??_I2C_ISR
 13462  0C27  0879               	movf	??_I2C_ISR,w
 13463  0C28  00B2               	movwf	_i2c_state
 13464                           
 13465                           ;i2c.c: 510: SSPCON2bits.RCEN = 1;
 13466  0C29  0024               	movlb	4	; select bank4
 13467  0C2A  1596               	bsf	22,3	;volatile
 13468                           
 13469                           ;i2c.c: 512: break;
 13470  0C2B  0008               	return
 13471  0C2C                     i1l4209:	
 13472                           ;i2c.c: 514: case S_MASTER_ACK_RCV_DATA:
 13473                           
 13474                           
 13475                           ;i2c.c: 517: *pi2c_buf_ptr++ = SSPBUF;
 13476  0C2C  0024               	movlb	4	; select bank4
 13477  0C2D  0811               	movf	17,w	;volatile
 13478  0C2E  00F9               	movwf	??_I2C_ISR
 13479  0C2F  0020               	movlb	0	; select bank0
 13480  0C30  0829               	movf	I2C_ISR@pi2c_buf_ptr,w
 13481  0C31  0086               	movwf	6
 13482  0C32  0187               	clrf	7
 13483  0C33  0879               	movf	??_I2C_ISR,w
 13484  0C34  0081               	movwf	1
 13485  0C35  3001               	movlw	1
 13486  0C36  00F9               	movwf	??_I2C_ISR
 13487  0C37  0879               	movf	??_I2C_ISR,w
 13488  0C38  07A9               	addwf	I2C_ISR@pi2c_buf_ptr,f
 13489                           
 13490                           ;i2c.c: 520: if(--i2c_bytes_left)
 13491  0C39  3001               	movlw	1
 13492  0C3A  02A8               	subwf	I2C_ISR@i2c_bytes_left,f
 13493  0C3B  1903               	btfsc	3,2
 13494  0C3C  2C45               	goto	i1l314
 13495                           
 13496                           ;i2c.c: 521: {
 13497                           ;i2c.c: 527: SSPCON2bits.ACKDT = 0;
 13498  0C3D  0024               	movlb	4	; select bank4
 13499  0C3E  1296               	bcf	22,5	;volatile
 13500                           
 13501                           ;i2c.c: 530: i2c_state = S_MASTER_RCV_DATA;
 13502  0C3F  3006               	movlw	6
 13503  0C40  00F9               	movwf	??_I2C_ISR
 13504  0C41  0879               	movf	??_I2C_ISR,w
 13505  0C42  0020               	movlb	0	; select bank0
 13506  0C43  00B2               	movwf	_i2c_state
 13507                           
 13508                           ;i2c.c: 531: }
 13509  0C44  2C49               	goto	i1l4221
 13510  0C45                     i1l314:	
 13511                           
 13512                           ;i2c.c: 532: else
 13513                           ;i2c.c: 533: {
 13514                           ;i2c.c: 537: SSPCON2bits.ACKDT = 1;
 13515  0C45  0024               	movlb	4	; select bank4
 13516  0C46  1696               	bsf	22,5	;volatile
 13517                           
 13518                           ;i2c.c: 539: I2C_FunctionComplete();
 13519  0C47  3193  23A2         	fcall	_I2C_FunctionComplete
 13520  0C49                     i1l4221:	
 13521                           
 13522                           ;i2c.c: 540: }
 13523                           ;i2c.c: 543: SSPCON2bits.ACKEN = 1;
 13524  0C49  0024               	movlb	4	; select bank4
 13525  0C4A  1616               	bsf	22,4	;volatile
 13526                           
 13527                           ;i2c.c: 544: break;
 13528  0C4B  0008               	return
 13529  0C4C                     i1l4223:	
 13530                           ;i2c.c: 546: case S_MASTER_RCV_STOP:
 13531                           
 13532                           
 13533                           ;i2c.c: 547: case S_MASTER_SEND_STOP:
 13534                           ;i2c.c: 550: I2C_Stop(I2C_MESSAGE_COMPLETE);
 13535  0C4C  3000               	movlw	0
 13536  0C4D  3193  23F5         	fcall	_I2C_Stop
 13537                           
 13538                           ;i2c.c: 551: break;
 13539  0C4F  0008               	return
 13540  0C50                     i1l4225:	
 13541                           ;i2c.c: 553: default:
 13542                           
 13543                           
 13544                           ;i2c.c: 557: i2c_object.i2cErrors++;
 13545  0C50  3001               	movlw	1
 13546  0C51  00F9               	movwf	??_I2C_ISR
 13547  0C52  0879               	movf	??_I2C_ISR,w
 13548  0C53  0020               	movlb	0	; select bank0
 13549  0C54  07E5               	addwf	_i2c_object+4,f
 13550                           
 13551                           ;i2c.c: 558: I2C_Stop(I2C_LOST_STATE);
 13552  0C55  3006               	movlw	6
 13553  0C56  3193  23F5         	fcall	_I2C_Stop
 13554                           
 13555                           ;i2c.c: 561: }
 13556                           
 13557                           ;i2c.c: 559: break;
 13558  0C58  0008               	return
 13559  0C59                     i1l4231:	
 13560  0C59  0020               	movlb	0	; select bank0
 13561  0C5A  0832               	movf	_i2c_state,w
 13562                           
 13563                           ; Switch size 1, requested type "space"
 13564                           ; Number of cases is 11, Range of values is 0 to 11
 13565                           ; switch strategies available:
 13566                           ; Name         Instructions Cycles
 13567                           ; direct_byte           30     6 (fixed)
 13568                           ; simple_byte           34    18 (average)
 13569                           ; jumptable            260     6 (fixed)
 13570                           ;	Chosen strategy is direct_byte
 13571  0C5B  0084               	movwf	4
 13572  0C5C  300C               	movlw	12
 13573  0C5D  0204               	subwf	4,w
 13574  0C5E  1803               	skipnc
 13575  0C5F  2C50               	goto	i1l4225
 13576  0C60  3187               	movlp	high i1S5251
 13577  0C61  3504               	lslf	4,w
 13578  0C62  3EE8               	addlw	low i1S5251
 13579  0C63  0082               	movwf	2
 13580  0C64  0008               	return
 13581  0C65                     __end_of_I2C_ISR:	
 13582                           
 13583                           	psect	swtext1
 13584  07E8                     __pswtext1:	
 13585  07E8                     i1S5251:	
 13586  07E8  318B  2B36         	ljmp	i1l280
 13587  07EA  318B  2B61         	ljmp	i1l285
 13588  07EC  318B  2BB5         	ljmp	i1l4151
 13589  07EE  318B  2BDB         	ljmp	i1l302
 13590  07F0  318C  2C4C         	ljmp	i1l4223
 13591  07F2  318C  2C10         	ljmp	i1l309
 13592  07F4  318C  2C25         	ljmp	i1l4205
 13593  07F6  318C  2C4C         	ljmp	i1l4223
 13594  07F8  318C  2C2C         	ljmp	i1l4209
 13595  07FA  318C  2C50         	ljmp	i1l4225
 13596  07FC  318B  2B69         	ljmp	i1l286
 13597  07FE  318B  2B8C         	ljmp	i1l291
 13598                           
 13599                           	psect	text63
 13600  13F5                     __ptext63:	
 13601 ;; *************** function _I2C_Stop *****************
 13602 ;; Defined at:
 13603 ;;		line 582 in file "mcc_generated_files/i2c.c"
 13604 ;; Parameters:    Size  Location     Type
 13605 ;;  completion_c    1    wreg     enum E3525
 13606 ;; Auto vars:     Size  Location     Type
 13607 ;;  completion_c    1    1[COMMON] enum E3525
 13608 ;; Return value:  Size  Location     Type
 13609 ;;		None               void
 13610 ;; Registers used:
 13611 ;;		wreg, fsr1l, fsr1h, status,2
 13612 ;; Tracked objects:
 13613 ;;		On entry : 0/0
 13614 ;;		On exit  : 0/0
 13615 ;;		Unchanged: 0/0
 13616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13617 ;;      Params:         0       0       0       0       0       0       0       0
 13618 ;;      Locals:         1       0       0       0       0       0       0       0
 13619 ;;      Temps:          1       0       0       0       0       0       0       0
 13620 ;;      Totals:         2       0       0       0       0       0       0       0
 13621 ;;Total ram usage:        2 bytes
 13622 ;; Hardware stack levels used:    1
 13623 ;; This function calls:
 13624 ;;		Nothing
 13625 ;; This function is called by:
 13626 ;;		_I2C_ISR
 13627 ;; This function uses a non-reentrant model
 13628 ;;
 13629                           
 13630                           
 13631                           ;psect for function _I2C_Stop
 13632  13F5                     _I2C_Stop:	
 13633                           
 13634                           ;incstack = 0
 13635                           ; Regs used in _I2C_Stop: [wreg+fsr1l+fsr1h+status,2]
 13636                           ;I2C_Stop@completion_code stored from wreg
 13637  13F5  00F8               	movwf	I2C_Stop@completion_code
 13638                           
 13639                           ;i2c.c: 585: SSPCON2bits.PEN = 1;
 13640  13F6  0024               	movlb	4	; select bank4
 13641  13F7  1516               	bsf	22,2	;volatile
 13642                           
 13643                           ;i2c.c: 588: if (p_i2c_current->pTrFlag != (0))
 13644  13F8  0871               	movf	_p_i2c_current,w
 13645  13F9  3E02               	addlw	2
 13646  13FA  0086               	movwf	6
 13647  13FB  0187               	clrf	7
 13648  13FC  0801               	movf	1,w
 13649  13FD  3A00               	xorlw	0
 13650  13FE  1903               	skipnz
 13651  13FF  2C0B               	goto	i1l3499
 13652                           
 13653                           ;i2c.c: 589: {
 13654                           ;i2c.c: 591: *(p_i2c_current->pTrFlag) = completion_code;
 13655  1400  0878               	movf	I2C_Stop@completion_code,w
 13656  1401  00F7               	movwf	??_I2C_Stop
 13657  1402  0871               	movf	_p_i2c_current,w
 13658  1403  3E02               	addlw	2
 13659  1404  0086               	movwf	6
 13660  1405  0187               	clrf	7
 13661  1406  0801               	movf	1,w
 13662  1407  0086               	movwf	6
 13663  1408  0187               	clrf	7
 13664  1409  0877               	movf	??_I2C_Stop,w
 13665  140A  0081               	movwf	1
 13666  140B                     i1l3499:	
 13667                           
 13668                           ;i2c.c: 592: }
 13669                           ;i2c.c: 595: i2c_state = S_MASTER_IDLE;
 13670  140B  0020               	movlb	0	; select bank0
 13671  140C  01B2               	clrf	_i2c_state
 13672  140D  0008               	return
 13673  140E                     __end_of_I2C_Stop:	
 13674                           
 13675                           	psect	text64
 13676  13A2                     __ptext64:	
 13677 ;; *************** function _I2C_FunctionComplete *****************
 13678 ;; Defined at:
 13679 ;;		line 564 in file "mcc_generated_files/i2c.c"
 13680 ;; Parameters:    Size  Location     Type
 13681 ;;		None
 13682 ;; Auto vars:     Size  Location     Type
 13683 ;;		None
 13684 ;; Return value:  Size  Location     Type
 13685 ;;		None               void
 13686 ;; Registers used:
 13687 ;;		wreg, status,2, status,0
 13688 ;; Tracked objects:
 13689 ;;		On entry : 0/0
 13690 ;;		On exit  : 0/0
 13691 ;;		Unchanged: 0/0
 13692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13693 ;;      Params:         0       0       0       0       0       0       0       0
 13694 ;;      Locals:         0       0       0       0       0       0       0       0
 13695 ;;      Temps:          1       0       0       0       0       0       0       0
 13696 ;;      Totals:         1       0       0       0       0       0       0       0
 13697 ;;Total ram usage:        1 bytes
 13698 ;; Hardware stack levels used:    1
 13699 ;; This function calls:
 13700 ;;		Nothing
 13701 ;; This function is called by:
 13702 ;;		_I2C_ISR
 13703 ;; This function uses a non-reentrant model
 13704 ;;
 13705                           
 13706                           
 13707                           ;psect for function _I2C_FunctionComplete
 13708  13A2                     _I2C_FunctionComplete:	
 13709                           
 13710                           ;i2c.c: 568: p_i2c_trb_current++;
 13711                           
 13712                           ;incstack = 0
 13713                           ; Regs used in _I2C_FunctionComplete: [wreg+status,2+status,0]
 13714  13A2  3004               	movlw	4
 13715  13A3  00F7               	movwf	??_I2C_FunctionComplete
 13716  13A4  0877               	movf	??_I2C_FunctionComplete,w
 13717  13A5  07F2               	addwf	_p_i2c_trb_current,f
 13718                           
 13719                           ;i2c.c: 571: if(--i2c_trb_count == 0)
 13720  13A6  3001               	movlw	1
 13721  13A7  0020               	movlb	0	; select bank0
 13722  13A8  02B3               	subwf	_i2c_trb_count,f
 13723  13A9  1D03               	btfss	3,2
 13724  13AA  2BB0               	goto	i1l321
 13725                           
 13726                           ;i2c.c: 572: {
 13727                           ;i2c.c: 573: i2c_state = S_MASTER_SEND_STOP;
 13728  13AB  3004               	movlw	4
 13729  13AC  00F7               	movwf	??_I2C_FunctionComplete
 13730  13AD  0877               	movf	??_I2C_FunctionComplete,w
 13731  13AE  00B2               	movwf	_i2c_state
 13732                           
 13733                           ;i2c.c: 574: }
 13734  13AF  0008               	return
 13735  13B0                     i1l321:	
 13736                           
 13737                           ;i2c.c: 575: else
 13738                           ;i2c.c: 576: {
 13739                           ;i2c.c: 577: i2c_state = S_MASTER_RESTART;
 13740  13B0  01B2               	clrf	_i2c_state
 13741  13B1  0AB2               	incf	_i2c_state,f
 13742  13B2  0008               	return
 13743  13B3                     __end_of_I2C_FunctionComplete:	
 13744                           
 13745                           	psect	text65
 13746  0003                     __ptext65:	
 13747 ;; *************** function _I2C_BusCollisionISR *****************
 13748 ;; Defined at:
 13749 ;;		line 729 in file "mcc_generated_files/i2c.c"
 13750 ;; Parameters:    Size  Location     Type
 13751 ;;		None
 13752 ;; Auto vars:     Size  Location     Type
 13753 ;;		None
 13754 ;; Return value:  Size  Location     Type
 13755 ;;		None               void
 13756 ;; Registers used:
 13757 ;;		None
 13758 ;; Tracked objects:
 13759 ;;		On entry : 0/0
 13760 ;;		On exit  : 0/0
 13761 ;;		Unchanged: 0/0
 13762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13763 ;;      Params:         0       0       0       0       0       0       0       0
 13764 ;;      Locals:         0       0       0       0       0       0       0       0
 13765 ;;      Temps:          0       0       0       0       0       0       0       0
 13766 ;;      Totals:         0       0       0       0       0       0       0       0
 13767 ;;Total ram usage:        0 bytes
 13768 ;; Hardware stack levels used:    1
 13769 ;; This function calls:
 13770 ;;		Nothing
 13771 ;; This function is called by:
 13772 ;;		_INTERRUPT_InterruptManager
 13773 ;; This function uses a non-reentrant model
 13774 ;;
 13775                           
 13776                           
 13777                           ;psect for function _I2C_BusCollisionISR
 13778  0003                     _I2C_BusCollisionISR:	
 13779                           
 13780                           ;incstack = 0
 13781                           ; Regs used in _I2C_BusCollisionISR: []
 13782  0003  0008               	return
 13783  0004                     __end_of_I2C_BusCollisionISR:	
 13784                           
 13785                           	psect	text66
 13786  14AE                     __ptext66:	
 13787 ;; *************** function _EUSART_Transmit_ISR *****************
 13788 ;; Defined at:
 13789 ;;		line 167 in file "mcc_generated_files/eusart.c"
 13790 ;; Parameters:    Size  Location     Type
 13791 ;;		None
 13792 ;; Auto vars:     Size  Location     Type
 13793 ;;		None
 13794 ;; Return value:  Size  Location     Type
 13795 ;;		None               void
 13796 ;; Registers used:
 13797 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13798 ;; Tracked objects:
 13799 ;;		On entry : 0/0
 13800 ;;		On exit  : 0/0
 13801 ;;		Unchanged: 0/0
 13802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13803 ;;      Params:         0       0       0       0       0       0       0       0
 13804 ;;      Locals:         0       0       0       0       0       0       0       0
 13805 ;;      Temps:          1       0       0       0       0       0       0       0
 13806 ;;      Totals:         1       0       0       0       0       0       0       0
 13807 ;;Total ram usage:        1 bytes
 13808 ;; Hardware stack levels used:    1
 13809 ;; This function calls:
 13810 ;;		Nothing
 13811 ;; This function is called by:
 13812 ;;		_INTERRUPT_InterruptManager
 13813 ;; This function uses a non-reentrant model
 13814 ;;
 13815                           
 13816                           
 13817                           ;psect for function _EUSART_Transmit_ISR
 13818  14AE                     _EUSART_Transmit_ISR:	
 13819                           
 13820                           ;eusart.c: 171: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 13821                           
 13822                           ;incstack = 0
 13823                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13824  14AE  3040               	movlw	64
 13825  14AF  0020               	movlb	0	; select bank0
 13826  14B0  0268               	subwf	_eusartTxBufferRemaining,w	;volatile
 13827  14B1  1803               	skipnc
 13828  14B2  2CC8               	goto	i1l480
 13829                           
 13830                           ;eusart.c: 172: {
 13831                           ;eusart.c: 173: TXREG = eusartTxBuffer[eusartTxTail++];
 13832  14B3  0831               	movf	_eusartTxTail,w
 13833  14B4  3EA0               	addlw	_eusartTxBuffer& (0+255)
 13834  14B5  0086               	movwf	6
 13835  14B6  0187               	clrf	7
 13836  14B7  0801               	movf	1,w
 13837  14B8  0023               	movlb	3	; select bank3
 13838  14B9  009A               	movwf	26	;volatile
 13839  14BA  3001               	movlw	1
 13840  14BB  00F7               	movwf	??_EUSART_Transmit_ISR
 13841  14BC  0877               	movf	??_EUSART_Transmit_ISR,w
 13842  14BD  0020               	movlb	0	; select bank0
 13843  14BE  07B1               	addwf	_eusartTxTail,f
 13844                           
 13845                           ;eusart.c: 174: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13846  14BF  3040               	movlw	64
 13847  14C0  0231               	subwf	_eusartTxTail,w
 13848  14C1  1803               	btfsc	3,0
 13849                           
 13850                           ;eusart.c: 175: {
 13851                           ;eusart.c: 176: eusartTxTail = 0;
 13852  14C2  01B1               	clrf	_eusartTxTail
 13853                           
 13854                           ;eusart.c: 177: }
 13855                           ;eusart.c: 178: eusartTxBufferRemaining++;
 13856  14C3  3001               	movlw	1
 13857  14C4  00F7               	movwf	??_EUSART_Transmit_ISR
 13858  14C5  0877               	movf	??_EUSART_Transmit_ISR,w
 13859  14C6  07E8               	addwf	_eusartTxBufferRemaining,f	;volatile
 13860                           
 13861                           ;eusart.c: 179: }
 13862  14C7  0008               	return
 13863  14C8                     i1l480:	
 13864                           
 13865                           ;eusart.c: 180: else
 13866                           ;eusart.c: 181: {
 13867                           ;eusart.c: 182: PIE1bits.TXIE = 0;
 13868  14C8  0021               	movlb	1	; select bank1
 13869  14C9  1211               	bcf	17,4	;volatile
 13870  14CA  0008               	return
 13871  14CB                     __end_of_EUSART_Transmit_ISR:	
 13872                           
 13873                           	psect	text67
 13874  1427                     __ptext67:	
 13875 ;; *************** function _EUSART_Receive_ISR *****************
 13876 ;; Defined at:
 13877 ;;		line 186 in file "mcc_generated_files/eusart.c"
 13878 ;; Parameters:    Size  Location     Type
 13879 ;;		None
 13880 ;; Auto vars:     Size  Location     Type
 13881 ;;		None
 13882 ;; Return value:  Size  Location     Type
 13883 ;;		None               void
 13884 ;; Registers used:
 13885 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13891 ;;      Params:         0       0       0       0       0       0       0       0
 13892 ;;      Locals:         0       0       0       0       0       0       0       0
 13893 ;;      Temps:          1       0       0       0       0       0       0       0
 13894 ;;      Totals:         1       0       0       0       0       0       0       0
 13895 ;;Total ram usage:        1 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; This function calls:
 13898 ;;		Nothing
 13899 ;; This function is called by:
 13900 ;;		_INTERRUPT_InterruptManager
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           
 13905                           ;psect for function _EUSART_Receive_ISR
 13906  1427                     _EUSART_Receive_ISR:	
 13907                           
 13908                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
 13909                           
 13910                           ;incstack = 0
 13911                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13912  1427  0023               	movlb	3	; select bank3
 13913  1428  1C9D               	btfss	29,1	;volatile
 13914  1429  2C2C               	goto	i1l4241
 13915                           
 13916                           ;eusart.c: 189: {
 13917                           ;eusart.c: 192: RCSTAbits.CREN = 0;
 13918  142A  121D               	bcf	29,4	;volatile
 13919                           
 13920                           ;eusart.c: 193: RCSTAbits.CREN = 1;
 13921  142B  161D               	bsf	29,4	;volatile
 13922  142C                     i1l4241:	
 13923                           
 13924                           ;eusart.c: 194: }
 13925                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
 13926  142C  0819               	movf	25,w	;volatile
 13927  142D  00F7               	movwf	??_EUSART_Receive_ISR
 13928  142E  0020               	movlb	0	; select bank0
 13929  142F  082E               	movf	_eusartRxHead,w
 13930  1430  3EE0               	addlw	_eusartRxBuffer& (0+255)
 13931  1431  0086               	movwf	6
 13932  1432  0187               	clrf	7
 13933  1433  0877               	movf	??_EUSART_Receive_ISR,w
 13934  1434  0081               	movwf	1
 13935  1435  3001               	movlw	1
 13936  1436  00F7               	movwf	??_EUSART_Receive_ISR
 13937  1437  0877               	movf	??_EUSART_Receive_ISR,w
 13938  1438  07AE               	addwf	_eusartRxHead,f
 13939                           
 13940                           ;eusart.c: 198: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13941  1439  3008               	movlw	8
 13942  143A  022E               	subwf	_eusartRxHead,w
 13943  143B  1803               	btfsc	3,0
 13944                           
 13945                           ;eusart.c: 199: {
 13946                           ;eusart.c: 200: eusartRxHead = 0;
 13947  143C  01AE               	clrf	_eusartRxHead
 13948                           
 13949                           ;eusart.c: 201: }
 13950                           ;eusart.c: 202: eusartRxCount++;
 13951  143D  3001               	movlw	1
 13952  143E  00F7               	movwf	??_EUSART_Receive_ISR
 13953  143F  0877               	movf	??_EUSART_Receive_ISR,w
 13954  1440  07AD               	addwf	_eusartRxCount,f	;volatile
 13955  1441  0008               	return
 13956  1442                     __end_of_EUSART_Receive_ISR:	
 13957  007E                     btemp	set	126	;btemp
 13958  007E                     pic14e$flags	set	126
 13959  007E                     wtemp	set	126
 13960  007E                     wtemp0	set	126
 13961  0080                     wtemp1	set	128
 13962  0082                     wtemp2	set	130
 13963  0084                     wtemp3	set	132
 13964  0086                     wtemp4	set	134
 13965  0088                     wtemp5	set	136
 13966  007F                     wtemp6	set	127
 13967  007E                     ttemp	set	126
 13968  007E                     ttemp0	set	126
 13969  0081                     ttemp1	set	129
 13970  0084                     ttemp2	set	132
 13971  0087                     ttemp3	set	135
 13972  007F                     ttemp4	set	127
 13973  007E                     ltemp	set	126
 13974  007E                     ltemp0	set	126
 13975  0082                     ltemp1	set	130
 13976  0086                     ltemp2	set	134
 13977  0080                     ltemp3	set	128


Data Sizes:
    Strings     486
    Constant    0
    Data        4
    BSS         116
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     32      77
    BANK1            80      0      76
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    i2c_tr_queue.pTrFlag	PTR enum E3525 size(1) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    i2c_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_111(CODE[7]), STR_110(CODE[7]), STR_109(CODE[10]), STR_101(CODE[16]), 
		 -> STR_88(CODE[4]), STR_87(CODE[4]), STR_86(CODE[4]), STR_85(CODE[4]), 
		 -> STR_84(CODE[4]), STR_83(CODE[4]), STR_82(CODE[4]), STR_81(CODE[4]), 
		 -> STR_80(CODE[4]), STR_79(CODE[4]), STR_78(CODE[4]), STR_77(CODE[4]), 
		 -> STR_76(CODE[4]), STR_75(CODE[4]), STR_74(CODE[4]), STR_73(CODE[4]), 
		 -> STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[4]), STR_69(CODE[4]), 
		 -> STR_68(CODE[4]), STR_67(CODE[4]), STR_66(CODE[4]), STR_65(CODE[4]), 
		 -> STR_64(CODE[4]), STR_63(CODE[3]), STR_62(CODE[4]), STR_61(CODE[4]), 
		 -> STR_60(CODE[4]), STR_59(CODE[4]), STR_58(CODE[4]), STR_57(CODE[4]), 
		 -> STR_56(CODE[4]), STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[4]), 
		 -> STR_52(CODE[15]), STR_51(CODE[8]), STR_9(CODE[17]), STR_8(CODE[11]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1545$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_108(CODE[17]), STR_107(CODE[17]), STR_106(CODE[7]), STR_105(CODE[7]), 
		 -> STR_104(CODE[8]), STR_103(CODE[17]), STR_102(CODE[14]), STR_100(CODE[17]), 
		 -> STR_99(CODE[7]), STR_98(CODE[17]), STR_97(CODE[11]), STR_96(CODE[12]), 
		 -> STR_95(CODE[4]), STR_94(CODE[9]), STR_93(CODE[12]), STR_92(CODE[4]), 
		 -> STR_91(CODE[9]), STR_90(CODE[16]), STR_89(CODE[9]), STR_50(CODE[17]), 
		 -> STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), 
		 -> STR_45(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), 
		 -> STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), 
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), 
		 -> STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), 
		 -> STR_25(CODE[4]), STR_24(CODE[3]), STR_23(CODE[4]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), 
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[17]), STR_10(CODE[12]), 
		 -> STR_7(CODE[12]), STR_6(CODE[6]), STR_5(CODE[9]), STR_4(CODE[17]), 
		 -> STR_3(CODE[13]), STR_2(CODE[15]), STR_1(CODE[13]), 

    I2C_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 1
		 -> TC74_cmd(BANK0[1]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    I2C_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterWrite@trBlock(BANK0[4]), 

    I2C_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    I2C_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK1[4]), 

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    i2c_object.pTrTail.pTrFlag	PTR enum E3525 size(1) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    i2c_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    I2C_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    I2C_MasterTRBInsert@pflag	PTR enum E3525 size(1) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    I2C_MasterRead@pflag	PTR enum E3525 size(1) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    I2C_MasterRead@pdata	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), 

    F3637.pbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    I2C_MasterWrite@pflag	PTR enum E3525 size(1) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    I2C_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 1
		 -> TC74_cmd(BANK0[1]), 

    F3632.pbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 2
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), I2C_ISR@i2c_address(COMMON[2]), NULL(NULL[0]), 

    S542$pbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    p_i2c_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK0[4]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E3525 size(1) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    i2c_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    S554$pTrFlag	PTR enum E3525 size(1) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    p_i2c_current.pTrFlag	PTR enum E3525 size(1) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    S554$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    p_i2c_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK0[4]), 

    p_i2c_current	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), NULL(NULL[0]), 

    S565$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), 

    i2c_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), 

    S565$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), 

    i2c_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_ISR
    _RTCisr->_RTCIncDateTime
    _TMR0_ISR->_CheckButtons
    _I2C_ISR->_I2C_Stop

Critical Paths under _main in BANK0

    _main->_StateTemperature
    _StateVoltage->_DisplayVoltage
    _DisplayVoltage->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _DisplayVoltMenu->_LCDGoto
    _StateTemperature->_DisplayTemperature
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2C_MasterRead->_I2C_MasterReadTRBBuild
    _DisplayTemperature->___awmod
    _DisplayTempMenu->_LCDGoto
    _DisplaySplashText->_LCDGoto
    _StateClock->_DisplayTime
    _StateClock->_StateClockSet
    _StateClockSet->___awmod
    _DisplayTime->___awmod
    _DisplayClockMenu->_LCDGoto
    _StateBuzzer->_DisplayBuzzerData
    _DisplayBuzzerData->___awmod
    _printf->_putch
    _putch->_EUSART_Write
    ___awmod->___awdiv
    ___awdiv->___wmul
    _DisplayBuzMenu->_LCDGoto
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_I2C_Initialize
    _LCD_Initialize->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  127817
                 _Buttons_Initialize
                     _LCD_Initialize
                  _SYSTEM_Initialize
                        _StateBuzzer
                         _StateClock
                       _StateInitial
                   _StateTemperature
                       _StateVoltage
 ---------------------------------------------------------------------------------
 (1) _StateVoltage                                         2     2      0   22579
                                             26 BANK0      2     2      0
                  _ADC_GetConversion
                    _DisplayVoltMenu
                     _DisplayVoltage
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _DisplayVoltage                                       6     4      2   15300
                                             20 BANK0      6     4      2
                       _EUSART_Write
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutStr
                            ___lwdiv
                            ___lwmod
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4    1439
                                             14 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1698
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _DisplayVoltMenu                                      0     0      0    6810
                            _LCDGoto
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _StateTemperature                                     4     4      0   29638
                                             28 BANK0      4     4      0
                    _DisplayTempMenu
                 _DisplayTemperature
                     _I2C_MasterRead
                    _I2C_MasterWrite
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterWrite                                      7     3      4    1090
                                              7 BANK0      7     3      4
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterWriteTRBBuild                              7     3      4     362
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _I2C_MasterRead                                       7     3      4    1112
                                              7 BANK0      7     3      4
             _I2C_MasterReadTRBBuild
                _I2C_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterTRBInsert                                  4     2      2     388
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterReadTRBBuild                               7     3      4     384
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _DisplayTemperature                                   6     5      1   20096
                                             22 BANK0      6     5      1
                       _EUSART_Write
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _DisplayTempMenu                                      0     0      0    6810
                            _LCDGoto
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (1) _StateInitial                                         0     0      0    7636
                  _DisplaySplashText
                          _LCDPutCmd
                             _Wait2s
 ---------------------------------------------------------------------------------
 (2) _Wait2s                                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DisplaySplashText                                    0     0      0    7223
                            _LCDGoto
                          _LCDPutCmd
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (1) _StateClock                                           0     0      0   40929
                   _DisplayClockMenu
                        _DisplayTime
                          _LCDPutCmd
                      _StateClockSet
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _StateClockSet                                        2     2      0   15272
                                             22 BANK0      2     2      0
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutCmd
                          _LCDPutStr
                          _RTCDecHrs
                      _RTCDecMinutes
                          _RTCIncHrs
                      _RTCIncMinutes
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _RTCIncMinutes                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RTCIncHrs                                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RTCDecMinutes                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RTCDecHrs                                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DisplayTime                                          2     2      0   18434
                                             22 BANK0      2     2      0
                       _EUSART_Write
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                             _printf
 ---------------------------------------------------------------------------------
 (2) _DisplayClockMenu                                     0     0      0    6810
                            _LCDGoto
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (1) _StateBuzzer                                          2     2      0   26622
                                             29 BANK0      2     2      0
                     _DisplayBuzMenu
                  _DisplayBuzzerData
                          _LCDPutCmd
                           _SNDSound
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (2) _TMR4_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SNDSound                                             2     1      1     139
                                              0 BANK0      2     1      1
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DisplayBuzzerData                                   13    13      0   19226
                                             22 BANK0      7     7      0
                       _EUSART_Write
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              13    11      2    3531
                                              3 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      75
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    2984
                                             15 BANK0      7     3      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    4652
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _DisplayBuzMenu                                       0     0      0    6810
                            _LCDGoto
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (3) _LCDPutStr                                            5     3      2    4791
                                              7 BANK0      5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (4) _LCDPutChar                                           3     3      0     413
                                              4 BANK0      3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDGoto                                              6     5      1    2019
                                              7 BANK0      6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                   _EPWM1_Initialize
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       2     2      0     413
                                              7 BANK0      2     2      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            3     3      0     413
                                              4 BANK0      3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       4     3      1     346
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _Buttons_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      22
                                              6 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                _I2C_BusCollisionISR
                            _I2C_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
                             _RTCisr
 ---------------------------------------------------------------------------------
 (8) _RTCisr                                               0     0      0       0
                     _RTCIncDateTime
 ---------------------------------------------------------------------------------
 (9) _RTCIncDateTime                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                       _CheckButtons
 ---------------------------------------------------------------------------------
 (8) _CheckButtons                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C_ISR                                              4     4      0      22
                                              2 COMMON     4     4      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C_Stop                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _I2C_FunctionComplete                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buttons_Initialize
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EUSART_Initialize
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
     _TMR4_Initialize
   _StateBuzzer
     _DisplayBuzMenu
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _DisplayBuzzerData
       _EUSART_Write
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
       _printf
         _putch
           _EUSART_Write
     _LCDPutCmd
       _LCDWriteNibble
     _SNDSound
       _TMR4_StartTimer
     _TMR4_StopTimer
   _StateClock
     _DisplayClockMenu
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _DisplayTime
       _EUSART_Write
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
       _printf
         _putch
           _EUSART_Write
     _LCDPutCmd
       _LCDWriteNibble
     _StateClockSet
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutCmd
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       _RTCDecHrs
       _RTCDecMinutes
       _RTCIncHrs
       _RTCIncMinutes
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
     _TMR1_StartTimer
   _StateInitial
     _DisplaySplashText
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutCmd
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _LCDPutCmd
       _LCDWriteNibble
     _Wait2s
   _StateTemperature
     _DisplayTempMenu
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _DisplayTemperature
       _EUSART_Write
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _printf
         _putch
           _EUSART_Write
     _I2C_MasterRead
       _I2C_MasterReadTRBBuild
       _I2C_MasterTRBInsert
     _I2C_MasterWrite
       _I2C_MasterTRBInsert
       _I2C_MasterWriteTRBBuild
     _LCDPutCmd
       _LCDWriteNibble
   _StateVoltage
     _ADC_GetConversion
     _DisplayVoltMenu
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _DisplayVoltage
       _EUSART_Write
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _printf
         _putch
           _EUSART_Write
     _LCDPutCmd
       _LCDWriteNibble

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop
   _TMR0_ISR
     _CheckButtons
   _TMR1_ISR
     _RTCisr
       _RTCIncDateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A7       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     20      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      A7      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Apr 29 09:12:29 2015

                   ??_DisplayVoltage 0057                    ??_DisplayVoltMenu 004E  
                     _LCD_Initialize 15F7                                    pc 0002  
              I2C_ISR@i2c_bytes_left 0028                          __CFG_CP$OFF 0000  
                        ?_LCDPutChar 0077                         ___awdiv@sign 004D  
                ___wmul@multiplicand 0043                      _timer0ReloadVal 0073  
            ?_I2C_MasterReadTRBBuild 0041                      ??_StateClockSet 0057  
                                l165 15EB                                  l347 08B0  
                                l465 1662                                  l468 166D  
                                l660 091E                                  l831 05FA  
                                l840 05F1                                  l674 13DB  
                                l961 0797                                  l859 077A  
                                l965 07A2                                  _PR4 0416  
                       __CFG_CPD$OFF 0000            __end_of_DisplaySplashText 1493  
                    __end_of_I2C_ISR 0C65                      _timer1ReloadVal 0066  
                                _set 0034                         ___awmod@sign 0056  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                 SNDSound@pwm_period 0041              StateTemperature@sChange 0060  
                       __CFG_LVP$OFF 0000                      __end_of_LCDGoto 163D  
                               l1140 1582                                 l3203 162A  
                               l3117 1681                                 l3311 09E6  
                               l3303 09D5                                 l3307 09DE  
                               l3323 08C7                                 l5011 0D1E  
                               l3171 08A4                                 l3341 08EC  
                               l5021 0D75                                 l3335 08D4  
                               l3327 08CE                                 l5031 0D90  
                               l5007 0D08                                 l3175 08AB  
                               l3193 1686                                 l3337 08E0  
                               l3345 08F5                                 l5041 0DB5  
                               l5017 0D6A                                 l5123 093C  
                               l5107 0914                                 l5211 17CD  
                               l5027 0D85                                 l3179 08B7  
                               l3515 1747                                 l3371 0867  
                               l3363 0849                                 l3285 09AF  
                               l3349 08FD                                 l5125 0941  
                               l5037 0D9F                                 l3509 1771  
                               l3365 0855                                 l3295 09B7  
                               l3279 09A4                                 l3535 1353  
                               l5047 0E04                                 l5135 0790  
                               l3375 0870                                 l5063 081A  
                               l5223 14A1                                 l3297 09C3  
                               l5129 094A                                 l5153 07CB  
                               l5137 078B                                 l3393 17F0  
                               l5065 0815                                 l5091 0908  
                               l5147 07A5                                 l3387 17D8  
                               l5075 0820                                 l5181 17AC  
                               l5149 07B6                                 l3389 17E4  
                               l3397 17F9                                 l3911 05D5  
                               l5183 17A7                                 l4551 157C  
                               l4801 0215                                 l5089 090D  
                               l3921 05E8                                 l4547 150A  
                               l4811 0242                                 l4803 021E  
                               l3907 05C8                                 l5195 17BC  
                               l4901 047F                                 l4813 024B  
                               l4805 0227                                 l4821 0266  
                               l4903 0487                                 l4815 0254  
                               l4807 0230                                 l4751 0134  
                               l4823 02D2                                 l5199 17B6  
                               l4905 048F                                 l4841 038F  
                               l4913 04A7                                 l4817 025D  
                               l4809 0239                                 l4761 0161  
                               l4753 013D                                 l3937 06A4  
                               l4907 0497                                 l4851 03B7  
                               l4843 0397                                 l4771 018E  
                               l4763 016A                                 l4755 0146  
                               l4747 0122                                 l3875 0519  
                               l4909 049F                                 l4861 03DF  
                               l4853 03BF                                 l4845 039F  
                               l4781 01BB                                 l4773 0197  
                               l4765 0173                                 l4757 014F  
                               l4749 012B                                 l3965 0751  
                               l4871 0407                                 l4863 03E7  
                               l4855 03C7                                 l4847 03A7  
                               l4839 0387                                 l4791 01E8  
                               l4783 01C4                                 l4775 01A0  
                               l4767 017C                                 l4759 0158  
                               l3879 051B                                 l4881 042F  
                               l4873 040F                                 l4865 03EF  
                               l4857 03CF                                 l4849 03AF  
                               l4793 01F1                                 l4785 01CD  
                               l4777 01A9                                 l4769 0185  
                               l3969 075E                                 l4891 0457  
                               l4883 0437                                 l4875 0417  
                               l4867 03F7                                 l4859 03D7  
                               l4795 01FA                                 l4787 01D6  
                               l4779 01B2                                 l3979 0771  
                               l4893 045F                                 l4885 043F  
                               l4877 041F                                 l4869 03FF  
                               l4797 0203                                 l4789 01DF  
                               l4895 0467                                 l4887 0447  
                               l4879 0427                                 l4799 020C  
                               l4897 046F                                 l4889 044F  
                               l4985 0C9D                                 l4977 0C72  
                               l4899 0477                                 l4995 0CCE  
                               l4979 0C73                                 l4999 0CF4  
                               STR_1 10BF                                 STR_2 1095  
                               STR_3 10B2                                 STR_4 1055  
                               STR_5 10FD                                 STR_6 1148  
                               STR_7 10E4                                 STR_8 10FB  
                               STR_9 1044                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               _LATD 010F                                 u2305 09D6  
                               _LATE 0110                                 u4100 0961  
                               u2265 09BA                                 u2505 17DB  
                               u4210 0988                                 u4130 096C  
                               u4114 0962               ??_I2C_FunctionComplete 0077  
                               u2435 084C                                 u4204 0983  
                               u4060 0957                                 u2285 09C4  
                               u2365 08D7                                 u2525 17EA  
                               u4230 098F                                 u4150 0973  
                               u2295 09CE                                 u2455 0856  
                               u2535 17F1                                 u4224 098A  
                               u4144 096E                                 u4080 095C  
                               u2385 08E6                                 u2465 0860  
                               u4250 0996                                 u4170 097A  
                               u4074 0958                                 u2395 08ED  
                               u2475 0868                                 u4244 0991  
                               u4164 0975                                 u4190 0981  
                               u4094 095D                                 u4184 097C  
                               u4507 1701                                 u4517 1719  
                               u1975 159C                                 u1985 170F  
                               u1995 1652                                 u4477 1643  
                               u4487 1638                                 u4497 1601  
                               u3865 1583                                 u3875 1588  
                               _TMR0 0015                                 _TMR4 0415  
                               _WPUB 020D                                 _WPUE 0210  
                       __CFG_WRT$OFF 0000                                 _main 1493  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                     __end_of_I2C_Stop 140E  
                               ltemp 007E                   __size_of_LCDPutCmd 0029  
                               start 0045                   __size_of_LCDPutStr 0026  
                               ttemp 007E                                 wtemp 007E  
                      __CFG_IESO$OFF 0000               __end_of_LCD_Initialize 161A  
                      __CFG_MCLRE$ON 0000                      ??_RTCIncMinutes 0041  
     __end_of_I2C_MasterReadTRBBuild 16D2              __end_of_TMR0_Initialize 136C  
                        LCDPutCmd@ch 0047           I2C_MasterReadTRBBuild@ptrb 0047  
                      ?_EUSART_Write 0077       __size_of_OSCILLATOR_Initialize 0006  
         __size_of_DisplayBuzzerData 04A3                     ?_I2C_MasterWrite 0048  
      __end_of_OSCILLATOR_Initialize 131F                  __end_of_DisplayTime 0B23  
                              ?_main 0077                      __end_of___awdiv 09ED  
                              STR_10 10D8                                STR_11 1055  
                              STR_20 119B                                STR_12 114E  
                              STR_13 108F                                STR_21 1197  
                              STR_14 11DB                                STR_22 11CF  
                              STR_30 1187                                STR_15 119F  
                              STR_23 1193                                STR_31 1183  
                              STR_24 11E3                                STR_16 11D7  
                              STR_32 11C3                                STR_40 1173  
                              STR_17 11D3                                STR_25 11BB  
                              STR_41 11B3                                STR_33 117F  
                      __CFG_WDTE$OFF 0000                                STR_34 11BF  
                              STR_18 11A3                                STR_26 1177  
                              STR_42 116F                                STR_50 1033  
                              STR_27 11CB                                STR_19 118F  
                              STR_35 117B                                STR_43 116B  
                              STR_51 112B                                STR_60 1197  
                              STR_44 11AF                                STR_28 118B  
                              STR_36 115F                                STR_52 1086  
                    __end_of___awmod 0904                                STR_61 11CF  
                              STR_53 11DB                                STR_29 11C7  
                              STR_37 11A7                                STR_45 1167  
                              STR_70 1183                                STR_62 1193  
                              STR_54 119F                                STR_46 11AB  
                              STR_38 115B                                STR_71 11C3  
                              STR_55 11D7                                STR_63 11E3  
                              STR_39 11B7                                STR_47 1163  
                              STR_72 117F                                STR_80 11B3  
                              STR_64 11BB                                STR_56 11D3  
                              STR_48 1157                                STR_81 116F  
                              STR_65 1177                                STR_57 11A3  
                              STR_73 11BF                                STR_49 11DF  
                              STR_82 116B                                STR_74 117B  
                              STR_58 118F                                STR_66 11CB  
                              STR_90 1066                                STR_75 115F  
                              STR_67 118B                                STR_59 119B  
                              STR_83 11AF                                STR_91 1122  
                              STR_84 1167                                STR_76 11A7  
                              STR_68 11C7                                STR_92 1153  
                              STR_77 115B                                STR_69 1187  
                              STR_85 11AB                                STR_93 10CC  
                              STR_86 1163                                STR_78 11B7  
                              STR_94 1119                                STR_87 1157  
                              STR_79 1173                                STR_95 1153  
                              STR_88 11DF                                STR_96 10CC  
                              STR_89 1110                                STR_97 10F0  
                              STR_98 1055                                STR_99 1141  
                    _TMR1_StartTimer 1312                      ___awdiv@divisor 0047  
                              _T1CON 0018                        _i2c_trb_count 0033  
                              _T4CON 0417                      __end_of___lwdiv 0877  
                              i1l130 0024                                i1l132 002E  
                              i1l310 0C1E                                i1l302 0BDB  
                              i1l134 0038                                i1l126 0010  
                              i1l128 001A                                i1l321 13B0  
                              i1l314 0C45                                i1l306 0BFC  
                              i1l138 0040                                i1l309 0C10  
                              i1l280 0B36                      __end_of___lwmod 1800  
                              i1l291 0B8C                                i1l292 0B98  
                              i1l285 0B61                                i1l286 0B69  
                              i1l480 14C8                      ___awdiv@counter 004C  
                              _RCREG 0199                                _RCSTA 019D  
                              _TMR1H 0017                                _TMR1L 0016  
                              _PORTD 000F                        SNDSound@onoff 0042  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E                                _TRISD 008F  
                              _TRISE 0090                                _TXREG 019A  
                              _TXSTA 019E                      _TMR4_Initialize 1345  
                     __CFG_FCMEN$OFF 0000                     __end_of_TMR0_ISR 1385  
                   __end_of_TMR1_ISR 1345                __size_of_CheckButtons 0029  
                              _count 002A                   __size_of_RTCDecHrs 000D  
                   __end_of_SNDSound 13DE                                _putch 131F  
                 __size_of_RTCIncHrs 000C              __end_of_TMR1_Initialize 0811  
                     __CFG_BOREN$OFF 0000                     ??_RTCIncDateTime 0077  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                __size_of_LCDPutChar 0023                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
           I2C_MasterTRBInsert@count 0044             I2C_MasterTRBInsert@pflag 0042  
                         _i2c_object 0061                      ?_LCD_Initialize 0077  
                    __initialization 0047                         __end_of_main 14AE  
           __end_of_StateTemperature 07E8                       ??_EUSART_Write 0041  
                          ??_I2C_ISR 0079          ?_INTERRUPT_InterruptManager 0077  
                             ??_main 0061                         _CheckButtons 16D2  
         __size_of_DisplaySplashText 001B                  _I2C_MasterTRBInsert 0877  
                          ??_LCDGoto 0049                       __CFG_PLLEN$OFF 0000  
        I2C_MasterReadTRBBuild@pdata 0041                    __end_of_LCDPutCmd 1724  
                       LCDPutChar@ch 0047                    __end_of_LCDPutStr 16AA  
           ?_I2C_MasterWriteTRBBuild 0041                               _ADCON0 009D  
                             _ADCON1 009E                               i1S5251 07E8  
                             STR_100 1022                               STR_101 1076  
                             STR_110 113A                               STR_102 10A4  
                             STR_111 1133                               STR_103 1055  
                             STR_104 1108                               STR_105 113A  
                             STR_106 1133                               _ADRESH 009C  
                             STR_107 1000                               STR_108 1011  
                             STR_109 1106                               _ADRESL 009B  
                             _CCPR1H 0292                               _CCPR1L 0291  
                   ___awdiv@dividend 0049                               _APFCON 011D  
                             _ANSELA 018C                               ?_putch 0077  
                             _ANSELB 018D                               _ANSELD 018F  
                             _ANSELE 0190                               _T1GCON 0019  
                   StateVoltage@Volt 005B                               i1l4131 0B75  
                             i1l4221 0C49                               i1l4205 0C25  
                             i1l4223 0C4C                               i1l4151 0BB5  
                             i1l4119 0B54                               i1l4231 0C59  
                             i1l4241 142C                               i1l4225 0C50  
                             i1l4209 0C2C                               i1l4137 0B86  
                             i1l4171 0BCA                               i1l4083 1381  
                             i1l3461 16E5                               i1l3471 16F2  
                             i1l3463 16E6                               i1l3455 16DE  
                             i1l4193 0C04                               i1l4185 0BE9  
                             i1l4177 0BD5                               i1l3475 16F8  
                             i1l3459 16E4                               i1l3499 140B  
                             _OSCCON 0099                               _TMR0IF 005A  
                             _TMR1IF 0088                               _SPBRGH 019C  
                             _SPBRGL 019B                         LCDPutStr@str 0048  
                             _SSPADD 0212                               _TRISC2 0472  
                             _SSPBUF 0211                 ?_I2C_MasterTRBInsert 0041  
                             _RTCisr 1333                      _TMR4_StartTimer 130C  
                     _LCDWriteNibble 1597                       __CFG_PWRTE$OFF 0000  
                             _Wait2s 134E                         _CCPTMRS0bits 029E  
                        _DisplayTime 09ED              __end_of_TMR1_StartTimer 1315  
                             ___wmul 1579                            ??___awdiv 004B  
          __size_of_DisplayClockMenu 001D                            ??___awmod 0054  
                  __end_of_RTCDecHrs 1392                   _Buttons_Initialize 094E  
                          ??___lwdiv 004B                            ??___lwmod 0053  
                _EUSART_Transmit_ISR 14AE        I2C_MasterReadTRBBuild@address 0043  
                  __end_of_RTCIncHrs 1378                     ?_TMR0_Initialize 0077  
            __end_of_TMR4_Initialize 134E                     ___awdiv@quotient 004E  
                    ___awmod@divisor 0050              __size_of_I2C_MasterRead 002A  
                    ___awmod@counter 0055              __size_of_I2C_Initialize 0019  
                             _printf 1505                               _pwm_on 006C  
                ?_Buttons_Initialize 0077                           _StateClock 17A3  
                          ?_I2C_Stop 0077                      _DisplayTempMenu 153F  
           ADC_GetConversion@channel 0044                 ?_EUSART_Transmit_ISR 0077  
                   ?_TMR1_Initialize 0077                      _DisplayVoltMenu 155C  
                  _SYSTEM_Initialize 145D               __end_of_LCDWriteNibble 15B7  
            __end_of__initialization 006D                ??_I2C_MasterTRBInsert 0043  
                 ?_SYSTEM_Initialize 0077                 ??_Buttons_Initialize 0041  
                      ??_StateBuzzer 005E                            LCDGoto@ln 0048  
                  ?_EPWM1_Initialize 0077          __size_of_DisplayTemperature 01AA  
                     __pcstackCOMMON 0077                         __pidataBANK0 1315  
                ??_SYSTEM_Initialize 0042                            ?_TMR0_ISR 0077  
                          ?_TMR1_ISR 0077                   ??_EPWM1_Initialize 0041  
                       ??_LCDPutChar 0045                        __end_of_putch 1325  
                          ?_SNDSound 0041      __end_of_I2C_MasterWriteTRBBuild 15D7  
                     _OPTION_REGbits 0095                           ??_I2C_Stop 0077  
            __end_of_TMR4_StartTimer 130F            __end_of_SYSTEM_Initialize 1478  
              ??_EUSART_Transmit_ISR 0077                              ??_putch 0043  
                         __pbssBANK0 0020                           __pbssBANK1 00A0  
               __end_of_EUSART_Write 1684                      ?_LCDWriteNibble 0041  
       I2C_MasterReadTRBBuild@length 0042                   __end_of_LCDPutChar 1660  
                    __CFG_VCAPEN$OFF 0000                              ?_RTCisr 0077  
        __size_of_EUSART_Receive_ISR 001B         __size_of_I2C_BusCollisionISR 0001  
                            ?_Wait2s 0077                __end_of_RTCDecMinutes 13F5  
                         __pmaintext 1493                              ?___wmul 0041  
                   ?_TMR1_StartTimer 0077                           ??_TMR0_ISR 0078  
                         ??_TMR1_ISR 0078                           __pintentry 0004  
                            _CCP1CON 0293                  __end_of_StateBuzzer 094E  
                            _I2C_ISR 0B23                              _ECCP1AS 0295  
                            _BAUDCON 019F                           ??_SNDSound 0042  
                   ?_TMR4_Initialize 0077              __end_of_DisplayTempMenu 155C  
                            ?_printf 0044          I2C_MasterWriteTRBBuild@ptrb 0047  
            __size_of_ADC_Initialize 0008                        _eusartRxCount 002D  
                            _LCDGoto 161A                __end_of_StateClockSet 0783  
                        ?_StateClock 0077              __end_of_DisplayVoltMenu 1579  
                            _OSCSTAT 009A                              _OSCTUNE 0098  
                            _PWM1CON 0294              I2C_Stop@completion_code 0078  
                            _SSPCON1 0215                              _SSPCON3 0217  
                            _SSPSTAT 0214                          _TempButtons 0070  
                   ??_LCD_Initialize 0048        __size_of_I2C_FunctionComplete 0011  
                    __size_of_RTCisr 0009                              _Buttons 003D  
          DisplayTemperature@thermal 005B                      __size_of_Wait2s 0009  
            __size_of_TMR4_StopTimer 0003                     _DisplayClockMenu 1522  
                            ___awdiv 0999                              ___awmod 08BC  
                  ?_StateTemperature 0077                      __size_of___wmul 001E  
                            _debCnt1 002B                              _debCnt2 002C  
            __size_of_DisplayBuzMenu 001D                              ___lwdiv 0840  
                            ___lwmod 17D1                __end_of_RTCIncMinutes 13C8  
                    __CFG_STVREN$OFF 0000                       _I2C_MasterRead 1724  
                     _I2C_Initialize 140E                   ??_StateTemperature 005D  
                            __ptext1 0811                              __ptext2 0E0F  
                            __ptext3 17D1                              __ptext4 0840  
                            __ptext5 155C                              __ptext6 15D7  
                            __ptext7 0783                              __ptext8 174E  
                            __ptext9 15B7                      __size_of_printf 001D  
                          _T1CONbits 0018                _OSCILLATOR_Initialize 1319  
            __size_of_DisplayVoltage 01F1                     ___awmod@dividend 0052  
                          _T4CONbits 0417             ??_PIN_MANAGER_Initialize 0041  
           __size_of_I2C_MasterWrite 002A                            _LCDPutCmd 16FB  
         __size_of_SYSTEM_Initialize 001B                              clrloop0 1326  
                          _LCDPutStr 1684                     ?_TMR4_StartTimer 0077  
               end_of_initialization 006D                        ?_StateInitial 0077  
                       _LCDGoto$1533 004B                 I2C_MasterRead@length 0048  
                  _EUSART_Initialize 1442     __size_of_I2C_MasterWriteTRBBuild 0020  
                   __CFG_CLKOUTEN$ON 0000                          _StateBuzzer 0904  
                __size_of_StateClock 002E                   ?_EUSART_Initialize 0077  
                       ?_DisplayTime 0077                            _RCSTAbits 019D  
                            printf@c 004A                              printf@f 0044  
                      ?_StateVoltage 0077               _DisplayBuzzerData$2035 005B  
             __end_of_I2C_MasterRead 174E               __end_of_I2C_Initialize 1427  
              I2C_MasterWrite@length 0048                         __pstringtext 1000  
                ??_EUSART_Initialize 0041                     ?_DisplayTempMenu 0077  
         StateTemperature@degreeType 005F                            _PORTAbits 000C  
                          _PORTBbits 000D                            _PORTDbits 000F  
                 I2C_ISR@i2c_address 0075                            _RTCDecHrs 1385  
                          _RTCIncHrs 136C                     __CFG_FOSC$INTOSC 0000  
                   ?_DisplayVoltMenu 0077                __size_of_EUSART_Write 0024  
                  __size_of_I2C_Stop 0019                           ?_LCDPutCmd 0077  
                         ?_LCDPutStr 0048     I2C_ISR@i2c_10bit_address_restart 0027  
          __end_of_EUSART_Initialize 145D                       ??_StateInitial 004E  
                         LCDGoto@pos 004D             ??_I2C_MasterReadTRBBuild 0045  
                     __end_of_RTCisr 133C                       ??_StateVoltage 005B  
                  _p_i2c_trb_current 0072                          _I2C_Address 0069  
            __size_of_RTCIncDateTime 001D                       __end_of_Wait2s 1357  
                    ?_I2C_MasterRead 0048                      ?_I2C_Initialize 0077  
                         LCDPutStr@i 004C                       __end_of___wmul 1597  
                       _i2c_tr_queue 003A                         _EUSART_Write 1660  
                  __size_of_TMR0_ISR 000D                    __size_of_TMR1_ISR 0009  
                     _ADC_Initialize 132B               ?_OSCILLATOR_Initialize 0077  
                         ?_RTCDecHrs 0077                    __size_of_SNDSound 0016  
                     __end_of_printf 1522                           ?_RTCIncHrs 0077  
                _I2C_BusCollisionISR 0003                  start_initialization 0047  
          __size_of_EPWM1_Initialize 0010             __size_of_TMR0_Initialize 000B  
    __size_of_PIN_MANAGER_Initialize 002B                     ??_LCDWriteNibble 0042  
                          _i2c_state 0032          __end_of_I2C_MasterTRBInsert 08BC  
                        putch@txData 0043                    ??_I2C_MasterWrite 004C  
                           ??_RTCisr 0078          __size_of_Buttons_Initialize 004B  
         __end_of_DisplayTemperature 0E0F                 ?_I2C_BusCollisionISR 0077  
                           ??_Wait2s 0041             __size_of_TMR1_Initialize 0011  
             DisplayTemperature@type 0057                       _TMR4_StopTimer 130F  
                     _DisplayBuzMenu 14E8                             ??___wmul 0045  
             __end_of_ADC_Initialize 1333                          __pdataBANK0 0069  
                           ?_I2C_ISR 0077                             ??_printf 0046  
                     _DisplayVoltage 0E0F                             ?_LCDGoto 0048  
        __end_of_EUSART_Transmit_ISR 14CB                   DisplayVoltage@volt 0055  
                       ??_StateClock 0059                          __pbssCOMMON 0070  
                          ___latbits 0002                        __pcstackBANK0 0041  
                __end_of__stringdata 11E6                          ??_LCDPutCmd 0045  
       DisplayVoltage@ADC_Conversion 0059                          ??_LCDPutStr 004A  
           __end_of_DisplayClockMenu 153F           __end_of_EUSART_Receive_ISR 1442  
         __size_of_EUSART_Initialize 001B              _I2C_MasterWriteTRBBuild 15B7  
              ??_I2C_BusCollisionISR 0077                            __pnvBANK0 0061  
             __end_of_TMR4_StopTimer 1312               __end_of_DisplayBuzMenu 1505  
                   ___lwdiv@dividend 0049               _PIN_MANAGER_Initialize 1778  
    __size_of_I2C_MasterReadTRBBuild 0028                   __end_of_StateClock 17D1  
                           ?___awdiv 0047                             ?___awmod 0050  
                           ?___lwdiv 0047                             ?___lwmod 004F  
                    ?_ADC_Initialize 0077                 __size_of_DisplayTime 0136  
                       _eusartRxHead 002E                         _eusartTxHead 0030  
                       _eusartRxTail 002F                     LCDWriteNibble@ch 0044  
                   LCDWriteNibble@rs 0041                         _eusartTxTail 0031  
       __end_of_I2C_FunctionComplete 13B3               __end_of_DisplayVoltage 1000  
       ??_INTERRUPT_InterruptManager 007D                        ?_CheckButtons 0077  
                          __pswtext1 07E8                          ??_RTCDecHrs 0041  
               __end_of_StateInitial 1361              _eusartTxBufferRemaining 0068  
                        ??_RTCIncHrs 0041             __size_of_TMR1_StartTimer 0003  
                           _I2C_Stop 13F5             __size_of_TMR4_Initialize 0009  
               __end_of_StateVoltage 0840         I2C_MasterWriteTRBBuild@pdata 0041  
                   ___lwdiv@quotient 004C               __size_of_RTCDecMinutes 0017  
          __size_of_StateTemperature 0065                            _readValue 0040  
                     __size_of_putch 0006                        _p_i2c_current 0071  
                     _eusartRxBuffer 00E0                    ??_TMR0_Initialize 0041  
                     _eusartTxBuffer 00A0                             _TC74_cmd 003F  
                     ___wmul@product 0045                            clear_ram0 1325  
                           _PIE1bits 0091                             _PIE2bits 0092  
                       ?_StateBuzzer 0077                      ?_TMR4_StopTimer 0077  
                I2C_MasterRead@pdata 004E                  I2C_MasterRead@pflag 004B  
__size_of_INTERRUPT_InterruptManager 0041                      ?_DisplayBuzMenu 0077  
             __size_of_StateClockSet 026F                             _PIR1bits 0011  
                           _PIR2bits 0012                             _PIR3bits 0013  
                     _RTCIncDateTime 14CB                 I2C_MasterWrite@pdata 004E  
               I2C_MasterWrite@pflag 004B                             _TMR0_ISR 1378  
                           _TMR1_ISR 133C                  I2C_ISR@pi2c_buf_ptr 0029  
                           _PSTR1CON 0296            DisplayBuzzerData@pwm_freq 005D  
                           _SNDSound 13C8                       ??_CheckButtons 0077  
                   __size_of_I2C_ISR 0142                      ?_DisplayVoltage 0055  
                  ??_TMR1_Initialize 0041                           _ADCON0bits 009D  
                        __stringdata 1000                    ___wmul@multiplier 0041  
             _I2C_MasterReadTRBBuild 16AA                     _EPWM1_Initialize 1392  
                   __size_of_LCDGoto 0023                     StateBuzzer@sound 005F  
         DisplayTemperature@negValue 005C            ??_I2C_MasterWriteTRBBuild 0045  
             __size_of_RTCIncMinutes 0015                     ??_I2C_MasterRead 004C  
                   ??_I2C_Initialize 0041               __end_of_RTCIncDateTime 14E8  
           __size_of_TMR4_StartTimer 0003                           _I2C_status 003E  
                  _ADC_GetConversion 15D7                        _RTCDecMinutes 13DE  
            ??_OSCILLATOR_Initialize 0041              __size_of_LCD_Initialize 0023  
                 ?_ADC_GetConversion 0041                     __size_of___awdiv 0054  
          StateTemperature@tempValue 005E                     __size_of___awmod 0048  
                   __size_of___lwdiv 0037                     __size_of___lwmod 002F  
                ??_ADC_GetConversion 0043                             _dateTime 0020  
                      _StateClockSet 0514                      _I2C_MasterWrite 174E  
                    ___lwdiv@divisor 0047                      ___lwdiv@counter 004E  
           __size_of_DisplayTempMenu 001D                             __ptext10 1724  
                           __ptext11 0877                             __ptext20 1312  
                           __ptext12 16AA                             __ptext21 0514  
                           __ptext13 0C65                           _T1GCONbits 0019  
                           __ptext30 13C8                             __ptext22 13B3  
                           __ptext14 1579                             __ptext31 130C  
                           __ptext23 136C                             __ptext15 153F  
                           __ptext40 163D                             __ptext32 0071  
                           __ptext24 13DE                             __ptext16 1357  
                           __ptext41 161A                             __ptext33 1505  
                           __ptext25 1385                             __ptext17 134E  
                           __ptext50 1392                             __ptext42 145D  
                           __ptext34 131F                             __ptext26 09ED  
                           __ptext18 1478                             __ptext51 132B  
                           __ptext43 1345                             __ptext35 1660  
                           __ptext27 1522                             __ptext19 17A3  
                           __ptext60 1378                             __ptext52 15F7  
                           __ptext44 0800                             __ptext36 08BC  
                           __ptext28 0904                             __ptext61 16D2  
                           __ptext53 16FB                             __ptext45 1361  
                           __ptext37 0999                             __ptext29 130F  
                           __ptext62 0B23                             __ptext54 1597  
                           __ptext46 1778                             __ptext38 14E8  
                           __ptext63 13F5                             __ptext55 094E  
                           __ptext47 1319                             __ptext39 1684  
                           __ptext64 13A2                             __ptext48 140E  
                           __ptext65 0003                             __ptext57 133C  
                           __ptext49 1442                             __ptext66 14AE  
                           __ptext58 1333                             __ptext67 1427  
                           __ptext59 14CB                    ??_TMR1_StartTimer 0041  
       I2C_MasterTRBInsert@ptrb_list 0041             __size_of_DisplayVoltMenu 001D  
                  ??_TMR4_Initialize 0041                        __size_of_main 001B  
               _I2C_FunctionComplete 13A2            __end_of_ADC_GetConversion 15F7  
                    ?_RTCIncDateTime 0077                       ?_RTCDecMinutes 0077  
                           _tmrCount 0074                __size_of_StateInitial 000A  
                           _pwm_freq 006B   __end_of_INTERRUPT_InterruptManager 0045  
         _INTERRUPT_InterruptManager 0004                           _LCDPutChar 163D  
                      _RTCIncMinutes 13B3                   _DisplayTemperature 0C65  
              __size_of_StateVoltage 002F                    _DisplayBuzzerData 0071  
                     ?_StateClockSet 0077                           _INTCONbits 000B  
                 ?_DisplayBuzzerData 0077                  ?_DisplayTemperature 0057  
              I2C_MasterRead@address 0049                     _StateTemperature 0783  
                        pic14e$flags 007E                    ?_DisplayClockMenu 0077  
                           intlevel1 0000                  ??_DisplayBuzzerData 0057  
         __end_of_Buttons_Initialize 0999                ?_I2C_FunctionComplete 0077  
                 ??_DisplayClockMenu 004E                 __end_of_CheckButtons 16FB  
                   ___lwmod@dividend 0051              ?_PIN_MANAGER_Initialize 0077  
              I2C_MasterRead@trBlock 00E8         __size_of_I2C_MasterTRBInsert 0045  
                       _StateInitial 1357                          _timeHasChgd 0035  
                   ??_ADC_Initialize 0041                 ??_DisplayTemperature 0058  
             I2C_MasterWrite@address 0049                 __size_of_StateBuzzer 004A  
                       _StateVoltage 0811                             printf@ap 0049  
                 _EUSART_Receive_ISR 1427                    ??_TMR4_StartTimer 0041  
                     ?_RTCIncMinutes 0077              __end_of_I2C_MasterWrite 1778  
          __end_of_DisplayBuzzerData 0514               I2C_MasterWrite@trBlock 0036  
                         _OPTION_REG 0095                  ?_EUSART_Receive_ISR 0077  
                    ___lwmod@divisor 004F                  _DisplayVoltage$2034 0057  
                    _TMR0_Initialize 1361                      ___lwmod@counter 0054  
                  _DisplaySplashText 1478                          _SSPCON1bits 0215  
                        _SSPCON2bits 0216                   ?_DisplaySplashText 0077  
        __end_of_I2C_BusCollisionISR 0004                   EUSART_Write@txData 0042  
       __size_of_EUSART_Transmit_ISR 001D       __end_of_PIN_MANAGER_Initialize 17A3  
                   ??_TMR4_StopTimer 0041       I2C_MasterWriteTRBBuild@address 0043  
                   ??_DisplayBuzMenu 004E                    ??_DisplayTempMenu 004E  
               ??_EUSART_Receive_ISR 0077                  ??_DisplaySplashText 004E  
                    ??_RTCDecMinutes 0041              __size_of_LCDWriteNibble 0020  
         __size_of_ADC_GetConversion 0020                      _TMR1_Initialize 0800  
           __end_of_EPWM1_Initialize 13A2        I2C_MasterWriteTRBBuild@length 0042  
                      ??_DisplayTime 0057  
