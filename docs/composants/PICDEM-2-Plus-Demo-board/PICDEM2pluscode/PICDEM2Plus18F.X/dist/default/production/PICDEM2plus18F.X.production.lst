

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Apr 29 09:34:56 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	idataCOMRAM
    93  0025EE                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _pwm_freq
    97  0025EE  05                 	db	5
    98                           
    99                           ;initializer for _pwm_on
   100  0025EF  05                 	db	5
   101                           
   102                           	psect	idataBANK0
   103  0025F0                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _I2C_Address
   107  0025F0  004D               	dw	77
   108  0000                     _TMR1	set	4046
   109  0000                     _ADCON0	set	4034
   110  0000                     _ADCON0bits	set	4034
   111  0000                     _ADCON1	set	4033
   112  0000                     _ADCON2	set	4032
   113  0000                     _ADRESH	set	4036
   114  0000                     _ADRESL	set	4035
   115  0000                     _ANSELA	set	3896
   116  0000                     _ANSELB	set	3897
   117  0000                     _ANSELC	set	3898
   118  0000                     _ANSELD	set	3899
   119  0000                     _ANSELE	set	3900
   120  0000                     _BAUD1CON	set	4024
   121  0000                     _CCP1CON	set	4029
   122  0000                     _CCPR1H	set	4031
   123  0000                     _CCPR1L	set	4030
   124  0000                     _CCPTMRS0bits	set	3913
   125  0000                     _ECCP1AS	set	4022
   126  0000                     _INTCON2bits	set	4081
   127  0000                     _INTCONbits	set	4082
   128  0000                     _IPR1bits	set	3999
   129  0000                     _IPR2bits	set	4002
   130  0000                     _LATA	set	3977
   131  0000                     _LATB	set	3978
   132  0000                     _LATC	set	3979
   133  0000                     _LATD	set	3980
   134  0000                     _LATE	set	3981
   135  0000                     _OSCCON	set	4051
   136  0000                     _OSCCON2	set	4050
   137  0000                     _OSCTUNE	set	3995
   138  0000                     _PIE1bits	set	3997
   139  0000                     _PIE2bits	set	4000
   140  0000                     _PIR1bits	set	3998
   141  0000                     _PIR2bits	set	4001
   142  0000                     _PIR5bits	set	3966
   143  0000                     _PORTAbits	set	3968
   144  0000                     _PORTBbits	set	3969
   145  0000                     _PORTD	set	3971
   146  0000                     _PORTDbits	set	3971
   147  0000                     _PR4	set	3922
   148  0000                     _PSTR1CON	set	4025
   149  0000                     _PWM1CON	set	4023
   150  0000                     _RC1REG	set	4014
   151  0000                     _RC1STA	set	4011
   152  0000                     _RC1STAbits	set	4011
   153  0000                     _RCONbits	set	4048
   154  0000                     _RCREG1	set	4014
   155  0000                     _SPBRG1	set	4015
   156  0000                     _SPBRGH1	set	4016
   157  0000                     _SSP1ADD	set	4040
   158  0000                     _SSP1BUF	set	4041
   159  0000                     _SSP1CON1	set	4038
   160  0000                     _SSP1CON1bits	set	4038
   161  0000                     _SSP1CON2bits	set	4037
   162  0000                     _SSP1CON3	set	4043
   163  0000                     _SSP1STAT	set	4039
   164  0000                     _T0CON	set	4053
   165  0000                     _T0CONbits	set	4053
   166  0000                     _T1CON	set	4045
   167  0000                     _T1CONbits	set	4045
   168  0000                     _T1GCON	set	4044
   169  0000                     _T1GCONbits	set	4044
   170  0000                     _T4CON	set	3921
   171  0000                     _T4CONbits	set	3921
   172  0000                     _TMR0H	set	4055
   173  0000                     _TMR0L	set	4054
   174  0000                     _TMR1H	set	4047
   175  0000                     _TMR1L	set	4046
   176  0000                     _TMR4	set	3923
   177  0000                     _TRISA	set	3986
   178  0000                     _TRISB	set	3987
   179  0000                     _TRISC	set	3988
   180  0000                     _TRISD	set	3989
   181  0000                     _TRISE	set	3990
   182  0000                     _TX1REG	set	4013
   183  0000                     _TX1STA	set	4012
   184  0000                     _TXREG1	set	4013
   185  0000                     _WPUB	set	3937
   186  0000                     _TMR1IF	set	31984
   187  0000                     _TRISC2	set	31906
   188                           
   189                           	psect	nvCOMRAM
   190  000041                     __pnvCOMRAM:
   191                           	opt stack 0
   192  000041                     _timer1ReloadVal:
   193                           	opt stack 0
   194  000041                     	ds	2
   195  000043                     _eusart1TxBufferRemaining:
   196                           	opt stack 0
   197  000043                     	ds	1
   198                           
   199                           	psect	nvBANK0
   200  0000DD                     __pnvBANK0:
   201                           	opt stack 0
   202  0000DD                     _i2c1_object:
   203                           	opt stack 0
   204  0000DD                     	ds	7
   205                           
   206                           	psect	mediumconst
   207  00FE18                     __pmediumconst:
   208                           	opt stack 0
   209  00FE18  00                 	db	0
   210  00FE19                     __stringdata:
   211                           	opt stack 0
   212  00FE19                     STR_107:
   213                           
   214                           ; BSR set to: 0
   215  00FE19  52                 	db	82	;'R'
   216  00FE1A  41                 	db	65	;'A'
   217  00FE1B  34                 	db	52	;'4'
   218  00FE1C  3D                 	db	61	;'='
   219  00FE1D  5B                 	db	91	;'['
   220  00FE1E  43                 	db	67	;'C'
   221  00FE1F  5D                 	db	93	;']'
   222  00FE20  20                 	db	32
   223  00FE21  52                 	db	82	;'R'
   224  00FE22  42                 	db	66	;'B'
   225  00FE23  30                 	db	48	;'0'
   226  00FE24  3D                 	db	61	;'='
   227  00FE25  45                 	db	69	;'E'
   228  00FE26  78                 	db	120	;'x'
   229  00FE27  69                 	db	105	;'i'
   230  00FE28  74                 	db	116	;'t'
   231  00FE29  00                 	db	0
   232  00FE2A                     STR_108:
   233                           
   234                           ; BSR set to: 0
   235  00FE2A  52                 	db	82	;'R'
   236  00FE2B  41                 	db	65	;'A'
   237  00FE2C  34                 	db	52	;'4'
   238  00FE2D  3D                 	db	61	;'='
   239  00FE2E  5B                 	db	91	;'['
   240  00FE2F  46                 	db	70	;'F'
   241  00FE30  5D                 	db	93	;']'
   242  00FE31  20                 	db	32
   243  00FE32  52                 	db	82	;'R'
   244  00FE33  42                 	db	66	;'B'
   245  00FE34  30                 	db	48	;'0'
   246  00FE35  3D                 	db	61	;'='
   247  00FE36  45                 	db	69	;'E'
   248  00FE37  78                 	db	120	;'x'
   249  00FE38  69                 	db	105	;'i'
   250  00FE39  74                 	db	116	;'t'
   251  00FE3A  00                 	db	0
   252  00FE3B                     STR_100:
   253                           
   254                           ; BSR set to: 0
   255  00FE3B  52                 	db	82	;'R'
   256  00FE3C  41                 	db	65	;'A'
   257  00FE3D  34                 	db	52	;'4'
   258  00FE3E  3D                 	db	61	;'='
   259  00FE3F  53                 	db	83	;'S'
   260  00FE40  65                 	db	101	;'e'
   261  00FE41  74                 	db	116	;'t'
   262  00FE42  20                 	db	32
   263  00FE43  52                 	db	82	;'R'
   264  00FE44  42                 	db	66	;'B'
   265  00FE45  30                 	db	48	;'0'
   266  00FE46  3D                 	db	61	;'='
   267  00FE47  4D                 	db	77	;'M'
   268  00FE48  65                 	db	101	;'e'
   269  00FE49  6E                 	db	110	;'n'
   270  00FE4A  75                 	db	117	;'u'
   271  00FE4B  00                 	db	0
   272  00FE4C                     STR_50:
   273                           
   274                           ; BSR set to: 0
   275  00FE4C  52                 	db	82	;'R'
   276  00FE4D  41                 	db	65	;'A'
   277  00FE4E  34                 	db	52	;'4'
   278  00FE4F  3D                 	db	61	;'='
   279  00FE50  2B                 	db	43
   280  00FE51  32                 	db	50	;'2'
   281  00FE52  25                 	db	37
   282  00FE53  20                 	db	32
   283  00FE54  52                 	db	82	;'R'
   284  00FE55  42                 	db	66	;'B'
   285  00FE56  30                 	db	48	;'0'
   286  00FE57  3D                 	db	61	;'='
   287  00FE58  45                 	db	69	;'E'
   288  00FE59  78                 	db	120	;'x'
   289  00FE5A  69                 	db	105	;'i'
   290  00FE5B  74                 	db	116	;'t'
   291  00FE5C  00                 	db	0
   292  00FE5D                     STR_9:
   293                           
   294                           ; BSR set to: 0
   295  00FE5D  20                 	db	32
   296  00FE5E  56                 	db	86	;'V'
   297  00FE5F  20                 	db	32
   298  00FE60  20                 	db	32
   299  00FE61  20                 	db	32
   300  00FE62  20                 	db	32
   301  00FE63  41                 	db	65	;'A'
   302  00FE64  44                 	db	68	;'D'
   303  00FE65  43                 	db	67	;'C'
   304  00FE66  20                 	db	32
   305  00FE67  43                 	db	67	;'C'
   306  00FE68  6F                 	db	111	;'o'
   307  00FE69  75                 	db	117	;'u'
   308  00FE6A  6E                 	db	110	;'n'
   309  00FE6B  74                 	db	116	;'t'
   310  00FE6C  3A                 	db	58	;':'
   311  00FE6D  00                 	db	0
   312  00FE6E                     STR_4:
   313                           
   314                           ; BSR set to: 0
   315  00FE6E  52                 	db	82	;'R'
   316  00FE6F  41                 	db	65	;'A'
   317  00FE70  34                 	db	52	;'4'
   318  00FE71  3D                 	db	61	;'='
   319  00FE72  4E                 	db	78	;'N'
   320  00FE73  65                 	db	101	;'e'
   321  00FE74  78                 	db	120	;'x'
   322  00FE75  74                 	db	116	;'t'
   323  00FE76  20                 	db	32
   324  00FE77  52                 	db	82	;'R'
   325  00FE78  42                 	db	66	;'B'
   326  00FE79  30                 	db	48	;'0'
   327  00FE7A  3D                 	db	61	;'='
   328  00FE7B  4E                 	db	78	;'N'
   329  00FE7C  6F                 	db	111	;'o'
   330  00FE7D  77                 	db	119	;'w'
   331  00FE7E  00                 	db	0
   332  00FE7F                     STR_90:
   333                           
   334                           ; BSR set to: 0
   335  00FE7F  52                 	db	82	;'R'
   336  00FE80  42                 	db	66	;'B'
   337  00FE81  3A                 	db	58	;':'
   338  00FE82  5B                 	db	91	;'['
   339  00FE83  4D                 	db	77	;'M'
   340  00FE84  49                 	db	73	;'I'
   341  00FE85  4E                 	db	78	;'N'
   342  00FE86  5D                 	db	93	;']'
   343  00FE87  20                 	db	32
   344  00FE88  20                 	db	32
   345  00FE89  54                 	db	84	;'T'
   346  00FE8A  49                 	db	73	;'I'
   347  00FE8B  4D                 	db	77	;'M'
   348  00FE8C  45                 	db	69	;'E'
   349  00FE8D  20                 	db	32
   350  00FE8E  00                 	db	0
   351  00FE8F                     STR_101:
   352                           
   353                           ; BSR set to: 0
   354  00FE8F  0D                 	db	13
   355  00FE90  0A                 	db	10
   356  00FE91  53                 	db	83	;'S'
   357  00FE92  79                 	db	121	;'y'
   358  00FE93  73                 	db	115	;'s'
   359  00FE94  74                 	db	116	;'t'
   360  00FE95  65                 	db	101	;'e'
   361  00FE96  6D                 	db	109	;'m'
   362  00FE97  20                 	db	32
   363  00FE98  54                 	db	84	;'T'
   364  00FE99  69                 	db	105	;'i'
   365  00FE9A  6D                 	db	109	;'m'
   366  00FE9B  65                 	db	101	;'e'
   367  00FE9C  20                 	db	32
   368  00FE9D  3A                 	db	58	;':'
   369  00FE9E  00                 	db	0
   370  00FE9F                     STR_52:
   371                           
   372                           ; BSR set to: 0
   373  00FE9F  20                 	db	32
   374  00FEA0  20                 	db	32
   375  00FEA1  20                 	db	32
   376  00FEA2  20                 	db	32
   377  00FEA3  20                 	db	32
   378  00FEA4  20                 	db	32
   379  00FEA5  20                 	db	32
   380  00FEA6  20                 	db	32
   381  00FEA7  20                 	db	32
   382  00FEA8  20                 	db	32
   383  00FEA9  4B                 	db	75	;'K'
   384  00FEAA  65                 	db	101	;'e'
   385  00FEAB  79                 	db	121	;'y'
   386  00FEAC  3A                 	db	58	;':'
   387  00FEAD  00                 	db	0
   388  00FEAE                     STR_2:
   389                           
   390                           ; BSR set to: 0
   391  00FEAE  20                 	db	32
   392  00FEAF  50                 	db	80	;'P'
   393  00FEB0  49                 	db	73	;'I'
   394  00FEB1  43                 	db	67	;'C'
   395  00FEB2  44                 	db	68	;'D'
   396  00FEB3  45                 	db	69	;'E'
   397  00FEB4  4D                 	db	77	;'M'
   398  00FEB5  20                 	db	32
   399  00FEB6  32                 	db	50	;'2'
   400  00FEB7  20                 	db	32
   401  00FEB8  50                 	db	80	;'P'
   402  00FEB9  4C                 	db	76	;'L'
   403  00FEBA  55                 	db	85	;'U'
   404  00FEBB  53                 	db	83	;'S'
   405  00FEBC  00                 	db	0
   406  00FEBD                     STR_102:
   407                           
   408                           ; BSR set to: 0
   409  00FEBD  20                 	db	32
   410  00FEBE  20                 	db	32
   411  00FEBF  54                 	db	84	;'T'
   412  00FEC0  65                 	db	101	;'e'
   413  00FEC1  6D                 	db	109	;'m'
   414  00FEC2  70                 	db	112	;'p'
   415  00FEC3  65                 	db	101	;'e'
   416  00FEC4  72                 	db	114	;'r'
   417  00FEC5  61                 	db	97	;'a'
   418  00FEC6  74                 	db	116	;'t'
   419  00FEC7  75                 	db	117	;'u'
   420  00FEC8  72                 	db	114	;'r'
   421  00FEC9  65                 	db	101	;'e'
   422  00FECA  00                 	db	0
   423  00FECB                     STR_3:
   424                           
   425                           ; BSR set to: 0
   426  00FECB  20                 	db	32
   427  00FECC  20                 	db	32
   428  00FECD  20                 	db	32
   429  00FECE  56                 	db	86	;'V'
   430  00FECF  6F                 	db	111	;'o'
   431  00FED0  6C                 	db	108	;'l'
   432  00FED1  74                 	db	116	;'t'
   433  00FED2  6D                 	db	109	;'m'
   434  00FED3  65                 	db	101	;'e'
   435  00FED4  74                 	db	116	;'t'
   436  00FED5  65                 	db	101	;'e'
   437  00FED6  72                 	db	114	;'r'
   438  00FED7  00                 	db	0
   439  00FED8                     STR_1:
   440                           
   441                           ; BSR set to: 0
   442  00FED8  20                 	db	32
   443  00FED9  20                 	db	32
   444  00FEDA  20                 	db	32
   445  00FEDB  4D                 	db	77	;'M'
   446  00FEDC  69                 	db	105	;'i'
   447  00FEDD  63                 	db	99	;'c'
   448  00FEDE  72                 	db	114	;'r'
   449  00FEDF  6F                 	db	111	;'o'
   450  00FEE0  63                 	db	99	;'c'
   451  00FEE1  68                 	db	104	;'h'
   452  00FEE2  69                 	db	105	;'i'
   453  00FEE3  70                 	db	112	;'p'
   454  00FEE4  00                 	db	0
   455  00FEE5                     STR_93:
   456                           
   457                           ; BSR set to: 0
   458  00FEE5  20                 	db	32
   459  00FEE6  20                 	db	32
   460  00FEE7  20                 	db	32
   461  00FEE8  20                 	db	32
   462  00FEE9  52                 	db	82	;'R'
   463  00FEEA  42                 	db	66	;'B'
   464  00FEEB  3A                 	db	58	;':'
   465  00FEEC  4E                 	db	78	;'N'
   466  00FEED  65                 	db	101	;'e'
   467  00FEEE  78                 	db	120	;'x'
   468  00FEEF  74                 	db	116	;'t'
   469  00FEF0  00                 	db	0
   470  00FEF1                     STR_10:
   471                           
   472                           ; BSR set to: 0
   473  00FEF1  20                 	db	32
   474  00FEF2  20                 	db	32
   475  00FEF3  20                 	db	32
   476  00FEF4  20                 	db	32
   477  00FEF5  20                 	db	32
   478  00FEF6  42                 	db	66	;'B'
   479  00FEF7  75                 	db	117	;'u'
   480  00FEF8  7A                 	db	122	;'z'
   481  00FEF9  7A                 	db	122	;'z'
   482  00FEFA  65                 	db	101	;'e'
   483  00FEFB  72                 	db	114	;'r'
   484  00FEFC  00                 	db	0
   485  00FEFD                     STR_7:
   486                           
   487                           ; BSR set to: 0
   488  00FEFD  5D                 	db	93	;']'
   489  00FEFE  20                 	db	32
   490  00FEFF  52                 	db	82	;'R'
   491  00FF00  42                 	db	66	;'B'
   492  00FF01  30                 	db	48	;'0'
   493  00FF02  3D                 	db	61	;'='
   494  00FF03  20                 	db	32
   495  00FF04  45                 	db	69	;'E'
   496  00FF05  78                 	db	120	;'x'
   497  00FF06  69                 	db	105	;'i'
   498  00FF07  74                 	db	116	;'t'
   499  00FF08  00                 	db	0
   500  00FF09                     STR_97:
   501                           
   502                           ; BSR set to: 0
   503  00FF09  20                 	db	32
   504  00FF0A  20                 	db	32
   505  00FF0B  20                 	db	32
   506  00FF0C  20                 	db	32
   507  00FF0D  20                 	db	32
   508  00FF0E  43                 	db	67	;'C'
   509  00FF0F  6C                 	db	108	;'l'
   510  00FF10  6F                 	db	111	;'o'
   511  00FF11  63                 	db	99	;'c'
   512  00FF12  6B                 	db	107	;'k'
   513  00FF13  00                 	db	0
   514  00FF14                     STR_8:
   515                           
   516                           ; BSR set to: 0
   517  00FF14  0D                 	db	13
   518  00FF15  0A                 	db	10
   519  00FF16  56                 	db	86	;'V'
   520  00FF17  6F                 	db	111	;'o'
   521  00FF18  6C                 	db	108	;'l'
   522  00FF19  74                 	db	116	;'t'
   523  00FF1A  73                 	db	115	;'s'
   524  00FF1B  20                 	db	32
   525  00FF1C  3D                 	db	61	;'='
   526  00FF1D  20                 	db	32
   527  00FF1E  00                 	db	0
   528  00FF1F                     STR_109:
   529                           
   530                           ; BSR set to: 0
   531  00FF1F  0A                 	db	10
   532  00FF20  0D                 	db	13
   533  00FF21  54                 	db	84	;'T'
   534  00FF22  65                 	db	101	;'e'
   535  00FF23  6D                 	db	109	;'m'
   536  00FF24  70                 	db	112	;'p'
   537  00FF25  20                 	db	32
   538  00FF26  3D                 	db	61	;'='
   539  00FF27  20                 	db	32
   540  00FF28  00                 	db	0
   541  00FF29                     STR_89:
   542                           
   543                           ; BSR set to: 0
   544  00FF29  52                 	db	82	;'R'
   545  00FF2A  41                 	db	65	;'A'
   546  00FF2B  3A                 	db	58	;':'
   547  00FF2C  5B                 	db	91	;'['
   548  00FF2D  48                 	db	72	;'H'
   549  00FF2E  52                 	db	82	;'R'
   550  00FF2F  5D                 	db	93	;']'
   551  00FF30  20                 	db	32
   552  00FF31  00                 	db	0
   553  00FF32                     STR_94:
   554                           
   555                           ; BSR set to: 0
   556  00FF32  20                 	db	32
   557  00FF33  20                 	db	32
   558  00FF34  2A                 	db	42
   559  00FF35  5B                 	db	91	;'['
   560  00FF36  4D                 	db	77	;'M'
   561  00FF37  49                 	db	73	;'I'
   562  00FF38  4E                 	db	78	;'N'
   563  00FF39  5D                 	db	93	;']'
   564  00FF3A  00                 	db	0
   565  00FF3B                     STR_91:
   566                           
   567                           ; BSR set to: 0
   568  00FF3B  20                 	db	32
   569  00FF3C  20                 	db	32
   570  00FF3D  2A                 	db	42
   571  00FF3E  5B                 	db	91	;'['
   572  00FF3F  48                 	db	72	;'H'
   573  00FF40  52                 	db	82	;'R'
   574  00FF41  53                 	db	83	;'S'
   575  00FF42  5D                 	db	93	;']'
   576  00FF43  00                 	db	0
   577  00FF44                     STR_51:
   578                           
   579                           ; BSR set to: 0
   580  00FF44  0D                 	db	13
   581  00FF45  0A                 	db	10
   582  00FF46  50                 	db	80	;'P'
   583  00FF47  57                 	db	87	;'W'
   584  00FF48  4D                 	db	77	;'M'
   585  00FF49  3A                 	db	58	;':'
   586  00FF4A  20                 	db	32
   587  00FF4B  00                 	db	0
   588  00FF4C                     STR_106:
   589                           
   590                           ; BSR set to: 0
   591  00FF4C  5B                 	db	91	;'['
   592  00FF4D  43                 	db	67	;'C'
   593  00FF4E  5D                 	db	93	;']'
   594  00FF4F  20                 	db	32
   595  00FF50  20                 	db	32
   596  00FF51  20                 	db	32
   597  00FF52  00                 	db	0
   598  00FF53                     STR_105:
   599                           
   600                           ; BSR set to: 0
   601  00FF53  5B                 	db	91	;'['
   602  00FF54  46                 	db	70	;'F'
   603  00FF55  5D                 	db	93	;']'
   604  00FF56  20                 	db	32
   605  00FF57  20                 	db	32
   606  00FF58  20                 	db	32
   607  00FF59  00                 	db	0
   608  00FF5A                     STR_99:
   609                           
   610                           ; BSR set to: 0
   611  00FF5A  54                 	db	84	;'T'
   612  00FF5B  49                 	db	73	;'I'
   613  00FF5C  4D                 	db	77	;'M'
   614  00FF5D  45                 	db	69	;'E'
   615  00FF5E  20                 	db	32
   616  00FF5F  20                 	db	32
   617  00FF60  00                 	db	0
   618  00FF61                     STR_6:
   619                           
   620                           ; BSR set to: 0
   621  00FF61  20                 	db	32
   622  00FF62  56                 	db	86	;'V'
   623  00FF63  20                 	db	32
   624  00FF64  20                 	db	32
   625  00FF65  20                 	db	32
   626  00FF66  00                 	db	0
   627  00FF67                     STR_12:
   628                           
   629                           ; BSR set to: 0
   630  00FF67  50                 	db	80	;'P'
   631  00FF68  57                 	db	87	;'W'
   632  00FF69  4D                 	db	77	;'M'
   633  00FF6A  3A                 	db	58	;':'
   634  00FF6B  00                 	db	0
   635  00FF6C                     STR_92:
   636                           
   637                           ; BSR set to: 0
   638  00FF6C  52                 	db	82	;'R'
   639  00FF6D  41                 	db	65	;'A'
   640  00FF6E  3A                 	db	58	;':'
   641  00FF6F  00                 	db	0
   642  00FF70                     STR_48:
   643                           
   644                           ; BSR set to: 0
   645  00FF70  42                 	db	66	;'B'
   646  00FF71  33                 	db	51	;'3'
   647  00FF72  20                 	db	32
   648  00FF73  00                 	db	0
   649  00FF74                     STR_38:
   650                           
   651                           ; BSR set to: 0
   652  00FF74  41                 	db	65	;'A'
   653  00FF75  34                 	db	52	;'4'
   654  00FF76  20                 	db	32
   655  00FF77  00                 	db	0
   656  00FF78                     STR_36:
   657                           
   658                           ; BSR set to: 0
   659  00FF78  42                 	db	66	;'B'
   660  00FF79  34                 	db	52	;'4'
   661  00FF7A  20                 	db	32
   662  00FF7B  00                 	db	0
   663  00FF7C                     STR_47:
   664                           
   665                           ; BSR set to: 0
   666  00FF7C  43                 	db	67	;'C'
   667  00FF7D  34                 	db	52	;'4'
   668  00FF7E  20                 	db	32
   669  00FF7F  00                 	db	0
   670  00FF80                     STR_45:
   671                           
   672                           ; BSR set to: 0
   673  00FF80  44                 	db	68	;'D'
   674  00FF81  34                 	db	52	;'4'
   675  00FF82  20                 	db	32
   676  00FF83  00                 	db	0
   677  00FF84                     STR_43:
   678                           
   679                           ; BSR set to: 0
   680  00FF84  45                 	db	69	;'E'
   681  00FF85  34                 	db	52	;'4'
   682  00FF86  20                 	db	32
   683  00FF87  00                 	db	0
   684  00FF88                     STR_42:
   685                           
   686                           ; BSR set to: 0
   687  00FF88  46                 	db	70	;'F'
   688  00FF89  34                 	db	52	;'4'
   689  00FF8A  20                 	db	32
   690  00FF8B  00                 	db	0
   691  00FF8C                     STR_40:
   692                           
   693                           ; BSR set to: 0
   694  00FF8C  47                 	db	71	;'G'
   695  00FF8D  34                 	db	52	;'4'
   696  00FF8E  20                 	db	32
   697  00FF8F  00                 	db	0
   698  00FF90                     STR_26:
   699                           
   700                           ; BSR set to: 0
   701  00FF90  41                 	db	65	;'A'
   702  00FF91  35                 	db	53	;'5'
   703  00FF92  20                 	db	32
   704  00FF93  00                 	db	0
   705  00FF94                     STR_35:
   706                           
   707                           ; BSR set to: 0
   708  00FF94  43                 	db	67	;'C'
   709  00FF95  35                 	db	53	;'5'
   710  00FF96  20                 	db	32
   711  00FF97  00                 	db	0
   712  00FF98                     STR_33:
   713                           
   714                           ; BSR set to: 0
   715  00FF98  44                 	db	68	;'D'
   716  00FF99  35                 	db	53	;'5'
   717  00FF9A  20                 	db	32
   718  00FF9B  00                 	db	0
   719  00FF9C                     STR_31:
   720                           
   721                           ; BSR set to: 0
   722  00FF9C  45                 	db	69	;'E'
   723  00FF9D  35                 	db	53	;'5'
   724  00FF9E  20                 	db	32
   725  00FF9F  00                 	db	0
   726  00FFA0                     STR_30:
   727                           
   728                           ; BSR set to: 0
   729  00FFA0  46                 	db	70	;'F'
   730  00FFA1  35                 	db	53	;'5'
   731  00FFA2  20                 	db	32
   732  00FFA3  00                 	db	0
   733  00FFA4                     STR_28:
   734                           
   735                           ; BSR set to: 0
   736  00FFA4  47                 	db	71	;'G'
   737  00FFA5  35                 	db	53	;'5'
   738  00FFA6  20                 	db	32
   739  00FFA7  00                 	db	0
   740  00FFA8                     STR_19:
   741                           
   742                           ; BSR set to: 0
   743  00FFA8  41                 	db	65	;'A'
   744  00FFA9  36                 	db	54	;'6'
   745  00FFAA  20                 	db	32
   746  00FFAB  00                 	db	0
   747  00FFAC                     STR_23:
   748                           
   749                           ; BSR set to: 0
   750  00FFAC  44                 	db	68	;'D'
   751  00FFAD  36                 	db	54	;'6'
   752  00FFAE  20                 	db	32
   753  00FFAF  00                 	db	0
   754  00FFB0                     STR_21:
   755                           
   756                           ; BSR set to: 0
   757  00FFB0  46                 	db	70	;'F'
   758  00FFB1  36                 	db	54	;'6'
   759  00FFB2  20                 	db	32
   760  00FFB3  00                 	db	0
   761  00FFB4                     STR_20:
   762                           
   763                           ; BSR set to: 0
   764  00FFB4  47                 	db	71	;'G'
   765  00FFB5  36                 	db	54	;'6'
   766  00FFB6  20                 	db	32
   767  00FFB7  00                 	db	0
   768  00FFB8                     STR_15:
   769                           
   770                           ; BSR set to: 0
   771  00FFB8  42                 	db	66	;'B'
   772  00FFB9  37                 	db	55	;'7'
   773  00FFBA  20                 	db	32
   774  00FFBB  00                 	db	0
   775  00FFBC                     STR_18:
   776                           
   777                           ; BSR set to: 0
   778  00FFBC  43                 	db	67	;'C'
   779  00FFBD  37                 	db	55	;'7'
   780  00FFBE  20                 	db	32
   781  00FFBF  00                 	db	0
   782  00FFC0                     STR_37:
   783                           
   784                           ; BSR set to: 0
   785  00FFC0  41                 	db	65	;'A'
   786  00FFC1  34                 	db	52	;'4'
   787  00FFC2  23                 	db	35
   788  00FFC3  00                 	db	0
   789  00FFC4                     STR_46:
   790                           
   791                           ; BSR set to: 0
   792  00FFC4  43                 	db	67	;'C'
   793  00FFC5  34                 	db	52	;'4'
   794  00FFC6  23                 	db	35
   795  00FFC7  00                 	db	0
   796  00FFC8                     STR_44:
   797                           
   798                           ; BSR set to: 0
   799  00FFC8  44                 	db	68	;'D'
   800  00FFC9  34                 	db	52	;'4'
   801  00FFCA  23                 	db	35
   802  00FFCB  00                 	db	0
   803  00FFCC                     STR_41:
   804                           
   805                           ; BSR set to: 0
   806  00FFCC  46                 	db	70	;'F'
   807  00FFCD  34                 	db	52	;'4'
   808  00FFCE  23                 	db	35
   809  00FFCF  00                 	db	0
   810  00FFD0                     STR_39:
   811                           
   812                           ; BSR set to: 0
   813  00FFD0  47                 	db	71	;'G'
   814  00FFD1  34                 	db	52	;'4'
   815  00FFD2  23                 	db	35
   816  00FFD3  00                 	db	0
   817  00FFD4                     STR_25:
   818                           
   819                           ; BSR set to: 0
   820  00FFD4  41                 	db	65	;'A'
   821  00FFD5  35                 	db	53	;'5'
   822  00FFD6  23                 	db	35
   823  00FFD7  00                 	db	0
   824  00FFD8                     STR_34:
   825                           
   826                           ; BSR set to: 0
   827  00FFD8  43                 	db	67	;'C'
   828  00FFD9  35                 	db	53	;'5'
   829  00FFDA  23                 	db	35
   830  00FFDB  00                 	db	0
   831  00FFDC                     STR_32:
   832                           
   833                           ; BSR set to: 0
   834  00FFDC  44                 	db	68	;'D'
   835  00FFDD  35                 	db	53	;'5'
   836  00FFDE  23                 	db	35
   837  00FFDF  00                 	db	0
   838  00FFE0                     STR_29:
   839                           
   840                           ; BSR set to: 0
   841  00FFE0  46                 	db	70	;'F'
   842  00FFE1  35                 	db	53	;'5'
   843  00FFE2  23                 	db	35
   844  00FFE3  00                 	db	0
   845  00FFE4                     STR_27:
   846                           
   847                           ; BSR set to: 0
   848  00FFE4  47                 	db	71	;'G'
   849  00FFE5  35                 	db	53	;'5'
   850  00FFE6  23                 	db	35
   851  00FFE7  00                 	db	0
   852  00FFE8                     STR_22:
   853                           
   854                           ; BSR set to: 0
   855  00FFE8  44                 	db	68	;'D'
   856  00FFE9  36                 	db	54	;'6'
   857  00FFEA  23                 	db	35
   858  00FFEB  00                 	db	0
   859  00FFEC                     STR_17:
   860                           
   861                           ; BSR set to: 0
   862  00FFEC  44                 	db	68	;'D'
   863  00FFED  37                 	db	55	;'7'
   864  00FFEE  23                 	db	35
   865  00FFEF  00                 	db	0
   866  00FFF0                     STR_16:
   867                           
   868                           ; BSR set to: 0
   869  00FFF0  46                 	db	70	;'F'
   870  00FFF1  37                 	db	55	;'7'
   871  00FFF2  23                 	db	35
   872  00FFF3  00                 	db	0
   873  00FFF4                     STR_14:
   874                           
   875                           ; BSR set to: 0
   876  00FFF4  44                 	db	68	;'D'
   877  00FFF5  38                 	db	56	;'8'
   878  00FFF6  23                 	db	35
   879  00FFF7  00                 	db	0
   880  00FFF8                     STR_49:
   881                           
   882                           ; BSR set to: 0
   883  00FFF8  2D                 	db	45
   884  00FFF9  2D                 	db	45
   885  00FFFA  2D                 	db	45
   886  00FFFB  00                 	db	0
   887  00FFFC                     STR_24:
   888                           
   889                           ; BSR set to: 0
   890  00FFFC  43                 	db	67	;'C'
   891  00FFFD  36                 	db	54	;'6'
   892  00FFFE  00                 	db	0
   893  00FFFF                     __end_of__stringdata:
   894                           	opt stack 0
   895                           
   896                           ; #config settings
   897  00FFFF  00                 	db	0	; dummy byte at the end
   898  0000                     
   899                           	psect	cinit
   900  001EF4                     __pcinit:
   901                           	opt stack 0
   902  001EF4                     start_initialization:
   903                           	opt stack 0
   904  001EF4                     __initialization:
   905                           	opt stack 0
   906                           
   907                           ; Clear objects allocated to BANK0 (91 bytes)
   908  001EF4  EE00  F060         	lfsr	0,__pbssBANK0
   909  001EF8  0E5B               	movlw	91
   910  001EFA                     clear_0:
   911  001EFA  6AEE               	clrf	postinc0,c
   912  001EFC  06E8               	decf	wreg,f,c
   913  001EFE  E1FD               	bnz	clear_0
   914                           
   915                           ; Clear objects allocated to COMRAM (32 bytes)
   916  001F00  EE00  F001         	lfsr	0,__pbssCOMRAM
   917  001F04  0E20               	movlw	32
   918  001F06                     clear_1:
   919  001F06  6AEE               	clrf	postinc0,c
   920  001F08  06E8               	decf	wreg,f,c
   921  001F0A  E1FD               	bnz	clear_1
   922                           
   923                           ; Initialize objects allocated to BANK0 (2 bytes)
   924                           ; load TBLPTR registers with __pidataBANK0
   925  001F0C  0EF0               	movlw	low __pidataBANK0
   926  001F0E  6EF6               	movwf	tblptrl,c
   927  001F10  0E25               	movlw	high __pidataBANK0
   928  001F12  6EF7               	movwf	tblptrh,c
   929  001F14  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   930  001F16  6EF8               	movwf	tblptru,c
   931  001F18  0009               	tblrd		*+	;fetch initializer
   932  001F1A  CFF5 F0E4          	movff	tablat,__pdataBANK0
   933  001F1E  0009               	tblrd		*+	;fetch initializer
   934  001F20  CFF5 F0E5          	movff	tablat,__pdataBANK0+1
   935                           
   936                           ; Initialize objects allocated to COMRAM (2 bytes)
   937                           ; load TBLPTR registers with __pidataCOMRAM
   938  001F24  0EEE               	movlw	low __pidataCOMRAM
   939  001F26  6EF6               	movwf	tblptrl,c
   940  001F28  0E25               	movlw	high __pidataCOMRAM
   941  001F2A  6EF7               	movwf	tblptrh,c
   942  001F2C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   943  001F2E  6EF8               	movwf	tblptru,c
   944  001F30  0009               	tblrd		*+	;fetch initializer
   945  001F32  CFF5 F044          	movff	tablat,__pdataCOMRAM
   946  001F36  0009               	tblrd		*+	;fetch initializer
   947  001F38  CFF5 F045          	movff	tablat,__pdataCOMRAM+1
   948  001F3C                     end_of_initialization:
   949                           	opt stack 0
   950  001F3C                     __end_of__initialization:
   951                           	opt stack 0
   952  001F3C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   953  001F3E  6EF8               	movwf	tblptru,c
   954  001F40  0100               	movlb	0
   955  001F42  EFF7  F011         	goto	_main	;jump to C main() function
   956                           tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           
   963                           	psect	bssCOMRAM
   964  000001                     __pbssCOMRAM:
   965                           	opt stack 0
   966  000001                     _dateTime:
   967                           	opt stack 0
   968  000001                     	ds	7
   969  000008                     I2C1_ISR@pi2c_buf_ptr:
   970                           	opt stack 0
   971  000008                     	ds	2
   972  00000A                     _p_i2c1_current:
   973                           	opt stack 0
   974  00000A                     	ds	2
   975  00000C                     _p_i2c1_trb_current:
   976                           	opt stack 0
   977  00000C                     	ds	2
   978  00000E                     I2C1_ISR@i2c_10bit_address_restart:
   979                           	opt stack 0
   980  00000E                     	ds	1
   981  00000F                     I2C1_ISR@i2c_bytes_left:
   982                           	opt stack 0
   983  00000F                     	ds	1
   984  000010                     _TempButtons:
   985                           	opt stack 0
   986  000010                     	ds	1
   987  000011                     _count:
   988                           	opt stack 0
   989  000011                     	ds	1
   990  000012                     _debCnt1:
   991                           	opt stack 0
   992  000012                     	ds	1
   993  000013                     _debCnt2:
   994                           	opt stack 0
   995  000013                     	ds	1
   996  000014                     _eusart1RxCount:
   997                           	opt stack 0
   998  000014                     	ds	1
   999  000015                     _eusart1RxHead:
  1000                           	opt stack 0
  1001  000015                     	ds	1
  1002  000016                     _eusart1RxTail:
  1003                           	opt stack 0
  1004  000016                     	ds	1
  1005  000017                     _eusart1TxHead:
  1006                           	opt stack 0
  1007  000017                     	ds	1
  1008  000018                     _eusart1TxTail:
  1009                           	opt stack 0
  1010  000018                     	ds	1
  1011  000019                     _i2c1_state:
  1012                           	opt stack 0
  1013  000019                     	ds	1
  1014  00001A                     _i2c1_trb_count:
  1015                           	opt stack 0
  1016  00001A                     	ds	1
  1017  00001B                     _set:
  1018                           	opt stack 0
  1019  00001B                     	ds	1
  1020  00001C                     _timeHasChgd:
  1021                           	opt stack 0
  1022  00001C                     	ds	1
  1023  00001D                     _timer0ReloadVal8bit:
  1024                           	opt stack 0
  1025  00001D                     	ds	1
  1026  00001E                     _tmrCount:
  1027                           	opt stack 0
  1028  00001E                     	ds	1
  1029  00001F                     I2C1_ISR@i2c_address:
  1030                           	opt stack 0
  1031  00001F                     	ds	2
  1032                           tblptru	equ	0xFF8
  1033                           tblptrh	equ	0xFF7
  1034                           tblptrl	equ	0xFF6
  1035                           tablat	equ	0xFF5
  1036                           postinc0	equ	0xFEE
  1037                           wreg	equ	0xFE8
  1038                           
  1039                           	psect	dataCOMRAM
  1040  000044                     __pdataCOMRAM:
  1041                           	opt stack 0
  1042  000044                     _pwm_freq:
  1043                           	opt stack 0
  1044  000044                     	ds	1
  1045  000045                     _pwm_on:
  1046                           	opt stack 0
  1047  000045                     	ds	1
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           
  1055                           	psect	bssBANK0
  1056  000060                     __pbssBANK0:
  1057                           	opt stack 0
  1058  000060                     _eusart1TxBuffer:
  1059                           	opt stack 0
  1060  000060                     	ds	64
  1061  0000A0                     _eusart1RxBuffer:
  1062                           	opt stack 0
  1063  0000A0                     	ds	8
  1064  0000A8                     I2C1_MasterRead@trBlock:
  1065                           	opt stack 0
  1066  0000A8                     	ds	5
  1067  0000AD                     I2C1_MasterWrite@trBlock:
  1068                           	opt stack 0
  1069  0000AD                     	ds	5
  1070  0000B2                     _i2c1_tr_queue:
  1071                           	opt stack 0
  1072  0000B2                     	ds	5
  1073  0000B7                     _Buttons:
  1074                           	opt stack 0
  1075  0000B7                     	ds	1
  1076  0000B8                     _I2C_status:
  1077                           	opt stack 0
  1078  0000B8                     	ds	1
  1079  0000B9                     _TC74_cmd:
  1080                           	opt stack 0
  1081  0000B9                     	ds	1
  1082  0000BA                     _readValue:
  1083                           	opt stack 0
  1084  0000BA                     	ds	1
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           
  1092                           	psect	dataBANK0
  1093  0000E4                     __pdataBANK0:
  1094                           	opt stack 0
  1095  0000E4                     _I2C_Address:
  1096                           	opt stack 0
  1097  0000E4                     	ds	2
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           
  1105                           	psect	cstackBANK0
  1106  0000BB                     __pcstackBANK0:
  1107                           	opt stack 0
  1108  0000BB                     ??_INTERRUPT_InterruptManagerHigh:
  1109                           
  1110                           ; 0 bytes @ 0x0
  1111  0000BB                     	ds	14
  1112  0000C9                     ??_LCDPutStr:
  1113  0000C9                     ??_LCDGoto:
  1114  0000C9                     ?___lwdiv:
  1115                           	opt stack 0
  1116  0000C9                     I2C1_MasterTRBInsert@count:
  1117                           	opt stack 0
  1118  0000C9                     ___awdiv@counter:
  1119                           	opt stack 0
  1120  0000C9                     I2C1_MasterReadTRBBuild@ptrb:
  1121                           	opt stack 0
  1122  0000C9                     I2C1_MasterWriteTRBBuild@ptrb:
  1123                           	opt stack 0
  1124  0000C9                     printf@ap:
  1125                           	opt stack 0
  1126  0000C9                     ___lwdiv@dividend:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0xE
  1130  0000C9                     	ds	1
  1131  0000CA                     ___awdiv@sign:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0xF
  1135  0000CA                     	ds	1
  1136  0000CB                     LCDPutStr@i:
  1137                           	opt stack 0
  1138  0000CB                     printf@c:
  1139                           	opt stack 0
  1140  0000CB                     I2C1_MasterReadTRBBuild@pdata:
  1141                           	opt stack 0
  1142  0000CB                     I2C1_MasterWriteTRBBuild@pdata:
  1143                           	opt stack 0
  1144  0000CB                     _LCDGoto$2245:
  1145                           	opt stack 0
  1146  0000CB                     ___awdiv@quotient:
  1147                           	opt stack 0
  1148  0000CB                     ___lwdiv@divisor:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x10
  1152  0000CB                     	ds	2
  1153  0000CD                     ?___awmod:
  1154                           	opt stack 0
  1155  0000CD                     I2C1_MasterReadTRBBuild@length:
  1156                           	opt stack 0
  1157  0000CD                     I2C1_MasterWriteTRBBuild@length:
  1158                           	opt stack 0
  1159  0000CD                     LCDGoto@pos:
  1160                           	opt stack 0
  1161  0000CD                     ___lwdiv@counter:
  1162                           	opt stack 0
  1163  0000CD                     ___awmod@dividend:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x12
  1167  0000CD                     	ds	1
  1168  0000CE                     I2C1_MasterReadTRBBuild@address:
  1169                           	opt stack 0
  1170  0000CE                     I2C1_MasterWriteTRBBuild@address:
  1171                           	opt stack 0
  1172  0000CE                     ___lwdiv@quotient:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x13
  1176  0000CE                     	ds	1
  1177  0000CF                     ___awmod@divisor:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x14
  1181  0000CF                     	ds	1
  1182  0000D0                     ?___lwmod:
  1183                           	opt stack 0
  1184  0000D0                     I2C1_MasterWrite@pdata:
  1185                           	opt stack 0
  1186  0000D0                     I2C1_MasterRead@pdata:
  1187                           	opt stack 0
  1188  0000D0                     ___lwmod@dividend:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x15
  1192  0000D0                     	ds	1
  1193  0000D1                     DisplayTemperature@type:
  1194                           	opt stack 0
  1195  0000D1                     _DisplayBuzzerData$3133:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x16
  1199  0000D1                     	ds	1
  1200  0000D2                     I2C1_MasterWrite@length:
  1201                           	opt stack 0
  1202  0000D2                     I2C1_MasterRead@length:
  1203                           	opt stack 0
  1204  0000D2                     DisplayTemperature@thermal:
  1205                           	opt stack 0
  1206  0000D2                     ___lwmod@divisor:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x17
  1210  0000D2                     	ds	1
  1211  0000D3                     DisplayBuzzerData@pwm_freq:
  1212                           	opt stack 0
  1213  0000D3                     DisplayTemperature@negValue:
  1214                           	opt stack 0
  1215  0000D3                     I2C1_MasterWrite@address:
  1216                           	opt stack 0
  1217  0000D3                     I2C1_MasterRead@address:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x18
  1221  0000D3                     	ds	1
  1222  0000D4                     StateBuzzer@sound:
  1223                           	opt stack 0
  1224  0000D4                     ___lwmod@counter:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x19
  1228  0000D4                     	ds	1
  1229  0000D5                     I2C1_MasterWrite@pflag:
  1230                           	opt stack 0
  1231  0000D5                     I2C1_MasterRead@pflag:
  1232                           	opt stack 0
  1233  0000D5                     DisplayVoltage@volt:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x1A
  1237  0000D5                     	ds	2
  1238  0000D7                     StateTemperature@tempValue:
  1239                           	opt stack 0
  1240  0000D7                     _DisplayVoltage$3132:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x1C
  1244  0000D7                     	ds	1
  1245  0000D8                     StateTemperature@degreeType:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x1D
  1249  0000D8                     	ds	1
  1250  0000D9                     StateTemperature@sChange:
  1251                           	opt stack 0
  1252  0000D9                     DisplayVoltage@ADC_Conversion:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x1E
  1256  0000D9                     	ds	2
  1257  0000DB                     StateVoltage@Volt:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x20
  1261  0000DB                     	ds	2
  1262                           tblptru	equ	0xFF8
  1263                           tblptrh	equ	0xFF7
  1264                           tblptrl	equ	0xFF6
  1265                           tablat	equ	0xFF5
  1266                           postinc0	equ	0xFEE
  1267                           wreg	equ	0xFE8
  1268                           
  1269                           	psect	cstackCOMRAM
  1270  000021                     __pcstackCOMRAM:
  1271                           	opt stack 0
  1272  000021                     ??_I2C1_Stop:
  1273  000021                     
  1274                           ; 0 bytes @ 0x0
  1275  000021                     	ds	2
  1276  000023                     I2C1_Stop@completion_code:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x2
  1280  000023                     	ds	1
  1281  000024                     ??_I2C1_ISR:
  1282                           
  1283                           ; 0 bytes @ 0x3
  1284  000024                     	ds	3
  1285  000027                     ??_INTERRUPT_InterruptManagerLow:
  1286                           
  1287                           ; 0 bytes @ 0x6
  1288  000027                     	ds	17
  1289  000038                     ??_TMR1_ISR:
  1290  000038                     
  1291                           ; 0 bytes @ 0x17
  1292  000038                     	ds	3
  1293  00003B                     ??_I2C1_MasterWriteTRBBuild:
  1294  00003B                     ??_I2C1_MasterReadTRBBuild:
  1295  00003B                     ?_ADC_GetConversion:
  1296                           	opt stack 0
  1297  00003B                     ?___wmul:
  1298                           	opt stack 0
  1299  00003B                     ?___awdiv:
  1300                           	opt stack 0
  1301  00003B                     EUSART1_Write@txData:
  1302                           	opt stack 0
  1303  00003B                     LCDWriteNibble@rs:
  1304                           	opt stack 0
  1305  00003B                     SNDSound@pwm_period:
  1306                           	opt stack 0
  1307  00003B                     I2C1_MasterTRBInsert@ptrb_list:
  1308                           	opt stack 0
  1309  00003B                     ___wmul@multiplier:
  1310                           	opt stack 0
  1311  00003B                     ___awdiv@dividend:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x1A
  1315  00003B                     	ds	1
  1316  00003C                     putch@txData:
  1317                           	opt stack 0
  1318  00003C                     LCDWriteNibble@ch:
  1319                           	opt stack 0
  1320  00003C                     SNDSound@onoff:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x1B
  1324  00003C                     	ds	1
  1325  00003D                     ??_LCDPutCmd:
  1326  00003D                     ??_LCDPutChar:
  1327  00003D                     ??_ADC_GetConversion:
  1328  00003D                     ?_printf:
  1329                           	opt stack 0
  1330  00003D                     I2C1_MasterTRBInsert@pflag:
  1331                           	opt stack 0
  1332  00003D                     printf@f:
  1333                           	opt stack 0
  1334  00003D                     ___wmul@multiplicand:
  1335                           	opt stack 0
  1336  00003D                     ___awdiv@divisor:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x1C
  1340  00003D                     	ds	1
  1341  00003E                     LCDPutChar@ch:
  1342                           	opt stack 0
  1343  00003E                     LCDPutCmd@ch:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0x1D
  1347  00003E                     	ds	1
  1348  00003F                     ??_I2C1_MasterTRBInsert:
  1349  00003F                     ??_LCD_Initialize:
  1350  00003F                     ADC_GetConversion@channel:
  1351                           	opt stack 0
  1352  00003F                     LCDGoto@ln:
  1353                           	opt stack 0
  1354  00003F                     ___awmod@counter:
  1355                           	opt stack 0
  1356  00003F                     LCDPutStr@str:
  1357                           	opt stack 0
  1358  00003F                     ___wmul@product:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x1E
  1362  00003F                     	ds	1
  1363  000040                     ___awmod@sign:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x1F
  1367  000040                     	ds	1
  1368  000041                     tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           
  1375                           ; 0 bytes @ 0x20
  1376 ;;
  1377 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1378 ;;
  1379 ;; *************** function _main *****************
  1380 ;; Defined at:
  1381 ;;		line 55 in file "main.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;		None
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;		None
  1386 ;; Return value:  Size  Location     Type
  1387 ;;		None               void
  1388 ;; Registers used:
  1389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;Total ram usage:        0 bytes
  1400 ;; Hardware stack levels required when called:   12
  1401 ;; This function calls:
  1402 ;;		_Buttons_Initialize
  1403 ;;		_LCD_Initialize
  1404 ;;		_SYSTEM_Initialize
  1405 ;;		_StateBuzzer
  1406 ;;		_StateClock
  1407 ;;		_StateInitial
  1408 ;;		_StateTemperature
  1409 ;;		_StateVoltage
  1410 ;; This function is called by:
  1411 ;;		Startup code after reset
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text0
  1416  0023EE                     __ptext0:
  1417                           	opt stack 0
  1418  0023EE                     _main:
  1419                           	opt stack 19
  1420                           
  1421                           ;main.c: 58: SYSTEM_Initialize();
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;incstack = 0
  1425  0023EE  ECE2  F011         	call	_SYSTEM_Initialize	;wreg free
  1426                           
  1427                           ;main.c: 61: LCD_Initialize();
  1428  0023F2  EC94  F010         	call	_LCD_Initialize	;wreg free
  1429                           
  1430                           ;main.c: 64: Buttons_Initialize();
  1431  0023F6  ECF7  F00C         	call	_Buttons_Initialize	;wreg free
  1432                           
  1433                           ;main.c: 71: (INTCONbits.GIEH = 1);
  1434  0023FA  8EF2               	bsf	intcon,7,c	;volatile
  1435                           
  1436                           ;main.c: 74: (INTCONbits.GIEL = 1);
  1437  0023FC  8CF2               	bsf	intcon,6,c	;volatile
  1438                           
  1439                           ;main.c: 95: StateInitial();
  1440  0023FE  ECC5  F012         	call	_StateInitial	;wreg free
  1441  002402                     l5444:
  1442                           
  1443                           ;main.c: 98: {
  1444                           ;main.c: 100: StateVoltage();
  1445  002402  ECA3  F00F         	call	_StateVoltage	;wreg free
  1446                           
  1447                           ;main.c: 103: StateBuzzer();
  1448  002406  EC4B  F00D         	call	_StateBuzzer	;wreg free
  1449                           
  1450                           ;main.c: 106: StateTemperature();
  1451  00240A  EC51  F00B         	call	_StateTemperature	;wreg free
  1452                           
  1453                           ;main.c: 109: StateClock();
  1454  00240E  EC22  F00F         	call	_StateClock	;wreg free
  1455  002412  D7F7               	goto	l5444
  1456  002414                     __end_of_main:
  1457                           	opt stack 0
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           intcon	equ	0xFF2
  1463                           postinc0	equ	0xFEE
  1464                           wreg	equ	0xFE8
  1465                           
  1466 ;; *************** function _StateVoltage *****************
  1467 ;; Defined at:
  1468 ;;		line 53 in file "StateVoltmeter.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;		None
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  Volt            2   32[BANK0 ] unsigned int 
  1473 ;; Return value:  Size  Location     Type
  1474 ;;		None               void
  1475 ;; Registers used:
  1476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1483 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;Total ram usage:        2 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; Hardware stack levels required when called:   11
  1489 ;; This function calls:
  1490 ;;		_ADC_GetConversion
  1491 ;;		_DisplayVoltMenu
  1492 ;;		_DisplayVoltage
  1493 ;;		_LCDPutCmd
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text1
  1500  001F46                     __ptext1:
  1501                           	opt stack 0
  1502  001F46                     _StateVoltage:
  1503                           	opt stack 19
  1504                           
  1505                           ;StateVoltmeter.c: 56: DisplayVoltMenu();
  1506                           
  1507                           ;incstack = 0
  1508  001F46  EC2E  F011         	call	_DisplayVoltMenu	;wreg free
  1509  001F4A                     l5280:
  1510                           
  1511                           ;StateVoltmeter.c: 60: {
  1512                           ;StateVoltmeter.c: 62: if((Buttons.But1Pressed))
  1513  001F4A  0100               	movlb	0	; () banked
  1514  001F4C  A1B7               	btfss	_Buttons& (0+255),0,b
  1515  001F4E  D006               	goto	l594
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;StateVoltmeter.c: 63: {
  1519                           ;StateVoltmeter.c: 65: Buttons.But1Pressed = 0;
  1520  001F50  0100               	movlb	0	; () banked
  1521  001F52  91B7               	bcf	_Buttons& (0+255),0,b
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;StateVoltmeter.c: 68: LCDPutCmd(0x01);
  1525  001F54  0E01               	movlw	1
  1526  001F56  ECB0  F010         	call	_LCDPutCmd
  1527  001F5A  0012               	return	
  1528  001F5C                     l594:
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;StateVoltmeter.c: 75: else if((Buttons.But2Pressed))
  1532  001F5C  0100               	movlb	0	; () banked
  1533  001F5E  A3B7               	btfss	_Buttons& (0+255),1,b
  1534  001F60  D7F4               	goto	l5280
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;StateVoltmeter.c: 76: {
  1538                           ;StateVoltmeter.c: 78: Buttons.But2Pressed = 0;
  1539  001F62  0100               	movlb	0	; () banked
  1540  001F64  93B7               	bcf	_Buttons& (0+255),1,b
  1541  001F66                     l5292:
  1542                           
  1543                           ;StateVoltmeter.c: 82: {
  1544                           ;StateVoltmeter.c: 84: uint16_t Volt = ADC_GetConversion(0);
  1545  001F66  0E00               	movlw	0
  1546  001F68  ECFE  F010         	call	_ADC_GetConversion
  1547  001F6C  C03B  F0DB         	movff	?_ADC_GetConversion,StateVoltage@Volt
  1548  001F70  C03C  F0DC         	movff	?_ADC_GetConversion+1,StateVoltage@Volt+1
  1549                           
  1550                           ;StateVoltmeter.c: 87: DisplayVoltage(Volt);
  1551  001F74  C0DB  F0D5         	movff	StateVoltage@Volt,DisplayVoltage@volt
  1552  001F78  C0DC  F0D6         	movff	StateVoltage@Volt+1,DisplayVoltage@volt+1
  1553  001F7C  EC37  F006         	call	_DisplayVoltage	;wreg free
  1554                           
  1555                           ;StateVoltmeter.c: 90: if((Buttons.But2Pressed))
  1556  001F80  0100               	movlb	0	; () banked
  1557  001F82  A3B7               	btfss	_Buttons& (0+255),1,b
  1558  001F84  D7F0               	goto	l5292
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;StateVoltmeter.c: 91: {
  1562                           ;StateVoltmeter.c: 93: Buttons.But2Pressed = 0;
  1563  001F86  0100               	movlb	0	; () banked
  1564  001F88  93B7               	bcf	_Buttons& (0+255),1,b
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;StateVoltmeter.c: 96: LCDPutCmd(0x01);
  1568  001F8A  0E01               	movlw	1
  1569  001F8C  ECB0  F010         	call	_LCDPutCmd
  1570                           
  1571                           ;StateVoltmeter.c: 100: }
  1572                           ;StateVoltmeter.c: 102: }
  1573                           ;StateVoltmeter.c: 104: LCDPutCmd(0x01);
  1574                           
  1575                           ;StateVoltmeter.c: 99: break;
  1576  001F90  0E01               	movlw	1
  1577  001F92  ECB0  F010         	call	_LCDPutCmd
  1578                           
  1579                           ;StateVoltmeter.c: 107: break;
  1580  001F96  0012               	return	
  1581  001F98                     __end_of_StateVoltage:
  1582                           	opt stack 0
  1583                           tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           intcon	equ	0xFF2
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           
  1591 ;; *************** function _DisplayVoltage *****************
  1592 ;; Defined at:
  1593 ;;		line 122 in file "StateVoltmeter.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  volt            2   26[BANK0 ] unsigned int 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  ADC_Conversi    2   30[BANK0 ] unsigned int 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;		None               void
  1600 ;; Registers used:
  1601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1607 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;Total ram usage:        6 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:   10
  1614 ;; This function calls:
  1615 ;;		_EUSART1_Write
  1616 ;;		_LCDGoto
  1617 ;;		_LCDPutChar
  1618 ;;		_LCDPutStr
  1619 ;;		___lwdiv
  1620 ;;		___lwmod
  1621 ;;		___wmul
  1622 ;;		_printf
  1623 ;; This function is called by:
  1624 ;;		_StateVoltage
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text2
  1629  000C6E                     __ptext2:
  1630                           	opt stack 0
  1631  000C6E                     _DisplayVoltage:
  1632                           	opt stack 19
  1633                           
  1634                           ;StateVoltmeter.c: 124: uint16_t ADC_Conversion;
  1635                           ;StateVoltmeter.c: 126: ADC_Conversion = volt;
  1636                           
  1637                           ;incstack = 0
  1638  000C6E  C0D5  F0D9         	movff	DisplayVoltage@volt,DisplayVoltage@ADC_Conversion
  1639  000C72  C0D6  F0DA         	movff	DisplayVoltage@volt+1,DisplayVoltage@ADC_Conversion+1
  1640                           
  1641                           ;StateVoltmeter.c: 129: volt = ((volt*49)/10)/10;
  1642  000C76  0E00               	movlw	0
  1643  000C78  0100               	movlb	0	; () banked
  1644  000C7A  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1645  000C7C  0E0A               	movlw	10
  1646  000C7E  0100               	movlb	0	; () banked
  1647  000C80  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1648  000C82  C0D5  F03B         	movff	DisplayVoltage@volt,___wmul@multiplier
  1649  000C86  C0D6  F03C         	movff	DisplayVoltage@volt+1,___wmul@multiplier+1
  1650  000C8A  0E00               	movlw	0
  1651  000C8C  6E3E               	movwf	___wmul@multiplicand+1,c
  1652  000C8E  0E31               	movlw	49
  1653  000C90  6E3D               	movwf	___wmul@multiplicand,c
  1654  000C92  EC0A  F012         	call	___wmul	;wreg free
  1655  000C96  C03B  F0C9         	movff	?___wmul,___lwdiv@dividend
  1656  000C9A  C03C  F0CA         	movff	?___wmul+1,___lwdiv@dividend+1
  1657  000C9E  EC8C  F00D         	call	___lwdiv	;wreg free
  1658  000CA2  0100               	movlb	0	; () banked
  1659  000CA4  C0C9  F0D7         	movff	?___lwdiv,_DisplayVoltage$3132
  1660  000CA8  0100               	movlb	0	; () banked
  1661  000CAA  C0CA  F0D8         	movff	?___lwdiv+1,_DisplayVoltage$3132+1
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;StateVoltmeter.c: 129: volt = ((volt*49)/10)/10;
  1665  000CAE  C0D7  F0C9         	movff	_DisplayVoltage$3132,___lwdiv@dividend
  1666  000CB2  C0D8  F0CA         	movff	_DisplayVoltage$3132+1,___lwdiv@dividend+1
  1667  000CB6  0E00               	movlw	0
  1668  000CB8  0100               	movlb	0	; () banked
  1669  000CBA  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1670  000CBC  0E0A               	movlw	10
  1671  000CBE  0100               	movlb	0	; () banked
  1672  000CC0  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1673  000CC2  EC8C  F00D         	call	___lwdiv	;wreg free
  1674  000CC6  0100               	movlb	0	; () banked
  1675  000CC8  C0C9  F0D5         	movff	?___lwdiv,DisplayVoltage@volt
  1676  000CCC  0100               	movlb	0	; () banked
  1677  000CCE  C0CA  F0D6         	movff	?___lwdiv+1,DisplayVoltage@volt+1
  1678                           
  1679                           ; BSR set to: 0
  1680                           
  1681                           ; BSR set to: 0
  1682                           
  1683                           ;StateVoltmeter.c: 132: do { LCDGoto(0,0); LCDPutStr("Volts = "); LCDPutChar(volt/100+'0
      +                          '); LCDPutChar('.'); LCDPutChar((volt / 10)%10+'0'); LCDPutChar((volt /1)% 10+'0'); LCDP
      +                          utStr(" V   "); LCDGoto(0,1); LCDPutChar('['); LCDPutChar((ADC_Conversion/1000)+'0'); LC
      +                          DPutChar((
  1684  000CD2  0E00               	movlw	0
  1685  000CD4  6E3F               	movwf	LCDGoto@ln,c
  1686  000CD6  0E00               	movlw	0
  1687  000CD8  EC4E  F00F         	call	_LCDGoto
  1688  000CDC  0EFF               	movlw	high (STR_8+2)
  1689  000CDE  6E40               	movwf	LCDPutStr@str+1,c
  1690  000CE0  0E16               	movlw	low (STR_8+2)
  1691  000CE2  6E3F               	movwf	LCDPutStr@str,c
  1692  000CE4  EC33  F00E         	call	_LCDPutStr	;wreg free
  1693  000CE8  C0D5  F0C9         	movff	DisplayVoltage@volt,___lwdiv@dividend
  1694  000CEC  C0D6  F0CA         	movff	DisplayVoltage@volt+1,___lwdiv@dividend+1
  1695  000CF0  0E00               	movlw	0
  1696  000CF2  0100               	movlb	0	; () banked
  1697  000CF4  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1698  000CF6  0E64               	movlw	100
  1699  000CF8  0100               	movlb	0	; () banked
  1700  000CFA  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1701  000CFC  EC8C  F00D         	call	___lwdiv	;wreg free
  1702  000D00  0100               	movlb	0	; () banked
  1703  000D02  51C9               	movf	?___lwdiv& (0+255),w,b
  1704  000D04  0F30               	addlw	48
  1705  000D06  EC8A  F011         	call	_LCDPutChar
  1706  000D0A  0E2E               	movlw	46
  1707  000D0C  EC8A  F011         	call	_LCDPutChar
  1708  000D10  0E00               	movlw	0
  1709  000D12  0100               	movlb	0	; () banked
  1710  000D14  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1711  000D16  0E0A               	movlw	10
  1712  000D18  0100               	movlb	0	; () banked
  1713  000D1A  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1714  000D1C  C0D5  F0C9         	movff	DisplayVoltage@volt,___lwdiv@dividend
  1715  000D20  C0D6  F0CA         	movff	DisplayVoltage@volt+1,___lwdiv@dividend+1
  1716  000D24  EC8C  F00D         	call	___lwdiv	;wreg free
  1717  000D28  0100               	movlb	0	; () banked
  1718  000D2A  C0C9  F0D0         	movff	?___lwdiv,___lwmod@dividend
  1719  000D2E  0100               	movlb	0	; () banked
  1720  000D30  C0CA  F0D1         	movff	?___lwdiv+1,___lwmod@dividend+1
  1721  000D34  0E00               	movlw	0
  1722  000D36  0100               	movlb	0	; () banked
  1723  000D38  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1724  000D3A  0E0A               	movlw	10
  1725  000D3C  0100               	movlb	0	; () banked
  1726  000D3E  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1727  000D40  EC65  F00E         	call	___lwmod	;wreg free
  1728  000D44  0100               	movlb	0	; () banked
  1729  000D46  51D0               	movf	?___lwmod& (0+255),w,b
  1730  000D48  0F30               	addlw	48
  1731  000D4A  EC8A  F011         	call	_LCDPutChar
  1732  000D4E  C0D5  F0D0         	movff	DisplayVoltage@volt,___lwmod@dividend
  1733  000D52  C0D6  F0D1         	movff	DisplayVoltage@volt+1,___lwmod@dividend+1
  1734  000D56  0E00               	movlw	0
  1735  000D58  0100               	movlb	0	; () banked
  1736  000D5A  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1737  000D5C  0E0A               	movlw	10
  1738  000D5E  0100               	movlb	0	; () banked
  1739  000D60  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1740  000D62  EC65  F00E         	call	___lwmod	;wreg free
  1741  000D66  0100               	movlb	0	; () banked
  1742  000D68  51D0               	movf	?___lwmod& (0+255),w,b
  1743  000D6A  0F30               	addlw	48
  1744  000D6C  EC8A  F011         	call	_LCDPutChar
  1745  000D70  0EFF               	movlw	high STR_6
  1746  000D72  6E40               	movwf	LCDPutStr@str+1,c
  1747  000D74  0E61               	movlw	low STR_6
  1748  000D76  6E3F               	movwf	LCDPutStr@str,c
  1749  000D78  EC33  F00E         	call	_LCDPutStr	;wreg free
  1750  000D7C  0E01               	movlw	1
  1751  000D7E  6E3F               	movwf	LCDGoto@ln,c
  1752  000D80  0E00               	movlw	0
  1753  000D82  EC4E  F00F         	call	_LCDGoto
  1754  000D86  0E5B               	movlw	91
  1755  000D88  EC8A  F011         	call	_LCDPutChar
  1756  000D8C  C0D9  F0C9         	movff	DisplayVoltage@ADC_Conversion,___lwdiv@dividend
  1757  000D90  C0DA  F0CA         	movff	DisplayVoltage@ADC_Conversion+1,___lwdiv@dividend+1
  1758  000D94  0E03               	movlw	3
  1759  000D96  0100               	movlb	0	; () banked
  1760  000D98  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1761  000D9A  0EE8               	movlw	232
  1762  000D9C  0100               	movlb	0	; () banked
  1763  000D9E  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1764  000DA0  EC8C  F00D         	call	___lwdiv	;wreg free
  1765  000DA4  0100               	movlb	0	; () banked
  1766  000DA6  51C9               	movf	?___lwdiv& (0+255),w,b
  1767  000DA8  0F30               	addlw	48
  1768  000DAA  EC8A  F011         	call	_LCDPutChar
  1769  000DAE  0E00               	movlw	0
  1770  000DB0  0100               	movlb	0	; () banked
  1771  000DB2  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1772  000DB4  0E64               	movlw	100
  1773  000DB6  0100               	movlb	0	; () banked
  1774  000DB8  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1775  000DBA  C0D9  F0C9         	movff	DisplayVoltage@ADC_Conversion,___lwdiv@dividend
  1776  000DBE  C0DA  F0CA         	movff	DisplayVoltage@ADC_Conversion+1,___lwdiv@dividend+1
  1777  000DC2  EC8C  F00D         	call	___lwdiv	;wreg free
  1778  000DC6  0100               	movlb	0	; () banked
  1779  000DC8  C0C9  F0D0         	movff	?___lwdiv,___lwmod@dividend
  1780  000DCC  0100               	movlb	0	; () banked
  1781  000DCE  C0CA  F0D1         	movff	?___lwdiv+1,___lwmod@dividend+1
  1782  000DD2  0E00               	movlw	0
  1783  000DD4  0100               	movlb	0	; () banked
  1784  000DD6  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1785  000DD8  0E0A               	movlw	10
  1786  000DDA  0100               	movlb	0	; () banked
  1787  000DDC  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1788  000DDE  EC65  F00E         	call	___lwmod	;wreg free
  1789  000DE2  0100               	movlb	0	; () banked
  1790  000DE4  51D0               	movf	?___lwmod& (0+255),w,b
  1791  000DE6  0F30               	addlw	48
  1792  000DE8  EC8A  F011         	call	_LCDPutChar
  1793  000DEC  0E00               	movlw	0
  1794  000DEE  0100               	movlb	0	; () banked
  1795  000DF0  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1796  000DF2  0E0A               	movlw	10
  1797  000DF4  0100               	movlb	0	; () banked
  1798  000DF6  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1799  000DF8  C0D9  F0C9         	movff	DisplayVoltage@ADC_Conversion,___lwdiv@dividend
  1800  000DFC  C0DA  F0CA         	movff	DisplayVoltage@ADC_Conversion+1,___lwdiv@dividend+1
  1801  000E00  EC8C  F00D         	call	___lwdiv	;wreg free
  1802  000E04  0100               	movlb	0	; () banked
  1803  000E06  C0C9  F0D0         	movff	?___lwdiv,___lwmod@dividend
  1804  000E0A  0100               	movlb	0	; () banked
  1805  000E0C  C0CA  F0D1         	movff	?___lwdiv+1,___lwmod@dividend+1
  1806  000E10  0E00               	movlw	0
  1807  000E12  0100               	movlb	0	; () banked
  1808  000E14  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1809  000E16  0E0A               	movlw	10
  1810  000E18  0100               	movlb	0	; () banked
  1811  000E1A  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1812  000E1C  EC65  F00E         	call	___lwmod	;wreg free
  1813  000E20  0100               	movlb	0	; () banked
  1814  000E22  51D0               	movf	?___lwmod& (0+255),w,b
  1815  000E24  0F30               	addlw	48
  1816  000E26  EC8A  F011         	call	_LCDPutChar
  1817  000E2A  C0D9  F0D0         	movff	DisplayVoltage@ADC_Conversion,___lwmod@dividend
  1818  000E2E  C0DA  F0D1         	movff	DisplayVoltage@ADC_Conversion+1,___lwmod@dividend+1
  1819  000E32  0E00               	movlw	0
  1820  000E34  0100               	movlb	0	; () banked
  1821  000E36  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1822  000E38  0E0A               	movlw	10
  1823  000E3A  0100               	movlb	0	; () banked
  1824  000E3C  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1825  000E3E  EC65  F00E         	call	___lwmod	;wreg free
  1826  000E42  0100               	movlb	0	; () banked
  1827  000E44  51D0               	movf	?___lwmod& (0+255),w,b
  1828  000E46  0F30               	addlw	48
  1829  000E48  EC8A  F011         	call	_LCDPutChar
  1830  000E4C  0EFE               	movlw	high STR_7
  1831  000E4E  6E40               	movwf	LCDPutStr@str+1,c
  1832  000E50  0EFD               	movlw	low STR_7
  1833  000E52  6E3F               	movwf	LCDPutStr@str,c
  1834  000E54  EC33  F00E         	call	_LCDPutStr	;wreg free
  1835                           
  1836                           ;StateVoltmeter.c: 135: do { printf("\r\nVolts = "); EUSART1_Write(volt/100+'0'); EUSART
      +                          1_Write('.'); EUSART1_Write((volt / 10)%10+'0'); EUSART1_Write((volt /1)% 10+'0'); print
      +                          f(" V    ADC Count:"); EUSART1_Write('['); EUSART1_Write((ADC_Conversion/1000)+'0'); EUS
      +                          ART1_Write
  1837  000E58  0EFF               	movlw	high STR_8
  1838  000E5A  6E3E               	movwf	printf@f+1,c
  1839  000E5C  0E14               	movlw	low STR_8
  1840  000E5E  6E3D               	movwf	printf@f,c
  1841  000E60  ECE5  F010         	call	_printf	;wreg free
  1842  000E64  C0D5  F0C9         	movff	DisplayVoltage@volt,___lwdiv@dividend
  1843  000E68  C0D6  F0CA         	movff	DisplayVoltage@volt+1,___lwdiv@dividend+1
  1844  000E6C  0E00               	movlw	0
  1845  000E6E  0100               	movlb	0	; () banked
  1846  000E70  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1847  000E72  0E64               	movlw	100
  1848  000E74  0100               	movlb	0	; () banked
  1849  000E76  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1850  000E78  EC8C  F00D         	call	___lwdiv	;wreg free
  1851  000E7C  0100               	movlb	0	; () banked
  1852  000E7E  51C9               	movf	?___lwdiv& (0+255),w,b
  1853  000E80  0F30               	addlw	48
  1854  000E82  EC38  F010         	call	_EUSART1_Write
  1855  000E86  0E2E               	movlw	46
  1856  000E88  EC38  F010         	call	_EUSART1_Write
  1857  000E8C  0E00               	movlw	0
  1858  000E8E  0100               	movlb	0	; () banked
  1859  000E90  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1860  000E92  0E0A               	movlw	10
  1861  000E94  0100               	movlb	0	; () banked
  1862  000E96  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1863  000E98  C0D5  F0C9         	movff	DisplayVoltage@volt,___lwdiv@dividend
  1864  000E9C  C0D6  F0CA         	movff	DisplayVoltage@volt+1,___lwdiv@dividend+1
  1865  000EA0  EC8C  F00D         	call	___lwdiv	;wreg free
  1866  000EA4  0100               	movlb	0	; () banked
  1867  000EA6  C0C9  F0D0         	movff	?___lwdiv,___lwmod@dividend
  1868  000EAA  0100               	movlb	0	; () banked
  1869  000EAC  C0CA  F0D1         	movff	?___lwdiv+1,___lwmod@dividend+1
  1870  000EB0  0E00               	movlw	0
  1871  000EB2  0100               	movlb	0	; () banked
  1872  000EB4  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1873  000EB6  0E0A               	movlw	10
  1874  000EB8  0100               	movlb	0	; () banked
  1875  000EBA  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1876  000EBC  EC65  F00E         	call	___lwmod	;wreg free
  1877  000EC0  0100               	movlb	0	; () banked
  1878  000EC2  51D0               	movf	?___lwmod& (0+255),w,b
  1879  000EC4  0F30               	addlw	48
  1880  000EC6  EC38  F010         	call	_EUSART1_Write
  1881  000ECA  C0D5  F0D0         	movff	DisplayVoltage@volt,___lwmod@dividend
  1882  000ECE  C0D6  F0D1         	movff	DisplayVoltage@volt+1,___lwmod@dividend+1
  1883  000ED2  0E00               	movlw	0
  1884  000ED4  0100               	movlb	0	; () banked
  1885  000ED6  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1886  000ED8  0E0A               	movlw	10
  1887  000EDA  0100               	movlb	0	; () banked
  1888  000EDC  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1889  000EDE  EC65  F00E         	call	___lwmod	;wreg free
  1890  000EE2  0100               	movlb	0	; () banked
  1891  000EE4  51D0               	movf	?___lwmod& (0+255),w,b
  1892  000EE6  0F30               	addlw	48
  1893  000EE8  EC38  F010         	call	_EUSART1_Write
  1894  000EEC  0EFE               	movlw	high STR_9
  1895  000EEE  6E3E               	movwf	printf@f+1,c
  1896  000EF0  0E5D               	movlw	low STR_9
  1897  000EF2  6E3D               	movwf	printf@f,c
  1898  000EF4  ECE5  F010         	call	_printf	;wreg free
  1899  000EF8  0E5B               	movlw	91
  1900  000EFA  EC38  F010         	call	_EUSART1_Write
  1901  000EFE  C0D9  F0C9         	movff	DisplayVoltage@ADC_Conversion,___lwdiv@dividend
  1902  000F02  C0DA  F0CA         	movff	DisplayVoltage@ADC_Conversion+1,___lwdiv@dividend+1
  1903  000F06  0E03               	movlw	3
  1904  000F08  0100               	movlb	0	; () banked
  1905  000F0A  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1906  000F0C  0EE8               	movlw	232
  1907  000F0E  0100               	movlb	0	; () banked
  1908  000F10  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1909  000F12  EC8C  F00D         	call	___lwdiv	;wreg free
  1910  000F16  0100               	movlb	0	; () banked
  1911  000F18  51C9               	movf	?___lwdiv& (0+255),w,b
  1912  000F1A  0F30               	addlw	48
  1913  000F1C  EC38  F010         	call	_EUSART1_Write
  1914  000F20  0E00               	movlw	0
  1915  000F22  0100               	movlb	0	; () banked
  1916  000F24  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1917  000F26  0E64               	movlw	100
  1918  000F28  0100               	movlb	0	; () banked
  1919  000F2A  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1920  000F2C  C0D9  F0C9         	movff	DisplayVoltage@ADC_Conversion,___lwdiv@dividend
  1921  000F30  C0DA  F0CA         	movff	DisplayVoltage@ADC_Conversion+1,___lwdiv@dividend+1
  1922  000F34  EC8C  F00D         	call	___lwdiv	;wreg free
  1923  000F38  0100               	movlb	0	; () banked
  1924  000F3A  C0C9  F0D0         	movff	?___lwdiv,___lwmod@dividend
  1925  000F3E  0100               	movlb	0	; () banked
  1926  000F40  C0CA  F0D1         	movff	?___lwdiv+1,___lwmod@dividend+1
  1927  000F44  0E00               	movlw	0
  1928  000F46  0100               	movlb	0	; () banked
  1929  000F48  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1930  000F4A  0E0A               	movlw	10
  1931  000F4C  0100               	movlb	0	; () banked
  1932  000F4E  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1933  000F50  EC65  F00E         	call	___lwmod	;wreg free
  1934  000F54  0100               	movlb	0	; () banked
  1935  000F56  51D0               	movf	?___lwmod& (0+255),w,b
  1936  000F58  0F30               	addlw	48
  1937  000F5A  EC38  F010         	call	_EUSART1_Write
  1938  000F5E  0E00               	movlw	0
  1939  000F60  0100               	movlb	0	; () banked
  1940  000F62  6FCC               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1941  000F64  0E0A               	movlw	10
  1942  000F66  0100               	movlb	0	; () banked
  1943  000F68  6FCB               	movwf	___lwdiv@divisor& (0+255),b
  1944  000F6A  C0D9  F0C9         	movff	DisplayVoltage@ADC_Conversion,___lwdiv@dividend
  1945  000F6E  C0DA  F0CA         	movff	DisplayVoltage@ADC_Conversion+1,___lwdiv@dividend+1
  1946  000F72  EC8C  F00D         	call	___lwdiv	;wreg free
  1947  000F76  0100               	movlb	0	; () banked
  1948  000F78  C0C9  F0D0         	movff	?___lwdiv,___lwmod@dividend
  1949  000F7C  0100               	movlb	0	; () banked
  1950  000F7E  C0CA  F0D1         	movff	?___lwdiv+1,___lwmod@dividend+1
  1951  000F82  0E00               	movlw	0
  1952  000F84  0100               	movlb	0	; () banked
  1953  000F86  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1954  000F88  0E0A               	movlw	10
  1955  000F8A  0100               	movlb	0	; () banked
  1956  000F8C  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1957  000F8E  EC65  F00E         	call	___lwmod	;wreg free
  1958  000F92  0100               	movlb	0	; () banked
  1959  000F94  51D0               	movf	?___lwmod& (0+255),w,b
  1960  000F96  0F30               	addlw	48
  1961  000F98  EC38  F010         	call	_EUSART1_Write
  1962  000F9C  C0D9  F0D0         	movff	DisplayVoltage@ADC_Conversion,___lwmod@dividend
  1963  000FA0  C0DA  F0D1         	movff	DisplayVoltage@ADC_Conversion+1,___lwmod@dividend+1
  1964  000FA4  0E00               	movlw	0
  1965  000FA6  0100               	movlb	0	; () banked
  1966  000FA8  6FD3               	movwf	(___lwmod@divisor+1)& (0+255),b
  1967  000FAA  0E0A               	movlw	10
  1968  000FAC  0100               	movlb	0	; () banked
  1969  000FAE  6FD2               	movwf	___lwmod@divisor& (0+255),b
  1970  000FB0  EC65  F00E         	call	___lwmod	;wreg free
  1971  000FB4  0100               	movlb	0	; () banked
  1972  000FB6  51D0               	movf	?___lwmod& (0+255),w,b
  1973  000FB8  0F30               	addlw	48
  1974  000FBA  EC38  F010         	call	_EUSART1_Write
  1975  000FBE  0E5D               	movlw	93
  1976  000FC0  EC38  F010         	call	_EUSART1_Write
  1977  000FC4  0012               	return	
  1978  000FC6                     __end_of_DisplayVoltage:
  1979                           	opt stack 0
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           intcon	equ	0xFF2
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           
  1988 ;; *************** function ___wmul *****************
  1989 ;; Defined at:
  1990 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;  multiplier      2   26[COMRAM] unsigned int 
  1993 ;;  multiplicand    2   28[COMRAM] unsigned int 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  product         2   30[COMRAM] unsigned int 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  2   26[COMRAM] unsigned int 
  1998 ;; Registers used:
  1999 ;;		wreg, status,2, status,0, prodl, prodh
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2005 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;Total ram usage:        6 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    7
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_DisplayVoltage
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text3
  2020  002414                     __ptext3:
  2021                           	opt stack 0
  2022  002414                     ___wmul:
  2023                           	opt stack 21
  2024                           
  2025                           ;incstack = 0
  2026  002414  503B               	movf	___wmul@multiplier,w,c
  2027  002416  023D               	mulwf	___wmul@multiplicand,c
  2028  002418  CFF3 F03F          	movff	prodl,___wmul@product
  2029  00241C  CFF4 F040          	movff	prodh,___wmul@product+1
  2030  002420  503B               	movf	___wmul@multiplier,w,c
  2031  002422  023E               	mulwf	___wmul@multiplicand+1,c
  2032  002424  50F3               	movf	prodl,w,c
  2033  002426  2640               	addwf	___wmul@product+1,f,c
  2034  002428  503C               	movf	___wmul@multiplier+1,w,c
  2035  00242A  023D               	mulwf	___wmul@multiplicand,c
  2036  00242C  50F3               	movf	prodl,w,c
  2037  00242E  2640               	addwf	___wmul@product+1,f,c
  2038  002430  C03F  F03B         	movff	___wmul@product,?___wmul
  2039  002434  C040  F03C         	movff	___wmul@product+1,?___wmul+1
  2040  002438  0012               	return	
  2041  00243A                     __end_of___wmul:
  2042                           	opt stack 0
  2043                           tblptru	equ	0xFF8
  2044                           tblptrh	equ	0xFF7
  2045                           tblptrl	equ	0xFF6
  2046                           tablat	equ	0xFF5
  2047                           prodh	equ	0xFF4
  2048                           prodl	equ	0xFF3
  2049                           intcon	equ	0xFF2
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           
  2053 ;; *************** function ___lwmod *****************
  2054 ;; Defined at:
  2055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  dividend        2   21[BANK0 ] unsigned int 
  2058 ;;  divisor         2   23[BANK0 ] unsigned int 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  counter         1   25[BANK0 ] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  2   21[BANK0 ] unsigned int 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, status,0
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;Total ram usage:        5 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    7
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_DisplayVoltage
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text4
  2085  001CCA                     __ptext4:
  2086                           	opt stack 0
  2087  001CCA                     ___lwmod:
  2088                           	opt stack 21
  2089                           
  2090                           ;incstack = 0
  2091  001CCA  0100               	movlb	0	; () banked
  2092  001CCC  51D3               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2093  001CCE  11D2               	iorwf	___lwmod@divisor& (0+255),w,b
  2094  001CD0  B4D8               	btfsc	status,2,c
  2095  001CD2  D026               	goto	l1611
  2096                           
  2097                           ; BSR set to: 0
  2098  001CD4  0E01               	movlw	1
  2099  001CD6  0100               	movlb	0	; () banked
  2100  001CD8  6FD4               	movwf	___lwmod@counter& (0+255),b
  2101  001CDA  D006               	goto	l4706
  2102  001CDC                     l4704:
  2103                           
  2104                           ; BSR set to: 0
  2105  001CDC  0100               	movlb	0	; () banked
  2106  001CDE  90D8               	bcf	status,0,c
  2107  001CE0  37D2               	rlcf	___lwmod@divisor& (0+255),f,b
  2108  001CE2  37D3               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2109  001CE4  0100               	movlb	0	; () banked
  2110  001CE6  2BD4               	incf	___lwmod@counter& (0+255),f,b
  2111  001CE8                     l4706:
  2112                           
  2113                           ; BSR set to: 0
  2114  001CE8  0100               	movlb	0	; () banked
  2115  001CEA  AFD3               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2116  001CEC  D7F7               	goto	l4704
  2117  001CEE                     l4708:
  2118                           
  2119                           ; BSR set to: 0
  2120  001CEE  0100               	movlb	0	; () banked
  2121  001CF0  51D2               	movf	___lwmod@divisor& (0+255),w,b
  2122  001CF2  0100               	movlb	0	; () banked
  2123  001CF4  5DD0               	subwf	___lwmod@dividend& (0+255),w,b
  2124  001CF6  0100               	movlb	0	; () banked
  2125  001CF8  51D3               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2126  001CFA  0100               	movlb	0	; () banked
  2127  001CFC  59D1               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2128  001CFE  A0D8               	btfss	status,0,c
  2129  001D00  D008               	goto	l4712
  2130                           
  2131                           ; BSR set to: 0
  2132  001D02  0100               	movlb	0	; () banked
  2133  001D04  51D2               	movf	___lwmod@divisor& (0+255),w,b
  2134  001D06  0100               	movlb	0	; () banked
  2135  001D08  5FD0               	subwf	___lwmod@dividend& (0+255),f,b
  2136  001D0A  0100               	movlb	0	; () banked
  2137  001D0C  51D3               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2138  001D0E  0100               	movlb	0	; () banked
  2139  001D10  5BD1               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2140  001D12                     l4712:
  2141                           
  2142                           ; BSR set to: 0
  2143  001D12  0100               	movlb	0	; () banked
  2144  001D14  90D8               	bcf	status,0,c
  2145  001D16  33D3               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2146  001D18  33D2               	rrcf	___lwmod@divisor& (0+255),f,b
  2147                           
  2148                           ; BSR set to: 0
  2149  001D1A  0100               	movlb	0	; () banked
  2150  001D1C  2FD4               	decfsz	___lwmod@counter& (0+255),f,b
  2151  001D1E  D7E7               	goto	l4708
  2152  001D20                     l1611:
  2153                           
  2154                           ; BSR set to: 0
  2155  001D20  C0D0  F0D0         	movff	___lwmod@dividend,?___lwmod
  2156  001D24  C0D1  F0D1         	movff	___lwmod@dividend+1,?___lwmod+1
  2157                           
  2158                           ; BSR set to: 0
  2159  001D28  0012               	return	
  2160  001D2A                     __end_of___lwmod:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           tblptrh	equ	0xFF7
  2164                           tblptrl	equ	0xFF6
  2165                           tablat	equ	0xFF5
  2166                           prodh	equ	0xFF4
  2167                           prodl	equ	0xFF3
  2168                           intcon	equ	0xFF2
  2169                           postinc0	equ	0xFEE
  2170                           wreg	equ	0xFE8
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function ___lwdiv *****************
  2174 ;; Defined at:
  2175 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  dividend        2   14[BANK0 ] unsigned int 
  2178 ;;  divisor         2   16[BANK0 ] unsigned int 
  2179 ;; Auto vars:     Size  Location     Type
  2180 ;;  quotient        2   19[BANK0 ] unsigned int 
  2181 ;;  counter         1   18[BANK0 ] unsigned char 
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  2   14[BANK0 ] unsigned int 
  2184 ;; Registers used:
  2185 ;;		wreg, status,2, status,0
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2191 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;Total ram usage:        7 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; Hardware stack levels required when called:    7
  2198 ;; This function calls:
  2199 ;;		Nothing
  2200 ;; This function is called by:
  2201 ;;		_DisplayVoltage
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text5
  2206  001B18                     __ptext5:
  2207                           	opt stack 0
  2208  001B18                     ___lwdiv:
  2209                           	opt stack 21
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;incstack = 0
  2213  001B18  0E00               	movlw	0
  2214  001B1A  0100               	movlb	0	; () banked
  2215  001B1C  6FCF               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2216  001B1E  0E00               	movlw	0
  2217  001B20  0100               	movlb	0	; () banked
  2218  001B22  6FCE               	movwf	___lwdiv@quotient& (0+255),b
  2219                           
  2220                           ; BSR set to: 0
  2221  001B24  0100               	movlb	0	; () banked
  2222  001B26  51CC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2223  001B28  11CB               	iorwf	___lwdiv@divisor& (0+255),w,b
  2224  001B2A  B4D8               	btfsc	status,2,c
  2225  001B2C  D02C               	goto	l1601
  2226                           
  2227                           ; BSR set to: 0
  2228  001B2E  0E01               	movlw	1
  2229  001B30  0100               	movlb	0	; () banked
  2230  001B32  6FCD               	movwf	___lwdiv@counter& (0+255),b
  2231  001B34  D006               	goto	l4686
  2232  001B36                     l4684:
  2233                           
  2234                           ; BSR set to: 0
  2235  001B36  0100               	movlb	0	; () banked
  2236  001B38  90D8               	bcf	status,0,c
  2237  001B3A  37CB               	rlcf	___lwdiv@divisor& (0+255),f,b
  2238  001B3C  37CC               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2239  001B3E  0100               	movlb	0	; () banked
  2240  001B40  2BCD               	incf	___lwdiv@counter& (0+255),f,b
  2241  001B42                     l4686:
  2242                           
  2243                           ; BSR set to: 0
  2244  001B42  0100               	movlb	0	; () banked
  2245  001B44  AFCC               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2246  001B46  D7F7               	goto	l4684
  2247  001B48                     l4688:
  2248                           
  2249                           ; BSR set to: 0
  2250  001B48  0100               	movlb	0	; () banked
  2251  001B4A  90D8               	bcf	status,0,c
  2252  001B4C  37CE               	rlcf	___lwdiv@quotient& (0+255),f,b
  2253  001B4E  37CF               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2254                           
  2255                           ; BSR set to: 0
  2256  001B50  0100               	movlb	0	; () banked
  2257  001B52  51CB               	movf	___lwdiv@divisor& (0+255),w,b
  2258  001B54  0100               	movlb	0	; () banked
  2259  001B56  5DC9               	subwf	___lwdiv@dividend& (0+255),w,b
  2260  001B58  0100               	movlb	0	; () banked
  2261  001B5A  51CC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2262  001B5C  0100               	movlb	0	; () banked
  2263  001B5E  59CA               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2264  001B60  A0D8               	btfss	status,0,c
  2265  001B62  D00A               	goto	l4696
  2266                           
  2267                           ; BSR set to: 0
  2268  001B64  0100               	movlb	0	; () banked
  2269  001B66  51CB               	movf	___lwdiv@divisor& (0+255),w,b
  2270  001B68  0100               	movlb	0	; () banked
  2271  001B6A  5FC9               	subwf	___lwdiv@dividend& (0+255),f,b
  2272  001B6C  0100               	movlb	0	; () banked
  2273  001B6E  51CC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2274  001B70  0100               	movlb	0	; () banked
  2275  001B72  5BCA               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2276                           
  2277                           ; BSR set to: 0
  2278  001B74  0100               	movlb	0	; () banked
  2279  001B76  81CE               	bsf	___lwdiv@quotient& (0+255),0,b
  2280  001B78                     l4696:
  2281                           
  2282                           ; BSR set to: 0
  2283  001B78  0100               	movlb	0	; () banked
  2284  001B7A  90D8               	bcf	status,0,c
  2285  001B7C  33CC               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2286  001B7E  33CB               	rrcf	___lwdiv@divisor& (0+255),f,b
  2287                           
  2288                           ; BSR set to: 0
  2289  001B80  0100               	movlb	0	; () banked
  2290  001B82  2FCD               	decfsz	___lwdiv@counter& (0+255),f,b
  2291  001B84  D7E1               	goto	l4688
  2292  001B86                     l1601:
  2293                           
  2294                           ; BSR set to: 0
  2295  001B86  C0CE  F0C9         	movff	___lwdiv@quotient,?___lwdiv
  2296  001B8A  C0CF  F0CA         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2297                           
  2298                           ; BSR set to: 0
  2299  001B8E  0012               	return	
  2300  001B90                     __end_of___lwdiv:
  2301                           	opt stack 0
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           prodh	equ	0xFF4
  2307                           prodl	equ	0xFF3
  2308                           intcon	equ	0xFF2
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _DisplayVoltMenu *****************
  2314 ;; Defined at:
  2315 ;;		line 112 in file "StateVoltmeter.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;		None
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;		None               void
  2322 ;; Registers used:
  2323 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;Total ram usage:        0 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:   10
  2336 ;; This function calls:
  2337 ;;		_LCDGoto
  2338 ;;		_LCDPutStr
  2339 ;; This function is called by:
  2340 ;;		_StateVoltage
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text6
  2345  00225C                     __ptext6:
  2346                           	opt stack 0
  2347  00225C                     _DisplayVoltMenu:
  2348                           	opt stack 19
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;incstack = 0
  2352                           ;StateVoltmeter.c: 115: do { LCDGoto(0,0); LCDPutStr("   Voltmeter"); }while (0);;
  2353  00225C  0E00               	movlw	0
  2354  00225E  6E3F               	movwf	LCDGoto@ln,c
  2355  002260  0E00               	movlw	0
  2356  002262  EC4E  F00F         	call	_LCDGoto
  2357  002266  0EFE               	movlw	high STR_3
  2358  002268  6E40               	movwf	LCDPutStr@str+1,c
  2359  00226A  0ECB               	movlw	low STR_3
  2360  00226C  6E3F               	movwf	LCDPutStr@str,c
  2361  00226E  EC33  F00E         	call	_LCDPutStr	;wreg free
  2362                           
  2363                           ;StateVoltmeter.c: 118: do { LCDGoto(0,1); LCDPutStr("RA4=Next RB0=Now"); } while (0);;
  2364  002272  0E01               	movlw	1
  2365  002274  6E3F               	movwf	LCDGoto@ln,c
  2366  002276  0E00               	movlw	0
  2367  002278  EC4E  F00F         	call	_LCDGoto
  2368  00227C  0EFE               	movlw	high STR_4
  2369  00227E  6E40               	movwf	LCDPutStr@str+1,c
  2370  002280  0E6E               	movlw	low STR_4
  2371  002282  6E3F               	movwf	LCDPutStr@str,c
  2372  002284  EC33  F00E         	call	_LCDPutStr	;wreg free
  2373  002288  0012               	return	
  2374  00228A                     __end_of_DisplayVoltMenu:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           prodh	equ	0xFF4
  2381                           prodl	equ	0xFF3
  2382                           intcon	equ	0xFF2
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _ADC_GetConversion *****************
  2388 ;; Defined at:
  2389 ;;		line 105 in file "mcc_generated_files/adc.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  channel         1    wreg     enum E8852
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  channel         1   30[COMRAM] enum E8852
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  2   26[COMRAM] unsigned int 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2403 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;Total ram usage:        5 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    7
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_StateVoltage
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text7
  2418  0021FC                     __ptext7:
  2419                           	opt stack 0
  2420  0021FC                     _ADC_GetConversion:
  2421                           	opt stack 22
  2422                           
  2423                           ;incstack = 0
  2424                           ;ADC_GetConversion@channel stored from wreg
  2425  0021FC  6E3F               	movwf	ADC_GetConversion@channel,c
  2426                           
  2427                           ;adc.c: 108: ADCON0bits.CHS = channel;
  2428  0021FE  C03F  F03D         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  2429  002202  463D               	rlncf	??_ADC_GetConversion,f,c
  2430  002204  463D               	rlncf	??_ADC_GetConversion,f,c
  2431  002206  50C2               	movf	4034,w,c	;volatile
  2432  002208  183D               	xorwf	??_ADC_GetConversion,w,c
  2433  00220A  0B83               	andlw	-125
  2434  00220C  183D               	xorwf	??_ADC_GetConversion,w,c
  2435  00220E  6EC2               	movwf	4034,c	;volatile
  2436                           
  2437                           ;adc.c: 111: ADCON0bits.ADON = 1;
  2438  002210  80C2               	bsf	4034,0,c	;volatile
  2439                           
  2440                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  2441  002212  82C2               	bsf	4034,1,c	;volatile
  2442  002214                     l96:
  2443  002214  B2C2               	btfsc	4034,1,c	;volatile
  2444  002216  D7FE               	goto	l96
  2445                           
  2446                           ;adc.c: 120: }
  2447                           ;adc.c: 123: return ((ADRESH << 8) + ADRESL);
  2448  002218  50C4               	movf	4036,w,c	;volatile
  2449  00221A  6E3E               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  2450  00221C  6A3D               	clrf	??_ADC_GetConversion& (0+255),c
  2451  00221E  50C3               	movf	4035,w,c	;volatile
  2452  002220  243D               	addwf	??_ADC_GetConversion,w,c
  2453  002222  6E3B               	movwf	?_ADC_GetConversion,c
  2454  002224  0E00               	movlw	0
  2455  002226  203E               	addwfc	??_ADC_GetConversion+1,w,c
  2456  002228  6E3C               	movwf	?_ADC_GetConversion+1,c
  2457  00222A  0012               	return	
  2458  00222C                     __end_of_ADC_GetConversion:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           intcon	equ	0xFF2
  2467                           postinc0	equ	0xFEE
  2468                           wreg	equ	0xFE8
  2469                           status	equ	0xFD8
  2470                           
  2471 ;; *************** function _StateTemperature *****************
  2472 ;; Defined at:
  2473 ;;		line 62 in file "StateTemp.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;		None
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;  sChange         1   30[BANK0 ] unsigned char 
  2478 ;;  degreeType      1   29[BANK0 ] unsigned char 
  2479 ;;  tempValue       1   28[BANK0 ] unsigned char 
  2480 ;; Return value:  Size  Location     Type
  2481 ;;		None               void
  2482 ;; Registers used:
  2483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;Total ram usage:        3 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:   11
  2496 ;; This function calls:
  2497 ;;		_DisplayTempMenu
  2498 ;;		_DisplayTemperature
  2499 ;;		_I2C1_MasterRead
  2500 ;;		_I2C1_MasterWrite
  2501 ;;		_LCDPutCmd
  2502 ;; This function is called by:
  2503 ;;		_main
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text8
  2508  0016A2                     __ptext8:
  2509                           	opt stack 0
  2510  0016A2                     _StateTemperature:
  2511                           	opt stack 19
  2512                           
  2513                           ;StateTemp.c: 64: uint8_t tempValue =0;
  2514                           
  2515                           ;incstack = 0
  2516  0016A2  0E00               	movlw	0
  2517  0016A4  0100               	movlb	0	; () banked
  2518  0016A6  6FD7               	movwf	StateTemperature@tempValue& (0+255),b
  2519                           
  2520                           ;StateTemp.c: 65: uint8_t degreeType = 0;
  2521  0016A8  0E00               	movlw	0
  2522  0016AA  0100               	movlb	0	; () banked
  2523  0016AC  6FD8               	movwf	StateTemperature@degreeType& (0+255),b
  2524                           
  2525                           ;StateTemp.c: 66: uint8_t sChange = 0;
  2526  0016AE  0E00               	movlw	0
  2527  0016B0  0100               	movlb	0	; () banked
  2528  0016B2  6FD9               	movwf	StateTemperature@sChange& (0+255),b
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;StateTemp.c: 69: DisplayTempMenu();
  2532  0016B4  EC45  F011         	call	_DisplayTempMenu	;wreg free
  2533  0016B8                     l5354:
  2534                           
  2535                           ;StateTemp.c: 72: {
  2536                           ;StateTemp.c: 74: if((Buttons.But1Pressed))
  2537  0016B8  0100               	movlb	0	; () banked
  2538  0016BA  A1B7               	btfss	_Buttons& (0+255),0,b
  2539  0016BC  D006               	goto	l1018
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;StateTemp.c: 75: {
  2543                           ;StateTemp.c: 77: Buttons.But1Pressed = 0;
  2544  0016BE  0100               	movlb	0	; () banked
  2545  0016C0  91B7               	bcf	_Buttons& (0+255),0,b
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;StateTemp.c: 80: LCDPutCmd(0x01);
  2549  0016C2  0E01               	movlw	1
  2550  0016C4  ECB0  F010         	call	_LCDPutCmd
  2551  0016C8  0012               	return	
  2552  0016CA                     l1018:
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;StateTemp.c: 87: else if((Buttons.But2Pressed))
  2556  0016CA  0100               	movlb	0	; () banked
  2557  0016CC  A3B7               	btfss	_Buttons& (0+255),1,b
  2558  0016CE  D7F4               	goto	l5354
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;StateTemp.c: 88: {
  2562                           ;StateTemp.c: 90: Buttons.But2Pressed = 0;
  2563  0016D0  0100               	movlb	0	; () banked
  2564  0016D2  93B7               	bcf	_Buttons& (0+255),1,b
  2565  0016D4                     l5366:
  2566                           
  2567                           ;StateTemp.c: 94: {
  2568                           ;StateTemp.c: 96: I2C1_MasterWrite( &TC74_cmd, 1, I2C_Address, &I2C_status);
  2569  0016D4  0100               	movlb	0	; () banked
  2570  0016D6  0E00               	movlw	high _TC74_cmd
  2571  0016D8  0100               	movlb	0	; () banked
  2572  0016DA  6FD1               	movwf	(I2C1_MasterWrite@pdata+1)& (0+255),b
  2573  0016DC  0100               	movlb	0	; () banked
  2574  0016DE  0EB9               	movlw	low _TC74_cmd
  2575  0016E0  0100               	movlb	0	; () banked
  2576  0016E2  6FD0               	movwf	I2C1_MasterWrite@pdata& (0+255),b
  2577  0016E4  0E01               	movlw	1
  2578  0016E6  0100               	movlb	0	; () banked
  2579  0016E8  6FD2               	movwf	I2C1_MasterWrite@length& (0+255),b
  2580  0016EA  C0E4  F0D3         	movff	_I2C_Address,I2C1_MasterWrite@address
  2581  0016EE  C0E5  F0D4         	movff	_I2C_Address+1,I2C1_MasterWrite@address+1
  2582  0016F2  0100               	movlb	0	; () banked
  2583  0016F4  0E00               	movlw	high _I2C_status
  2584  0016F6  0100               	movlb	0	; () banked
  2585  0016F8  6FD6               	movwf	(I2C1_MasterWrite@pflag+1)& (0+255),b
  2586  0016FA  0100               	movlb	0	; () banked
  2587  0016FC  0EB8               	movlw	low _I2C_status
  2588  0016FE  0100               	movlb	0	; () banked
  2589  001700  6FD5               	movwf	I2C1_MasterWrite@pflag& (0+255),b
  2590  001702  EC95  F00E         	call	_I2C1_MasterWrite	;wreg free
  2591  001706                     l5368:
  2592  001706  0100               	movlb	0	; () banked
  2593  001708  51B8               	movf	_I2C_status& (0+255),w,b
  2594  00170A  0A02               	xorlw	2
  2595  00170C  B4D8               	btfsc	status,2,c
  2596  00170E  D7FB               	goto	l5368
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;StateTemp.c: 100: I2C1_MasterRead( &readValue, 1, I2C_Address, &I2C_status);
  2600                           
  2601                           ; BSR set to: 0
  2602  001710  0100               	movlb	0	; () banked
  2603  001712  0E00               	movlw	high _readValue
  2604  001714  0100               	movlb	0	; () banked
  2605  001716  6FD1               	movwf	(I2C1_MasterRead@pdata+1)& (0+255),b
  2606  001718  0100               	movlb	0	; () banked
  2607  00171A  0EBA               	movlw	low _readValue
  2608  00171C  0100               	movlb	0	; () banked
  2609  00171E  6FD0               	movwf	I2C1_MasterRead@pdata& (0+255),b
  2610  001720  0E01               	movlw	1
  2611  001722  0100               	movlb	0	; () banked
  2612  001724  6FD2               	movwf	I2C1_MasterRead@length& (0+255),b
  2613  001726  C0E4  F0D3         	movff	_I2C_Address,I2C1_MasterRead@address
  2614  00172A  C0E5  F0D4         	movff	_I2C_Address+1,I2C1_MasterRead@address+1
  2615  00172E  0100               	movlb	0	; () banked
  2616  001730  0E00               	movlw	high _I2C_status
  2617  001732  0100               	movlb	0	; () banked
  2618  001734  6FD6               	movwf	(I2C1_MasterRead@pflag+1)& (0+255),b
  2619  001736  0100               	movlb	0	; () banked
  2620  001738  0EB8               	movlw	low _I2C_status
  2621  00173A  0100               	movlb	0	; () banked
  2622  00173C  6FD5               	movwf	I2C1_MasterRead@pflag& (0+255),b
  2623  00173E  ECC5  F00E         	call	_I2C1_MasterRead	;wreg free
  2624  001742                     l5372:
  2625  001742  0100               	movlb	0	; () banked
  2626  001744  51B8               	movf	_I2C_status& (0+255),w,b
  2627  001746  0A02               	xorlw	2
  2628  001748  B4D8               	btfsc	status,2,c
  2629  00174A  D7FB               	goto	l5372
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;StateTemp.c: 104: tempValue = readValue;
  2633  00174C  C0BA  F0D7         	movff	_readValue,StateTemperature@tempValue
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;StateTemp.c: 107: DisplayTemperature(tempValue,degreeType);
  2637  001750  C0D8  F0D1         	movff	StateTemperature@degreeType,DisplayTemperature@type
  2638  001754  0100               	movlb	0	; () banked
  2639  001756  51D7               	movf	StateTemperature@tempValue& (0+255),w,b
  2640  001758  ECE3  F007         	call	_DisplayTemperature
  2641                           
  2642                           ;StateTemp.c: 110: if((Buttons.But2Pressed))
  2643  00175C  0100               	movlb	0	; () banked
  2644  00175E  A3B7               	btfss	_Buttons& (0+255),1,b
  2645  001760  D006               	goto	l1029
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;StateTemp.c: 111: {
  2649                           ;StateTemp.c: 113: Buttons.But2Pressed = 0;
  2650  001762  0100               	movlb	0	; () banked
  2651  001764  93B7               	bcf	_Buttons& (0+255),1,b
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;StateTemp.c: 116: LCDPutCmd(0x01);
  2655  001766  0E01               	movlw	1
  2656  001768  ECB0  F010         	call	_LCDPutCmd
  2657                           
  2658                           ;StateTemp.c: 119: break;
  2659  00176C  D015               	goto	l5392
  2660  00176E                     l1029:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;StateTemp.c: 123: else if((Buttons.But1Pressed))
  2664  00176E  0100               	movlb	0	; () banked
  2665  001770  A1B7               	btfss	_Buttons& (0+255),0,b
  2666  001772  D7B0               	goto	l5366
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;StateTemp.c: 124: {
  2670                           ;StateTemp.c: 126: Buttons.But1Pressed = 0;
  2671  001774  0100               	movlb	0	; () banked
  2672  001776  91B7               	bcf	_Buttons& (0+255),0,b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;StateTemp.c: 128: if(sChange == 1)
  2676  001778  0100               	movlb	0	; () banked
  2677  00177A  05D9               	decf	StateTemperature@sChange& (0+255),w,b
  2678  00177C  A4D8               	btfss	status,2,c
  2679  00177E  D005               	goto	l5390
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;StateTemp.c: 129: {
  2683                           ;StateTemp.c: 130: sChange = 0;
  2684  001780  0E00               	movlw	0
  2685  001782  0100               	movlb	0	; () banked
  2686  001784  6FD9               	movwf	StateTemperature@sChange& (0+255),b
  2687                           
  2688                           ;StateTemp.c: 131: degreeType = 1;
  2689  001786  0E01               	movlw	1
  2690  001788  D004               	goto	L1
  2691  00178A                     l5390:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;StateTemp.c: 133: else
  2695                           ;StateTemp.c: 134: {
  2696                           ;StateTemp.c: 135: sChange = 1;
  2697  00178A  0E01               	movlw	1
  2698  00178C  0100               	movlb	0	; () banked
  2699  00178E  6FD9               	movwf	StateTemperature@sChange& (0+255),b
  2700                           
  2701                           ;StateTemp.c: 136: degreeType = 0;
  2702  001790  0E00               	movlw	0
  2703  001792                     L1:
  2704  001792  0100               	movlb	0	; () banked
  2705  001794  6FD8               	movwf	StateTemperature@degreeType& (0+255),b
  2706  001796  D79E               	goto	l5366
  2707  001798                     l5392:
  2708                           
  2709                           ;StateTemp.c: 137: }
  2710                           ;StateTemp.c: 138: }
  2711                           ;StateTemp.c: 139: }
  2712                           ;StateTemp.c: 142: LCDPutCmd(0x01);
  2713  001798  0E01               	movlw	1
  2714  00179A  ECB0  F010         	call	_LCDPutCmd
  2715                           
  2716                           ;StateTemp.c: 145: break;
  2717  00179E  0012               	return	
  2718  0017A0                     __end_of_StateTemperature:
  2719                           	opt stack 0
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           prodh	equ	0xFF4
  2725                           prodl	equ	0xFF3
  2726                           intcon	equ	0xFF2
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _I2C1_MasterWrite *****************
  2732 ;; Defined at:
  2733 ;;		line 599 in file "mcc_generated_files/i2c1.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  pdata           2   21[BANK0 ] PTR unsigned char 
  2736 ;;		 -> TC74_cmd(1), 
  2737 ;;  length          1   23[BANK0 ] unsigned char 
  2738 ;;  address         2   24[BANK0 ] unsigned int 
  2739 ;;  pflag           2   26[BANK0 ] PTR enum E8851
  2740 ;;		 -> I2C_status(1), 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;		None
  2743 ;; Return value:  Size  Location     Type
  2744 ;;		None               void
  2745 ;; Registers used:
  2746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2752 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;Total ram usage:        7 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    8
  2759 ;; This function calls:
  2760 ;;		_I2C1_MasterTRBInsert
  2761 ;;		_I2C1_MasterWriteTRBBuild
  2762 ;; This function is called by:
  2763 ;;		_StateTemperature
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text9
  2768  001D2A                     __ptext9:
  2769                           	opt stack 0
  2770  001D2A                     _I2C1_MasterWrite:
  2771                           	opt stack 21
  2772                           
  2773                           ;i2c1.c: 605: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  2774                           ;i2c1.c: 608: if (i2c1_object.trStatus.s.full != 1)
  2775                           
  2776                           ;incstack = 0
  2777  001D2A  0100               	movlb	0	; () banked
  2778  001D2C  B1E1               	btfsc	(_i2c1_object+4)& (0+255),0,b
  2779  001D2E  D026               	goto	l4722
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;i2c1.c: 609: {
  2783                           ;i2c1.c: 610: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  2784  001D30  0100               	movlb	0	; () banked
  2785  001D32  0E00               	movlw	high I2C1_MasterWrite@trBlock
  2786  001D34  0100               	movlb	0	; () banked
  2787  001D36  6FCA               	movwf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),b
  2788  001D38  0100               	movlb	0	; () banked
  2789  001D3A  0EAD               	movlw	low I2C1_MasterWrite@trBlock
  2790  001D3C  0100               	movlb	0	; () banked
  2791  001D3E  6FC9               	movwf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),b
  2792  001D40  0100               	movlb	0	; () banked
  2793  001D42  C0D1  F0CC         	movff	I2C1_MasterWrite@pdata+1,I2C1_MasterWriteTRBBuild@pdata+1
  2794  001D46  0100               	movlb	0	; () banked
  2795  001D48  C0D0  F0CB         	movff	I2C1_MasterWrite@pdata,I2C1_MasterWriteTRBBuild@pdata
  2796  001D4C  C0D2  F0CD         	movff	I2C1_MasterWrite@length,I2C1_MasterWriteTRBBuild@length
  2797  001D50  C0D3  F0CE         	movff	I2C1_MasterWrite@address,I2C1_MasterWriteTRBBuild@address
  2798  001D54  C0D4  F0CF         	movff	I2C1_MasterWrite@address+1,I2C1_MasterWriteTRBBuild@address+1
  2799  001D58  ECF5  F00E         	call	_I2C1_MasterWriteTRBBuild	;wreg free
  2800                           
  2801                           ;i2c1.c: 611: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  2802  001D5C  0100               	movlb	0	; () banked
  2803  001D5E  0E00               	movlw	high I2C1_MasterWrite@trBlock
  2804  001D60  6E3C               	movwf	I2C1_MasterTRBInsert@ptrb_list+1,c
  2805  001D62  0100               	movlb	0	; () banked
  2806  001D64  0EAD               	movlw	low I2C1_MasterWrite@trBlock
  2807  001D66  6E3B               	movwf	I2C1_MasterTRBInsert@ptrb_list,c
  2808  001D68  0100               	movlb	0	; () banked
  2809  001D6A  C0D6  F03E         	movff	I2C1_MasterWrite@pflag+1,I2C1_MasterTRBInsert@pflag+1
  2810  001D6E  0100               	movlb	0	; () banked
  2811  001D70  C0D5  F03D         	movff	I2C1_MasterWrite@pflag,I2C1_MasterTRBInsert@pflag
  2812  001D74  0E01               	movlw	1
  2813  001D76  ECD0  F00B         	call	_I2C1_MasterTRBInsert
  2814                           
  2815                           ;i2c1.c: 612: }
  2816  001D7A  0012               	return	
  2817  001D7C                     l4722:
  2818                           
  2819                           ;i2c1.c: 613: else
  2820                           ;i2c1.c: 614: {
  2821                           ;i2c1.c: 615: *pflag = I2C1_MESSAGE_FAIL;
  2822  001D7C  C0D5  FFD9         	movff	I2C1_MasterWrite@pflag,fsr2l
  2823  001D80  C0D6  FFDA         	movff	I2C1_MasterWrite@pflag+1,fsr2h
  2824  001D84  0E01               	movlw	1
  2825  001D86  6EDF               	movwf	indf2,c
  2826  001D88  0012               	return	
  2827  001D8A                     __end_of_I2C1_MasterWrite:
  2828                           	opt stack 0
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           prodh	equ	0xFF4
  2834                           prodl	equ	0xFF3
  2835                           intcon	equ	0xFF2
  2836                           postinc0	equ	0xFEE
  2837                           wreg	equ	0xFE8
  2838                           indf2	equ	0xFDF
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  2844 ;; Defined at:
  2845 ;;		line 708 in file "mcc_generated_files/i2c1.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  ptrb            2   14[BANK0 ] PTR struct .
  2848 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  2849 ;;  pdata           2   16[BANK0 ] PTR unsigned char 
  2850 ;;		 -> TC74_cmd(1), 
  2851 ;;  length          1   18[BANK0 ] unsigned char 
  2852 ;;  address         2   19[BANK0 ] unsigned int 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;		None
  2855 ;; Return value:  Size  Location     Type
  2856 ;;		None               void
  2857 ;; Registers used:
  2858 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2864 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;Total ram usage:        9 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    7
  2871 ;; This function calls:
  2872 ;;		Nothing
  2873 ;; This function is called by:
  2874 ;;		_I2C1_MasterWrite
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text10
  2879  001DEA                     __ptext10:
  2880                           	opt stack 0
  2881  001DEA                     _I2C1_MasterWriteTRBBuild:
  2882                           	opt stack 21
  2883                           
  2884                           ;i2c1.c: 714: ptrb->address = address << 1;
  2885                           
  2886                           ;incstack = 0
  2887  001DEA  0100               	movlb	0	; () banked
  2888  001DEC  C0CE  F03B         	movff	I2C1_MasterWriteTRBBuild@address,??_I2C1_MasterWriteTRBBuild
  2889  001DF0  0100               	movlb	0	; () banked
  2890  001DF2  C0CF  F03C         	movff	I2C1_MasterWriteTRBBuild@address+1,??_I2C1_MasterWriteTRBBuild+1
  2891  001DF6  90D8               	bcf	status,0,c
  2892  001DF8  363B               	rlcf	??_I2C1_MasterWriteTRBBuild,f,c
  2893  001DFA  363C               	rlcf	??_I2C1_MasterWriteTRBBuild+1,f,c
  2894  001DFC  C0C9  FFD9         	movff	I2C1_MasterWriteTRBBuild@ptrb,fsr2l
  2895  001E00  C0CA  FFDA         	movff	I2C1_MasterWriteTRBBuild@ptrb+1,fsr2h
  2896  001E04  C03B  FFDE         	movff	??_I2C1_MasterWriteTRBBuild,postinc2
  2897  001E08  C03C  FFDD         	movff	??_I2C1_MasterWriteTRBBuild+1,postdec2
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;i2c1.c: 715: ptrb->length = length;
  2901  001E0C  0100               	movlb	0	; () banked
  2902  001E0E  EE20 F002          	lfsr	2,2
  2903  001E12  0100               	movlb	0	; () banked
  2904  001E14  51C9               	movf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),w,b
  2905  001E16  26D9               	addwf	fsr2l,f,c
  2906  001E18  0100               	movlb	0	; () banked
  2907  001E1A  51CA               	movf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),w,b
  2908  001E1C  22DA               	addwfc	fsr2h,f,c
  2909  001E1E  0100               	movlb	0	; () banked
  2910  001E20  C0CD  FFDF         	movff	I2C1_MasterWriteTRBBuild@length,indf2
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;i2c1.c: 716: ptrb->pbuffer = pdata;
  2914  001E24  0100               	movlb	0	; () banked
  2915  001E26  EE20 F003          	lfsr	2,3
  2916  001E2A  0100               	movlb	0	; () banked
  2917  001E2C  51C9               	movf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),w,b
  2918  001E2E  26D9               	addwf	fsr2l,f,c
  2919  001E30  0100               	movlb	0	; () banked
  2920  001E32  51CA               	movf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),w,b
  2921  001E34  22DA               	addwfc	fsr2h,f,c
  2922  001E36  0100               	movlb	0	; () banked
  2923  001E38  C0CB  FFDE         	movff	I2C1_MasterWriteTRBBuild@pdata,postinc2
  2924  001E3C  0100               	movlb	0	; () banked
  2925  001E3E  C0CC  FFDD         	movff	I2C1_MasterWriteTRBBuild@pdata+1,postdec2
  2926                           
  2927                           ; BSR set to: 0
  2928  001E42  0012               	return	
  2929  001E44                     __end_of_I2C1_MasterWriteTRBBuild:
  2930                           	opt stack 0
  2931                           tblptru	equ	0xFF8
  2932                           tblptrh	equ	0xFF7
  2933                           tblptrl	equ	0xFF6
  2934                           tablat	equ	0xFF5
  2935                           prodh	equ	0xFF4
  2936                           prodl	equ	0xFF3
  2937                           intcon	equ	0xFF2
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           indf2	equ	0xFDF
  2941                           postinc2	equ	0xFDE
  2942                           postdec2	equ	0xFDD
  2943                           fsr2h	equ	0xFDA
  2944                           fsr2l	equ	0xFD9
  2945                           status	equ	0xFD8
  2946                           
  2947 ;; *************** function _I2C1_MasterRead *****************
  2948 ;; Defined at:
  2949 ;;		line 620 in file "mcc_generated_files/i2c1.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  pdata           2   21[BANK0 ] PTR unsigned char 
  2952 ;;		 -> readValue(1), 
  2953 ;;  length          1   23[BANK0 ] unsigned char 
  2954 ;;  address         2   24[BANK0 ] unsigned int 
  2955 ;;  pflag           2   26[BANK0 ] PTR enum E8851
  2956 ;;		 -> I2C_status(1), 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;		None               void
  2961 ;; Registers used:
  2962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2968 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;Total ram usage:        7 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    8
  2975 ;; This function calls:
  2976 ;;		_I2C1_MasterReadTRBBuild
  2977 ;;		_I2C1_MasterTRBInsert
  2978 ;; This function is called by:
  2979 ;;		_StateTemperature
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text11
  2984  001D8A                     __ptext11:
  2985                           	opt stack 0
  2986  001D8A                     _I2C1_MasterRead:
  2987                           	opt stack 21
  2988                           
  2989                           ;i2c1.c: 626: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  2990                           ;i2c1.c: 630: if (i2c1_object.trStatus.s.full != 1)
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;incstack = 0
  2994  001D8A  0100               	movlb	0	; () banked
  2995  001D8C  B1E1               	btfsc	(_i2c1_object+4)& (0+255),0,b
  2996  001D8E  D026               	goto	l4728
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;i2c1.c: 631: {
  3000                           ;i2c1.c: 632: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  3001  001D90  0100               	movlb	0	; () banked
  3002  001D92  0E00               	movlw	high I2C1_MasterRead@trBlock
  3003  001D94  0100               	movlb	0	; () banked
  3004  001D96  6FCA               	movwf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),b
  3005  001D98  0100               	movlb	0	; () banked
  3006  001D9A  0EA8               	movlw	low I2C1_MasterRead@trBlock
  3007  001D9C  0100               	movlb	0	; () banked
  3008  001D9E  6FC9               	movwf	I2C1_MasterReadTRBBuild@ptrb& (0+255),b
  3009  001DA0  0100               	movlb	0	; () banked
  3010  001DA2  C0D1  F0CC         	movff	I2C1_MasterRead@pdata+1,I2C1_MasterReadTRBBuild@pdata+1
  3011  001DA6  0100               	movlb	0	; () banked
  3012  001DA8  C0D0  F0CB         	movff	I2C1_MasterRead@pdata,I2C1_MasterReadTRBBuild@pdata
  3013  001DAC  C0D2  F0CD         	movff	I2C1_MasterRead@length,I2C1_MasterReadTRBBuild@length
  3014  001DB0  C0D3  F0CE         	movff	I2C1_MasterRead@address,I2C1_MasterReadTRBBuild@address
  3015  001DB4  C0D4  F0CF         	movff	I2C1_MasterRead@address+1,I2C1_MasterReadTRBBuild@address+1
  3016  001DB8  EC00  F00E         	call	_I2C1_MasterReadTRBBuild	;wreg free
  3017                           
  3018                           ;i2c1.c: 633: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  3019  001DBC  0100               	movlb	0	; () banked
  3020  001DBE  0E00               	movlw	high I2C1_MasterRead@trBlock
  3021  001DC0  6E3C               	movwf	I2C1_MasterTRBInsert@ptrb_list+1,c
  3022  001DC2  0100               	movlb	0	; () banked
  3023  001DC4  0EA8               	movlw	low I2C1_MasterRead@trBlock
  3024  001DC6  6E3B               	movwf	I2C1_MasterTRBInsert@ptrb_list,c
  3025  001DC8  0100               	movlb	0	; () banked
  3026  001DCA  C0D6  F03E         	movff	I2C1_MasterRead@pflag+1,I2C1_MasterTRBInsert@pflag+1
  3027  001DCE  0100               	movlb	0	; () banked
  3028  001DD0  C0D5  F03D         	movff	I2C1_MasterRead@pflag,I2C1_MasterTRBInsert@pflag
  3029  001DD4  0E01               	movlw	1
  3030  001DD6  ECD0  F00B         	call	_I2C1_MasterTRBInsert
  3031                           
  3032                           ;i2c1.c: 634: }
  3033  001DDA  0012               	return	
  3034  001DDC                     l4728:
  3035                           
  3036                           ;i2c1.c: 635: else
  3037                           ;i2c1.c: 636: {
  3038                           ;i2c1.c: 637: *pflag = I2C1_MESSAGE_FAIL;
  3039  001DDC  C0D5  FFD9         	movff	I2C1_MasterRead@pflag,fsr2l
  3040  001DE0  C0D6  FFDA         	movff	I2C1_MasterRead@pflag+1,fsr2h
  3041  001DE4  0E01               	movlw	1
  3042  001DE6  6EDF               	movwf	indf2,c
  3043  001DE8  0012               	return	
  3044  001DEA                     __end_of_I2C1_MasterRead:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           postinc0	equ	0xFEE
  3054                           wreg	equ	0xFE8
  3055                           indf2	equ	0xFDF
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _I2C1_MasterTRBInsert *****************
  3063 ;; Defined at:
  3064 ;;		line 642 in file "mcc_generated_files/i2c1.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  count           1    wreg     unsigned char 
  3067 ;;  ptrb_list       2   26[COMRAM] PTR struct .
  3068 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
  3069 ;;  pflag           2   28[COMRAM] PTR enum E8851
  3070 ;;		 -> I2C_status(1), 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  count           1   14[BANK0 ] unsigned char 
  3073 ;; Return value:  Size  Location     Type
  3074 ;;		None               void
  3075 ;; Registers used:
  3076 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3082 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Totals:         6       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;Total ram usage:        7 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    7
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_I2C1_MasterWrite
  3093 ;;		_I2C1_MasterRead
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text12
  3098  0017A0                     __ptext12:
  3099                           	opt stack 0
  3100  0017A0                     _I2C1_MasterTRBInsert:
  3101                           	opt stack 21
  3102                           
  3103                           ;incstack = 0
  3104                           ;I2C1_MasterTRBInsert@count stored from wreg
  3105  0017A0  0100               	movlb	0	; () banked
  3106  0017A2  6FC9               	movwf	I2C1_MasterTRBInsert@count& (0+255),b
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;i2c1.c: 649: if (i2c1_object.trStatus.s.full != 1)
  3110  0017A4  0100               	movlb	0	; () banked
  3111  0017A6  B1E1               	btfsc	(_i2c1_object+4)& (0+255),0,b
  3112  0017A8  D056               	goto	l4558
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;i2c1.c: 650: {
  3116                           ;i2c1.c: 651: *pflag = I2C1_MESSAGE_PENDING;
  3117  0017AA  C03D  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
  3118  0017AE  C03E  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
  3119  0017B2  0E02               	movlw	2
  3120  0017B4  6EDF               	movwf	indf2,c
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;i2c1.c: 653: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  3124  0017B6  0100               	movlb	0	; () banked
  3125  0017B8  EE20 F001          	lfsr	2,1
  3126  0017BC  0100               	movlb	0	; () banked
  3127  0017BE  51DD               	movf	_i2c1_object& (0+255),w,b
  3128  0017C0  26D9               	addwf	fsr2l,f,c
  3129  0017C2  0100               	movlb	0	; () banked
  3130  0017C4  51DE               	movf	(_i2c1_object+1)& (0+255),w,b
  3131  0017C6  22DA               	addwfc	fsr2h,f,c
  3132  0017C8  C03B  FFDE         	movff	I2C1_MasterTRBInsert@ptrb_list,postinc2
  3133  0017CC  C03C  FFDD         	movff	I2C1_MasterTRBInsert@ptrb_list+1,postdec2
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;i2c1.c: 654: i2c1_object.pTrTail->count = count;
  3137  0017D0  C0DD  FFD9         	movff	_i2c1_object,fsr2l
  3138  0017D4  C0DE  FFDA         	movff	_i2c1_object+1,fsr2h
  3139  0017D8  0100               	movlb	0	; () banked
  3140  0017DA  C0C9  FFDF         	movff	I2C1_MasterTRBInsert@count,indf2
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;i2c1.c: 655: i2c1_object.pTrTail->pTrFlag = pflag;
  3144  0017DE  0100               	movlb	0	; () banked
  3145  0017E0  EE20 F003          	lfsr	2,3
  3146  0017E4  0100               	movlb	0	; () banked
  3147  0017E6  51DD               	movf	_i2c1_object& (0+255),w,b
  3148  0017E8  26D9               	addwf	fsr2l,f,c
  3149  0017EA  0100               	movlb	0	; () banked
  3150  0017EC  51DE               	movf	(_i2c1_object+1)& (0+255),w,b
  3151  0017EE  22DA               	addwfc	fsr2h,f,c
  3152  0017F0  C03D  FFDE         	movff	I2C1_MasterTRBInsert@pflag,postinc2
  3153  0017F4  C03E  FFDD         	movff	I2C1_MasterTRBInsert@pflag+1,postdec2
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;i2c1.c: 656: i2c1_object.pTrTail++;
  3157  0017F8  0E05               	movlw	5
  3158  0017FA  0100               	movlb	0	; () banked
  3159  0017FC  27DD               	addwf	_i2c1_object& (0+255),f,b
  3160  0017FE  0E00               	movlw	0
  3161  001800  0100               	movlb	0	; () banked
  3162  001802  23DE               	addwfc	(_i2c1_object+1)& (0+255),f,b
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;i2c1.c: 659: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  3166  001804  0EB7               	movlw	low (_i2c1_tr_queue+5)
  3167  001806  6E3F               	movwf	??_I2C1_MasterTRBInsert& (0+255),c
  3168  001808  0E00               	movlw	high (_i2c1_tr_queue+5)
  3169  00180A  6E40               	movwf	(??_I2C1_MasterTRBInsert+1)& (0+255),c
  3170  00180C  5040               	movf	??_I2C1_MasterTRBInsert+1,w,c
  3171  00180E  0100               	movlb	0	; () banked
  3172  001810  19DE               	xorwf	(_i2c1_object+1)& (0+255),w,b
  3173  001812  E103               	bnz	u3305
  3174  001814  503F               	movf	??_I2C1_MasterTRBInsert,w,c
  3175  001816  0100               	movlb	0	; () banked
  3176  001818  19DD               	xorwf	_i2c1_object& (0+255),w,b
  3177  00181A                     u3305:
  3178  00181A  A4D8               	btfss	status,2,c
  3179  00181C  D008               	goto	l4552
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;i2c1.c: 660: {
  3183                           ;i2c1.c: 662: i2c1_object.pTrTail = i2c1_tr_queue;
  3184  00181E  0100               	movlb	0	; () banked
  3185  001820  0E00               	movlw	high _i2c1_tr_queue
  3186  001822  0100               	movlb	0	; () banked
  3187  001824  6FDE               	movwf	(_i2c1_object+1)& (0+255),b
  3188  001826  0100               	movlb	0	; () banked
  3189  001828  0EB2               	movlw	low _i2c1_tr_queue
  3190  00182A  0100               	movlb	0	; () banked
  3191  00182C  6FDD               	movwf	_i2c1_object& (0+255),b
  3192  00182E                     l4552:
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;i2c1.c: 663: }
  3196                           ;i2c1.c: 667: i2c1_object.trStatus.s.empty = 0;
  3197  00182E  0100               	movlb	0	; () banked
  3198  001830  93E1               	bcf	(_i2c1_object+4)& (0+255),1,b
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;i2c1.c: 670: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  3202  001832  0100               	movlb	0	; () banked
  3203  001834  EE20  F0DF         	lfsr	2,_i2c1_object+2
  3204  001838  0100               	movlb	0	; () banked
  3205  00183A  52DE               	movf	postinc2,f,c
  3206  00183C  0100               	movlb	0	; () banked
  3207  00183E  51DE               	movf	(_i2c1_object+1)& (0+255),w,b
  3208  001840  18DD               	xorwf	postdec2,w,c
  3209  001842  0100               	movlb	0	; () banked
  3210  001844  C0DD  FFE8         	movff	_i2c1_object,wreg
  3211  001848  B4D8               	btfsc	status,2,c
  3212  00184A  18DF               	xorwf	indf2,w,c
  3213  00184C  A4D8               	btfss	status,2,c
  3214  00184E  D009               	goto	l456
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;i2c1.c: 671: {
  3218                           ;i2c1.c: 673: i2c1_object.trStatus.s.full = 1;
  3219  001850  0100               	movlb	0	; () banked
  3220  001852  81E1               	bsf	(_i2c1_object+4)& (0+255),0,b
  3221  001854  D006               	goto	l456
  3222  001856                     l4558:
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;i2c1.c: 677: else
  3226                           ;i2c1.c: 678: {
  3227                           ;i2c1.c: 679: *pflag = I2C1_MESSAGE_FAIL;
  3228  001856  C03D  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
  3229  00185A  C03E  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
  3230  00185E  0E01               	movlw	1
  3231  001860  6EDF               	movwf	indf2,c
  3232  001862                     l456:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;i2c1.c: 680: }
  3236                           ;i2c1.c: 683: if (*pflag == I2C1_MESSAGE_PENDING)
  3237  001862  0E02               	movlw	2
  3238  001864  C03D  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
  3239  001868  C03E  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
  3240  00186C  62DF               	cpfseq	indf2,c
  3241  00186E  0012               	return	
  3242  001870                     l458:
  3243                           
  3244                           ; BSR set to: 0
  3245  001870  6619               	tstfsz	_i2c1_state,c
  3246  001872  D7FE               	goto	l458
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;i2c1.c: 686: {
  3250                           ;i2c1.c: 689: PIR1bits.SSP1IF = 1;
  3251  001874  869E               	bsf	3998,3,c	;volatile
  3252  001876  0012               	return	
  3253  001878                     __end_of_I2C1_MasterTRBInsert:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           indf2	equ	0xFDF
  3265                           postinc2	equ	0xFDE
  3266                           postdec2	equ	0xFDD
  3267                           fsr2h	equ	0xFDA
  3268                           fsr2l	equ	0xFD9
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _I2C1_MasterReadTRBBuild *****************
  3272 ;; Defined at:
  3273 ;;		line 695 in file "mcc_generated_files/i2c1.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;  ptrb            2   14[BANK0 ] PTR struct .
  3276 ;;		 -> I2C1_MasterRead@trBlock(5), 
  3277 ;;  pdata           2   16[BANK0 ] PTR unsigned char 
  3278 ;;		 -> readValue(1), 
  3279 ;;  length          1   18[BANK0 ] unsigned char 
  3280 ;;  address         2   19[BANK0 ] unsigned int 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;		None
  3283 ;; Return value:  Size  Location     Type
  3284 ;;		None               void
  3285 ;; Registers used:
  3286 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3292 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;Total ram usage:        9 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    7
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_I2C1_MasterRead
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text13
  3307  001C00                     __ptext13:
  3308                           	opt stack 0
  3309  001C00                     _I2C1_MasterReadTRBBuild:
  3310                           	opt stack 21
  3311                           
  3312                           ;i2c1.c: 701: ptrb->address = address << 1;
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;incstack = 0
  3316  001C00  0100               	movlb	0	; () banked
  3317  001C02  C0CE  F03B         	movff	I2C1_MasterReadTRBBuild@address,??_I2C1_MasterReadTRBBuild
  3318  001C06  0100               	movlb	0	; () banked
  3319  001C08  C0CF  F03C         	movff	I2C1_MasterReadTRBBuild@address+1,??_I2C1_MasterReadTRBBuild+1
  3320  001C0C  90D8               	bcf	status,0,c
  3321  001C0E  363B               	rlcf	??_I2C1_MasterReadTRBBuild,f,c
  3322  001C10  363C               	rlcf	??_I2C1_MasterReadTRBBuild+1,f,c
  3323  001C12  C0C9  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
  3324  001C16  C0CA  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
  3325  001C1A  C03B  FFDE         	movff	??_I2C1_MasterReadTRBBuild,postinc2
  3326  001C1E  C03C  FFDD         	movff	??_I2C1_MasterReadTRBBuild+1,postdec2
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;i2c1.c: 703: ptrb->address |= 0x01;
  3330  001C22  C0C9  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
  3331  001C26  C0CA  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
  3332  001C2A  0E00               	movlw	0
  3333  001C2C  80DB               	bsf	plusw2,0,c
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;i2c1.c: 704: ptrb->length = length;
  3337  001C2E  0100               	movlb	0	; () banked
  3338  001C30  EE20 F002          	lfsr	2,2
  3339  001C34  0100               	movlb	0	; () banked
  3340  001C36  51C9               	movf	I2C1_MasterReadTRBBuild@ptrb& (0+255),w,b
  3341  001C38  26D9               	addwf	fsr2l,f,c
  3342  001C3A  0100               	movlb	0	; () banked
  3343  001C3C  51CA               	movf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),w,b
  3344  001C3E  22DA               	addwfc	fsr2h,f,c
  3345  001C40  0100               	movlb	0	; () banked
  3346  001C42  C0CD  FFDF         	movff	I2C1_MasterReadTRBBuild@length,indf2
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;i2c1.c: 705: ptrb->pbuffer = pdata;
  3350  001C46  0100               	movlb	0	; () banked
  3351  001C48  EE20 F003          	lfsr	2,3
  3352  001C4C  0100               	movlb	0	; () banked
  3353  001C4E  51C9               	movf	I2C1_MasterReadTRBBuild@ptrb& (0+255),w,b
  3354  001C50  26D9               	addwf	fsr2l,f,c
  3355  001C52  0100               	movlb	0	; () banked
  3356  001C54  51CA               	movf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),w,b
  3357  001C56  22DA               	addwfc	fsr2h,f,c
  3358  001C58  0100               	movlb	0	; () banked
  3359  001C5A  C0CB  FFDE         	movff	I2C1_MasterReadTRBBuild@pdata,postinc2
  3360  001C5E  0100               	movlb	0	; () banked
  3361  001C60  C0CC  FFDD         	movff	I2C1_MasterReadTRBBuild@pdata+1,postdec2
  3362                           
  3363                           ; BSR set to: 0
  3364  001C64  0012               	return	
  3365  001C66                     __end_of_I2C1_MasterReadTRBBuild:
  3366                           	opt stack 0
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           intcon	equ	0xFF2
  3374                           postinc0	equ	0xFEE
  3375                           wreg	equ	0xFE8
  3376                           indf2	equ	0xFDF
  3377                           postinc2	equ	0xFDE
  3378                           postdec2	equ	0xFDD
  3379                           plusw2	equ	0xFDB
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _DisplayTemperature *****************
  3385 ;; Defined at:
  3386 ;;		line 159 in file "StateTemp.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  thermal         1    wreg     unsigned char 
  3389 ;;  type            1   22[BANK0 ] unsigned char 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  thermal         1   23[BANK0 ] unsigned char 
  3392 ;;  negValue        1   24[BANK0 ] volatile unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;		None               void
  3395 ;; Registers used:
  3396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3402 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;Total ram usage:        3 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:   10
  3409 ;; This function calls:
  3410 ;;		_EUSART1_Write
  3411 ;;		_LCDGoto
  3412 ;;		_LCDPutChar
  3413 ;;		_LCDPutStr
  3414 ;;		___awdiv
  3415 ;;		___awmod
  3416 ;;		_printf
  3417 ;; This function is called by:
  3418 ;;		_StateTemperature
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text14
  3423  000FC6                     __ptext14:
  3424                           	opt stack 0
  3425  000FC6                     _DisplayTemperature:
  3426                           	opt stack 19
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;incstack = 0
  3430                           ;DisplayTemperature@thermal stored from wreg
  3431  000FC6  0100               	movlb	0	; () banked
  3432  000FC8  6FD2               	movwf	DisplayTemperature@thermal& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;StateTemp.c: 161: volatile uint8_t negValue;
  3436                           ;StateTemp.c: 164: if (thermal >= 128)
  3437  000FCA  0E7F               	movlw	127
  3438  000FCC  0100               	movlb	0	; () banked
  3439  000FCE  65D2               	cpfsgt	DisplayTemperature@thermal& (0+255),b
  3440  000FD0  D004               	goto	l5186
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;StateTemp.c: 165: {
  3444                           ;StateTemp.c: 166: thermal = 256 - thermal;
  3445  000FD2  0100               	movlb	0	; () banked
  3446  000FD4  6DD2               	negf	DisplayTemperature@thermal& (0+255),b
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;StateTemp.c: 167: negValue = 1;
  3450  000FD6  0E01               	movlw	1
  3451  000FD8  D001               	goto	L2
  3452  000FDA                     l5186:
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;StateTemp.c: 172: negValue = 0;
  3456  000FDA  0E00               	movlw	0
  3457  000FDC                     L2:
  3458  000FDC  0100               	movlb	0	; () banked
  3459  000FDE  6FD3               	movwf	DisplayTemperature@negValue& (0+255),b	;volatile
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;StateTemp.c: 173: }
  3463                           ;StateTemp.c: 176: if (type == 1)
  3464                           
  3465                           ; BSR set to: 0
  3466  000FE0  0100               	movlb	0	; () banked
  3467  000FE2  05D1               	decf	DisplayTemperature@type& (0+255),w,b
  3468  000FE4  A4D8               	btfss	status,2,c
  3469  000FE6  D04A               	goto	l5208
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;StateTemp.c: 177: {
  3473                           ;StateTemp.c: 178: if (negValue == 0)
  3474  000FE8  0100               	movlb	0	; () banked
  3475  000FEA  67D3               	tstfsz	DisplayTemperature@negValue& (0+255),b	;volatile
  3476  000FEC  D012               	goto	l5194
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;StateTemp.c: 179: {
  3480                           ;StateTemp.c: 180: thermal = (((thermal*9)/5)+32);
  3481  000FEE  0100               	movlb	0	; () banked
  3482  000FF0  51D2               	movf	DisplayTemperature@thermal& (0+255),w,b
  3483  000FF2  0D09               	mullw	9
  3484  000FF4  CFF3 F03B          	movff	prodl,___awdiv@dividend
  3485  000FF8  CFF4 F03C          	movff	prodh,___awdiv@dividend+1
  3486  000FFC  0E00               	movlw	0
  3487  000FFE  6E3E               	movwf	___awdiv@divisor+1,c
  3488  001000  0E05               	movlw	5
  3489  001002  6E3D               	movwf	___awdiv@divisor,c
  3490  001004  EC3C  F00C         	call	___awdiv	;wreg free
  3491  001008  503B               	movf	?___awdiv,w,c
  3492  00100A  0F20               	addlw	32
  3493  00100C  0100               	movlb	0	; () banked
  3494  00100E  6FD2               	movwf	DisplayTemperature@thermal& (0+255),b
  3495                           
  3496                           ;StateTemp.c: 181: }
  3497  001010  D035               	goto	l5208
  3498  001012                     l5194:
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;StateTemp.c: 182: else if (negValue == 1)
  3502  001012  0100               	movlb	0	; () banked
  3503  001014  05D3               	decf	DisplayTemperature@negValue& (0+255),w,b	;volatile
  3504  001016  A4D8               	btfss	status,2,c
  3505  001018  D031               	goto	l5208
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;StateTemp.c: 183: {
  3509                           ;StateTemp.c: 185: if (thermal < 18)
  3510  00101A  0E12               	movlw	18
  3511  00101C  0100               	movlb	0	; () banked
  3512  00101E  5DD2               	subwf	DisplayTemperature@thermal& (0+255),w,b
  3513  001020  B0D8               	btfsc	status,0,c
  3514  001022  D018               	goto	l5204
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;StateTemp.c: 186: {
  3518                           ;StateTemp.c: 187: thermal = (((thermal)*9)/5);
  3519  001024  0100               	movlb	0	; () banked
  3520  001026  51D2               	movf	DisplayTemperature@thermal& (0+255),w,b
  3521  001028  0D09               	mullw	9
  3522  00102A  CFF3 F03B          	movff	prodl,___awdiv@dividend
  3523  00102E  CFF4 F03C          	movff	prodh,___awdiv@dividend+1
  3524  001032  0E00               	movlw	0
  3525  001034  6E3E               	movwf	___awdiv@divisor+1,c
  3526  001036  0E05               	movlw	5
  3527  001038  6E3D               	movwf	___awdiv@divisor,c
  3528  00103A  EC3C  F00C         	call	___awdiv	;wreg free
  3529  00103E  503B               	movf	?___awdiv,w,c
  3530  001040  0100               	movlb	0	; () banked
  3531  001042  6FD2               	movwf	DisplayTemperature@thermal& (0+255),b
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;StateTemp.c: 188: thermal = 32-thermal;
  3535  001044  0100               	movlb	0	; () banked
  3536  001046  51D2               	movf	DisplayTemperature@thermal& (0+255),w,b
  3537  001048  0800               	sublw	0
  3538  00104A  0F20               	addlw	32
  3539  00104C  0100               	movlb	0	; () banked
  3540  00104E  6FD2               	movwf	DisplayTemperature@thermal& (0+255),b
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;StateTemp.c: 189: negValue = 0;
  3544  001050  0E00               	movlw	0
  3545  001052  D012               	goto	L3
  3546  001054                     l5204:
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;StateTemp.c: 191: else
  3550                           ;StateTemp.c: 192: {
  3551                           ;StateTemp.c: 193: thermal = ((((thermal)*9)/5)-32);
  3552  001054  0100               	movlb	0	; () banked
  3553  001056  51D2               	movf	DisplayTemperature@thermal& (0+255),w,b
  3554  001058  0D09               	mullw	9
  3555  00105A  CFF3 F03B          	movff	prodl,___awdiv@dividend
  3556  00105E  CFF4 F03C          	movff	prodh,___awdiv@dividend+1
  3557  001062  0E00               	movlw	0
  3558  001064  6E3E               	movwf	___awdiv@divisor+1,c
  3559  001066  0E05               	movlw	5
  3560  001068  6E3D               	movwf	___awdiv@divisor,c
  3561  00106A  EC3C  F00C         	call	___awdiv	;wreg free
  3562  00106E  503B               	movf	?___awdiv,w,c
  3563  001070  0FE0               	addlw	224
  3564  001072  0100               	movlb	0	; () banked
  3565  001074  6FD2               	movwf	DisplayTemperature@thermal& (0+255),b
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;StateTemp.c: 194: negValue = 1;
  3569  001076  0E01               	movlw	1
  3570  001078                     L3:
  3571  001078  0100               	movlb	0	; () banked
  3572  00107A  6FD3               	movwf	DisplayTemperature@negValue& (0+255),b	;volatile
  3573  00107C                     l5208:
  3574                           
  3575                           ; BSR set to: 0
  3576  00107C  0E00               	movlw	0
  3577  00107E  6E3F               	movwf	LCDGoto@ln,c
  3578  001080  0E00               	movlw	0
  3579  001082  EC4E  F00F         	call	_LCDGoto
  3580  001086  0EFF               	movlw	high (STR_109+2)
  3581  001088  6E40               	movwf	LCDPutStr@str+1,c
  3582  00108A  0E21               	movlw	low (STR_109+2)
  3583  00108C  6E3F               	movwf	LCDPutStr@str,c
  3584  00108E  EC33  F00E         	call	_LCDPutStr	;wreg free
  3585  001092  0100               	movlb	0	; () banked
  3586  001094  05D3               	decf	DisplayTemperature@negValue& (0+255),w,b	;volatile
  3587  001096  A4D8               	btfss	status,2,c
  3588  001098  D004               	goto	l5216
  3589                           
  3590                           ; BSR set to: 0
  3591  00109A  0E2D               	movlw	45
  3592  00109C  EC8A  F011         	call	_LCDPutChar
  3593  0010A0  D020               	goto	l1057
  3594  0010A2                     l5216:
  3595  0010A2  0100               	movlb	0	; () banked
  3596  0010A4  C0D2  F03B         	movff	DisplayTemperature@thermal,___awdiv@dividend
  3597  0010A8  6A3C               	clrf	___awdiv@dividend+1,c
  3598  0010AA  0E00               	movlw	0
  3599  0010AC  6E3E               	movwf	___awdiv@divisor+1,c
  3600  0010AE  0E64               	movlw	100
  3601  0010B0  6E3D               	movwf	___awdiv@divisor,c
  3602  0010B2  EC3C  F00C         	call	___awdiv	;wreg free
  3603  0010B6  503C               	movf	?___awdiv+1,w,c
  3604  0010B8  103B               	iorwf	?___awdiv,w,c
  3605  0010BA  A4D8               	btfss	status,2,c
  3606  0010BC  D004               	goto	l5220
  3607  0010BE  0E20               	movlw	32
  3608  0010C0  EC8A  F011         	call	_LCDPutChar
  3609  0010C4  D00E               	goto	l1057
  3610  0010C6                     l5220:
  3611  0010C6  0100               	movlb	0	; () banked
  3612  0010C8  C0D2  F03B         	movff	DisplayTemperature@thermal,___awdiv@dividend
  3613  0010CC  6A3C               	clrf	___awdiv@dividend+1,c
  3614  0010CE  0E00               	movlw	0
  3615  0010D0  6E3E               	movwf	___awdiv@divisor+1,c
  3616  0010D2  0E64               	movlw	100
  3617  0010D4  6E3D               	movwf	___awdiv@divisor,c
  3618  0010D6  EC3C  F00C         	call	___awdiv	;wreg free
  3619  0010DA  503B               	movf	?___awdiv,w,c
  3620  0010DC  0F30               	addlw	48
  3621  0010DE  EC8A  F011         	call	_LCDPutChar
  3622  0010E2                     l1057:
  3623  0010E2  0100               	movlb	0	; () banked
  3624  0010E4  C0D2  F03B         	movff	DisplayTemperature@thermal,___awdiv@dividend
  3625  0010E8  6A3C               	clrf	___awdiv@dividend+1,c
  3626  0010EA  0E00               	movlw	0
  3627  0010EC  6E3E               	movwf	___awdiv@divisor+1,c
  3628  0010EE  0E0A               	movlw	10
  3629  0010F0  6E3D               	movwf	___awdiv@divisor,c
  3630  0010F2  EC3C  F00C         	call	___awdiv	;wreg free
  3631  0010F6  503B               	movf	?___awdiv,w,c
  3632  0010F8  0F30               	addlw	48
  3633  0010FA  EC8A  F011         	call	_LCDPutChar
  3634  0010FE  0100               	movlb	0	; () banked
  3635  001100  C0D2  F0CD         	movff	DisplayTemperature@thermal,___awmod@dividend
  3636  001104  0100               	movlb	0	; () banked
  3637  001106  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  3638  001108  0E00               	movlw	0
  3639  00110A  0100               	movlb	0	; () banked
  3640  00110C  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  3641  00110E  0E0A               	movlw	10
  3642  001110  0100               	movlb	0	; () banked
  3643  001112  6FCF               	movwf	___awmod@divisor& (0+255),b
  3644  001114  EC9B  F00C         	call	___awmod	;wreg free
  3645  001118  0100               	movlb	0	; () banked
  3646  00111A  51CD               	movf	?___awmod& (0+255),w,b
  3647  00111C  0F30               	addlw	48
  3648  00111E  EC8A  F011         	call	_LCDPutChar
  3649  001122  0EDF               	movlw	223
  3650  001124  EC8A  F011         	call	_LCDPutChar
  3651  001128  0100               	movlb	0	; () banked
  3652  00112A  05D1               	decf	DisplayTemperature@type& (0+255),w,b
  3653  00112C  A4D8               	btfss	status,2,c
  3654  00112E  D007               	goto	l1060
  3655                           
  3656                           ; BSR set to: 0
  3657  001130  0EFF               	movlw	high STR_105
  3658  001132  6E40               	movwf	LCDPutStr@str+1,c
  3659  001134  0E53               	movlw	low STR_105
  3660  001136  6E3F               	movwf	LCDPutStr@str,c
  3661  001138  EC33  F00E         	call	_LCDPutStr	;wreg free
  3662  00113C  D009               	goto	l5230
  3663  00113E                     l1060:
  3664                           
  3665                           ; BSR set to: 0
  3666  00113E  0100               	movlb	0	; () banked
  3667  001140  67D1               	tstfsz	DisplayTemperature@type& (0+255),b
  3668  001142  D006               	goto	l5230
  3669                           
  3670                           ; BSR set to: 0
  3671  001144  0EFF               	movlw	high STR_106
  3672  001146  6E40               	movwf	LCDPutStr@str+1,c
  3673  001148  0E4C               	movlw	low STR_106
  3674  00114A  6E3F               	movwf	LCDPutStr@str,c
  3675  00114C  EC33  F00E         	call	_LCDPutStr	;wreg free
  3676  001150                     l5230:
  3677  001150  0E01               	movlw	1
  3678  001152  6E3F               	movwf	LCDGoto@ln,c
  3679  001154  0E00               	movlw	0
  3680  001156  EC4E  F00F         	call	_LCDGoto
  3681  00115A  0100               	movlb	0	; () banked
  3682  00115C  05D1               	decf	DisplayTemperature@type& (0+255),w,b
  3683  00115E  A4D8               	btfss	status,2,c
  3684  001160  D007               	goto	l1063
  3685                           
  3686                           ; BSR set to: 0
  3687  001162  0EFE               	movlw	high STR_107
  3688  001164  6E40               	movwf	LCDPutStr@str+1,c
  3689  001166  0E19               	movlw	low STR_107
  3690  001168  6E3F               	movwf	LCDPutStr@str,c
  3691  00116A  EC33  F00E         	call	_LCDPutStr	;wreg free
  3692  00116E  D009               	goto	l5238
  3693  001170                     l1063:
  3694                           
  3695                           ; BSR set to: 0
  3696  001170  0100               	movlb	0	; () banked
  3697  001172  67D1               	tstfsz	DisplayTemperature@type& (0+255),b
  3698  001174  D006               	goto	l5238
  3699                           
  3700                           ; BSR set to: 0
  3701  001176  0EFE               	movlw	high STR_108
  3702  001178  6E40               	movwf	LCDPutStr@str+1,c
  3703  00117A  0E2A               	movlw	low STR_108
  3704  00117C  6E3F               	movwf	LCDPutStr@str,c
  3705  00117E  EC33  F00E         	call	_LCDPutStr	;wreg free
  3706  001182                     l5238:
  3707  001182  0EFF               	movlw	high STR_109
  3708  001184  6E3E               	movwf	printf@f+1,c
  3709  001186  0E1F               	movlw	low STR_109
  3710  001188  6E3D               	movwf	printf@f,c
  3711  00118A  ECE5  F010         	call	_printf	;wreg free
  3712  00118E  0100               	movlb	0	; () banked
  3713  001190  05D3               	decf	DisplayTemperature@negValue& (0+255),w,b	;volatile
  3714  001192  A4D8               	btfss	status,2,c
  3715  001194  D004               	goto	l5244
  3716                           
  3717                           ; BSR set to: 0
  3718  001196  0E2D               	movlw	45
  3719  001198  EC38  F010         	call	_EUSART1_Write
  3720  00119C  D020               	goto	l1069
  3721  00119E                     l5244:
  3722  00119E  0100               	movlb	0	; () banked
  3723  0011A0  C0D2  F03B         	movff	DisplayTemperature@thermal,___awdiv@dividend
  3724  0011A4  6A3C               	clrf	___awdiv@dividend+1,c
  3725  0011A6  0E00               	movlw	0
  3726  0011A8  6E3E               	movwf	___awdiv@divisor+1,c
  3727  0011AA  0E64               	movlw	100
  3728  0011AC  6E3D               	movwf	___awdiv@divisor,c
  3729  0011AE  EC3C  F00C         	call	___awdiv	;wreg free
  3730  0011B2  503C               	movf	?___awdiv+1,w,c
  3731  0011B4  103B               	iorwf	?___awdiv,w,c
  3732  0011B6  A4D8               	btfss	status,2,c
  3733  0011B8  D004               	goto	l5248
  3734  0011BA  0E20               	movlw	32
  3735  0011BC  EC38  F010         	call	_EUSART1_Write
  3736  0011C0  D00E               	goto	l1069
  3737  0011C2                     l5248:
  3738  0011C2  0100               	movlb	0	; () banked
  3739  0011C4  C0D2  F03B         	movff	DisplayTemperature@thermal,___awdiv@dividend
  3740  0011C8  6A3C               	clrf	___awdiv@dividend+1,c
  3741  0011CA  0E00               	movlw	0
  3742  0011CC  6E3E               	movwf	___awdiv@divisor+1,c
  3743  0011CE  0E64               	movlw	100
  3744  0011D0  6E3D               	movwf	___awdiv@divisor,c
  3745  0011D2  EC3C  F00C         	call	___awdiv	;wreg free
  3746  0011D6  503B               	movf	?___awdiv,w,c
  3747  0011D8  0F30               	addlw	48
  3748  0011DA  EC38  F010         	call	_EUSART1_Write
  3749  0011DE                     l1069:
  3750  0011DE  0100               	movlb	0	; () banked
  3751  0011E0  C0D2  F03B         	movff	DisplayTemperature@thermal,___awdiv@dividend
  3752  0011E4  6A3C               	clrf	___awdiv@dividend+1,c
  3753  0011E6  0E00               	movlw	0
  3754  0011E8  6E3E               	movwf	___awdiv@divisor+1,c
  3755  0011EA  0E0A               	movlw	10
  3756  0011EC  6E3D               	movwf	___awdiv@divisor,c
  3757  0011EE  EC3C  F00C         	call	___awdiv	;wreg free
  3758  0011F2  503B               	movf	?___awdiv,w,c
  3759  0011F4  0F30               	addlw	48
  3760  0011F6  EC38  F010         	call	_EUSART1_Write
  3761  0011FA  0100               	movlb	0	; () banked
  3762  0011FC  C0D2  F0CD         	movff	DisplayTemperature@thermal,___awmod@dividend
  3763  001200  0100               	movlb	0	; () banked
  3764  001202  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  3765  001204  0E00               	movlw	0
  3766  001206  0100               	movlb	0	; () banked
  3767  001208  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  3768  00120A  0E0A               	movlw	10
  3769  00120C  0100               	movlb	0	; () banked
  3770  00120E  6FCF               	movwf	___awmod@divisor& (0+255),b
  3771  001210  EC9B  F00C         	call	___awmod	;wreg free
  3772  001214  0100               	movlb	0	; () banked
  3773  001216  51CD               	movf	?___awmod& (0+255),w,b
  3774  001218  0F30               	addlw	48
  3775  00121A  EC38  F010         	call	_EUSART1_Write
  3776  00121E  0EF8               	movlw	248
  3777  001220  EC38  F010         	call	_EUSART1_Write
  3778  001224  0100               	movlb	0	; () banked
  3779  001226  05D1               	decf	DisplayTemperature@type& (0+255),w,b
  3780  001228  A4D8               	btfss	status,2,c
  3781  00122A  D007               	goto	l1072
  3782                           
  3783                           ; BSR set to: 0
  3784  00122C  0EFF               	movlw	high STR_105
  3785  00122E  6E3E               	movwf	printf@f+1,c
  3786  001230  0E53               	movlw	low STR_105
  3787  001232  6E3D               	movwf	printf@f,c
  3788  001234  ECE5  F010         	call	_printf	;wreg free
  3789  001238  0012               	return	
  3790  00123A                     l1072:
  3791                           
  3792                           ; BSR set to: 0
  3793  00123A  0100               	movlb	0	; () banked
  3794  00123C  67D1               	tstfsz	DisplayTemperature@type& (0+255),b
  3795  00123E  0012               	return	
  3796                           
  3797                           ; BSR set to: 0
  3798  001240  0EFF               	movlw	high STR_106
  3799  001242  6E3E               	movwf	printf@f+1,c
  3800  001244  0E4C               	movlw	low STR_106
  3801  001246  6E3D               	movwf	printf@f,c
  3802  001248  ECE5  F010         	call	_printf	;wreg free
  3803  00124C  0012               	return	
  3804  00124E                     __end_of_DisplayTemperature:
  3805                           	opt stack 0
  3806                           tblptru	equ	0xFF8
  3807                           tblptrh	equ	0xFF7
  3808                           tblptrl	equ	0xFF6
  3809                           tablat	equ	0xFF5
  3810                           prodh	equ	0xFF4
  3811                           prodl	equ	0xFF3
  3812                           intcon	equ	0xFF2
  3813                           postinc0	equ	0xFEE
  3814                           wreg	equ	0xFE8
  3815                           indf2	equ	0xFDF
  3816                           postinc2	equ	0xFDE
  3817                           postdec2	equ	0xFDD
  3818                           plusw2	equ	0xFDB
  3819                           fsr2h	equ	0xFDA
  3820                           fsr2l	equ	0xFD9
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _DisplayTempMenu *****************
  3824 ;; Defined at:
  3825 ;;		line 150 in file "StateTemp.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;		None
  3830 ;; Return value:  Size  Location     Type
  3831 ;;		None               void
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;Total ram usage:        0 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:   10
  3846 ;; This function calls:
  3847 ;;		_LCDGoto
  3848 ;;		_LCDPutStr
  3849 ;; This function is called by:
  3850 ;;		_StateTemperature
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text15
  3855  00228A                     __ptext15:
  3856                           	opt stack 0
  3857  00228A                     _DisplayTempMenu:
  3858                           	opt stack 19
  3859                           
  3860                           ;incstack = 0
  3861                           ;StateTemp.c: 153: do { LCDGoto(0,0); LCDPutStr("  Temperature"); }while (0);;
  3862  00228A  0E00               	movlw	0
  3863  00228C  6E3F               	movwf	LCDGoto@ln,c
  3864  00228E  0E00               	movlw	0
  3865  002290  EC4E  F00F         	call	_LCDGoto
  3866  002294  0EFE               	movlw	high STR_102
  3867  002296  6E40               	movwf	LCDPutStr@str+1,c
  3868  002298  0EBD               	movlw	low STR_102
  3869  00229A  6E3F               	movwf	LCDPutStr@str,c
  3870  00229C  EC33  F00E         	call	_LCDPutStr	;wreg free
  3871                           
  3872                           ;StateTemp.c: 156: do { LCDGoto(0,1); LCDPutStr("RA4=Next RB0=Now"); } while (0);;
  3873  0022A0  0E01               	movlw	1
  3874  0022A2  6E3F               	movwf	LCDGoto@ln,c
  3875  0022A4  0E00               	movlw	0
  3876  0022A6  EC4E  F00F         	call	_LCDGoto
  3877  0022AA  0EFE               	movlw	high STR_4
  3878  0022AC  6E40               	movwf	LCDPutStr@str+1,c
  3879  0022AE  0E6E               	movlw	low STR_4
  3880  0022B0  6E3F               	movwf	LCDPutStr@str,c
  3881  0022B2  EC33  F00E         	call	_LCDPutStr	;wreg free
  3882  0022B6  0012               	return	
  3883  0022B8                     __end_of_DisplayTempMenu:
  3884                           	opt stack 0
  3885                           tblptru	equ	0xFF8
  3886                           tblptrh	equ	0xFF7
  3887                           tblptrl	equ	0xFF6
  3888                           tablat	equ	0xFF5
  3889                           prodh	equ	0xFF4
  3890                           prodl	equ	0xFF3
  3891                           intcon	equ	0xFF2
  3892                           postinc0	equ	0xFEE
  3893                           wreg	equ	0xFE8
  3894                           indf2	equ	0xFDF
  3895                           postinc2	equ	0xFDE
  3896                           postdec2	equ	0xFDD
  3897                           plusw2	equ	0xFDB
  3898                           fsr2h	equ	0xFDA
  3899                           fsr2l	equ	0xFD9
  3900                           status	equ	0xFD8
  3901                           
  3902 ;; *************** function _StateInitial *****************
  3903 ;; Defined at:
  3904 ;;		line 54 in file "StateInitial.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;		None               void
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;Total ram usage:        0 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:   11
  3925 ;; This function calls:
  3926 ;;		_DisplaySplashText
  3927 ;;		_LCDPutCmd
  3928 ;;		_Wait2s
  3929 ;; This function is called by:
  3930 ;;		_main
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text16
  3935  00258A                     __ptext16:
  3936                           	opt stack 0
  3937  00258A                     _StateInitial:
  3938                           	opt stack 19
  3939                           
  3940                           ;StateInitial.c: 57: DisplaySplashText();
  3941                           
  3942                           ;incstack = 0
  3943  00258A  ECCD  F011         	call	_DisplaySplashText	;wreg free
  3944                           
  3945                           ;StateInitial.c: 60: Wait2s();
  3946  00258E  ECE3  F012         	call	_Wait2s	;wreg free
  3947                           
  3948                           ;StateInitial.c: 63: LCDPutCmd(0x01);
  3949  002592  0E01               	movlw	1
  3950  002594  ECB0  F010         	call	_LCDPutCmd
  3951  002598  0012               	return	
  3952  00259A                     __end_of_StateInitial:
  3953                           	opt stack 0
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           plusw2	equ	0xFDB
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _Wait2s *****************
  3972 ;; Defined at:
  3973 ;;		line 75 in file "StateInitial.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;		None               void
  3980 ;; Registers used:
  3981 ;;		wreg, status,2
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;Total ram usage:        0 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    7
  3994 ;; This function calls:
  3995 ;;		Nothing
  3996 ;; This function is called by:
  3997 ;;		_StateInitial
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text17
  4002  0025C6                     __ptext17:
  4003                           	opt stack 0
  4004  0025C6                     _Wait2s:
  4005                           	opt stack 22
  4006                           
  4007                           ;StateInitial.c: 77: tmrCount = 50;
  4008                           
  4009                           ;incstack = 0
  4010  0025C6  0E32               	movlw	50
  4011  0025C8  6E1E               	movwf	_tmrCount,c
  4012  0025CA                     l567:
  4013  0025CA  661E               	tstfsz	_tmrCount,c
  4014  0025CC  D7FE               	goto	l567
  4015  0025CE  0012               	return	
  4016  0025D0                     __end_of_Wait2s:
  4017                           	opt stack 0
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           prodh	equ	0xFF4
  4023                           prodl	equ	0xFF3
  4024                           intcon	equ	0xFF2
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           indf2	equ	0xFDF
  4028                           postinc2	equ	0xFDE
  4029                           postdec2	equ	0xFDD
  4030                           plusw2	equ	0xFDB
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _DisplaySplashText *****************
  4036 ;; Defined at:
  4037 ;;		line 66 in file "StateInitial.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;		None
  4042 ;; Return value:  Size  Location     Type
  4043 ;;		None               void
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;Total ram usage:        0 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:   10
  4058 ;; This function calls:
  4059 ;;		_LCDGoto
  4060 ;;		_LCDPutCmd
  4061 ;;		_LCDPutStr
  4062 ;; This function is called by:
  4063 ;;		_StateInitial
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text18
  4068  00239A                     __ptext18:
  4069                           	opt stack 0
  4070  00239A                     _DisplaySplashText:
  4071                           	opt stack 19
  4072                           
  4073                           ;StateInitial.c: 69: LCDPutCmd(0x01);
  4074                           
  4075                           ;incstack = 0
  4076  00239A  0E01               	movlw	1
  4077  00239C  ECB0  F010         	call	_LCDPutCmd
  4078                           
  4079                           ;StateInitial.c: 72: do { LCDPutStr("   Microchip"); LCDGoto(0,1); LCDPutStr(" PICDEM 2 
      +                          PLUS"); }while (0);;
  4080  0023A0  0EFE               	movlw	high STR_1
  4081  0023A2  6E40               	movwf	LCDPutStr@str+1,c
  4082  0023A4  0ED8               	movlw	low STR_1
  4083  0023A6  6E3F               	movwf	LCDPutStr@str,c
  4084  0023A8  EC33  F00E         	call	_LCDPutStr	;wreg free
  4085  0023AC  0E01               	movlw	1
  4086  0023AE  6E3F               	movwf	LCDGoto@ln,c
  4087  0023B0  0E00               	movlw	0
  4088  0023B2  EC4E  F00F         	call	_LCDGoto
  4089  0023B6  0EFE               	movlw	high STR_2
  4090  0023B8  6E40               	movwf	LCDPutStr@str+1,c
  4091  0023BA  0EAE               	movlw	low STR_2
  4092  0023BC  6E3F               	movwf	LCDPutStr@str,c
  4093  0023BE  EC33  F00E         	call	_LCDPutStr	;wreg free
  4094  0023C2  0012               	return	
  4095  0023C4                     __end_of_DisplaySplashText:
  4096                           	opt stack 0
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           postinc0	equ	0xFEE
  4105                           wreg	equ	0xFE8
  4106                           indf2	equ	0xFDF
  4107                           postinc2	equ	0xFDE
  4108                           postdec2	equ	0xFDD
  4109                           plusw2	equ	0xFDB
  4110                           fsr2h	equ	0xFDA
  4111                           fsr2l	equ	0xFD9
  4112                           status	equ	0xFD8
  4113                           
  4114 ;; *************** function _StateClock *****************
  4115 ;; Defined at:
  4116 ;;		line 59 in file "StateRTC.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;		None               void
  4123 ;; Registers used:
  4124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;Total ram usage:        0 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:   11
  4137 ;; This function calls:
  4138 ;;		_DisplayClockMenu
  4139 ;;		_DisplayTime
  4140 ;;		_LCDPutCmd
  4141 ;;		_StateClockSet
  4142 ;;		_TMR1_StartTimer
  4143 ;; This function is called by:
  4144 ;;		_main
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text19
  4149  001E44                     __ptext19:
  4150                           	opt stack 0
  4151  001E44                     _StateClock:
  4152                           	opt stack 19
  4153                           
  4154                           ;StateRTC.c: 62: DisplayClockMenu();
  4155                           
  4156                           ;incstack = 0
  4157  001E44  EC5C  F011         	call	_DisplayClockMenu	;wreg free
  4158  001E48                     l5396:
  4159                           
  4160                           ;StateRTC.c: 65: {
  4161                           ;StateRTC.c: 67: if((Buttons.But1Pressed))
  4162  001E48  0100               	movlb	0	; () banked
  4163  001E4A  A1B7               	btfss	_Buttons& (0+255),0,b
  4164  001E4C  D006               	goto	l884
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;StateRTC.c: 68: {
  4168                           ;StateRTC.c: 70: Buttons.But1Pressed = 0;
  4169  001E4E  0100               	movlb	0	; () banked
  4170  001E50  91B7               	bcf	_Buttons& (0+255),0,b
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;StateRTC.c: 73: LCDPutCmd(0x01);
  4174  001E52  0E01               	movlw	1
  4175  001E54  ECB0  F010         	call	_LCDPutCmd
  4176  001E58  0012               	return	
  4177  001E5A                     l884:
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;StateRTC.c: 80: else if((Buttons.But2Pressed))
  4181  001E5A  0100               	movlb	0	; () banked
  4182  001E5C  A3B7               	btfss	_Buttons& (0+255),1,b
  4183  001E5E  D7F4               	goto	l5396
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;StateRTC.c: 81: {
  4187                           ;StateRTC.c: 83: Buttons.But2Pressed = 0;
  4188  001E60  0100               	movlb	0	; () banked
  4189  001E62  93B7               	bcf	_Buttons& (0+255),1,b
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;StateRTC.c: 86: TMR1_StartTimer();
  4193  001E64  ECF3  F012         	call	_TMR1_StartTimer	;wreg free
  4194  001E68                     l5410:
  4195                           
  4196                           ;StateRTC.c: 89: {
  4197                           ;StateRTC.c: 91: DisplayTime();
  4198  001E68  EC69  F00A         	call	_DisplayTime	;wreg free
  4199                           
  4200                           ;StateRTC.c: 94: if((Buttons.But2Pressed))
  4201  001E6C  0100               	movlb	0	; () banked
  4202  001E6E  A3B7               	btfss	_Buttons& (0+255),1,b
  4203  001E70  D006               	goto	l889
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;StateRTC.c: 95: {
  4207                           ;StateRTC.c: 97: Buttons.But2Pressed = 0;
  4208  001E72  0100               	movlb	0	; () banked
  4209  001E74  93B7               	bcf	_Buttons& (0+255),1,b
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;StateRTC.c: 100: LCDPutCmd(0x01);
  4213  001E76  0E01               	movlw	1
  4214  001E78  ECB0  F010         	call	_LCDPutCmd
  4215                           
  4216                           ;StateRTC.c: 103: break;
  4217  001E7C  D00B               	goto	l5426
  4218  001E7E                     l889:
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;StateRTC.c: 107: else if((Buttons.But1Pressed))
  4222  001E7E  0100               	movlb	0	; () banked
  4223  001E80  A1B7               	btfss	_Buttons& (0+255),0,b
  4224  001E82  D7F2               	goto	l5410
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;StateRTC.c: 108: {
  4228                           ;StateRTC.c: 110: Buttons.But1Pressed = 0;
  4229  001E84  0100               	movlb	0	; () banked
  4230  001E86  91B7               	bcf	_Buttons& (0+255),0,b
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;StateRTC.c: 113: StateClockSet();
  4234  001E88  EC59  F004         	call	_StateClockSet	;wreg free
  4235                           
  4236                           ;StateRTC.c: 116: LCDPutCmd(0x01);
  4237  001E8C  0E01               	movlw	1
  4238  001E8E  ECB0  F010         	call	_LCDPutCmd
  4239  001E92  D7EA               	goto	l5410
  4240  001E94                     l5426:
  4241                           
  4242                           ;StateRTC.c: 117: }
  4243                           ;StateRTC.c: 118: }
  4244                           ;StateRTC.c: 121: LCDPutCmd(0x01);
  4245  001E94  0E01               	movlw	1
  4246  001E96  ECB0  F010         	call	_LCDPutCmd
  4247                           
  4248                           ;StateRTC.c: 124: break;
  4249  001E9A  0012               	return	
  4250  001E9C                     __end_of_StateClock:
  4251                           	opt stack 0
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           prodh	equ	0xFF4
  4257                           prodl	equ	0xFF3
  4258                           intcon	equ	0xFF2
  4259                           postinc0	equ	0xFEE
  4260                           wreg	equ	0xFE8
  4261                           indf2	equ	0xFDF
  4262                           postinc2	equ	0xFDE
  4263                           postdec2	equ	0xFDD
  4264                           plusw2	equ	0xFDB
  4265                           fsr2h	equ	0xFDA
  4266                           fsr2l	equ	0xFD9
  4267                           status	equ	0xFD8
  4268                           
  4269 ;; *************** function _TMR1_StartTimer *****************
  4270 ;; Defined at:
  4271 ;;		line 90 in file "mcc_generated_files/tmr1.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;		None               void
  4278 ;; Registers used:
  4279 ;;		None
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;Total ram usage:        0 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    7
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_StateClock
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text20
  4300  0025E6                     __ptext20:
  4301                           	opt stack 0
  4302  0025E6                     _TMR1_StartTimer:
  4303                           	opt stack 22
  4304                           
  4305                           ;tmr1.c: 93: T1CONbits.TMR1ON = 1;
  4306                           
  4307                           ;incstack = 0
  4308  0025E6  80CD               	bsf	4045,0,c	;volatile
  4309  0025E8  0012               	return	
  4310  0025EA                     __end_of_TMR1_StartTimer:
  4311                           	opt stack 0
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           intcon	equ	0xFF2
  4319                           postinc0	equ	0xFEE
  4320                           wreg	equ	0xFE8
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           plusw2	equ	0xFDB
  4325                           fsr2h	equ	0xFDA
  4326                           fsr2l	equ	0xFD9
  4327                           status	equ	0xFD8
  4328                           
  4329 ;; *************** function _StateClockSet *****************
  4330 ;; Defined at:
  4331 ;;		line 129 in file "StateRTC.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;		None
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;		None               void
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;Total ram usage:        0 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:   10
  4352 ;; This function calls:
  4353 ;;		_LCDGoto
  4354 ;;		_LCDPutChar
  4355 ;;		_LCDPutCmd
  4356 ;;		_LCDPutStr
  4357 ;;		_RTCDecHrs
  4358 ;;		_RTCDecMinutes
  4359 ;;		_RTCIncHrs
  4360 ;;		_RTCIncMinutes
  4361 ;;		___awdiv
  4362 ;;		___awmod
  4363 ;; This function is called by:
  4364 ;;		_StateClock
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text21
  4369  0008B2                     __ptext21:
  4370                           	opt stack 0
  4371  0008B2                     _StateClockSet:
  4372                           	opt stack 19
  4373                           
  4374                           ;StateRTC.c: 132: LCDPutCmd(0x01);
  4375                           
  4376                           ;incstack = 0
  4377  0008B2  0E01               	movlw	1
  4378  0008B4  ECB0  F010         	call	_LCDPutCmd
  4379  0008B8                     l899:
  4380  0008B8  0E00               	movlw	0
  4381  0008BA  6E3F               	movwf	LCDGoto@ln,c
  4382  0008BC  0E00               	movlw	0
  4383  0008BE  EC4E  F00F         	call	_LCDGoto
  4384  0008C2  0EFF               	movlw	high STR_89
  4385  0008C4  6E40               	movwf	LCDPutStr@str+1,c
  4386  0008C6  0E29               	movlw	low STR_89
  4387  0008C8  6E3F               	movwf	LCDPutStr@str,c
  4388  0008CA  EC33  F00E         	call	_LCDPutStr	;wreg free
  4389  0008CE  C003  F03B         	movff	_dateTime+2,___awdiv@dividend
  4390  0008D2  6A3C               	clrf	___awdiv@dividend+1,c
  4391  0008D4  0E00               	movlw	0
  4392  0008D6  6E3E               	movwf	___awdiv@divisor+1,c
  4393  0008D8  0E0A               	movlw	10
  4394  0008DA  6E3D               	movwf	___awdiv@divisor,c
  4395  0008DC  EC3C  F00C         	call	___awdiv	;wreg free
  4396  0008E0  503B               	movf	?___awdiv,w,c
  4397  0008E2  0F30               	addlw	48
  4398  0008E4  EC8A  F011         	call	_LCDPutChar
  4399  0008E8  0100               	movlb	0	; () banked
  4400  0008EA  C003  F0CD         	movff	_dateTime+2,___awmod@dividend
  4401  0008EE  0100               	movlb	0	; () banked
  4402  0008F0  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4403  0008F2  0E00               	movlw	0
  4404  0008F4  0100               	movlb	0	; () banked
  4405  0008F6  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4406  0008F8  0E0A               	movlw	10
  4407  0008FA  0100               	movlb	0	; () banked
  4408  0008FC  6FCF               	movwf	___awmod@divisor& (0+255),b
  4409  0008FE  EC9B  F00C         	call	___awmod	;wreg free
  4410  000902  0100               	movlb	0	; () banked
  4411  000904  51CD               	movf	?___awmod& (0+255),w,b
  4412  000906  0F30               	addlw	48
  4413  000908  EC8A  F011         	call	_LCDPutChar
  4414  00090C  0E3A               	movlw	58
  4415  00090E  EC8A  F011         	call	_LCDPutChar
  4416  000912  C002  F03B         	movff	_dateTime+1,___awdiv@dividend
  4417  000916  6A3C               	clrf	___awdiv@dividend+1,c
  4418  000918  0E00               	movlw	0
  4419  00091A  6E3E               	movwf	___awdiv@divisor+1,c
  4420  00091C  0E0A               	movlw	10
  4421  00091E  6E3D               	movwf	___awdiv@divisor,c
  4422  000920  EC3C  F00C         	call	___awdiv	;wreg free
  4423  000924  503B               	movf	?___awdiv,w,c
  4424  000926  0F30               	addlw	48
  4425  000928  EC8A  F011         	call	_LCDPutChar
  4426  00092C  0100               	movlb	0	; () banked
  4427  00092E  C002  F0CD         	movff	_dateTime+1,___awmod@dividend
  4428  000932  0100               	movlb	0	; () banked
  4429  000934  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4430  000936  0E00               	movlw	0
  4431  000938  0100               	movlb	0	; () banked
  4432  00093A  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4433  00093C  0E0A               	movlw	10
  4434  00093E  0100               	movlb	0	; () banked
  4435  000940  6FCF               	movwf	___awmod@divisor& (0+255),b
  4436  000942  EC9B  F00C         	call	___awmod	;wreg free
  4437  000946  0100               	movlb	0	; () banked
  4438  000948  51CD               	movf	?___awmod& (0+255),w,b
  4439  00094A  0F30               	addlw	48
  4440  00094C  EC8A  F011         	call	_LCDPutChar
  4441  000950  0E3A               	movlw	58
  4442  000952  EC8A  F011         	call	_LCDPutChar
  4443  000956  C001  F03B         	movff	_dateTime,___awdiv@dividend
  4444  00095A  6A3C               	clrf	___awdiv@dividend+1,c
  4445  00095C  0E00               	movlw	0
  4446  00095E  6E3E               	movwf	___awdiv@divisor+1,c
  4447  000960  0E0A               	movlw	10
  4448  000962  6E3D               	movwf	___awdiv@divisor,c
  4449  000964  EC3C  F00C         	call	___awdiv	;wreg free
  4450  000968  503B               	movf	?___awdiv,w,c
  4451  00096A  0F30               	addlw	48
  4452  00096C  EC8A  F011         	call	_LCDPutChar
  4453  000970  0100               	movlb	0	; () banked
  4454  000972  C001  F0CD         	movff	_dateTime,___awmod@dividend
  4455  000976  0100               	movlb	0	; () banked
  4456  000978  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4457  00097A  0E00               	movlw	0
  4458  00097C  0100               	movlb	0	; () banked
  4459  00097E  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4460  000980  0E0A               	movlw	10
  4461  000982  0100               	movlb	0	; () banked
  4462  000984  6FCF               	movwf	___awmod@divisor& (0+255),b
  4463  000986  EC9B  F00C         	call	___awmod	;wreg free
  4464  00098A  0100               	movlb	0	; () banked
  4465  00098C  51CD               	movf	?___awmod& (0+255),w,b
  4466  00098E  0F30               	addlw	48
  4467  000990  EC8A  F011         	call	_LCDPutChar
  4468  000994  0E01               	movlw	1
  4469  000996  6E3F               	movwf	LCDGoto@ln,c
  4470  000998  0E00               	movlw	0
  4471  00099A  EC4E  F00F         	call	_LCDGoto
  4472  00099E  0EFE               	movlw	high STR_90
  4473  0009A0  6E40               	movwf	LCDPutStr@str+1,c
  4474  0009A2  0E7F               	movlw	low STR_90
  4475  0009A4  6E3F               	movwf	LCDPutStr@str,c
  4476  0009A6  EC33  F00E         	call	_LCDPutStr	;wreg free
  4477                           
  4478                           ;StateRTC.c: 140: if((Buttons.But1Pressed))
  4479  0009AA  0100               	movlb	0	; () banked
  4480  0009AC  A1B7               	btfss	_Buttons& (0+255),0,b
  4481  0009AE  D0AE               	goto	l901
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;StateRTC.c: 141: {
  4485                           ;StateRTC.c: 143: Buttons.But1Pressed = 0;
  4486  0009B0  0100               	movlb	0	; () banked
  4487  0009B2  91B7               	bcf	_Buttons& (0+255),0,b
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;StateRTC.c: 146: set = 0;
  4491  0009B4  0E00               	movlw	0
  4492  0009B6  6E1B               	movwf	_set,c
  4493  0009B8                     l5072:
  4494  0009B8  0E00               	movlw	0
  4495  0009BA  6E3F               	movwf	LCDGoto@ln,c
  4496  0009BC  0E00               	movlw	0
  4497  0009BE  EC4E  F00F         	call	_LCDGoto
  4498  0009C2  C003  F03B         	movff	_dateTime+2,___awdiv@dividend
  4499  0009C6  6A3C               	clrf	___awdiv@dividend+1,c
  4500  0009C8  0E00               	movlw	0
  4501  0009CA  6E3E               	movwf	___awdiv@divisor+1,c
  4502  0009CC  0E0A               	movlw	10
  4503  0009CE  6E3D               	movwf	___awdiv@divisor,c
  4504  0009D0  EC3C  F00C         	call	___awdiv	;wreg free
  4505  0009D4  503B               	movf	?___awdiv,w,c
  4506  0009D6  0F30               	addlw	48
  4507  0009D8  EC8A  F011         	call	_LCDPutChar
  4508  0009DC  0100               	movlb	0	; () banked
  4509  0009DE  C003  F0CD         	movff	_dateTime+2,___awmod@dividend
  4510  0009E2  0100               	movlb	0	; () banked
  4511  0009E4  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4512  0009E6  0E00               	movlw	0
  4513  0009E8  0100               	movlb	0	; () banked
  4514  0009EA  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4515  0009EC  0E0A               	movlw	10
  4516  0009EE  0100               	movlb	0	; () banked
  4517  0009F0  6FCF               	movwf	___awmod@divisor& (0+255),b
  4518  0009F2  EC9B  F00C         	call	___awmod	;wreg free
  4519  0009F6  0100               	movlb	0	; () banked
  4520  0009F8  51CD               	movf	?___awmod& (0+255),w,b
  4521  0009FA  0F30               	addlw	48
  4522  0009FC  EC8A  F011         	call	_LCDPutChar
  4523  000A00  0E3A               	movlw	58
  4524  000A02  EC8A  F011         	call	_LCDPutChar
  4525  000A06  C002  F03B         	movff	_dateTime+1,___awdiv@dividend
  4526  000A0A  6A3C               	clrf	___awdiv@dividend+1,c
  4527  000A0C  0E00               	movlw	0
  4528  000A0E  6E3E               	movwf	___awdiv@divisor+1,c
  4529  000A10  0E0A               	movlw	10
  4530  000A12  6E3D               	movwf	___awdiv@divisor,c
  4531  000A14  EC3C  F00C         	call	___awdiv	;wreg free
  4532  000A18  503B               	movf	?___awdiv,w,c
  4533  000A1A  0F30               	addlw	48
  4534  000A1C  EC8A  F011         	call	_LCDPutChar
  4535  000A20  0100               	movlb	0	; () banked
  4536  000A22  C002  F0CD         	movff	_dateTime+1,___awmod@dividend
  4537  000A26  0100               	movlb	0	; () banked
  4538  000A28  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4539  000A2A  0E00               	movlw	0
  4540  000A2C  0100               	movlb	0	; () banked
  4541  000A2E  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4542  000A30  0E0A               	movlw	10
  4543  000A32  0100               	movlb	0	; () banked
  4544  000A34  6FCF               	movwf	___awmod@divisor& (0+255),b
  4545  000A36  EC9B  F00C         	call	___awmod	;wreg free
  4546  000A3A  0100               	movlb	0	; () banked
  4547  000A3C  51CD               	movf	?___awmod& (0+255),w,b
  4548  000A3E  0F30               	addlw	48
  4549  000A40  EC8A  F011         	call	_LCDPutChar
  4550  000A44  0E3A               	movlw	58
  4551  000A46  EC8A  F011         	call	_LCDPutChar
  4552  000A4A  C001  F03B         	movff	_dateTime,___awdiv@dividend
  4553  000A4E  6A3C               	clrf	___awdiv@dividend+1,c
  4554  000A50  0E00               	movlw	0
  4555  000A52  6E3E               	movwf	___awdiv@divisor+1,c
  4556  000A54  0E0A               	movlw	10
  4557  000A56  6E3D               	movwf	___awdiv@divisor,c
  4558  000A58  EC3C  F00C         	call	___awdiv	;wreg free
  4559  000A5C  503B               	movf	?___awdiv,w,c
  4560  000A5E  0F30               	addlw	48
  4561  000A60  EC8A  F011         	call	_LCDPutChar
  4562  000A64  0100               	movlb	0	; () banked
  4563  000A66  C001  F0CD         	movff	_dateTime,___awmod@dividend
  4564  000A6A  0100               	movlb	0	; () banked
  4565  000A6C  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4566  000A6E  0E00               	movlw	0
  4567  000A70  0100               	movlb	0	; () banked
  4568  000A72  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4569  000A74  0E0A               	movlw	10
  4570  000A76  0100               	movlb	0	; () banked
  4571  000A78  6FCF               	movwf	___awmod@divisor& (0+255),b
  4572  000A7A  EC9B  F00C         	call	___awmod	;wreg free
  4573  000A7E  0100               	movlb	0	; () banked
  4574  000A80  51CD               	movf	?___awmod& (0+255),w,b
  4575  000A82  0F30               	addlw	48
  4576  000A84  EC8A  F011         	call	_LCDPutChar
  4577  000A88  0EFF               	movlw	high STR_91
  4578  000A8A  6E40               	movwf	LCDPutStr@str+1,c
  4579  000A8C  0E3B               	movlw	low STR_91
  4580  000A8E  6E3F               	movwf	LCDPutStr@str,c
  4581  000A90  EC33  F00E         	call	_LCDPutStr	;wreg free
  4582  000A94  0E01               	movlw	1
  4583  000A96  6E3F               	movwf	LCDGoto@ln,c
  4584  000A98  0E00               	movlw	0
  4585  000A9A  EC4E  F00F         	call	_LCDGoto
  4586  000A9E  0EFF               	movlw	high STR_92
  4587  000AA0  6E40               	movwf	LCDPutStr@str+1,c
  4588  000AA2  0E6C               	movlw	low STR_92
  4589  000AA4  6E3F               	movwf	LCDPutStr@str,c
  4590  000AA6  EC33  F00E         	call	_LCDPutStr	;wreg free
  4591  000AAA  661B               	tstfsz	_set,c
  4592  000AAC  D007               	goto	l5100
  4593  000AAE  0E2B               	movlw	43
  4594  000AB0  EC8A  F011         	call	_LCDPutChar
  4595  000AB4  0E2B               	movlw	43
  4596  000AB6  EC8A  F011         	call	_LCDPutChar
  4597  000ABA  D009               	goto	l5104
  4598  000ABC                     l5100:
  4599  000ABC  041B               	decf	_set,w,c
  4600  000ABE  A4D8               	btfss	status,2,c
  4601  000AC0  D006               	goto	l5104
  4602  000AC2  0E2D               	movlw	45
  4603  000AC4  EC8A  F011         	call	_LCDPutChar
  4604  000AC8  0E2D               	movlw	45
  4605  000ACA  EC8A  F011         	call	_LCDPutChar
  4606  000ACE                     l5104:
  4607  000ACE  0EFE               	movlw	high STR_93
  4608  000AD0  6E40               	movwf	LCDPutStr@str+1,c
  4609  000AD2  0EE5               	movlw	low STR_93
  4610  000AD4  6E3F               	movwf	LCDPutStr@str,c
  4611  000AD6  EC33  F00E         	call	_LCDPutStr	;wreg free
  4612                           
  4613                           ;StateRTC.c: 154: if((Buttons.But1Pressed))
  4614  000ADA  0100               	movlb	0	; () banked
  4615  000ADC  A1B7               	btfss	_Buttons& (0+255),0,b
  4616  000ADE  D00D               	goto	l908
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;StateRTC.c: 155: {
  4620                           ;StateRTC.c: 157: Buttons.But1Pressed = 0;
  4621  000AE0  0100               	movlb	0	; () banked
  4622  000AE2  91B7               	bcf	_Buttons& (0+255),0,b
  4623                           
  4624                           ;StateRTC.c: 159: if(set == 0)
  4625  000AE4  661B               	tstfsz	_set,c
  4626  000AE6  D003               	goto	l5112
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;StateRTC.c: 160: {
  4630                           ;StateRTC.c: 162: RTCIncHrs();
  4631  000AE8  ECA9  F012         	call	_RTCIncHrs	;wreg free
  4632                           
  4633                           ;StateRTC.c: 163: }
  4634  000AEC  D765               	goto	l5072
  4635  000AEE                     l5112:
  4636                           
  4637                           ;StateRTC.c: 164: else if(set == 1)
  4638  000AEE  041B               	decf	_set,w,c
  4639  000AF0  A4D8               	btfss	status,2,c
  4640  000AF2  D762               	goto	l5072
  4641                           
  4642                           ;StateRTC.c: 165: {
  4643                           ;StateRTC.c: 167: RTCDecHrs();
  4644  000AF4  ECB3  F012         	call	_RTCDecHrs	;wreg free
  4645  000AF8  D75F               	goto	l5072
  4646  000AFA                     l908:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;StateRTC.c: 171: else if((Buttons.But2Pressed))
  4650  000AFA  0100               	movlb	0	; () banked
  4651  000AFC  A3B7               	btfss	_Buttons& (0+255),1,b
  4652  000AFE  D75C               	goto	l5072
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;StateRTC.c: 172: {
  4656                           ;StateRTC.c: 174: Buttons.But2Pressed = 0;
  4657  000B00  0100               	movlb	0	; () banked
  4658  000B02  93B7               	bcf	_Buttons& (0+255),1,b
  4659                           
  4660                           ;StateRTC.c: 176: if(set == 0)
  4661  000B04  661B               	tstfsz	_set,c
  4662  000B06  0012               	return	
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;StateRTC.c: 177: {
  4666                           ;StateRTC.c: 178: set = 1;
  4667  000B08  0E01               	movlw	1
  4668  000B0A  D755               	goto	L4
  4669  000B0C                     l901:
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;StateRTC.c: 189: else if((Buttons.But2Pressed))
  4673  000B0C  0100               	movlb	0	; () banked
  4674  000B0E  A3B7               	btfss	_Buttons& (0+255),1,b
  4675  000B10  D6D3               	goto	l899
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;StateRTC.c: 190: {
  4679                           ;StateRTC.c: 192: Buttons.But2Pressed = 0;
  4680  000B12  0100               	movlb	0	; () banked
  4681  000B14  93B7               	bcf	_Buttons& (0+255),1,b
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;StateRTC.c: 195: set = 0;
  4685  000B16  0E00               	movlw	0
  4686  000B18  6E1B               	movwf	_set,c
  4687  000B1A                     l5126:
  4688  000B1A  0E00               	movlw	0
  4689  000B1C  6E3F               	movwf	LCDGoto@ln,c
  4690  000B1E  0E00               	movlw	0
  4691  000B20  EC4E  F00F         	call	_LCDGoto
  4692  000B24  C003  F03B         	movff	_dateTime+2,___awdiv@dividend
  4693  000B28  6A3C               	clrf	___awdiv@dividend+1,c
  4694  000B2A  0E00               	movlw	0
  4695  000B2C  6E3E               	movwf	___awdiv@divisor+1,c
  4696  000B2E  0E0A               	movlw	10
  4697  000B30  6E3D               	movwf	___awdiv@divisor,c
  4698  000B32  EC3C  F00C         	call	___awdiv	;wreg free
  4699  000B36  503B               	movf	?___awdiv,w,c
  4700  000B38  0F30               	addlw	48
  4701  000B3A  EC8A  F011         	call	_LCDPutChar
  4702  000B3E  0100               	movlb	0	; () banked
  4703  000B40  C003  F0CD         	movff	_dateTime+2,___awmod@dividend
  4704  000B44  0100               	movlb	0	; () banked
  4705  000B46  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4706  000B48  0E00               	movlw	0
  4707  000B4A  0100               	movlb	0	; () banked
  4708  000B4C  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4709  000B4E  0E0A               	movlw	10
  4710  000B50  0100               	movlb	0	; () banked
  4711  000B52  6FCF               	movwf	___awmod@divisor& (0+255),b
  4712  000B54  EC9B  F00C         	call	___awmod	;wreg free
  4713  000B58  0100               	movlb	0	; () banked
  4714  000B5A  51CD               	movf	?___awmod& (0+255),w,b
  4715  000B5C  0F30               	addlw	48
  4716  000B5E  EC8A  F011         	call	_LCDPutChar
  4717  000B62  0E3A               	movlw	58
  4718  000B64  EC8A  F011         	call	_LCDPutChar
  4719  000B68  C002  F03B         	movff	_dateTime+1,___awdiv@dividend
  4720  000B6C  6A3C               	clrf	___awdiv@dividend+1,c
  4721  000B6E  0E00               	movlw	0
  4722  000B70  6E3E               	movwf	___awdiv@divisor+1,c
  4723  000B72  0E0A               	movlw	10
  4724  000B74  6E3D               	movwf	___awdiv@divisor,c
  4725  000B76  EC3C  F00C         	call	___awdiv	;wreg free
  4726  000B7A  503B               	movf	?___awdiv,w,c
  4727  000B7C  0F30               	addlw	48
  4728  000B7E  EC8A  F011         	call	_LCDPutChar
  4729  000B82  0100               	movlb	0	; () banked
  4730  000B84  C002  F0CD         	movff	_dateTime+1,___awmod@dividend
  4731  000B88  0100               	movlb	0	; () banked
  4732  000B8A  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4733  000B8C  0E00               	movlw	0
  4734  000B8E  0100               	movlb	0	; () banked
  4735  000B90  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4736  000B92  0E0A               	movlw	10
  4737  000B94  0100               	movlb	0	; () banked
  4738  000B96  6FCF               	movwf	___awmod@divisor& (0+255),b
  4739  000B98  EC9B  F00C         	call	___awmod	;wreg free
  4740  000B9C  0100               	movlb	0	; () banked
  4741  000B9E  51CD               	movf	?___awmod& (0+255),w,b
  4742  000BA0  0F30               	addlw	48
  4743  000BA2  EC8A  F011         	call	_LCDPutChar
  4744  000BA6  0E3A               	movlw	58
  4745  000BA8  EC8A  F011         	call	_LCDPutChar
  4746  000BAC  C001  F03B         	movff	_dateTime,___awdiv@dividend
  4747  000BB0  6A3C               	clrf	___awdiv@dividend+1,c
  4748  000BB2  0E00               	movlw	0
  4749  000BB4  6E3E               	movwf	___awdiv@divisor+1,c
  4750  000BB6  0E0A               	movlw	10
  4751  000BB8  6E3D               	movwf	___awdiv@divisor,c
  4752  000BBA  EC3C  F00C         	call	___awdiv	;wreg free
  4753  000BBE  503B               	movf	?___awdiv,w,c
  4754  000BC0  0F30               	addlw	48
  4755  000BC2  EC8A  F011         	call	_LCDPutChar
  4756  000BC6  0100               	movlb	0	; () banked
  4757  000BC8  C001  F0CD         	movff	_dateTime,___awmod@dividend
  4758  000BCC  0100               	movlb	0	; () banked
  4759  000BCE  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  4760  000BD0  0E00               	movlw	0
  4761  000BD2  0100               	movlb	0	; () banked
  4762  000BD4  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  4763  000BD6  0E0A               	movlw	10
  4764  000BD8  0100               	movlb	0	; () banked
  4765  000BDA  6FCF               	movwf	___awmod@divisor& (0+255),b
  4766  000BDC  EC9B  F00C         	call	___awmod	;wreg free
  4767  000BE0  0100               	movlb	0	; () banked
  4768  000BE2  51CD               	movf	?___awmod& (0+255),w,b
  4769  000BE4  0F30               	addlw	48
  4770  000BE6  EC8A  F011         	call	_LCDPutChar
  4771  000BEA  0EFF               	movlw	high STR_94
  4772  000BEC  6E40               	movwf	LCDPutStr@str+1,c
  4773  000BEE  0E32               	movlw	low STR_94
  4774  000BF0  6E3F               	movwf	LCDPutStr@str,c
  4775  000BF2  EC33  F00E         	call	_LCDPutStr	;wreg free
  4776  000BF6  0E01               	movlw	1
  4777  000BF8  6E3F               	movwf	LCDGoto@ln,c
  4778  000BFA  0E00               	movlw	0
  4779  000BFC  EC4E  F00F         	call	_LCDGoto
  4780  000C00  0EFF               	movlw	high STR_92
  4781  000C02  6E40               	movwf	LCDPutStr@str+1,c
  4782  000C04  0E6C               	movlw	low STR_92
  4783  000C06  6E3F               	movwf	LCDPutStr@str,c
  4784  000C08  EC33  F00E         	call	_LCDPutStr	;wreg free
  4785  000C0C  661B               	tstfsz	_set,c
  4786  000C0E  D007               	goto	l5154
  4787  000C10  0E2B               	movlw	43
  4788  000C12  EC8A  F011         	call	_LCDPutChar
  4789  000C16  0E2B               	movlw	43
  4790  000C18  EC8A  F011         	call	_LCDPutChar
  4791  000C1C  D009               	goto	l5158
  4792  000C1E                     l5154:
  4793  000C1E  041B               	decf	_set,w,c
  4794  000C20  A4D8               	btfss	status,2,c
  4795  000C22  D006               	goto	l5158
  4796  000C24  0E2D               	movlw	45
  4797  000C26  EC8A  F011         	call	_LCDPutChar
  4798  000C2A  0E2D               	movlw	45
  4799  000C2C  EC8A  F011         	call	_LCDPutChar
  4800  000C30                     l5158:
  4801  000C30  0EFE               	movlw	high STR_93
  4802  000C32  6E40               	movwf	LCDPutStr@str+1,c
  4803  000C34  0EE5               	movlw	low STR_93
  4804  000C36  6E3F               	movwf	LCDPutStr@str,c
  4805  000C38  EC33  F00E         	call	_LCDPutStr	;wreg free
  4806                           
  4807                           ;StateRTC.c: 203: if((Buttons.But1Pressed))
  4808  000C3C  0100               	movlb	0	; () banked
  4809  000C3E  A1B7               	btfss	_Buttons& (0+255),0,b
  4810  000C40  D00D               	goto	l927
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;StateRTC.c: 204: {
  4814                           ;StateRTC.c: 206: Buttons.But1Pressed = 0;
  4815  000C42  0100               	movlb	0	; () banked
  4816  000C44  91B7               	bcf	_Buttons& (0+255),0,b
  4817                           
  4818                           ;StateRTC.c: 208: if(set == 0)
  4819  000C46  661B               	tstfsz	_set,c
  4820  000C48  D003               	goto	l5166
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;StateRTC.c: 209: {
  4824                           ;StateRTC.c: 211: RTCIncMinutes();
  4825  000C4A  EC30  F012         	call	_RTCIncMinutes	;wreg free
  4826                           
  4827                           ;StateRTC.c: 212: }
  4828  000C4E  D765               	goto	l5126
  4829  000C50                     l5166:
  4830                           
  4831                           ;StateRTC.c: 213: else if(set == 1)
  4832  000C50  041B               	decf	_set,w,c
  4833  000C52  A4D8               	btfss	status,2,c
  4834  000C54  D762               	goto	l5126
  4835                           
  4836                           ;StateRTC.c: 214: {
  4837                           ;StateRTC.c: 216: RTCDecMinutes();
  4838  000C56  EC41  F012         	call	_RTCDecMinutes	;wreg free
  4839  000C5A  D75F               	goto	l5126
  4840  000C5C                     l927:
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;StateRTC.c: 220: else if((Buttons.But2Pressed))
  4844  000C5C  0100               	movlb	0	; () banked
  4845  000C5E  A3B7               	btfss	_Buttons& (0+255),1,b
  4846  000C60  D75C               	goto	l5126
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;StateRTC.c: 221: {
  4850                           ;StateRTC.c: 223: Buttons.But2Pressed = 0;
  4851  000C62  0100               	movlb	0	; () banked
  4852  000C64  93B7               	bcf	_Buttons& (0+255),1,b
  4853                           
  4854                           ;StateRTC.c: 225: if(set == 0)
  4855  000C66  661B               	tstfsz	_set,c
  4856  000C68  0012               	return	
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;StateRTC.c: 226: {
  4860                           ;StateRTC.c: 227: set = 1;
  4861  000C6A  0E01               	movlw	1
  4862  000C6C  D755               	goto	L5
  4863  000C6E                     __end_of_StateClockSet:
  4864                           	opt stack 0
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           prodh	equ	0xFF4
  4870                           prodl	equ	0xFF3
  4871                           intcon	equ	0xFF2
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           plusw2	equ	0xFDB
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _RTCIncMinutes *****************
  4883 ;; Defined at:
  4884 ;;		line 285 in file "StateRTC.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;		None               void
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, status,0
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    7
  4905 ;; This function calls:
  4906 ;;		Nothing
  4907 ;; This function is called by:
  4908 ;;		_StateClockSet
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text22
  4913  002460                     __ptext22:
  4914                           	opt stack 0
  4915  002460                     _RTCIncMinutes:
  4916                           	opt stack 21
  4917                           
  4918                           ;StateRTC.c: 288: dateTime.Sec = 0;
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;incstack = 0
  4922  002460  0E00               	movlw	0
  4923  002462  6E01               	movwf	_dateTime,c
  4924                           
  4925                           ;StateRTC.c: 291: if (++dateTime.Min == 60)
  4926  002464  2A02               	incf	_dateTime+1,f,c
  4927  002466  5002               	movf	(_dateTime+1)& (0+255),w,c
  4928  002468  0A3C               	xorlw	60
  4929  00246A  A4D8               	btfss	status,2,c
  4930  00246C  0012               	return	
  4931                           
  4932                           ;StateRTC.c: 292: {
  4933                           ;StateRTC.c: 294: dateTime.Min = 0;
  4934  00246E  0E00               	movlw	0
  4935  002470  6E02               	movwf	_dateTime+1,c
  4936                           
  4937                           ;StateRTC.c: 297: if (++dateTime.Hour == 24)
  4938  002472  2A03               	incf	_dateTime+2,f,c
  4939  002474  5003               	movf	(_dateTime+2)& (0+255),w,c
  4940  002476  0A18               	xorlw	24
  4941  002478  A4D8               	btfss	status,2,c
  4942  00247A  0012               	return	
  4943                           
  4944                           ;StateRTC.c: 298: {
  4945                           ;StateRTC.c: 300: dateTime.Hour = 0;
  4946  00247C  0E00               	movlw	0
  4947  00247E  6E03               	movwf	_dateTime+2,c
  4948  002480  0012               	return	
  4949  002482                     __end_of_RTCIncMinutes:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           plusw2	equ	0xFDB
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function _RTCIncHrs *****************
  4969 ;; Defined at:
  4970 ;;		line 325 in file "StateRTC.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;		None
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;		None
  4975 ;; Return value:  Size  Location     Type
  4976 ;;		None               void
  4977 ;; Registers used:
  4978 ;;		wreg, status,2, status,0
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;Total ram usage:        0 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    7
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_StateClockSet
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text23
  4999  002552                     __ptext23:
  5000                           	opt stack 0
  5001  002552                     _RTCIncHrs:
  5002                           	opt stack 21
  5003                           
  5004                           ;StateRTC.c: 328: dateTime.Sec = 0;
  5005                           
  5006                           ;incstack = 0
  5007  002552  0E00               	movlw	0
  5008  002554  6E01               	movwf	_dateTime,c
  5009                           
  5010                           ;StateRTC.c: 331: if (++dateTime.Hour == 24)
  5011  002556  2A03               	incf	_dateTime+2,f,c
  5012  002558  5003               	movf	(_dateTime+2)& (0+255),w,c
  5013  00255A  0A18               	xorlw	24
  5014  00255C  A4D8               	btfss	status,2,c
  5015  00255E  0012               	return	
  5016                           
  5017                           ;StateRTC.c: 332: {
  5018                           ;StateRTC.c: 334: dateTime.Hour = 0;
  5019  002560  0E00               	movlw	0
  5020  002562  6E03               	movwf	_dateTime+2,c
  5021  002564  0012               	return	
  5022  002566                     __end_of_RTCIncHrs:
  5023                           	opt stack 0
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           prodh	equ	0xFF4
  5029                           prodl	equ	0xFF3
  5030                           intcon	equ	0xFF2
  5031                           postinc0	equ	0xFEE
  5032                           wreg	equ	0xFE8
  5033                           indf2	equ	0xFDF
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           plusw2	equ	0xFDB
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function _RTCDecMinutes *****************
  5042 ;; Defined at:
  5043 ;;		line 305 in file "StateRTC.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;		None
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;		None
  5048 ;; Return value:  Size  Location     Type
  5049 ;;		None               void
  5050 ;; Registers used:
  5051 ;;		wreg, status,2, status,0
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;Total ram usage:        0 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    7
  5064 ;; This function calls:
  5065 ;;		Nothing
  5066 ;; This function is called by:
  5067 ;;		_StateClockSet
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text24
  5072  002482                     __ptext24:
  5073                           	opt stack 0
  5074  002482                     _RTCDecMinutes:
  5075                           	opt stack 21
  5076                           
  5077                           ;StateRTC.c: 308: dateTime.Sec = 0;
  5078                           
  5079                           ;incstack = 0
  5080  002482  0E00               	movlw	0
  5081  002484  6E01               	movwf	_dateTime,c
  5082                           
  5083                           ;StateRTC.c: 311: if (--dateTime.Min == 255)
  5084  002486  0602               	decf	_dateTime+1,f,c
  5085  002488  2802               	incf	(_dateTime+1)& (0+255),w,c
  5086  00248A  A4D8               	btfss	status,2,c
  5087  00248C  0012               	return	
  5088                           
  5089                           ;StateRTC.c: 312: {
  5090                           ;StateRTC.c: 314: dateTime.Min = (60 - 1);
  5091  00248E  0E3B               	movlw	59
  5092  002490  6E02               	movwf	_dateTime+1,c
  5093                           
  5094                           ;StateRTC.c: 317: if (--dateTime.Hour == 255)
  5095  002492  0603               	decf	_dateTime+2,f,c
  5096  002494  2803               	incf	(_dateTime+2)& (0+255),w,c
  5097  002496  A4D8               	btfss	status,2,c
  5098  002498  0012               	return	
  5099                           
  5100                           ;StateRTC.c: 318: {
  5101                           ;StateRTC.c: 320: dateTime.Hour = (24 - 1);
  5102  00249A  0E17               	movlw	23
  5103  00249C  6E03               	movwf	_dateTime+2,c
  5104  00249E  0012               	return	
  5105  0024A0                     __end_of_RTCDecMinutes:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           postinc0	equ	0xFEE
  5115                           wreg	equ	0xFE8
  5116                           indf2	equ	0xFDF
  5117                           postinc2	equ	0xFDE
  5118                           postdec2	equ	0xFDD
  5119                           plusw2	equ	0xFDB
  5120                           fsr2h	equ	0xFDA
  5121                           fsr2l	equ	0xFD9
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function _RTCDecHrs *****************
  5125 ;; Defined at:
  5126 ;;		line 338 in file "StateRTC.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;		None
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;		None               void
  5133 ;; Registers used:
  5134 ;;		wreg, status,2, status,0
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;Total ram usage:        0 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    7
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_StateClockSet
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text25
  5155  002566                     __ptext25:
  5156                           	opt stack 0
  5157  002566                     _RTCDecHrs:
  5158                           	opt stack 21
  5159                           
  5160                           ;StateRTC.c: 341: dateTime.Sec = 0;
  5161                           
  5162                           ;incstack = 0
  5163  002566  0E00               	movlw	0
  5164  002568  6E01               	movwf	_dateTime,c
  5165                           
  5166                           ;StateRTC.c: 344: if (--dateTime.Hour == 255)
  5167  00256A  0603               	decf	_dateTime+2,f,c
  5168  00256C  2803               	incf	(_dateTime+2)& (0+255),w,c
  5169  00256E  A4D8               	btfss	status,2,c
  5170  002570  0012               	return	
  5171                           
  5172                           ;StateRTC.c: 345: {
  5173                           ;StateRTC.c: 347: dateTime.Hour = (24-1);
  5174  002572  0E17               	movlw	23
  5175  002574  6E03               	movwf	_dateTime+2,c
  5176  002576  0012               	return	
  5177  002578                     __end_of_RTCDecHrs:
  5178                           	opt stack 0
  5179                           tblptru	equ	0xFF8
  5180                           tblptrh	equ	0xFF7
  5181                           tblptrl	equ	0xFF6
  5182                           tablat	equ	0xFF5
  5183                           prodh	equ	0xFF4
  5184                           prodl	equ	0xFF3
  5185                           intcon	equ	0xFF2
  5186                           postinc0	equ	0xFEE
  5187                           wreg	equ	0xFE8
  5188                           indf2	equ	0xFDF
  5189                           postinc2	equ	0xFDE
  5190                           postdec2	equ	0xFDD
  5191                           plusw2	equ	0xFDB
  5192                           fsr2h	equ	0xFDA
  5193                           fsr2l	equ	0xFD9
  5194                           status	equ	0xFD8
  5195                           
  5196 ;; *************** function _DisplayTime *****************
  5197 ;; Defined at:
  5198 ;;		line 249 in file "StateRTC.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;		None
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;		None
  5203 ;; Return value:  Size  Location     Type
  5204 ;;		None               void
  5205 ;; Registers used:
  5206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;Total ram usage:        0 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; Hardware stack levels required when called:   10
  5219 ;; This function calls:
  5220 ;;		_EUSART1_Write
  5221 ;;		_LCDGoto
  5222 ;;		_LCDPutChar
  5223 ;;		_LCDPutStr
  5224 ;;		___awdiv
  5225 ;;		___awmod
  5226 ;;		_printf
  5227 ;; This function is called by:
  5228 ;;		_StateClock
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text26
  5233  0014D2                     __ptext26:
  5234                           	opt stack 0
  5235  0014D2                     _DisplayTime:
  5236                           	opt stack 19
  5237                           
  5238                           ;incstack = 0
  5239                           ;StateRTC.c: 252: do { LCDGoto(0,0); LCDPutStr("TIME  "); LCDPutChar(dateTime.Hour/10+'0
      +                          '); LCDPutChar(dateTime.Hour % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Min/10+'0')
      +                          ; LCDPutChar(dateTime.Min % 10+'0'); LCDPutChar(':'); LCDPutChar(dateTime.Sec/10+'0'); L
      +                          CDPu
  5240  0014D2  0E00               	movlw	0
  5241  0014D4  6E3F               	movwf	LCDGoto@ln,c
  5242  0014D6  0E00               	movlw	0
  5243  0014D8  EC4E  F00F         	call	_LCDGoto
  5244  0014DC  0EFF               	movlw	high STR_99
  5245  0014DE  6E40               	movwf	LCDPutStr@str+1,c
  5246  0014E0  0E5A               	movlw	low STR_99
  5247  0014E2  6E3F               	movwf	LCDPutStr@str,c
  5248  0014E4  EC33  F00E         	call	_LCDPutStr	;wreg free
  5249  0014E8  C003  F03B         	movff	_dateTime+2,___awdiv@dividend
  5250  0014EC  6A3C               	clrf	___awdiv@dividend+1,c
  5251  0014EE  0E00               	movlw	0
  5252  0014F0  6E3E               	movwf	___awdiv@divisor+1,c
  5253  0014F2  0E0A               	movlw	10
  5254  0014F4  6E3D               	movwf	___awdiv@divisor,c
  5255  0014F6  EC3C  F00C         	call	___awdiv	;wreg free
  5256  0014FA  503B               	movf	?___awdiv,w,c
  5257  0014FC  0F30               	addlw	48
  5258  0014FE  EC8A  F011         	call	_LCDPutChar
  5259  001502  0100               	movlb	0	; () banked
  5260  001504  C003  F0CD         	movff	_dateTime+2,___awmod@dividend
  5261  001508  0100               	movlb	0	; () banked
  5262  00150A  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  5263  00150C  0E00               	movlw	0
  5264  00150E  0100               	movlb	0	; () banked
  5265  001510  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  5266  001512  0E0A               	movlw	10
  5267  001514  0100               	movlb	0	; () banked
  5268  001516  6FCF               	movwf	___awmod@divisor& (0+255),b
  5269  001518  EC9B  F00C         	call	___awmod	;wreg free
  5270  00151C  0100               	movlb	0	; () banked
  5271  00151E  51CD               	movf	?___awmod& (0+255),w,b
  5272  001520  0F30               	addlw	48
  5273  001522  EC8A  F011         	call	_LCDPutChar
  5274  001526  0E3A               	movlw	58
  5275  001528  EC8A  F011         	call	_LCDPutChar
  5276  00152C  C002  F03B         	movff	_dateTime+1,___awdiv@dividend
  5277  001530  6A3C               	clrf	___awdiv@dividend+1,c
  5278  001532  0E00               	movlw	0
  5279  001534  6E3E               	movwf	___awdiv@divisor+1,c
  5280  001536  0E0A               	movlw	10
  5281  001538  6E3D               	movwf	___awdiv@divisor,c
  5282  00153A  EC3C  F00C         	call	___awdiv	;wreg free
  5283  00153E  503B               	movf	?___awdiv,w,c
  5284  001540  0F30               	addlw	48
  5285  001542  EC8A  F011         	call	_LCDPutChar
  5286  001546  0100               	movlb	0	; () banked
  5287  001548  C002  F0CD         	movff	_dateTime+1,___awmod@dividend
  5288  00154C  0100               	movlb	0	; () banked
  5289  00154E  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  5290  001550  0E00               	movlw	0
  5291  001552  0100               	movlb	0	; () banked
  5292  001554  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  5293  001556  0E0A               	movlw	10
  5294  001558  0100               	movlb	0	; () banked
  5295  00155A  6FCF               	movwf	___awmod@divisor& (0+255),b
  5296  00155C  EC9B  F00C         	call	___awmod	;wreg free
  5297  001560  0100               	movlb	0	; () banked
  5298  001562  51CD               	movf	?___awmod& (0+255),w,b
  5299  001564  0F30               	addlw	48
  5300  001566  EC8A  F011         	call	_LCDPutChar
  5301  00156A  0E3A               	movlw	58
  5302  00156C  EC8A  F011         	call	_LCDPutChar
  5303  001570  C001  F03B         	movff	_dateTime,___awdiv@dividend
  5304  001574  6A3C               	clrf	___awdiv@dividend+1,c
  5305  001576  0E00               	movlw	0
  5306  001578  6E3E               	movwf	___awdiv@divisor+1,c
  5307  00157A  0E0A               	movlw	10
  5308  00157C  6E3D               	movwf	___awdiv@divisor,c
  5309  00157E  EC3C  F00C         	call	___awdiv	;wreg free
  5310  001582  503B               	movf	?___awdiv,w,c
  5311  001584  0F30               	addlw	48
  5312  001586  EC8A  F011         	call	_LCDPutChar
  5313  00158A  0100               	movlb	0	; () banked
  5314  00158C  C001  F0CD         	movff	_dateTime,___awmod@dividend
  5315  001590  0100               	movlb	0	; () banked
  5316  001592  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  5317  001594  0E00               	movlw	0
  5318  001596  0100               	movlb	0	; () banked
  5319  001598  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  5320  00159A  0E0A               	movlw	10
  5321  00159C  0100               	movlb	0	; () banked
  5322  00159E  6FCF               	movwf	___awmod@divisor& (0+255),b
  5323  0015A0  EC9B  F00C         	call	___awmod	;wreg free
  5324  0015A4  0100               	movlb	0	; () banked
  5325  0015A6  51CD               	movf	?___awmod& (0+255),w,b
  5326  0015A8  0F30               	addlw	48
  5327  0015AA  EC8A  F011         	call	_LCDPutChar
  5328                           
  5329                           ;StateRTC.c: 255: do { LCDGoto(0,1); LCDPutStr("RA4=Set RB0=Menu"); } while (0);;
  5330  0015AE  0E01               	movlw	1
  5331  0015B0  6E3F               	movwf	LCDGoto@ln,c
  5332  0015B2  0E00               	movlw	0
  5333  0015B4  EC4E  F00F         	call	_LCDGoto
  5334  0015B8  0EFE               	movlw	high STR_100
  5335  0015BA  6E40               	movwf	LCDPutStr@str+1,c
  5336  0015BC  0E3B               	movlw	low STR_100
  5337  0015BE  6E3F               	movwf	LCDPutStr@str,c
  5338  0015C0  EC33  F00E         	call	_LCDPutStr	;wreg free
  5339                           
  5340                           ;StateRTC.c: 258: do { if (timeHasChgd) { printf("\r\nSystem Time :"); EUSART1_Write(dat
      +                          eTime.Hour/10+'0'); EUSART1_Write(dateTime.Hour % 10+'0'); EUSART1_Write(':'); EUSART1_W
      +                          rite(dateTime.Min/10+'0'); EUSART1_Write(dateTime.Min % 10+'0'); EUSART1_Write(':'); EUS
      +                          ART1
  5341  0015C4  501C               	movf	_timeHasChgd,w,c
  5342  0015C6  B4D8               	btfsc	status,2,c
  5343  0015C8  0012               	return	
  5344  0015CA  0EFE               	movlw	high STR_101
  5345  0015CC  6E3E               	movwf	printf@f+1,c
  5346  0015CE  0E8F               	movlw	low STR_101
  5347  0015D0  6E3D               	movwf	printf@f,c
  5348  0015D2  ECE5  F010         	call	_printf	;wreg free
  5349  0015D6  C003  F03B         	movff	_dateTime+2,___awdiv@dividend
  5350  0015DA  6A3C               	clrf	___awdiv@dividend+1,c
  5351  0015DC  0E00               	movlw	0
  5352  0015DE  6E3E               	movwf	___awdiv@divisor+1,c
  5353  0015E0  0E0A               	movlw	10
  5354  0015E2  6E3D               	movwf	___awdiv@divisor,c
  5355  0015E4  EC3C  F00C         	call	___awdiv	;wreg free
  5356  0015E8  503B               	movf	?___awdiv,w,c
  5357  0015EA  0F30               	addlw	48
  5358  0015EC  EC38  F010         	call	_EUSART1_Write
  5359  0015F0  0100               	movlb	0	; () banked
  5360  0015F2  C003  F0CD         	movff	_dateTime+2,___awmod@dividend
  5361  0015F6  0100               	movlb	0	; () banked
  5362  0015F8  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  5363  0015FA  0E00               	movlw	0
  5364  0015FC  0100               	movlb	0	; () banked
  5365  0015FE  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  5366  001600  0E0A               	movlw	10
  5367  001602  0100               	movlb	0	; () banked
  5368  001604  6FCF               	movwf	___awmod@divisor& (0+255),b
  5369  001606  EC9B  F00C         	call	___awmod	;wreg free
  5370  00160A  0100               	movlb	0	; () banked
  5371  00160C  51CD               	movf	?___awmod& (0+255),w,b
  5372  00160E  0F30               	addlw	48
  5373  001610  EC38  F010         	call	_EUSART1_Write
  5374  001614  0E3A               	movlw	58
  5375  001616  EC38  F010         	call	_EUSART1_Write
  5376  00161A  C002  F03B         	movff	_dateTime+1,___awdiv@dividend
  5377  00161E  6A3C               	clrf	___awdiv@dividend+1,c
  5378  001620  0E00               	movlw	0
  5379  001622  6E3E               	movwf	___awdiv@divisor+1,c
  5380  001624  0E0A               	movlw	10
  5381  001626  6E3D               	movwf	___awdiv@divisor,c
  5382  001628  EC3C  F00C         	call	___awdiv	;wreg free
  5383  00162C  503B               	movf	?___awdiv,w,c
  5384  00162E  0F30               	addlw	48
  5385  001630  EC38  F010         	call	_EUSART1_Write
  5386  001634  0100               	movlb	0	; () banked
  5387  001636  C002  F0CD         	movff	_dateTime+1,___awmod@dividend
  5388  00163A  0100               	movlb	0	; () banked
  5389  00163C  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  5390  00163E  0E00               	movlw	0
  5391  001640  0100               	movlb	0	; () banked
  5392  001642  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  5393  001644  0E0A               	movlw	10
  5394  001646  0100               	movlb	0	; () banked
  5395  001648  6FCF               	movwf	___awmod@divisor& (0+255),b
  5396  00164A  EC9B  F00C         	call	___awmod	;wreg free
  5397  00164E  0100               	movlb	0	; () banked
  5398  001650  51CD               	movf	?___awmod& (0+255),w,b
  5399  001652  0F30               	addlw	48
  5400  001654  EC38  F010         	call	_EUSART1_Write
  5401  001658  0E3A               	movlw	58
  5402  00165A  EC38  F010         	call	_EUSART1_Write
  5403  00165E  C001  F03B         	movff	_dateTime,___awdiv@dividend
  5404  001662  6A3C               	clrf	___awdiv@dividend+1,c
  5405  001664  0E00               	movlw	0
  5406  001666  6E3E               	movwf	___awdiv@divisor+1,c
  5407  001668  0E0A               	movlw	10
  5408  00166A  6E3D               	movwf	___awdiv@divisor,c
  5409  00166C  EC3C  F00C         	call	___awdiv	;wreg free
  5410  001670  503B               	movf	?___awdiv,w,c
  5411  001672  0F30               	addlw	48
  5412  001674  EC38  F010         	call	_EUSART1_Write
  5413  001678  0100               	movlb	0	; () banked
  5414  00167A  C001  F0CD         	movff	_dateTime,___awmod@dividend
  5415  00167E  0100               	movlb	0	; () banked
  5416  001680  6BCE               	clrf	(___awmod@dividend+1)& (0+255),b
  5417  001682  0E00               	movlw	0
  5418  001684  0100               	movlb	0	; () banked
  5419  001686  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  5420  001688  0E0A               	movlw	10
  5421  00168A  0100               	movlb	0	; () banked
  5422  00168C  6FCF               	movwf	___awmod@divisor& (0+255),b
  5423  00168E  EC9B  F00C         	call	___awmod	;wreg free
  5424  001692  0100               	movlb	0	; () banked
  5425  001694  51CD               	movf	?___awmod& (0+255),w,b
  5426  001696  0F30               	addlw	48
  5427  001698  EC38  F010         	call	_EUSART1_Write
  5428  00169C  0E00               	movlw	0
  5429  00169E  6E1C               	movwf	_timeHasChgd,c
  5430  0016A0  0012               	return	
  5431  0016A2                     __end_of_DisplayTime:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           intcon	equ	0xFF2
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           indf2	equ	0xFDF
  5443                           postinc2	equ	0xFDE
  5444                           postdec2	equ	0xFDD
  5445                           plusw2	equ	0xFDB
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _DisplayClockMenu *****************
  5451 ;; Defined at:
  5452 ;;		line 240 in file "StateRTC.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;		None
  5457 ;; Return value:  Size  Location     Type
  5458 ;;		None               void
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:        0 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:   10
  5473 ;; This function calls:
  5474 ;;		_LCDGoto
  5475 ;;		_LCDPutStr
  5476 ;; This function is called by:
  5477 ;;		_StateClock
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text27
  5482  0022B8                     __ptext27:
  5483                           	opt stack 0
  5484  0022B8                     _DisplayClockMenu:
  5485                           	opt stack 19
  5486                           
  5487                           ;incstack = 0
  5488                           ;StateRTC.c: 243: do { LCDGoto(0,0); LCDPutStr("     Clock"); } while (0);;
  5489  0022B8  0E00               	movlw	0
  5490  0022BA  6E3F               	movwf	LCDGoto@ln,c
  5491  0022BC  0E00               	movlw	0
  5492  0022BE  EC4E  F00F         	call	_LCDGoto
  5493  0022C2  0EFF               	movlw	high STR_97
  5494  0022C4  6E40               	movwf	LCDPutStr@str+1,c
  5495  0022C6  0E09               	movlw	low STR_97
  5496  0022C8  6E3F               	movwf	LCDPutStr@str,c
  5497  0022CA  EC33  F00E         	call	_LCDPutStr	;wreg free
  5498                           
  5499                           ;StateRTC.c: 246: do { LCDGoto(0,1); LCDPutStr("RA4=Next RB0=Now"); } while (0);;
  5500  0022CE  0E01               	movlw	1
  5501  0022D0  6E3F               	movwf	LCDGoto@ln,c
  5502  0022D2  0E00               	movlw	0
  5503  0022D4  EC4E  F00F         	call	_LCDGoto
  5504  0022D8  0EFE               	movlw	high STR_4
  5505  0022DA  6E40               	movwf	LCDPutStr@str+1,c
  5506  0022DC  0E6E               	movlw	low STR_4
  5507  0022DE  6E3F               	movwf	LCDPutStr@str,c
  5508  0022E0  EC33  F00E         	call	_LCDPutStr	;wreg free
  5509  0022E4  0012               	return	
  5510  0022E6                     __end_of_DisplayClockMenu:
  5511                           	opt stack 0
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           intcon	equ	0xFF2
  5519                           postinc0	equ	0xFEE
  5520                           wreg	equ	0xFE8
  5521                           indf2	equ	0xFDF
  5522                           postinc2	equ	0xFDE
  5523                           postdec2	equ	0xFDD
  5524                           plusw2	equ	0xFDB
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _StateBuzzer *****************
  5530 ;; Defined at:
  5531 ;;		line 62 in file "StateBuzzer.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  sound           1   25[BANK0 ] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;Total ram usage:        1 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:   11
  5552 ;; This function calls:
  5553 ;;		_DisplayBuzMenu
  5554 ;;		_DisplayBuzzerData
  5555 ;;		_LCDPutCmd
  5556 ;;		_SNDSound
  5557 ;;		_TMR4_StopTimer
  5558 ;; This function is called by:
  5559 ;;		_main
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text28
  5564  001A96                     __ptext28:
  5565                           	opt stack 0
  5566  001A96                     _StateBuzzer:
  5567                           	opt stack 19
  5568                           
  5569                           ;StateBuzzer.c: 65: DisplayBuzMenu();
  5570                           
  5571                           ;incstack = 0
  5572  001A96  EC73  F011         	call	_DisplayBuzMenu	;wreg free
  5573  001A9A                     l5306:
  5574                           
  5575                           ;StateBuzzer.c: 68: {
  5576                           ;StateBuzzer.c: 70: if((Buttons.But1Pressed))
  5577  001A9A  0100               	movlb	0	; () banked
  5578  001A9C  A1B7               	btfss	_Buttons& (0+255),0,b
  5579  001A9E  D006               	goto	l724
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;StateBuzzer.c: 71: {
  5583                           ;StateBuzzer.c: 73: Buttons.But1Pressed = 0;
  5584  001AA0  0100               	movlb	0	; () banked
  5585  001AA2  91B7               	bcf	_Buttons& (0+255),0,b
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;StateBuzzer.c: 76: LCDPutCmd(0x01);
  5589  001AA4  0E01               	movlw	1
  5590  001AA6  ECB0  F010         	call	_LCDPutCmd
  5591  001AAA  0012               	return	
  5592  001AAC                     l724:
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;StateBuzzer.c: 83: else if((Buttons.But2Pressed))
  5596  001AAC  0100               	movlb	0	; () banked
  5597  001AAE  A3B7               	btfss	_Buttons& (0+255),1,b
  5598  001AB0  D7F4               	goto	l5306
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;StateBuzzer.c: 84: {
  5602                           ;StateBuzzer.c: 86: Buttons.But2Pressed = 0;
  5603  001AB2  0100               	movlb	0	; () banked
  5604  001AB4  93B7               	bcf	_Buttons& (0+255),1,b
  5605  001AB6                     l5318:
  5606                           
  5607                           ;StateBuzzer.c: 89: {
  5608                           ;StateBuzzer.c: 91: uint8_t sound = 1;
  5609  001AB6  0E01               	movlw	1
  5610  001AB8  0100               	movlb	0	; () banked
  5611  001ABA  6FD4               	movwf	StateBuzzer@sound& (0+255),b
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;StateBuzzer.c: 94: SNDSound(sound,pwm_freq);
  5615  001ABC  C044  F03B         	movff	_pwm_freq,SNDSound@pwm_period
  5616  001AC0  0100               	movlb	0	; () banked
  5617  001AC2  51D4               	movf	StateBuzzer@sound& (0+255),w,b
  5618  001AC4  EC5F  F012         	call	_SNDSound
  5619                           
  5620                           ;StateBuzzer.c: 97: DisplayBuzzerData(pwm_freq);
  5621  001AC8  5044               	movf	_pwm_freq,w,c
  5622  001ACA  EC70  F000         	call	_DisplayBuzzerData
  5623                           
  5624                           ;StateBuzzer.c: 100: if((Buttons.But2Pressed))
  5625  001ACE  0100               	movlb	0	; () banked
  5626  001AD0  A3B7               	btfss	_Buttons& (0+255),1,b
  5627  001AD2  D008               	goto	l729
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;StateBuzzer.c: 101: {
  5631                           ;StateBuzzer.c: 103: TMR4_StopTimer();
  5632  001AD4  ECED  F012         	call	_TMR4_StopTimer	;wreg free
  5633                           
  5634                           ;StateBuzzer.c: 106: Buttons.But2Pressed = 0;
  5635  001AD8  0100               	movlb	0	; () banked
  5636  001ADA  93B7               	bcf	_Buttons& (0+255),1,b
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;StateBuzzer.c: 109: LCDPutCmd(0x01);
  5640  001ADC  0E01               	movlw	1
  5641  001ADE  ECB0  F010         	call	_LCDPutCmd
  5642                           
  5643                           ;StateBuzzer.c: 112: break;
  5644  001AE2  D016               	goto	l5348
  5645  001AE4                     l729:
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;StateBuzzer.c: 115: else if((Buttons.But1Pressed))
  5649  001AE4  0100               	movlb	0	; () banked
  5650  001AE6  A1B7               	btfss	_Buttons& (0+255),0,b
  5651  001AE8  D7E6               	goto	l5318
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;StateBuzzer.c: 116: {
  5655                           ;StateBuzzer.c: 118: Buttons.But1Pressed = 0;
  5656  001AEA  0100               	movlb	0	; () banked
  5657  001AEC  91B7               	bcf	_Buttons& (0+255),0,b
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;StateBuzzer.c: 121: if(pwm_freq >= 251)
  5661  001AEE  0EFA               	movlw	250
  5662  001AF0  6444               	cpfsgt	_pwm_freq,c
  5663  001AF2  D001               	goto	l5340
  5664  001AF4  D004               	goto	u4000
  5665  001AF6                     l5340:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;StateBuzzer.c: 125: else if(pwm_freq <= 4)
  5669  001AF6  0E05               	movlw	5
  5670  001AF8  5C44               	subwf	_pwm_freq,w,c
  5671  001AFA  B0D8               	btfsc	status,0,c
  5672  001AFC  D003               	goto	l5344
  5673  001AFE                     u4000:
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;StateBuzzer.c: 126: {
  5677                           ;StateBuzzer.c: 127: pwm_freq = 5;
  5678  001AFE  0E05               	movlw	5
  5679  001B00  6E44               	movwf	_pwm_freq,c
  5680                           
  5681                           ;StateBuzzer.c: 128: }
  5682  001B02  D7D9               	goto	l5318
  5683  001B04                     l5344:
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;StateBuzzer.c: 129: else
  5687                           ;StateBuzzer.c: 130: {
  5688                           ;StateBuzzer.c: 131: pwm_freq += 5;
  5689  001B04  0E05               	movlw	5
  5690  001B06  2644               	addwf	_pwm_freq,f,c
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;StateBuzzer.c: 134: LCDPutCmd(0x01);
  5694  001B08  0E01               	movlw	1
  5695  001B0A  ECB0  F010         	call	_LCDPutCmd
  5696  001B0E  D7D3               	goto	l5318
  5697  001B10                     l5348:
  5698                           
  5699                           ;StateBuzzer.c: 135: }
  5700                           ;StateBuzzer.c: 136: }
  5701                           ;StateBuzzer.c: 137: }
  5702                           ;StateBuzzer.c: 139: LCDPutCmd(0x01);
  5703  001B10  0E01               	movlw	1
  5704  001B12  ECB0  F010         	call	_LCDPutCmd
  5705                           
  5706                           ;StateBuzzer.c: 141: break;
  5707  001B16  0012               	return	
  5708  001B18                     __end_of_StateBuzzer:
  5709                           	opt stack 0
  5710                           tblptru	equ	0xFF8
  5711                           tblptrh	equ	0xFF7
  5712                           tblptrl	equ	0xFF6
  5713                           tablat	equ	0xFF5
  5714                           prodh	equ	0xFF4
  5715                           prodl	equ	0xFF3
  5716                           intcon	equ	0xFF2
  5717                           postinc0	equ	0xFEE
  5718                           wreg	equ	0xFE8
  5719                           indf2	equ	0xFDF
  5720                           postinc2	equ	0xFDE
  5721                           postdec2	equ	0xFDD
  5722                           plusw2	equ	0xFDB
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _TMR4_StopTimer *****************
  5728 ;; Defined at:
  5729 ;;		line 81 in file "mcc_generated_files/tmr4.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;		None               void
  5736 ;; Registers used:
  5737 ;;		None
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;Total ram usage:        0 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    7
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_StateBuzzer
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           	psect	text29
  5758  0025DA                     __ptext29:
  5759                           	opt stack 0
  5760  0025DA                     _TMR4_StopTimer:
  5761                           	opt stack 22
  5762                           
  5763                           ;tmr4.c: 84: T4CONbits.TMR4ON = 0;
  5764                           
  5765                           ;incstack = 0
  5766  0025DA  010F               	movlb	15	; () banked
  5767  0025DC  9551               	bcf	81,2,b	;volatile
  5768                           
  5769                           ; BSR set to: 15
  5770  0025DE  0012               	return	
  5771  0025E0                     __end_of_TMR4_StopTimer:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           plusw2	equ	0xFDB
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function _SNDSound *****************
  5791 ;; Defined at:
  5792 ;;		line 146 in file "StateBuzzer.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  onoff           1    wreg     unsigned char 
  5795 ;;  pwm_period      1   26[COMRAM] unsigned char 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  onoff           1   27[COMRAM] unsigned char 
  5798 ;; Return value:  Size  Location     Type
  5799 ;;		None               void
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5807 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;Total ram usage:        2 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    8
  5814 ;; This function calls:
  5815 ;;		_TMR4_StartTimer
  5816 ;; This function is called by:
  5817 ;;		_StateBuzzer
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           	psect	text30
  5822  0024BE                     __ptext30:
  5823                           	opt stack 0
  5824  0024BE                     _SNDSound:
  5825                           	opt stack 21
  5826                           
  5827                           ; BSR set to: 15
  5828                           ;incstack = 0
  5829                           ;SNDSound@onoff stored from wreg
  5830  0024BE  6E3C               	movwf	SNDSound@onoff,c
  5831                           
  5832                           ;StateBuzzer.c: 149: PR4 = pwm_period;
  5833  0024C0  C03B  FF52         	movff	SNDSound@pwm_period,3922	;volatile
  5834                           
  5835                           ;StateBuzzer.c: 152: CCPR1L = pwm_on;
  5836  0024C4  C045  FFBE         	movff	_pwm_on,4030	;volatile
  5837                           
  5838                           ;StateBuzzer.c: 155: TMR4_StartTimer();
  5839  0024C8  ECF0  F012         	call	_TMR4_StartTimer	;wreg free
  5840                           
  5841                           ;StateBuzzer.c: 158: if (onoff)
  5842  0024CC  503C               	movf	SNDSound@onoff,w,c
  5843  0024CE  B4D8               	btfsc	status,2,c
  5844  0024D0  D002               	goto	l742
  5845                           
  5846                           ;StateBuzzer.c: 159: {
  5847                           ;StateBuzzer.c: 160: TRISC2 = 0;
  5848  0024D2  9494               	bcf	3988,2,c	;volatile
  5849                           
  5850                           ;StateBuzzer.c: 161: }
  5851  0024D4  0012               	return	
  5852  0024D6                     l742:
  5853                           
  5854                           ;StateBuzzer.c: 162: else
  5855                           ;StateBuzzer.c: 163: {
  5856                           ;StateBuzzer.c: 164: TRISC2 = 1;
  5857  0024D6  8494               	bsf	3988,2,c	;volatile
  5858  0024D8  0012               	return	
  5859  0024DA                     __end_of_SNDSound:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           plusw2	equ	0xFDB
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878 ;; *************** function _TMR4_StartTimer *****************
  5879 ;; Defined at:
  5880 ;;		line 75 in file "mcc_generated_files/tmr4.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;		None
  5885 ;; Return value:  Size  Location     Type
  5886 ;;		None               void
  5887 ;; Registers used:
  5888 ;;		None
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;Total ram usage:        0 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    7
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_SNDSound
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text31
  5909  0025E0                     __ptext31:
  5910                           	opt stack 0
  5911  0025E0                     _TMR4_StartTimer:
  5912                           	opt stack 21
  5913                           
  5914                           ;tmr4.c: 78: T4CONbits.TMR4ON = 1;
  5915                           
  5916                           ;incstack = 0
  5917  0025E0  010F               	movlb	15	; () banked
  5918  0025E2  8551               	bsf	81,2,b	;volatile
  5919                           
  5920                           ; BSR set to: 15
  5921  0025E4  0012               	return	
  5922  0025E6                     __end_of_TMR4_StartTimer:
  5923                           	opt stack 0
  5924                           tblptru	equ	0xFF8
  5925                           tblptrh	equ	0xFF7
  5926                           tblptrl	equ	0xFF6
  5927                           tablat	equ	0xFF5
  5928                           prodh	equ	0xFF4
  5929                           prodl	equ	0xFF3
  5930                           intcon	equ	0xFF2
  5931                           postinc0	equ	0xFEE
  5932                           wreg	equ	0xFE8
  5933                           indf2	equ	0xFDF
  5934                           postinc2	equ	0xFDE
  5935                           postdec2	equ	0xFDD
  5936                           plusw2	equ	0xFDB
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function _DisplayBuzzerData *****************
  5942 ;; Defined at:
  5943 ;;		line 177 in file "StateBuzzer.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  pwm_freq        1    wreg     volatile unsigned char 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  pwm_freq        1   24[BANK0 ] volatile unsigned char 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;		None               void
  5950 ;; Registers used:
  5951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;Total ram usage:        3 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:   10
  5964 ;; This function calls:
  5965 ;;		_EUSART1_Write
  5966 ;;		_LCDGoto
  5967 ;;		_LCDPutChar
  5968 ;;		_LCDPutStr
  5969 ;;		___awdiv
  5970 ;;		___awmod
  5971 ;;		_printf
  5972 ;; This function is called by:
  5973 ;;		_StateBuzzer
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text32
  5978  0000E0                     __ptext32:
  5979                           	opt stack 0
  5980  0000E0                     _DisplayBuzzerData:
  5981                           	opt stack 19
  5982                           
  5983                           ; BSR set to: 15
  5984                           ;incstack = 0
  5985                           ;DisplayBuzzerData@pwm_freq stored from wreg
  5986  0000E0  0100               	movlb	0	; () banked
  5987  0000E2  6FD3               	movwf	DisplayBuzzerData@pwm_freq& (0+255),b	;volatile
  5988                           
  5989                           ; BSR set to: 0
  5990                           
  5991                           ; BSR set to: 0
  5992                           
  5993                           ;StateBuzzer.c: 180: do { LCDGoto(0,0); LCDPutStr("PWM:"); LCDPutChar(((((pwm_freq/5)-1)
      +                          *2) / 100) + '0'); LCDPutChar(((((((pwm_freq/5)-1)*2) /10)/1) % 10) + '0'); LCDPutChar((
      +                          (((pwm_freq/5)-1)*2) % 10) + '0'); LCDPutChar('%'); } while (0);;
  5994  0000E4  0E00               	movlw	0
  5995  0000E6  6E3F               	movwf	LCDGoto@ln,c
  5996  0000E8  0E00               	movlw	0
  5997  0000EA  EC4E  F00F         	call	_LCDGoto
  5998  0000EE  0EFF               	movlw	high STR_12
  5999  0000F0  6E40               	movwf	LCDPutStr@str+1,c
  6000  0000F2  0E67               	movlw	low STR_12
  6001  0000F4  6E3F               	movwf	LCDPutStr@str,c
  6002  0000F6  EC33  F00E         	call	_LCDPutStr	;wreg free
  6003  0000FA  0E00               	movlw	0
  6004  0000FC  6E3E               	movwf	___awdiv@divisor+1,c
  6005  0000FE  0E05               	movlw	5
  6006  000100  6E3D               	movwf	___awdiv@divisor,c
  6007  000102  0100               	movlb	0	; () banked
  6008  000104  C0D3  F03B         	movff	DisplayBuzzerData@pwm_freq,___awdiv@dividend	;volatile
  6009  000108  6A3C               	clrf	___awdiv@dividend+1,c
  6010  00010A  EC3C  F00C         	call	___awdiv	;wreg free
  6011  00010E  90D8               	bcf	status,0,c
  6012  000110  363B               	rlcf	?___awdiv,f,c
  6013  000112  363C               	rlcf	?___awdiv+1,f,c
  6014  000114  0EFE               	movlw	254
  6015  000116  243B               	addwf	?___awdiv,w,c
  6016  000118  0100               	movlb	0	; () banked
  6017  00011A  6FD1               	movwf	_DisplayBuzzerData$3133& (0+255),b
  6018  00011C  0EFF               	movlw	255
  6019  00011E  203C               	addwfc	?___awdiv+1,w,c
  6020  000120  0100               	movlb	0	; () banked
  6021  000122  6FD2               	movwf	(_DisplayBuzzerData$3133+1)& (0+255),b
  6022                           
  6023                           ; BSR set to: 0
  6024  000124  C0D1  F03B         	movff	_DisplayBuzzerData$3133,___awdiv@dividend
  6025  000128  C0D2  F03C         	movff	_DisplayBuzzerData$3133+1,___awdiv@dividend+1
  6026  00012C  0E00               	movlw	0
  6027  00012E  6E3E               	movwf	___awdiv@divisor+1,c
  6028  000130  0E64               	movlw	100
  6029  000132  6E3D               	movwf	___awdiv@divisor,c
  6030  000134  EC3C  F00C         	call	___awdiv	;wreg free
  6031  000138  503B               	movf	?___awdiv,w,c
  6032  00013A  0F30               	addlw	48
  6033  00013C  EC8A  F011         	call	_LCDPutChar
  6034  000140  0E00               	movlw	0
  6035  000142  6E3E               	movwf	___awdiv@divisor+1,c
  6036  000144  0E05               	movlw	5
  6037  000146  6E3D               	movwf	___awdiv@divisor,c
  6038  000148  0100               	movlb	0	; () banked
  6039  00014A  C0D3  F03B         	movff	DisplayBuzzerData@pwm_freq,___awdiv@dividend	;volatile
  6040  00014E  6A3C               	clrf	___awdiv@dividend+1,c
  6041  000150  EC3C  F00C         	call	___awdiv	;wreg free
  6042  000154  90D8               	bcf	status,0,c
  6043  000156  363B               	rlcf	?___awdiv,f,c
  6044  000158  363C               	rlcf	?___awdiv+1,f,c
  6045  00015A  0EFE               	movlw	254
  6046  00015C  243B               	addwf	?___awdiv,w,c
  6047  00015E  0100               	movlb	0	; () banked
  6048  000160  6FD1               	movwf	_DisplayBuzzerData$3133& (0+255),b
  6049  000162  0EFF               	movlw	255
  6050  000164  203C               	addwfc	?___awdiv+1,w,c
  6051  000166  0100               	movlb	0	; () banked
  6052  000168  6FD2               	movwf	(_DisplayBuzzerData$3133+1)& (0+255),b
  6053                           
  6054                           ; BSR set to: 0
  6055  00016A  0E00               	movlw	0
  6056  00016C  6E3E               	movwf	___awdiv@divisor+1,c
  6057  00016E  0E0A               	movlw	10
  6058  000170  6E3D               	movwf	___awdiv@divisor,c
  6059  000172  C0D1  F03B         	movff	_DisplayBuzzerData$3133,___awdiv@dividend
  6060  000176  C0D2  F03C         	movff	_DisplayBuzzerData$3133+1,___awdiv@dividend+1
  6061  00017A  EC3C  F00C         	call	___awdiv	;wreg free
  6062  00017E  C03B  F0CD         	movff	?___awdiv,___awmod@dividend
  6063  000182  C03C  F0CE         	movff	?___awdiv+1,___awmod@dividend+1
  6064  000186  0E00               	movlw	0
  6065  000188  0100               	movlb	0	; () banked
  6066  00018A  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  6067  00018C  0E0A               	movlw	10
  6068  00018E  0100               	movlb	0	; () banked
  6069  000190  6FCF               	movwf	___awmod@divisor& (0+255),b
  6070  000192  EC9B  F00C         	call	___awmod	;wreg free
  6071  000196  0100               	movlb	0	; () banked
  6072  000198  51CD               	movf	?___awmod& (0+255),w,b
  6073  00019A  0F30               	addlw	48
  6074  00019C  EC8A  F011         	call	_LCDPutChar
  6075  0001A0  0E00               	movlw	0
  6076  0001A2  6E3E               	movwf	___awdiv@divisor+1,c
  6077  0001A4  0E05               	movlw	5
  6078  0001A6  6E3D               	movwf	___awdiv@divisor,c
  6079  0001A8  0100               	movlb	0	; () banked
  6080  0001AA  C0D3  F03B         	movff	DisplayBuzzerData@pwm_freq,___awdiv@dividend	;volatile
  6081  0001AE  6A3C               	clrf	___awdiv@dividend+1,c
  6082  0001B0  EC3C  F00C         	call	___awdiv	;wreg free
  6083  0001B4  90D8               	bcf	status,0,c
  6084  0001B6  363B               	rlcf	?___awdiv,f,c
  6085  0001B8  363C               	rlcf	?___awdiv+1,f,c
  6086  0001BA  0EFE               	movlw	254
  6087  0001BC  243B               	addwf	?___awdiv,w,c
  6088  0001BE  0100               	movlb	0	; () banked
  6089  0001C0  6FCD               	movwf	___awmod@dividend& (0+255),b
  6090  0001C2  0EFF               	movlw	255
  6091  0001C4  203C               	addwfc	?___awdiv+1,w,c
  6092  0001C6  0100               	movlb	0	; () banked
  6093  0001C8  6FCE               	movwf	(___awmod@dividend+1)& (0+255),b
  6094  0001CA  0E00               	movlw	0
  6095  0001CC  0100               	movlb	0	; () banked
  6096  0001CE  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  6097  0001D0  0E0A               	movlw	10
  6098  0001D2  0100               	movlb	0	; () banked
  6099  0001D4  6FCF               	movwf	___awmod@divisor& (0+255),b
  6100  0001D6  EC9B  F00C         	call	___awmod	;wreg free
  6101  0001DA  0100               	movlb	0	; () banked
  6102  0001DC  51CD               	movf	?___awmod& (0+255),w,b
  6103  0001DE  0F30               	addlw	48
  6104  0001E0  EC8A  F011         	call	_LCDPutChar
  6105  0001E4  0E25               	movlw	37
  6106  0001E6  EC8A  F011         	call	_LCDPutChar
  6107                           
  6108                           ;StateBuzzer.c: 183: do { LCDPutStr(" Key:"); switch (pwm_freq) { case 10: LCDPutStr("D8
      +                          #"); break; case 15: LCDPutStr("B7 "); break; case 20: LCDPutStr("F7#"); break; case 25:
      +                           LCDPutStr("D7#"); break; case 30: LCDPutStr("C7 "); break; case 35: LCDPutStr("A6 "); b
      +                          reak; c
  6109  0001EA  0EFE               	movlw	high (STR_52+9)
  6110  0001EC  6E40               	movwf	LCDPutStr@str+1,c
  6111  0001EE  0EA8               	movlw	low (STR_52+9)
  6112  0001F0  6E3F               	movwf	LCDPutStr@str,c
  6113  0001F2  EC33  F00E         	call	_LCDPutStr	;wreg free
  6114  0001F6  D0FC               	goto	l4898
  6115  0001F8                     l4824:
  6116  0001F8  0EFF               	movlw	high STR_14
  6117  0001FA  6E40               	movwf	LCDPutStr@str+1,c
  6118  0001FC  0EF4               	movlw	low STR_14
  6119  0001FE  6E3F               	movwf	LCDPutStr@str,c
  6120  000200  EC33  F00E         	call	_LCDPutStr	;wreg free
  6121  000204  D161               	goto	l4900
  6122  000206                     l4826:
  6123  000206  0EFF               	movlw	high STR_15
  6124  000208  6E40               	movwf	LCDPutStr@str+1,c
  6125  00020A  0EB8               	movlw	low STR_15
  6126  00020C  6E3F               	movwf	LCDPutStr@str,c
  6127  00020E  EC33  F00E         	call	_LCDPutStr	;wreg free
  6128  000212  D15A               	goto	l4900
  6129  000214                     l4828:
  6130  000214  0EFF               	movlw	high STR_16
  6131  000216  6E40               	movwf	LCDPutStr@str+1,c
  6132  000218  0EF0               	movlw	low STR_16
  6133  00021A  6E3F               	movwf	LCDPutStr@str,c
  6134  00021C  EC33  F00E         	call	_LCDPutStr	;wreg free
  6135  000220  D153               	goto	l4900
  6136  000222                     l4830:
  6137  000222  0EFF               	movlw	high STR_17
  6138  000224  6E40               	movwf	LCDPutStr@str+1,c
  6139  000226  0EEC               	movlw	low STR_17
  6140  000228  6E3F               	movwf	LCDPutStr@str,c
  6141  00022A  EC33  F00E         	call	_LCDPutStr	;wreg free
  6142  00022E  D14C               	goto	l4900
  6143  000230                     l4832:
  6144  000230  0EFF               	movlw	high STR_18
  6145  000232  6E40               	movwf	LCDPutStr@str+1,c
  6146  000234  0EBC               	movlw	low STR_18
  6147  000236  6E3F               	movwf	LCDPutStr@str,c
  6148  000238  EC33  F00E         	call	_LCDPutStr	;wreg free
  6149  00023C  D145               	goto	l4900
  6150  00023E                     l4834:
  6151  00023E  0EFF               	movlw	high STR_19
  6152  000240  6E40               	movwf	LCDPutStr@str+1,c
  6153  000242  0EA8               	movlw	low STR_19
  6154  000244  6E3F               	movwf	LCDPutStr@str,c
  6155  000246  EC33  F00E         	call	_LCDPutStr	;wreg free
  6156  00024A  D13E               	goto	l4900
  6157  00024C                     l4836:
  6158  00024C  0EFF               	movlw	high STR_20
  6159  00024E  6E40               	movwf	LCDPutStr@str+1,c
  6160  000250  0EB4               	movlw	low STR_20
  6161  000252  6E3F               	movwf	LCDPutStr@str,c
  6162  000254  EC33  F00E         	call	_LCDPutStr	;wreg free
  6163  000258  D137               	goto	l4900
  6164  00025A                     l4838:
  6165  00025A  0EFF               	movlw	high STR_21
  6166  00025C  6E40               	movwf	LCDPutStr@str+1,c
  6167  00025E  0EB0               	movlw	low STR_21
  6168  000260  6E3F               	movwf	LCDPutStr@str,c
  6169  000262  EC33  F00E         	call	_LCDPutStr	;wreg free
  6170  000266  D130               	goto	l4900
  6171  000268                     l4840:
  6172  000268  0EFF               	movlw	high STR_22
  6173  00026A  6E40               	movwf	LCDPutStr@str+1,c
  6174  00026C  0EE8               	movlw	low STR_22
  6175  00026E  6E3F               	movwf	LCDPutStr@str,c
  6176  000270  EC33  F00E         	call	_LCDPutStr	;wreg free
  6177  000274  D129               	goto	l4900
  6178  000276                     l4842:
  6179  000276  0EFF               	movlw	high STR_23
  6180  000278  6E40               	movwf	LCDPutStr@str+1,c
  6181  00027A  0EAC               	movlw	low STR_23
  6182  00027C  6E3F               	movwf	LCDPutStr@str,c
  6183  00027E  EC33  F00E         	call	_LCDPutStr	;wreg free
  6184  000282  D122               	goto	l4900
  6185  000284                     l4844:
  6186  000284  0EFF               	movlw	high STR_24
  6187  000286  6E40               	movwf	LCDPutStr@str+1,c
  6188  000288  0EFC               	movlw	low STR_24
  6189  00028A  6E3F               	movwf	LCDPutStr@str,c
  6190  00028C  EC33  F00E         	call	_LCDPutStr	;wreg free
  6191  000290  D11B               	goto	l4900
  6192  000292                     l4846:
  6193  000292  0EFF               	movlw	high STR_25
  6194  000294  6E40               	movwf	LCDPutStr@str+1,c
  6195  000296  0ED4               	movlw	low STR_25
  6196  000298  6E3F               	movwf	LCDPutStr@str,c
  6197  00029A  EC33  F00E         	call	_LCDPutStr	;wreg free
  6198  00029E  D114               	goto	l4900
  6199  0002A0                     l4848:
  6200  0002A0  0EFF               	movlw	high STR_26
  6201  0002A2  6E40               	movwf	LCDPutStr@str+1,c
  6202  0002A4  0E90               	movlw	low STR_26
  6203  0002A6  6E3F               	movwf	LCDPutStr@str,c
  6204  0002A8  EC33  F00E         	call	_LCDPutStr	;wreg free
  6205  0002AC  D10D               	goto	l4900
  6206  0002AE                     l4850:
  6207  0002AE  0EFF               	movlw	high STR_27
  6208  0002B0  6E40               	movwf	LCDPutStr@str+1,c
  6209  0002B2  0EE4               	movlw	low STR_27
  6210  0002B4  6E3F               	movwf	LCDPutStr@str,c
  6211  0002B6  EC33  F00E         	call	_LCDPutStr	;wreg free
  6212  0002BA  D106               	goto	l4900
  6213  0002BC                     l4852:
  6214  0002BC  0EFF               	movlw	high STR_28
  6215  0002BE  6E40               	movwf	LCDPutStr@str+1,c
  6216  0002C0  0EA4               	movlw	low STR_28
  6217  0002C2  6E3F               	movwf	LCDPutStr@str,c
  6218  0002C4  EC33  F00E         	call	_LCDPutStr	;wreg free
  6219  0002C8  D0FF               	goto	l4900
  6220  0002CA                     l4854:
  6221  0002CA  0EFF               	movlw	high STR_29
  6222  0002CC  6E40               	movwf	LCDPutStr@str+1,c
  6223  0002CE  0EE0               	movlw	low STR_29
  6224  0002D0  6E3F               	movwf	LCDPutStr@str,c
  6225  0002D2  EC33  F00E         	call	_LCDPutStr	;wreg free
  6226  0002D6  D0F8               	goto	l4900
  6227  0002D8                     l4856:
  6228  0002D8  0EFF               	movlw	high STR_30
  6229  0002DA  6E40               	movwf	LCDPutStr@str+1,c
  6230  0002DC  0EA0               	movlw	low STR_30
  6231  0002DE  6E3F               	movwf	LCDPutStr@str,c
  6232  0002E0  EC33  F00E         	call	_LCDPutStr	;wreg free
  6233  0002E4  D0F1               	goto	l4900
  6234  0002E6                     l4858:
  6235  0002E6  0EFF               	movlw	high STR_31
  6236  0002E8  6E40               	movwf	LCDPutStr@str+1,c
  6237  0002EA  0E9C               	movlw	low STR_31
  6238  0002EC  6E3F               	movwf	LCDPutStr@str,c
  6239  0002EE  EC33  F00E         	call	_LCDPutStr	;wreg free
  6240  0002F2  D0EA               	goto	l4900
  6241  0002F4                     l4860:
  6242  0002F4  0EFF               	movlw	high STR_32
  6243  0002F6  6E40               	movwf	LCDPutStr@str+1,c
  6244  0002F8  0EDC               	movlw	low STR_32
  6245  0002FA  6E3F               	movwf	LCDPutStr@str,c
  6246  0002FC  EC33  F00E         	call	_LCDPutStr	;wreg free
  6247  000300  D0E3               	goto	l4900
  6248  000302                     l4862:
  6249  000302  0EFF               	movlw	high STR_33
  6250  000304  6E40               	movwf	LCDPutStr@str+1,c
  6251  000306  0E98               	movlw	low STR_33
  6252  000308  6E3F               	movwf	LCDPutStr@str,c
  6253  00030A  EC33  F00E         	call	_LCDPutStr	;wreg free
  6254  00030E  D0DC               	goto	l4900
  6255  000310                     l4864:
  6256  000310  0EFF               	movlw	high STR_34
  6257  000312  6E40               	movwf	LCDPutStr@str+1,c
  6258  000314  0ED8               	movlw	low STR_34
  6259  000316  6E3F               	movwf	LCDPutStr@str,c
  6260  000318  EC33  F00E         	call	_LCDPutStr	;wreg free
  6261  00031C  D0D5               	goto	l4900
  6262  00031E                     l4866:
  6263  00031E  0EFF               	movlw	high STR_35
  6264  000320  6E40               	movwf	LCDPutStr@str+1,c
  6265  000322  0E94               	movlw	low STR_35
  6266  000324  6E3F               	movwf	LCDPutStr@str,c
  6267  000326  EC33  F00E         	call	_LCDPutStr	;wreg free
  6268  00032A  D0CE               	goto	l4900
  6269  00032C                     l4868:
  6270  00032C  0EFF               	movlw	high STR_36
  6271  00032E  6E40               	movwf	LCDPutStr@str+1,c
  6272  000330  0E78               	movlw	low STR_36
  6273  000332  6E3F               	movwf	LCDPutStr@str,c
  6274  000334  EC33  F00E         	call	_LCDPutStr	;wreg free
  6275  000338  D0C7               	goto	l4900
  6276  00033A                     l4870:
  6277  00033A  0EFF               	movlw	high STR_37
  6278  00033C  6E40               	movwf	LCDPutStr@str+1,c
  6279  00033E  0EC0               	movlw	low STR_37
  6280  000340  6E3F               	movwf	LCDPutStr@str,c
  6281  000342  EC33  F00E         	call	_LCDPutStr	;wreg free
  6282  000346  D0C0               	goto	l4900
  6283  000348                     l4872:
  6284  000348  0EFF               	movlw	high STR_38
  6285  00034A  6E40               	movwf	LCDPutStr@str+1,c
  6286  00034C  0E74               	movlw	low STR_38
  6287  00034E  6E3F               	movwf	LCDPutStr@str,c
  6288  000350  EC33  F00E         	call	_LCDPutStr	;wreg free
  6289  000354  D0B9               	goto	l4900
  6290  000356                     l4874:
  6291  000356  0EFF               	movlw	high STR_39
  6292  000358  6E40               	movwf	LCDPutStr@str+1,c
  6293  00035A  0ED0               	movlw	low STR_39
  6294  00035C  6E3F               	movwf	LCDPutStr@str,c
  6295  00035E  EC33  F00E         	call	_LCDPutStr	;wreg free
  6296  000362  D0B2               	goto	l4900
  6297  000364                     l4876:
  6298  000364  0EFF               	movlw	high STR_40
  6299  000366  6E40               	movwf	LCDPutStr@str+1,c
  6300  000368  0E8C               	movlw	low STR_40
  6301  00036A  6E3F               	movwf	LCDPutStr@str,c
  6302  00036C  EC33  F00E         	call	_LCDPutStr	;wreg free
  6303  000370  D0AB               	goto	l4900
  6304  000372                     l4878:
  6305  000372  0EFF               	movlw	high STR_41
  6306  000374  6E40               	movwf	LCDPutStr@str+1,c
  6307  000376  0ECC               	movlw	low STR_41
  6308  000378  6E3F               	movwf	LCDPutStr@str,c
  6309  00037A  EC33  F00E         	call	_LCDPutStr	;wreg free
  6310  00037E  D0A4               	goto	l4900
  6311  000380                     l4880:
  6312  000380  0EFF               	movlw	high STR_42
  6313  000382  6E40               	movwf	LCDPutStr@str+1,c
  6314  000384  0E88               	movlw	low STR_42
  6315  000386  6E3F               	movwf	LCDPutStr@str,c
  6316  000388  EC33  F00E         	call	_LCDPutStr	;wreg free
  6317  00038C  D09D               	goto	l4900
  6318  00038E                     l4882:
  6319  00038E  0EFF               	movlw	high STR_43
  6320  000390  6E40               	movwf	LCDPutStr@str+1,c
  6321  000392  0E84               	movlw	low STR_43
  6322  000394  6E3F               	movwf	LCDPutStr@str,c
  6323  000396  EC33  F00E         	call	_LCDPutStr	;wreg free
  6324  00039A  D096               	goto	l4900
  6325  00039C                     l4884:
  6326  00039C  0EFF               	movlw	high STR_44
  6327  00039E  6E40               	movwf	LCDPutStr@str+1,c
  6328  0003A0  0EC8               	movlw	low STR_44
  6329  0003A2  6E3F               	movwf	LCDPutStr@str,c
  6330  0003A4  EC33  F00E         	call	_LCDPutStr	;wreg free
  6331  0003A8  D08F               	goto	l4900
  6332  0003AA                     l4886:
  6333  0003AA  0EFF               	movlw	high STR_45
  6334  0003AC  6E40               	movwf	LCDPutStr@str+1,c
  6335  0003AE  0E80               	movlw	low STR_45
  6336  0003B0  6E3F               	movwf	LCDPutStr@str,c
  6337  0003B2  EC33  F00E         	call	_LCDPutStr	;wreg free
  6338  0003B6  D088               	goto	l4900
  6339  0003B8                     l4888:
  6340  0003B8  0EFF               	movlw	high STR_46
  6341  0003BA  6E40               	movwf	LCDPutStr@str+1,c
  6342  0003BC  0EC4               	movlw	low STR_46
  6343  0003BE  6E3F               	movwf	LCDPutStr@str,c
  6344  0003C0  EC33  F00E         	call	_LCDPutStr	;wreg free
  6345  0003C4  D081               	goto	l4900
  6346  0003C6                     l4890:
  6347  0003C6  0EFF               	movlw	high STR_47
  6348  0003C8  6E40               	movwf	LCDPutStr@str+1,c
  6349  0003CA  0E7C               	movlw	low STR_47
  6350  0003CC  6E3F               	movwf	LCDPutStr@str,c
  6351  0003CE  EC33  F00E         	call	_LCDPutStr	;wreg free
  6352  0003D2  D07A               	goto	l4900
  6353  0003D4                     l4892:
  6354  0003D4  0EFF               	movlw	high STR_48
  6355  0003D6  6E40               	movwf	LCDPutStr@str+1,c
  6356  0003D8  0E70               	movlw	low STR_48
  6357  0003DA  6E3F               	movwf	LCDPutStr@str,c
  6358  0003DC  EC33  F00E         	call	_LCDPutStr	;wreg free
  6359  0003E0  D073               	goto	l4900
  6360  0003E2                     l4894:
  6361  0003E2  0EFF               	movlw	high STR_49
  6362  0003E4  6E40               	movwf	LCDPutStr@str+1,c
  6363  0003E6  0EF8               	movlw	low STR_49
  6364  0003E8  6E3F               	movwf	LCDPutStr@str,c
  6365  0003EA  EC33  F00E         	call	_LCDPutStr	;wreg free
  6366  0003EE  D06C               	goto	l4900
  6367  0003F0                     l4898:
  6368  0003F0  0100               	movlb	0	; () banked
  6369  0003F2  51D3               	movf	DisplayBuzzerData@pwm_freq& (0+255),w,b	;volatile
  6370                           
  6371                           ; Switch size 1, requested type "space"
  6372                           ; Number of cases is 35, Range of values is 10 to 255
  6373                           ; switch strategies available:
  6374                           ; Name         Instructions Cycles
  6375                           ; simple_byte          106    54 (average)
  6376                           ;	Chosen strategy is simple_byte
  6377  0003F4  0A0A               	xorlw	10	; case 10
  6378  0003F6  B4D8               	btfsc	status,2,c
  6379  0003F8  D6FF               	goto	l4824
  6380  0003FA  0A05               	xorlw	5	; case 15
  6381  0003FC  B4D8               	btfsc	status,2,c
  6382  0003FE  D703               	goto	l4826
  6383  000400  0A1B               	xorlw	27	; case 20
  6384  000402  B4D8               	btfsc	status,2,c
  6385  000404  D707               	goto	l4828
  6386  000406  0A0D               	xorlw	13	; case 25
  6387  000408  B4D8               	btfsc	status,2,c
  6388  00040A  D70B               	goto	l4830
  6389  00040C  0A07               	xorlw	7	; case 30
  6390  00040E  B4D8               	btfsc	status,2,c
  6391  000410  D70F               	goto	l4832
  6392  000412  0A3D               	xorlw	61	; case 35
  6393  000414  B4D8               	btfsc	status,2,c
  6394  000416  D713               	goto	l4834
  6395  000418  0A0B               	xorlw	11	; case 40
  6396  00041A  B4D8               	btfsc	status,2,c
  6397  00041C  D717               	goto	l4836
  6398  00041E  0A05               	xorlw	5	; case 45
  6399  000420  B4D8               	btfsc	status,2,c
  6400  000422  D71B               	goto	l4838
  6401  000424  0A1F               	xorlw	31	; case 50
  6402  000426  B4D8               	btfsc	status,2,c
  6403  000428  D71F               	goto	l4840
  6404  00042A  0A05               	xorlw	5	; case 55
  6405  00042C  B4D8               	btfsc	status,2,c
  6406  00042E  D723               	goto	l4842
  6407  000430  0A0B               	xorlw	11	; case 60
  6408  000432  B4D8               	btfsc	status,2,c
  6409  000434  D727               	goto	l4844
  6410  000436  0A7D               	xorlw	125	; case 65
  6411  000438  B4D8               	btfsc	status,2,c
  6412  00043A  D72B               	goto	l4846
  6413  00043C  0A07               	xorlw	7	; case 70
  6414  00043E  B4D8               	btfsc	status,2,c
  6415  000440  D72F               	goto	l4848
  6416  000442  0A0D               	xorlw	13	; case 75
  6417  000444  B4D8               	btfsc	status,2,c
  6418  000446  D733               	goto	l4850
  6419  000448  0A1B               	xorlw	27	; case 80
  6420  00044A  B4D8               	btfsc	status,2,c
  6421  00044C  D737               	goto	l4852
  6422  00044E  0A05               	xorlw	5	; case 85
  6423  000450  B4D8               	btfsc	status,2,c
  6424  000452  D73B               	goto	l4854
  6425  000454  0A0F               	xorlw	15	; case 90
  6426  000456  B4D8               	btfsc	status,2,c
  6427  000458  D73F               	goto	l4856
  6428  00045A  0A05               	xorlw	5	; case 95
  6429  00045C  B4D8               	btfsc	status,2,c
  6430  00045E  D743               	goto	l4858
  6431  000460  0A3B               	xorlw	59	; case 100
  6432  000462  B4D8               	btfsc	status,2,c
  6433  000464  D747               	goto	l4860
  6434  000466  0A0D               	xorlw	13	; case 105
  6435  000468  B4D8               	btfsc	status,2,c
  6436  00046A  D74B               	goto	l4862
  6437  00046C  0A07               	xorlw	7	; case 110
  6438  00046E  B4D8               	btfsc	status,2,c
  6439  000470  D74F               	goto	l4864
  6440  000472  0A1D               	xorlw	29	; case 115
  6441  000474  B4D8               	btfsc	status,2,c
  6442  000476  D753               	goto	l4866
  6443  000478  0A0E               	xorlw	14	; case 125
  6444  00047A  B4D8               	btfsc	status,2,c
  6445  00047C  D757               	goto	l4868
  6446  00047E  0AFA               	xorlw	250	; case 135
  6447  000480  B4D8               	btfsc	status,2,c
  6448  000482  D75B               	goto	l4870
  6449  000484  0A0B               	xorlw	11	; case 140
  6450  000486  B4D8               	btfsc	status,2,c
  6451  000488  D75F               	goto	l4872
  6452  00048A  0A1A               	xorlw	26	; case 150
  6453  00048C  B4D8               	btfsc	status,2,c
  6454  00048E  D763               	goto	l4874
  6455  000490  0A36               	xorlw	54	; case 160
  6456  000492  B4D8               	btfsc	status,2,c
  6457  000494  D767               	goto	l4876
  6458  000496  0A0A               	xorlw	10	; case 170
  6459  000498  B4D8               	btfsc	status,2,c
  6460  00049A  D76B               	goto	l4878
  6461  00049C  0A1E               	xorlw	30	; case 180
  6462  00049E  B4D8               	btfsc	status,2,c
  6463  0004A0  D76F               	goto	l4880
  6464  0004A2  0A0A               	xorlw	10	; case 190
  6465  0004A4  B4D8               	btfsc	status,2,c
  6466  0004A6  D773               	goto	l4882
  6467  0004A8  0A76               	xorlw	118	; case 200
  6468  0004AA  B4D8               	btfsc	status,2,c
  6469  0004AC  D777               	goto	l4884
  6470  0004AE  0A1A               	xorlw	26	; case 210
  6471  0004B0  B4D8               	btfsc	status,2,c
  6472  0004B2  D77B               	goto	l4886
  6473  0004B4  0A0E               	xorlw	14	; case 220
  6474  0004B6  B4D8               	btfsc	status,2,c
  6475  0004B8  D77F               	goto	l4888
  6476  0004BA  0A2C               	xorlw	44	; case 240
  6477  0004BC  B4D8               	btfsc	status,2,c
  6478  0004BE  D783               	goto	l4890
  6479  0004C0  0A0F               	xorlw	15	; case 255
  6480  0004C2  B4D8               	btfsc	status,2,c
  6481  0004C4  D787               	goto	l4892
  6482  0004C6  D78D               	goto	l4894
  6483  0004C8                     l4900:
  6484  0004C8  0E01               	movlw	1
  6485  0004CA  6E3F               	movwf	LCDGoto@ln,c
  6486  0004CC  0E00               	movlw	0
  6487  0004CE  EC4E  F00F         	call	_LCDGoto
  6488  0004D2  0EFE               	movlw	high STR_50
  6489  0004D4  6E40               	movwf	LCDPutStr@str+1,c
  6490  0004D6  0E4C               	movlw	low STR_50
  6491  0004D8  6E3F               	movwf	LCDPutStr@str,c
  6492  0004DA  EC33  F00E         	call	_LCDPutStr	;wreg free
  6493                           
  6494                           ;StateBuzzer.c: 189: do { printf("\r\nPWM: "); EUSART1_Write(((((pwm_freq/5)-1)*2) / 100
      +                          ) + '0'); EUSART1_Write(((((((pwm_freq/5)-1)*2) /10)/1) % 10) + '0'); EUSART1_Write(((((
      +                          pwm_freq/5)-1)*2) % 10) + '0'); } while (0);;
  6495  0004DE  0EFF               	movlw	high STR_51
  6496  0004E0  6E3E               	movwf	printf@f+1,c
  6497  0004E2  0E44               	movlw	low STR_51
  6498  0004E4  6E3D               	movwf	printf@f,c
  6499  0004E6  ECE5  F010         	call	_printf	;wreg free
  6500  0004EA  0E00               	movlw	0
  6501  0004EC  6E3E               	movwf	___awdiv@divisor+1,c
  6502  0004EE  0E05               	movlw	5
  6503  0004F0  6E3D               	movwf	___awdiv@divisor,c
  6504  0004F2  0100               	movlb	0	; () banked
  6505  0004F4  C0D3  F03B         	movff	DisplayBuzzerData@pwm_freq,___awdiv@dividend	;volatile
  6506  0004F8  6A3C               	clrf	___awdiv@dividend+1,c
  6507  0004FA  EC3C  F00C         	call	___awdiv	;wreg free
  6508  0004FE  90D8               	bcf	status,0,c
  6509  000500  363B               	rlcf	?___awdiv,f,c
  6510  000502  363C               	rlcf	?___awdiv+1,f,c
  6511  000504  0EFE               	movlw	254
  6512  000506  243B               	addwf	?___awdiv,w,c
  6513  000508  0100               	movlb	0	; () banked
  6514  00050A  6FD1               	movwf	_DisplayBuzzerData$3133& (0+255),b
  6515  00050C  0EFF               	movlw	255
  6516  00050E  203C               	addwfc	?___awdiv+1,w,c
  6517  000510  0100               	movlb	0	; () banked
  6518  000512  6FD2               	movwf	(_DisplayBuzzerData$3133+1)& (0+255),b
  6519                           
  6520                           ; BSR set to: 0
  6521  000514  C0D1  F03B         	movff	_DisplayBuzzerData$3133,___awdiv@dividend
  6522  000518  C0D2  F03C         	movff	_DisplayBuzzerData$3133+1,___awdiv@dividend+1
  6523  00051C  0E00               	movlw	0
  6524  00051E  6E3E               	movwf	___awdiv@divisor+1,c
  6525  000520  0E64               	movlw	100
  6526  000522  6E3D               	movwf	___awdiv@divisor,c
  6527  000524  EC3C  F00C         	call	___awdiv	;wreg free
  6528  000528  503B               	movf	?___awdiv,w,c
  6529  00052A  0F30               	addlw	48
  6530  00052C  EC38  F010         	call	_EUSART1_Write
  6531  000530  0E00               	movlw	0
  6532  000532  6E3E               	movwf	___awdiv@divisor+1,c
  6533  000534  0E05               	movlw	5
  6534  000536  6E3D               	movwf	___awdiv@divisor,c
  6535  000538  0100               	movlb	0	; () banked
  6536  00053A  C0D3  F03B         	movff	DisplayBuzzerData@pwm_freq,___awdiv@dividend	;volatile
  6537  00053E  6A3C               	clrf	___awdiv@dividend+1,c
  6538  000540  EC3C  F00C         	call	___awdiv	;wreg free
  6539  000544  90D8               	bcf	status,0,c
  6540  000546  363B               	rlcf	?___awdiv,f,c
  6541  000548  363C               	rlcf	?___awdiv+1,f,c
  6542  00054A  0EFE               	movlw	254
  6543  00054C  243B               	addwf	?___awdiv,w,c
  6544  00054E  0100               	movlb	0	; () banked
  6545  000550  6FD1               	movwf	_DisplayBuzzerData$3133& (0+255),b
  6546  000552  0EFF               	movlw	255
  6547  000554  203C               	addwfc	?___awdiv+1,w,c
  6548  000556  0100               	movlb	0	; () banked
  6549  000558  6FD2               	movwf	(_DisplayBuzzerData$3133+1)& (0+255),b
  6550                           
  6551                           ; BSR set to: 0
  6552  00055A  0E00               	movlw	0
  6553  00055C  6E3E               	movwf	___awdiv@divisor+1,c
  6554  00055E  0E0A               	movlw	10
  6555  000560  6E3D               	movwf	___awdiv@divisor,c
  6556  000562  C0D1  F03B         	movff	_DisplayBuzzerData$3133,___awdiv@dividend
  6557  000566  C0D2  F03C         	movff	_DisplayBuzzerData$3133+1,___awdiv@dividend+1
  6558  00056A  EC3C  F00C         	call	___awdiv	;wreg free
  6559  00056E  C03B  F0CD         	movff	?___awdiv,___awmod@dividend
  6560  000572  C03C  F0CE         	movff	?___awdiv+1,___awmod@dividend+1
  6561  000576  0E00               	movlw	0
  6562  000578  0100               	movlb	0	; () banked
  6563  00057A  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  6564  00057C  0E0A               	movlw	10
  6565  00057E  0100               	movlb	0	; () banked
  6566  000580  6FCF               	movwf	___awmod@divisor& (0+255),b
  6567  000582  EC9B  F00C         	call	___awmod	;wreg free
  6568  000586  0100               	movlb	0	; () banked
  6569  000588  51CD               	movf	?___awmod& (0+255),w,b
  6570  00058A  0F30               	addlw	48
  6571  00058C  EC38  F010         	call	_EUSART1_Write
  6572  000590  0E00               	movlw	0
  6573  000592  6E3E               	movwf	___awdiv@divisor+1,c
  6574  000594  0E05               	movlw	5
  6575  000596  6E3D               	movwf	___awdiv@divisor,c
  6576  000598  0100               	movlb	0	; () banked
  6577  00059A  C0D3  F03B         	movff	DisplayBuzzerData@pwm_freq,___awdiv@dividend	;volatile
  6578  00059E  6A3C               	clrf	___awdiv@dividend+1,c
  6579  0005A0  EC3C  F00C         	call	___awdiv	;wreg free
  6580  0005A4  90D8               	bcf	status,0,c
  6581  0005A6  363B               	rlcf	?___awdiv,f,c
  6582  0005A8  363C               	rlcf	?___awdiv+1,f,c
  6583  0005AA  0EFE               	movlw	254
  6584  0005AC  243B               	addwf	?___awdiv,w,c
  6585  0005AE  0100               	movlb	0	; () banked
  6586  0005B0  6FCD               	movwf	___awmod@dividend& (0+255),b
  6587  0005B2  0EFF               	movlw	255
  6588  0005B4  203C               	addwfc	?___awdiv+1,w,c
  6589  0005B6  0100               	movlb	0	; () banked
  6590  0005B8  6FCE               	movwf	(___awmod@dividend+1)& (0+255),b
  6591  0005BA  0E00               	movlw	0
  6592  0005BC  0100               	movlb	0	; () banked
  6593  0005BE  6FD0               	movwf	(___awmod@divisor+1)& (0+255),b
  6594  0005C0  0E0A               	movlw	10
  6595  0005C2  0100               	movlb	0	; () banked
  6596  0005C4  6FCF               	movwf	___awmod@divisor& (0+255),b
  6597  0005C6  EC9B  F00C         	call	___awmod	;wreg free
  6598  0005CA  0100               	movlb	0	; () banked
  6599  0005CC  51CD               	movf	?___awmod& (0+255),w,b
  6600  0005CE  0F30               	addlw	48
  6601  0005D0  EC38  F010         	call	_EUSART1_Write
  6602                           
  6603                           ;StateBuzzer.c: 192: do { printf("          Key:"); switch (pwm_freq) { case 10: printf(
      +                          "D8#"); break; case 15: printf("B7 "); break; case 20: printf("F7#"); break; case 25: pr
      +                          intf("D7#"); break; case 30: printf("C7 "); break; case 35: printf("A6 "); break; case 4
      +                          0: prin
  6604  0005D4  0EFE               	movlw	high STR_52
  6605  0005D6  6E3E               	movwf	printf@f+1,c
  6606  0005D8  0E9F               	movlw	low STR_52
  6607  0005DA  6E3D               	movwf	printf@f,c
  6608  0005DC  ECE5  F010         	call	_printf	;wreg free
  6609  0005E0  D0FC               	goto	l4992
  6610  0005E2                     l4918:
  6611  0005E2  0EFF               	movlw	high STR_14
  6612  0005E4  6E3E               	movwf	printf@f+1,c
  6613  0005E6  0EF4               	movlw	low STR_14
  6614  0005E8  6E3D               	movwf	printf@f,c
  6615  0005EA  ECE5  F010         	call	_printf	;wreg free
  6616  0005EE  0012               	return	
  6617  0005F0                     l4920:
  6618  0005F0  0EFF               	movlw	high STR_15
  6619  0005F2  6E3E               	movwf	printf@f+1,c
  6620  0005F4  0EB8               	movlw	low STR_15
  6621  0005F6  6E3D               	movwf	printf@f,c
  6622  0005F8  ECE5  F010         	call	_printf	;wreg free
  6623  0005FC  0012               	return	
  6624  0005FE                     l4922:
  6625  0005FE  0EFF               	movlw	high STR_16
  6626  000600  6E3E               	movwf	printf@f+1,c
  6627  000602  0EF0               	movlw	low STR_16
  6628  000604  6E3D               	movwf	printf@f,c
  6629  000606  ECE5  F010         	call	_printf	;wreg free
  6630  00060A  0012               	return	
  6631  00060C                     l4924:
  6632  00060C  0EFF               	movlw	high STR_17
  6633  00060E  6E3E               	movwf	printf@f+1,c
  6634  000610  0EEC               	movlw	low STR_17
  6635  000612  6E3D               	movwf	printf@f,c
  6636  000614  ECE5  F010         	call	_printf	;wreg free
  6637  000618  0012               	return	
  6638  00061A                     l4926:
  6639  00061A  0EFF               	movlw	high STR_18
  6640  00061C  6E3E               	movwf	printf@f+1,c
  6641  00061E  0EBC               	movlw	low STR_18
  6642  000620  6E3D               	movwf	printf@f,c
  6643  000622  ECE5  F010         	call	_printf	;wreg free
  6644  000626  0012               	return	
  6645  000628                     l4928:
  6646  000628  0EFF               	movlw	high STR_19
  6647  00062A  6E3E               	movwf	printf@f+1,c
  6648  00062C  0EA8               	movlw	low STR_19
  6649  00062E  6E3D               	movwf	printf@f,c
  6650  000630  ECE5  F010         	call	_printf	;wreg free
  6651  000634  0012               	return	
  6652  000636                     l4930:
  6653  000636  0EFF               	movlw	high STR_20
  6654  000638  6E3E               	movwf	printf@f+1,c
  6655  00063A  0EB4               	movlw	low STR_20
  6656  00063C  6E3D               	movwf	printf@f,c
  6657  00063E  ECE5  F010         	call	_printf	;wreg free
  6658  000642  0012               	return	
  6659  000644                     l4932:
  6660  000644  0EFF               	movlw	high STR_21
  6661  000646  6E3E               	movwf	printf@f+1,c
  6662  000648  0EB0               	movlw	low STR_21
  6663  00064A  6E3D               	movwf	printf@f,c
  6664  00064C  ECE5  F010         	call	_printf	;wreg free
  6665  000650  0012               	return	
  6666  000652                     l4934:
  6667  000652  0EFF               	movlw	high STR_22
  6668  000654  6E3E               	movwf	printf@f+1,c
  6669  000656  0EE8               	movlw	low STR_22
  6670  000658  6E3D               	movwf	printf@f,c
  6671  00065A  ECE5  F010         	call	_printf	;wreg free
  6672  00065E  0012               	return	
  6673  000660                     l4936:
  6674  000660  0EFF               	movlw	high STR_23
  6675  000662  6E3E               	movwf	printf@f+1,c
  6676  000664  0EAC               	movlw	low STR_23
  6677  000666  6E3D               	movwf	printf@f,c
  6678  000668  ECE5  F010         	call	_printf	;wreg free
  6679  00066C  0012               	return	
  6680  00066E                     l4938:
  6681  00066E  0EFF               	movlw	high STR_24
  6682  000670  6E3E               	movwf	printf@f+1,c
  6683  000672  0EFC               	movlw	low STR_24
  6684  000674  6E3D               	movwf	printf@f,c
  6685  000676  ECE5  F010         	call	_printf	;wreg free
  6686  00067A  0012               	return	
  6687  00067C                     l4940:
  6688  00067C  0EFF               	movlw	high STR_25
  6689  00067E  6E3E               	movwf	printf@f+1,c
  6690  000680  0ED4               	movlw	low STR_25
  6691  000682  6E3D               	movwf	printf@f,c
  6692  000684  ECE5  F010         	call	_printf	;wreg free
  6693  000688  0012               	return	
  6694  00068A                     l4942:
  6695  00068A  0EFF               	movlw	high STR_26
  6696  00068C  6E3E               	movwf	printf@f+1,c
  6697  00068E  0E90               	movlw	low STR_26
  6698  000690  6E3D               	movwf	printf@f,c
  6699  000692  ECE5  F010         	call	_printf	;wreg free
  6700  000696  0012               	return	
  6701  000698                     l4944:
  6702  000698  0EFF               	movlw	high STR_27
  6703  00069A  6E3E               	movwf	printf@f+1,c
  6704  00069C  0EE4               	movlw	low STR_27
  6705  00069E  6E3D               	movwf	printf@f,c
  6706  0006A0  ECE5  F010         	call	_printf	;wreg free
  6707  0006A4  0012               	return	
  6708  0006A6                     l4946:
  6709  0006A6  0EFF               	movlw	high STR_28
  6710  0006A8  6E3E               	movwf	printf@f+1,c
  6711  0006AA  0EA4               	movlw	low STR_28
  6712  0006AC  6E3D               	movwf	printf@f,c
  6713  0006AE  ECE5  F010         	call	_printf	;wreg free
  6714  0006B2  0012               	return	
  6715  0006B4                     l4948:
  6716  0006B4  0EFF               	movlw	high STR_29
  6717  0006B6  6E3E               	movwf	printf@f+1,c
  6718  0006B8  0EE0               	movlw	low STR_29
  6719  0006BA  6E3D               	movwf	printf@f,c
  6720  0006BC  ECE5  F010         	call	_printf	;wreg free
  6721  0006C0  0012               	return	
  6722  0006C2                     l4950:
  6723  0006C2  0EFF               	movlw	high STR_30
  6724  0006C4  6E3E               	movwf	printf@f+1,c
  6725  0006C6  0EA0               	movlw	low STR_30
  6726  0006C8  6E3D               	movwf	printf@f,c
  6727  0006CA  ECE5  F010         	call	_printf	;wreg free
  6728  0006CE  0012               	return	
  6729  0006D0                     l4952:
  6730  0006D0  0EFF               	movlw	high STR_31
  6731  0006D2  6E3E               	movwf	printf@f+1,c
  6732  0006D4  0E9C               	movlw	low STR_31
  6733  0006D6  6E3D               	movwf	printf@f,c
  6734  0006D8  ECE5  F010         	call	_printf	;wreg free
  6735  0006DC  0012               	return	
  6736  0006DE                     l4954:
  6737  0006DE  0EFF               	movlw	high STR_32
  6738  0006E0  6E3E               	movwf	printf@f+1,c
  6739  0006E2  0EDC               	movlw	low STR_32
  6740  0006E4  6E3D               	movwf	printf@f,c
  6741  0006E6  ECE5  F010         	call	_printf	;wreg free
  6742  0006EA  0012               	return	
  6743  0006EC                     l4956:
  6744  0006EC  0EFF               	movlw	high STR_33
  6745  0006EE  6E3E               	movwf	printf@f+1,c
  6746  0006F0  0E98               	movlw	low STR_33
  6747  0006F2  6E3D               	movwf	printf@f,c
  6748  0006F4  ECE5  F010         	call	_printf	;wreg free
  6749  0006F8  0012               	return	
  6750  0006FA                     l4958:
  6751  0006FA  0EFF               	movlw	high STR_34
  6752  0006FC  6E3E               	movwf	printf@f+1,c
  6753  0006FE  0ED8               	movlw	low STR_34
  6754  000700  6E3D               	movwf	printf@f,c
  6755  000702  ECE5  F010         	call	_printf	;wreg free
  6756  000706  0012               	return	
  6757  000708                     l4960:
  6758  000708  0EFF               	movlw	high STR_35
  6759  00070A  6E3E               	movwf	printf@f+1,c
  6760  00070C  0E94               	movlw	low STR_35
  6761  00070E  6E3D               	movwf	printf@f,c
  6762  000710  ECE5  F010         	call	_printf	;wreg free
  6763  000714  0012               	return	
  6764  000716                     l4962:
  6765  000716  0EFF               	movlw	high STR_36
  6766  000718  6E3E               	movwf	printf@f+1,c
  6767  00071A  0E78               	movlw	low STR_36
  6768  00071C  6E3D               	movwf	printf@f,c
  6769  00071E  ECE5  F010         	call	_printf	;wreg free
  6770  000722  0012               	return	
  6771  000724                     l4964:
  6772  000724  0EFF               	movlw	high STR_37
  6773  000726  6E3E               	movwf	printf@f+1,c
  6774  000728  0EC0               	movlw	low STR_37
  6775  00072A  6E3D               	movwf	printf@f,c
  6776  00072C  ECE5  F010         	call	_printf	;wreg free
  6777  000730  0012               	return	
  6778  000732                     l4966:
  6779  000732  0EFF               	movlw	high STR_38
  6780  000734  6E3E               	movwf	printf@f+1,c
  6781  000736  0E74               	movlw	low STR_38
  6782  000738  6E3D               	movwf	printf@f,c
  6783  00073A  ECE5  F010         	call	_printf	;wreg free
  6784  00073E  0012               	return	
  6785  000740                     l4968:
  6786  000740  0EFF               	movlw	high STR_39
  6787  000742  6E3E               	movwf	printf@f+1,c
  6788  000744  0ED0               	movlw	low STR_39
  6789  000746  6E3D               	movwf	printf@f,c
  6790  000748  ECE5  F010         	call	_printf	;wreg free
  6791  00074C  0012               	return	
  6792  00074E                     l4970:
  6793  00074E  0EFF               	movlw	high STR_40
  6794  000750  6E3E               	movwf	printf@f+1,c
  6795  000752  0E8C               	movlw	low STR_40
  6796  000754  6E3D               	movwf	printf@f,c
  6797  000756  ECE5  F010         	call	_printf	;wreg free
  6798  00075A  0012               	return	
  6799  00075C                     l4972:
  6800  00075C  0EFF               	movlw	high STR_41
  6801  00075E  6E3E               	movwf	printf@f+1,c
  6802  000760  0ECC               	movlw	low STR_41
  6803  000762  6E3D               	movwf	printf@f,c
  6804  000764  ECE5  F010         	call	_printf	;wreg free
  6805  000768  0012               	return	
  6806  00076A                     l4974:
  6807  00076A  0EFF               	movlw	high STR_42
  6808  00076C  6E3E               	movwf	printf@f+1,c
  6809  00076E  0E88               	movlw	low STR_42
  6810  000770  6E3D               	movwf	printf@f,c
  6811  000772  ECE5  F010         	call	_printf	;wreg free
  6812  000776  0012               	return	
  6813  000778                     l4976:
  6814  000778  0EFF               	movlw	high STR_43
  6815  00077A  6E3E               	movwf	printf@f+1,c
  6816  00077C  0E84               	movlw	low STR_43
  6817  00077E  6E3D               	movwf	printf@f,c
  6818  000780  ECE5  F010         	call	_printf	;wreg free
  6819  000784  0012               	return	
  6820  000786                     l4978:
  6821  000786  0EFF               	movlw	high STR_44
  6822  000788  6E3E               	movwf	printf@f+1,c
  6823  00078A  0EC8               	movlw	low STR_44
  6824  00078C  6E3D               	movwf	printf@f,c
  6825  00078E  ECE5  F010         	call	_printf	;wreg free
  6826  000792  0012               	return	
  6827  000794                     l4980:
  6828  000794  0EFF               	movlw	high STR_45
  6829  000796  6E3E               	movwf	printf@f+1,c
  6830  000798  0E80               	movlw	low STR_45
  6831  00079A  6E3D               	movwf	printf@f,c
  6832  00079C  ECE5  F010         	call	_printf	;wreg free
  6833  0007A0  0012               	return	
  6834  0007A2                     l4982:
  6835  0007A2  0EFF               	movlw	high STR_46
  6836  0007A4  6E3E               	movwf	printf@f+1,c
  6837  0007A6  0EC4               	movlw	low STR_46
  6838  0007A8  6E3D               	movwf	printf@f,c
  6839  0007AA  ECE5  F010         	call	_printf	;wreg free
  6840  0007AE  0012               	return	
  6841  0007B0                     l4984:
  6842  0007B0  0EFF               	movlw	high STR_47
  6843  0007B2  6E3E               	movwf	printf@f+1,c
  6844  0007B4  0E7C               	movlw	low STR_47
  6845  0007B6  6E3D               	movwf	printf@f,c
  6846  0007B8  ECE5  F010         	call	_printf	;wreg free
  6847  0007BC  0012               	return	
  6848  0007BE                     l4986:
  6849  0007BE  0EFF               	movlw	high STR_48
  6850  0007C0  6E3E               	movwf	printf@f+1,c
  6851  0007C2  0E70               	movlw	low STR_48
  6852  0007C4  6E3D               	movwf	printf@f,c
  6853  0007C6  ECE5  F010         	call	_printf	;wreg free
  6854  0007CA  0012               	return	
  6855  0007CC                     l4988:
  6856  0007CC  0EFF               	movlw	high STR_49
  6857  0007CE  6E3E               	movwf	printf@f+1,c
  6858  0007D0  0EF8               	movlw	low STR_49
  6859  0007D2  6E3D               	movwf	printf@f,c
  6860  0007D4  ECE5  F010         	call	_printf	;wreg free
  6861  0007D8  0012               	return	
  6862  0007DA                     l4992:
  6863  0007DA  0100               	movlb	0	; () banked
  6864  0007DC  51D3               	movf	DisplayBuzzerData@pwm_freq& (0+255),w,b	;volatile
  6865                           
  6866                           ; Switch size 1, requested type "space"
  6867                           ; Number of cases is 35, Range of values is 10 to 255
  6868                           ; switch strategies available:
  6869                           ; Name         Instructions Cycles
  6870                           ; simple_byte          106    54 (average)
  6871                           ;	Chosen strategy is simple_byte
  6872  0007DE  0A0A               	xorlw	10	; case 10
  6873  0007E0  B4D8               	btfsc	status,2,c
  6874  0007E2  D6FF               	goto	l4918
  6875  0007E4  0A05               	xorlw	5	; case 15
  6876  0007E6  B4D8               	btfsc	status,2,c
  6877  0007E8  D703               	goto	l4920
  6878  0007EA  0A1B               	xorlw	27	; case 20
  6879  0007EC  B4D8               	btfsc	status,2,c
  6880  0007EE  D707               	goto	l4922
  6881  0007F0  0A0D               	xorlw	13	; case 25
  6882  0007F2  B4D8               	btfsc	status,2,c
  6883  0007F4  D70B               	goto	l4924
  6884  0007F6  0A07               	xorlw	7	; case 30
  6885  0007F8  B4D8               	btfsc	status,2,c
  6886  0007FA  D70F               	goto	l4926
  6887  0007FC  0A3D               	xorlw	61	; case 35
  6888  0007FE  B4D8               	btfsc	status,2,c
  6889  000800  D713               	goto	l4928
  6890  000802  0A0B               	xorlw	11	; case 40
  6891  000804  B4D8               	btfsc	status,2,c
  6892  000806  D717               	goto	l4930
  6893  000808  0A05               	xorlw	5	; case 45
  6894  00080A  B4D8               	btfsc	status,2,c
  6895  00080C  D71B               	goto	l4932
  6896  00080E  0A1F               	xorlw	31	; case 50
  6897  000810  B4D8               	btfsc	status,2,c
  6898  000812  D71F               	goto	l4934
  6899  000814  0A05               	xorlw	5	; case 55
  6900  000816  B4D8               	btfsc	status,2,c
  6901  000818  D723               	goto	l4936
  6902  00081A  0A0B               	xorlw	11	; case 60
  6903  00081C  B4D8               	btfsc	status,2,c
  6904  00081E  D727               	goto	l4938
  6905  000820  0A7D               	xorlw	125	; case 65
  6906  000822  B4D8               	btfsc	status,2,c
  6907  000824  D72B               	goto	l4940
  6908  000826  0A07               	xorlw	7	; case 70
  6909  000828  B4D8               	btfsc	status,2,c
  6910  00082A  D72F               	goto	l4942
  6911  00082C  0A0D               	xorlw	13	; case 75
  6912  00082E  B4D8               	btfsc	status,2,c
  6913  000830  D733               	goto	l4944
  6914  000832  0A1B               	xorlw	27	; case 80
  6915  000834  B4D8               	btfsc	status,2,c
  6916  000836  D737               	goto	l4946
  6917  000838  0A05               	xorlw	5	; case 85
  6918  00083A  B4D8               	btfsc	status,2,c
  6919  00083C  D73B               	goto	l4948
  6920  00083E  0A0F               	xorlw	15	; case 90
  6921  000840  B4D8               	btfsc	status,2,c
  6922  000842  D73F               	goto	l4950
  6923  000844  0A05               	xorlw	5	; case 95
  6924  000846  B4D8               	btfsc	status,2,c
  6925  000848  D743               	goto	l4952
  6926  00084A  0A3B               	xorlw	59	; case 100
  6927  00084C  B4D8               	btfsc	status,2,c
  6928  00084E  D747               	goto	l4954
  6929  000850  0A0D               	xorlw	13	; case 105
  6930  000852  B4D8               	btfsc	status,2,c
  6931  000854  D74B               	goto	l4956
  6932  000856  0A07               	xorlw	7	; case 110
  6933  000858  B4D8               	btfsc	status,2,c
  6934  00085A  D74F               	goto	l4958
  6935  00085C  0A1D               	xorlw	29	; case 115
  6936  00085E  B4D8               	btfsc	status,2,c
  6937  000860  D753               	goto	l4960
  6938  000862  0A0E               	xorlw	14	; case 125
  6939  000864  B4D8               	btfsc	status,2,c
  6940  000866  D757               	goto	l4962
  6941  000868  0AFA               	xorlw	250	; case 135
  6942  00086A  B4D8               	btfsc	status,2,c
  6943  00086C  D75B               	goto	l4964
  6944  00086E  0A0B               	xorlw	11	; case 140
  6945  000870  B4D8               	btfsc	status,2,c
  6946  000872  D75F               	goto	l4966
  6947  000874  0A1A               	xorlw	26	; case 150
  6948  000876  B4D8               	btfsc	status,2,c
  6949  000878  D763               	goto	l4968
  6950  00087A  0A36               	xorlw	54	; case 160
  6951  00087C  B4D8               	btfsc	status,2,c
  6952  00087E  D767               	goto	l4970
  6953  000880  0A0A               	xorlw	10	; case 170
  6954  000882  B4D8               	btfsc	status,2,c
  6955  000884  D76B               	goto	l4972
  6956  000886  0A1E               	xorlw	30	; case 180
  6957  000888  B4D8               	btfsc	status,2,c
  6958  00088A  D76F               	goto	l4974
  6959  00088C  0A0A               	xorlw	10	; case 190
  6960  00088E  B4D8               	btfsc	status,2,c
  6961  000890  D773               	goto	l4976
  6962  000892  0A76               	xorlw	118	; case 200
  6963  000894  B4D8               	btfsc	status,2,c
  6964  000896  D777               	goto	l4978
  6965  000898  0A1A               	xorlw	26	; case 210
  6966  00089A  B4D8               	btfsc	status,2,c
  6967  00089C  D77B               	goto	l4980
  6968  00089E  0A0E               	xorlw	14	; case 220
  6969  0008A0  B4D8               	btfsc	status,2,c
  6970  0008A2  D77F               	goto	l4982
  6971  0008A4  0A2C               	xorlw	44	; case 240
  6972  0008A6  B4D8               	btfsc	status,2,c
  6973  0008A8  D783               	goto	l4984
  6974  0008AA  0A0F               	xorlw	15	; case 255
  6975  0008AC  B4D8               	btfsc	status,2,c
  6976  0008AE  D787               	goto	l4986
  6977  0008B0  D78D               	goto	l4988
  6978  0008B2                     __end_of_DisplayBuzzerData:
  6979                           	opt stack 0
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           intcon	equ	0xFF2
  6987                           postinc0	equ	0xFEE
  6988                           wreg	equ	0xFE8
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           postdec2	equ	0xFDD
  6992                           plusw2	equ	0xFDB
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _printf *****************
  6998 ;; Defined at:
  6999 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  f               2   28[COMRAM] PTR const unsigned char 
  7002 ;;		 -> STR_111(7), STR_110(7), STR_109(10), STR_101(16), 
  7003 ;;		 -> STR_88(4), STR_87(4), STR_86(4), STR_85(4), 
  7004 ;;		 -> STR_84(4), STR_83(4), STR_82(4), STR_81(4), 
  7005 ;;		 -> STR_80(4), STR_79(4), STR_78(4), STR_77(4), 
  7006 ;;		 -> STR_76(4), STR_75(4), STR_74(4), STR_73(4), 
  7007 ;;		 -> STR_72(4), STR_71(4), STR_70(4), STR_69(4), 
  7008 ;;		 -> STR_68(4), STR_67(4), STR_66(4), STR_65(4), 
  7009 ;;		 -> STR_64(4), STR_63(3), STR_62(4), STR_61(4), 
  7010 ;;		 -> STR_60(4), STR_59(4), STR_58(4), STR_57(4), 
  7011 ;;		 -> STR_56(4), STR_55(4), STR_54(4), STR_53(4), 
  7012 ;;		 -> STR_52(15), STR_51(8), STR_9(17), STR_8(11), 
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;  _val            5    0        struct .
  7015 ;;  ap              2   14[BANK0 ] PTR void [1]
  7016 ;;		 -> ?_printf(2), 
  7017 ;;  c               1   16[BANK0 ] char 
  7018 ;;  flag            1    0        unsigned char 
  7019 ;;  prec            1    0        char 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  2   28[COMRAM] int 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7029 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;Total ram usage:        5 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    9
  7036 ;; This function calls:
  7037 ;;		_putch
  7038 ;; This function is called by:
  7039 ;;		_DisplayVoltage
  7040 ;;		_DisplayBuzzerData
  7041 ;;		_DisplayTime
  7042 ;;		_DisplayTemperature
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text33
  7047  0021CA                     __ptext33:
  7048                           	opt stack 0
  7049  0021CA                     _printf:
  7050                           	opt stack 19
  7051                           
  7052                           ;doprnt.c: 466: va_list ap;
  7053                           ;doprnt.c: 499: signed char c;
  7054                           ;doprnt.c: 506: signed char prec;
  7055                           ;doprnt.c: 508: unsigned char flag;
  7056                           ;doprnt.c: 527: union {
  7057                           ;doprnt.c: 528: unsigned int _val;
  7058                           ;doprnt.c: 529: struct {
  7059                           ;doprnt.c: 530: const char * _cp;
  7060                           ;doprnt.c: 531: unsigned _len;
  7061                           ;doprnt.c: 532: } _str;
  7062                           ;doprnt.c: 533: } _val;
  7063                           ;doprnt.c: 542: *ap = __va_start();
  7064                           
  7065                           ;incstack = 0
  7066  0021CA  0E00               	movlw	high (?_printf+2)
  7067  0021CC  0100               	movlb	0	; () banked
  7068  0021CE  6FCA               	movwf	(printf@ap+1)& (0+255),b
  7069  0021D0  0E3F               	movlw	low (?_printf+2)
  7070  0021D2  0100               	movlb	0	; () banked
  7071  0021D4  6FC9               	movwf	printf@ap& (0+255),b
  7072                           
  7073                           ;doprnt.c: 545: while(c = *f++) {
  7074  0021D6  D004               	goto	l4596
  7075  0021D8                     l4594:
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;doprnt.c: 549: {
  7079                           ;doprnt.c: 550: (putch(c) );
  7080  0021D8  0100               	movlb	0	; () banked
  7081  0021DA  51CB               	movf	printf@c& (0+255),w,b
  7082  0021DC  ECE8  F012         	call	_putch
  7083  0021E0                     l4596:
  7084  0021E0  C03D  FFF6         	movff	printf@f,tblptrl
  7085  0021E4  C03E  FFF7         	movff	printf@f+1,tblptrh
  7086  0021E8  4A3D               	infsnz	printf@f,f,c
  7087  0021EA  2A3E               	incf	printf@f+1,f,c
  7088  0021EC                     	if	0	;tblptru may be non-zero
  7089  0021EC                     	endif
  7090  0021EC                     	if	0	;tblptru may be non-zero
  7091  0021EC                     	endif
  7092  0021EC  0008               	tblrd		*
  7093  0021EE  0100               	movlb	0	; () banked
  7094  0021F0  CFF5 F0CB          	movff	tablat,printf@c
  7095  0021F4  0100               	movlb	0	; () banked
  7096  0021F6  67CB               	tstfsz	printf@c& (0+255),b
  7097  0021F8  D7EF               	goto	l4594
  7098  0021FA  0012               	return	
  7099  0021FC                     __end_of_printf:
  7100                           	opt stack 0
  7101                           tblptru	equ	0xFF8
  7102                           tblptrh	equ	0xFF7
  7103                           tblptrl	equ	0xFF6
  7104                           tablat	equ	0xFF5
  7105                           prodh	equ	0xFF4
  7106                           prodl	equ	0xFF3
  7107                           intcon	equ	0xFF2
  7108                           postinc0	equ	0xFEE
  7109                           wreg	equ	0xFE8
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           plusw2	equ	0xFDB
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function _putch *****************
  7119 ;; Defined at:
  7120 ;;		line 168 in file "mcc_generated_files/eusart1.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  txData          1    wreg     unsigned char 
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;  txData          1   27[COMRAM] unsigned char 
  7125 ;; Return value:  Size  Location     Type
  7126 ;;		None               void
  7127 ;; Registers used:
  7128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;Total ram usage:        1 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    8
  7141 ;; This function calls:
  7142 ;;		_EUSART1_Write
  7143 ;; This function is called by:
  7144 ;;		_printf
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text34
  7149  0025D0                     __ptext34:
  7150                           	opt stack 0
  7151  0025D0                     _putch:
  7152                           	opt stack 19
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;incstack = 0
  7156                           ;putch@txData stored from wreg
  7157  0025D0  6E3C               	movwf	putch@txData,c
  7158                           
  7159                           ;eusart1.c: 170: EUSART1_Write(txData);
  7160  0025D2  503C               	movf	putch@txData,w,c
  7161  0025D4  EC38  F010         	call	_EUSART1_Write
  7162  0025D8  0012               	return	
  7163  0025DA                     __end_of_putch:
  7164                           	opt stack 0
  7165                           tblptru	equ	0xFF8
  7166                           tblptrh	equ	0xFF7
  7167                           tblptrl	equ	0xFF6
  7168                           tablat	equ	0xFF5
  7169                           prodh	equ	0xFF4
  7170                           prodl	equ	0xFF3
  7171                           intcon	equ	0xFF2
  7172                           postinc0	equ	0xFEE
  7173                           wreg	equ	0xFE8
  7174                           indf2	equ	0xFDF
  7175                           postinc2	equ	0xFDE
  7176                           postdec2	equ	0xFDD
  7177                           plusw2	equ	0xFDB
  7178                           fsr2h	equ	0xFDA
  7179                           fsr2l	equ	0xFD9
  7180                           status	equ	0xFD8
  7181                           
  7182 ;; *************** function _EUSART1_Write *****************
  7183 ;; Defined at:
  7184 ;;		line 140 in file "mcc_generated_files/eusart1.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  txData          1    wreg     unsigned char 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;  txData          1   26[COMRAM] unsigned char 
  7189 ;; Return value:  Size  Location     Type
  7190 ;;		None               void
  7191 ;; Registers used:
  7192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7193 ;; Tracked objects:
  7194 ;;		On entry : 0/0
  7195 ;;		On exit  : 0/0
  7196 ;;		Unchanged: 0/0
  7197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7202 ;;Total ram usage:        1 bytes
  7203 ;; Hardware stack levels used:    1
  7204 ;; Hardware stack levels required when called:    7
  7205 ;; This function calls:
  7206 ;;		Nothing
  7207 ;; This function is called by:
  7208 ;;		_putch
  7209 ;;		_DisplayVoltage
  7210 ;;		_DisplayBuzzerData
  7211 ;;		_DisplayTime
  7212 ;;		_DisplayTemperature
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text35
  7217  002070                     __ptext35:
  7218                           	opt stack 0
  7219  002070                     _EUSART1_Write:
  7220                           	opt stack 19
  7221                           
  7222                           ;incstack = 0
  7223                           ;EUSART1_Write@txData stored from wreg
  7224  002070  6E3B               	movwf	EUSART1_Write@txData,c
  7225  002072                     l4482:
  7226  002072  5043               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  7227  002074  B4D8               	btfsc	status,2,c
  7228  002076  D7FD               	goto	l4482
  7229                           
  7230                           ;eusart1.c: 144: }
  7231                           ;eusart1.c: 146: if(0 == PIE1bits.TX1IE)
  7232  002078  B89D               	btfsc	3997,4,c	;volatile
  7233  00207A  D003               	goto	l309
  7234                           
  7235                           ;eusart1.c: 147: {
  7236                           ;eusart1.c: 148: TX1REG = txData;
  7237  00207C  C03B  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  7238                           
  7239                           ;eusart1.c: 149: }
  7240  002080  D014               	goto	l4496
  7241  002082                     l309:
  7242                           
  7243                           ;eusart1.c: 150: else
  7244                           ;eusart1.c: 151: {
  7245                           ;eusart1.c: 152: PIE1bits.TX1IE = 0;
  7246  002082  989D               	bcf	3997,4,c	;volatile
  7247                           
  7248                           ;eusart1.c: 153: eusart1TxBuffer[eusart1TxHead++] = txData;
  7249  002084  5017               	movf	_eusart1TxHead,w,c
  7250  002086  0D01               	mullw	1
  7251  002088  0100               	movlb	0	; () banked
  7252  00208A  0E60               	movlw	low _eusart1TxBuffer
  7253  00208C  24F3               	addwf	prodl,w,c
  7254  00208E  6ED9               	movwf	fsr2l,c
  7255  002090  0100               	movlb	0	; () banked
  7256  002092  0E00               	movlw	high _eusart1TxBuffer
  7257  002094  20F4               	addwfc	prodh,w,c
  7258  002096  6EDA               	movwf	fsr2h,c
  7259  002098  C03B  FFDF         	movff	EUSART1_Write@txData,indf2
  7260                           
  7261                           ; BSR set to: 0
  7262  00209C  2A17               	incf	_eusart1TxHead,f,c
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;eusart1.c: 154: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  7266  00209E  0E3F               	movlw	63
  7267  0020A0  6417               	cpfsgt	_eusart1TxHead,c
  7268  0020A2  D002               	goto	l4494
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;eusart1.c: 155: {
  7272                           ;eusart1.c: 156: eusart1TxHead = 0;
  7273  0020A4  0E00               	movlw	0
  7274  0020A6  6E17               	movwf	_eusart1TxHead,c
  7275  0020A8                     l4494:
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;eusart1.c: 157: }
  7279                           ;eusart1.c: 158: eusart1TxBufferRemaining--;
  7280  0020A8  0643               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  7281  0020AA                     l4496:
  7282                           
  7283                           ;eusart1.c: 159: }
  7284                           ;eusart1.c: 160: PIE1bits.TX1IE = 1;
  7285  0020AA  889D               	bsf	3997,4,c	;volatile
  7286  0020AC  0012               	return	
  7287  0020AE                     __end_of_EUSART1_Write:
  7288                           	opt stack 0
  7289                           tblptru	equ	0xFF8
  7290                           tblptrh	equ	0xFF7
  7291                           tblptrl	equ	0xFF6
  7292                           tablat	equ	0xFF5
  7293                           prodh	equ	0xFF4
  7294                           prodl	equ	0xFF3
  7295                           intcon	equ	0xFF2
  7296                           postinc0	equ	0xFEE
  7297                           wreg	equ	0xFE8
  7298                           indf2	equ	0xFDF
  7299                           postinc2	equ	0xFDE
  7300                           postdec2	equ	0xFDD
  7301                           plusw2	equ	0xFDB
  7302                           fsr2h	equ	0xFDA
  7303                           fsr2l	equ	0xFD9
  7304                           status	equ	0xFD8
  7305                           
  7306 ;; *************** function ___awmod *****************
  7307 ;; Defined at:
  7308 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  dividend        2   18[BANK0 ] int 
  7311 ;;  divisor         2   20[BANK0 ] int 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;  sign            1   31[COMRAM] unsigned char 
  7314 ;;  counter         1   30[COMRAM] unsigned char 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  2   18[BANK0 ] int 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0, prodl
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;Total ram usage:        6 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    7
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_DisplayBuzzerData
  7335 ;;		_StateClockSet
  7336 ;;		_DisplayTime
  7337 ;;		_DisplayTemperature
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           	psect	text36
  7342  001936                     __ptext36:
  7343                           	opt stack 0
  7344  001936                     ___awmod:
  7345                           	opt stack 21
  7346                           
  7347                           ;incstack = 0
  7348  001936  0E00               	movlw	0
  7349  001938  6E40               	movwf	___awmod@sign,c
  7350  00193A  0100               	movlb	0	; () banked
  7351  00193C  51CE               	movf	(___awmod@dividend+1)& (0+255),w,b
  7352  00193E  0A80               	xorlw	128
  7353  001940  6EF3               	movwf	prodl,c
  7354  001942  0E80               	movlw	128
  7355  001944  5CF3               	subwf	prodl,w,c
  7356  001946  0E00               	movlw	0
  7357  001948  B4D8               	btfsc	status,2,c
  7358  00194A  5DCD               	subwf	___awmod@dividend& (0+255),w,b
  7359  00194C  B0D8               	btfsc	status,0,c
  7360  00194E  D008               	goto	l4650
  7361                           
  7362                           ; BSR set to: 0
  7363  001950  0100               	movlb	0	; () banked
  7364  001952  6DCD               	negf	___awmod@dividend& (0+255),b
  7365  001954  0100               	movlb	0	; () banked
  7366  001956  1FCE               	comf	(___awmod@dividend+1)& (0+255),f,b
  7367  001958  B0D8               	btfsc	status,0,c
  7368  00195A  2BCE               	incf	(___awmod@dividend+1)& (0+255),f,b
  7369                           
  7370                           ; BSR set to: 0
  7371  00195C  0E01               	movlw	1
  7372  00195E  6E40               	movwf	___awmod@sign,c
  7373  001960                     l4650:
  7374                           
  7375                           ; BSR set to: 0
  7376  001960  0100               	movlb	0	; () banked
  7377  001962  51D0               	movf	(___awmod@divisor+1)& (0+255),w,b
  7378  001964  0A80               	xorlw	128
  7379  001966  6EF3               	movwf	prodl,c
  7380  001968  0E80               	movlw	128
  7381  00196A  5CF3               	subwf	prodl,w,c
  7382  00196C  0E00               	movlw	0
  7383  00196E  B4D8               	btfsc	status,2,c
  7384  001970  5DCF               	subwf	___awmod@divisor& (0+255),w,b
  7385  001972  B0D8               	btfsc	status,0,c
  7386  001974  D006               	goto	l4654
  7387                           
  7388                           ; BSR set to: 0
  7389  001976  0100               	movlb	0	; () banked
  7390  001978  6DCF               	negf	___awmod@divisor& (0+255),b
  7391  00197A  0100               	movlb	0	; () banked
  7392  00197C  1FD0               	comf	(___awmod@divisor+1)& (0+255),f,b
  7393  00197E  B0D8               	btfsc	status,0,c
  7394  001980  2BD0               	incf	(___awmod@divisor+1)& (0+255),f,b
  7395  001982                     l4654:
  7396                           
  7397                           ; BSR set to: 0
  7398  001982  0100               	movlb	0	; () banked
  7399  001984  51D0               	movf	(___awmod@divisor+1)& (0+255),w,b
  7400  001986  11CF               	iorwf	___awmod@divisor& (0+255),w,b
  7401  001988  B4D8               	btfsc	status,2,c
  7402  00198A  D023               	goto	l4670
  7403                           
  7404                           ; BSR set to: 0
  7405  00198C  0E01               	movlw	1
  7406  00198E  6E3F               	movwf	___awmod@counter,c
  7407  001990  D005               	goto	l4660
  7408  001992                     l4658:
  7409                           
  7410                           ; BSR set to: 0
  7411  001992  0100               	movlb	0	; () banked
  7412  001994  90D8               	bcf	status,0,c
  7413  001996  37CF               	rlcf	___awmod@divisor& (0+255),f,b
  7414  001998  37D0               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7415  00199A  2A3F               	incf	___awmod@counter,f,c
  7416  00199C                     l4660:
  7417                           
  7418                           ; BSR set to: 0
  7419  00199C  0100               	movlb	0	; () banked
  7420  00199E  AFD0               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7421  0019A0  D7F8               	goto	l4658
  7422  0019A2                     l4662:
  7423                           
  7424                           ; BSR set to: 0
  7425  0019A2  0100               	movlb	0	; () banked
  7426  0019A4  51CF               	movf	___awmod@divisor& (0+255),w,b
  7427  0019A6  0100               	movlb	0	; () banked
  7428  0019A8  5DCD               	subwf	___awmod@dividend& (0+255),w,b
  7429  0019AA  0100               	movlb	0	; () banked
  7430  0019AC  51D0               	movf	(___awmod@divisor+1)& (0+255),w,b
  7431  0019AE  0100               	movlb	0	; () banked
  7432  0019B0  59CE               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7433  0019B2  A0D8               	btfss	status,0,c
  7434  0019B4  D008               	goto	l4666
  7435                           
  7436                           ; BSR set to: 0
  7437  0019B6  0100               	movlb	0	; () banked
  7438  0019B8  51CF               	movf	___awmod@divisor& (0+255),w,b
  7439  0019BA  0100               	movlb	0	; () banked
  7440  0019BC  5FCD               	subwf	___awmod@dividend& (0+255),f,b
  7441  0019BE  0100               	movlb	0	; () banked
  7442  0019C0  51D0               	movf	(___awmod@divisor+1)& (0+255),w,b
  7443  0019C2  0100               	movlb	0	; () banked
  7444  0019C4  5BCE               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7445  0019C6                     l4666:
  7446                           
  7447                           ; BSR set to: 0
  7448  0019C6  0100               	movlb	0	; () banked
  7449  0019C8  90D8               	bcf	status,0,c
  7450  0019CA  33D0               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7451  0019CC  33CF               	rrcf	___awmod@divisor& (0+255),f,b
  7452                           
  7453                           ; BSR set to: 0
  7454  0019CE  2E3F               	decfsz	___awmod@counter,f,c
  7455  0019D0  D7E8               	goto	l4662
  7456  0019D2                     l4670:
  7457                           
  7458                           ; BSR set to: 0
  7459  0019D2  5040               	movf	___awmod@sign,w,c
  7460  0019D4  B4D8               	btfsc	status,2,c
  7461  0019D6  D006               	goto	l4674
  7462                           
  7463                           ; BSR set to: 0
  7464  0019D8  0100               	movlb	0	; () banked
  7465  0019DA  6DCD               	negf	___awmod@dividend& (0+255),b
  7466  0019DC  0100               	movlb	0	; () banked
  7467  0019DE  1FCE               	comf	(___awmod@dividend+1)& (0+255),f,b
  7468  0019E0  B0D8               	btfsc	status,0,c
  7469  0019E2  2BCE               	incf	(___awmod@dividend+1)& (0+255),f,b
  7470  0019E4                     l4674:
  7471                           
  7472                           ; BSR set to: 0
  7473  0019E4  C0CD  F0CD         	movff	___awmod@dividend,?___awmod
  7474  0019E8  C0CE  F0CE         	movff	___awmod@dividend+1,?___awmod+1
  7475  0019EC  0012               	return	
  7476  0019EE                     __end_of___awmod:
  7477                           	opt stack 0
  7478                           tblptru	equ	0xFF8
  7479                           tblptrh	equ	0xFF7
  7480                           tblptrl	equ	0xFF6
  7481                           tablat	equ	0xFF5
  7482                           prodh	equ	0xFF4
  7483                           prodl	equ	0xFF3
  7484                           intcon	equ	0xFF2
  7485                           postinc0	equ	0xFEE
  7486                           wreg	equ	0xFE8
  7487                           indf2	equ	0xFDF
  7488                           postinc2	equ	0xFDE
  7489                           postdec2	equ	0xFDD
  7490                           plusw2	equ	0xFDB
  7491                           fsr2h	equ	0xFDA
  7492                           fsr2l	equ	0xFD9
  7493                           status	equ	0xFD8
  7494                           
  7495 ;; *************** function ___awdiv *****************
  7496 ;; Defined at:
  7497 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  dividend        2   26[COMRAM] int 
  7500 ;;  divisor         2   28[COMRAM] int 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  quotient        2   16[BANK0 ] int 
  7503 ;;  sign            1   15[BANK0 ] unsigned char 
  7504 ;;  counter         1   14[BANK0 ] unsigned char 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  2   26[COMRAM] int 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0, prodl
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7514 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;Total ram usage:        8 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    7
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		_DisplayBuzzerData
  7525 ;;		_StateClockSet
  7526 ;;		_DisplayTime
  7527 ;;		_DisplayTemperature
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           	psect	text37
  7532  001878                     __ptext37:
  7533                           	opt stack 0
  7534  001878                     ___awdiv:
  7535                           	opt stack 21
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;incstack = 0
  7539  001878  0E00               	movlw	0
  7540  00187A  0100               	movlb	0	; () banked
  7541  00187C  6FCA               	movwf	___awdiv@sign& (0+255),b
  7542                           
  7543                           ; BSR set to: 0
  7544  00187E  503E               	movf	___awdiv@divisor+1,w,c
  7545  001880  0A80               	xorlw	128
  7546  001882  6EF3               	movwf	prodl,c
  7547  001884  0E80               	movlw	128
  7548  001886  5CF3               	subwf	prodl,w,c
  7549  001888  0E00               	movlw	0
  7550  00188A  B4D8               	btfsc	status,2,c
  7551  00188C  5C3D               	subwf	___awdiv@divisor,w,c
  7552  00188E  B0D8               	btfsc	status,0,c
  7553  001890  D007               	goto	l4606
  7554                           
  7555                           ; BSR set to: 0
  7556  001892  6C3D               	negf	___awdiv@divisor,c
  7557  001894  1E3E               	comf	___awdiv@divisor+1,f,c
  7558  001896  B0D8               	btfsc	status,0,c
  7559  001898  2A3E               	incf	___awdiv@divisor+1,f,c
  7560                           
  7561                           ; BSR set to: 0
  7562  00189A  0E01               	movlw	1
  7563  00189C  0100               	movlb	0	; () banked
  7564  00189E  6FCA               	movwf	___awdiv@sign& (0+255),b
  7565  0018A0                     l4606:
  7566                           
  7567                           ; BSR set to: 0
  7568  0018A0  503C               	movf	___awdiv@dividend+1,w,c
  7569  0018A2  0A80               	xorlw	128
  7570  0018A4  6EF3               	movwf	prodl,c
  7571  0018A6  0E80               	movlw	128
  7572  0018A8  5CF3               	subwf	prodl,w,c
  7573  0018AA  0E00               	movlw	0
  7574  0018AC  B4D8               	btfsc	status,2,c
  7575  0018AE  5C3B               	subwf	___awdiv@dividend,w,c
  7576  0018B0  B0D8               	btfsc	status,0,c
  7577  0018B2  D007               	goto	l4612
  7578                           
  7579                           ; BSR set to: 0
  7580  0018B4  6C3B               	negf	___awdiv@dividend,c
  7581  0018B6  1E3C               	comf	___awdiv@dividend+1,f,c
  7582  0018B8  B0D8               	btfsc	status,0,c
  7583  0018BA  2A3C               	incf	___awdiv@dividend+1,f,c
  7584                           
  7585                           ; BSR set to: 0
  7586  0018BC  0E01               	movlw	1
  7587  0018BE  0100               	movlb	0	; () banked
  7588  0018C0  1BCA               	xorwf	___awdiv@sign& (0+255),f,b
  7589  0018C2                     l4612:
  7590                           
  7591                           ; BSR set to: 0
  7592  0018C2  0E00               	movlw	0
  7593  0018C4  0100               	movlb	0	; () banked
  7594  0018C6  6FCC               	movwf	(___awdiv@quotient+1)& (0+255),b
  7595  0018C8  0E00               	movlw	0
  7596  0018CA  0100               	movlb	0	; () banked
  7597  0018CC  6FCB               	movwf	___awdiv@quotient& (0+255),b
  7598                           
  7599                           ; BSR set to: 0
  7600  0018CE  503E               	movf	___awdiv@divisor+1,w,c
  7601  0018D0  103D               	iorwf	___awdiv@divisor,w,c
  7602  0018D2  B4D8               	btfsc	status,2,c
  7603  0018D4  D021               	goto	l4634
  7604                           
  7605                           ; BSR set to: 0
  7606  0018D6  0E01               	movlw	1
  7607  0018D8  0100               	movlb	0	; () banked
  7608  0018DA  6FC9               	movwf	___awdiv@counter& (0+255),b
  7609  0018DC  D005               	goto	l4620
  7610  0018DE                     l4618:
  7611                           
  7612                           ; BSR set to: 0
  7613  0018DE  90D8               	bcf	status,0,c
  7614  0018E0  363D               	rlcf	___awdiv@divisor,f,c
  7615  0018E2  363E               	rlcf	___awdiv@divisor+1,f,c
  7616  0018E4  0100               	movlb	0	; () banked
  7617  0018E6  2BC9               	incf	___awdiv@counter& (0+255),f,b
  7618  0018E8                     l4620:
  7619                           
  7620                           ; BSR set to: 0
  7621  0018E8  AE3E               	btfss	___awdiv@divisor+1,7,c
  7622  0018EA  D7F9               	goto	l4618
  7623  0018EC                     l4622:
  7624                           
  7625                           ; BSR set to: 0
  7626  0018EC  0100               	movlb	0	; () banked
  7627  0018EE  90D8               	bcf	status,0,c
  7628  0018F0  37CB               	rlcf	___awdiv@quotient& (0+255),f,b
  7629  0018F2  37CC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7630                           
  7631                           ; BSR set to: 0
  7632  0018F4  503D               	movf	___awdiv@divisor,w,c
  7633  0018F6  5C3B               	subwf	___awdiv@dividend,w,c
  7634  0018F8  503E               	movf	___awdiv@divisor+1,w,c
  7635  0018FA  583C               	subwfb	___awdiv@dividend+1,w,c
  7636  0018FC  A0D8               	btfss	status,0,c
  7637  0018FE  D006               	goto	l4630
  7638                           
  7639                           ; BSR set to: 0
  7640  001900  503D               	movf	___awdiv@divisor,w,c
  7641  001902  5E3B               	subwf	___awdiv@dividend,f,c
  7642  001904  503E               	movf	___awdiv@divisor+1,w,c
  7643  001906  5A3C               	subwfb	___awdiv@dividend+1,f,c
  7644                           
  7645                           ; BSR set to: 0
  7646  001908  0100               	movlb	0	; () banked
  7647  00190A  81CB               	bsf	___awdiv@quotient& (0+255),0,b
  7648  00190C                     l4630:
  7649                           
  7650                           ; BSR set to: 0
  7651  00190C  90D8               	bcf	status,0,c
  7652  00190E  323E               	rrcf	___awdiv@divisor+1,f,c
  7653  001910  323D               	rrcf	___awdiv@divisor,f,c
  7654                           
  7655                           ; BSR set to: 0
  7656  001912  0100               	movlb	0	; () banked
  7657  001914  2FC9               	decfsz	___awdiv@counter& (0+255),f,b
  7658  001916  D7EA               	goto	l4622
  7659  001918                     l4634:
  7660                           
  7661                           ; BSR set to: 0
  7662  001918  0100               	movlb	0	; () banked
  7663  00191A  51CA               	movf	___awdiv@sign& (0+255),w,b
  7664  00191C  B4D8               	btfsc	status,2,c
  7665  00191E  D006               	goto	l4638
  7666                           
  7667                           ; BSR set to: 0
  7668  001920  0100               	movlb	0	; () banked
  7669  001922  6DCB               	negf	___awdiv@quotient& (0+255),b
  7670  001924  0100               	movlb	0	; () banked
  7671  001926  1FCC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7672  001928  B0D8               	btfsc	status,0,c
  7673  00192A  2BCC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7674  00192C                     l4638:
  7675                           
  7676                           ; BSR set to: 0
  7677  00192C  C0CB  F03B         	movff	___awdiv@quotient,?___awdiv
  7678  001930  C0CC  F03C         	movff	___awdiv@quotient+1,?___awdiv+1
  7679  001934  0012               	return	
  7680  001936                     __end_of___awdiv:
  7681                           	opt stack 0
  7682                           tblptru	equ	0xFF8
  7683                           tblptrh	equ	0xFF7
  7684                           tblptrl	equ	0xFF6
  7685                           tablat	equ	0xFF5
  7686                           prodh	equ	0xFF4
  7687                           prodl	equ	0xFF3
  7688                           intcon	equ	0xFF2
  7689                           postinc0	equ	0xFEE
  7690                           wreg	equ	0xFE8
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           postdec2	equ	0xFDD
  7694                           plusw2	equ	0xFDB
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function _DisplayBuzMenu *****************
  7700 ;; Defined at:
  7701 ;;		line 168 in file "StateBuzzer.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;Total ram usage:        0 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:   10
  7722 ;; This function calls:
  7723 ;;		_LCDGoto
  7724 ;;		_LCDPutStr
  7725 ;; This function is called by:
  7726 ;;		_StateBuzzer
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           	psect	text38
  7731  0022E6                     __ptext38:
  7732                           	opt stack 0
  7733  0022E6                     _DisplayBuzMenu:
  7734                           	opt stack 19
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;incstack = 0
  7738                           ;StateBuzzer.c: 171: do { LCDGoto(0,0); LCDPutStr("     Buzzer"); }while (0);;
  7739  0022E6  0E00               	movlw	0
  7740  0022E8  6E3F               	movwf	LCDGoto@ln,c
  7741  0022EA  0E00               	movlw	0
  7742  0022EC  EC4E  F00F         	call	_LCDGoto
  7743  0022F0  0EFE               	movlw	high STR_10
  7744  0022F2  6E40               	movwf	LCDPutStr@str+1,c
  7745  0022F4  0EF1               	movlw	low STR_10
  7746  0022F6  6E3F               	movwf	LCDPutStr@str,c
  7747  0022F8  EC33  F00E         	call	_LCDPutStr	;wreg free
  7748                           
  7749                           ;StateBuzzer.c: 174: do { LCDGoto(0,1); LCDPutStr("RA4=Next RB0=Now"); } while (0);;
  7750  0022FC  0E01               	movlw	1
  7751  0022FE  6E3F               	movwf	LCDGoto@ln,c
  7752  002300  0E00               	movlw	0
  7753  002302  EC4E  F00F         	call	_LCDGoto
  7754  002306  0EFE               	movlw	high STR_4
  7755  002308  6E40               	movwf	LCDPutStr@str+1,c
  7756  00230A  0E6E               	movlw	low STR_4
  7757  00230C  6E3F               	movwf	LCDPutStr@str,c
  7758  00230E  EC33  F00E         	call	_LCDPutStr	;wreg free
  7759  002312  0012               	return	
  7760  002314                     __end_of_DisplayBuzMenu:
  7761                           	opt stack 0
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           intcon	equ	0xFF2
  7769                           postinc0	equ	0xFEE
  7770                           wreg	equ	0xFE8
  7771                           indf2	equ	0xFDF
  7772                           postinc2	equ	0xFDE
  7773                           postdec2	equ	0xFDD
  7774                           plusw2	equ	0xFDB
  7775                           fsr2h	equ	0xFDA
  7776                           fsr2l	equ	0xFD9
  7777                           status	equ	0xFD8
  7778                           
  7779 ;; *************** function _LCDPutStr *****************
  7780 ;; Defined at:
  7781 ;;		line 135 in file "lcd.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  str             2   30[COMRAM] PTR const unsigned char 
  7784 ;;		 -> STR_108(17), STR_107(17), STR_106(7), STR_105(7), 
  7785 ;;		 -> STR_104(8), STR_103(17), STR_102(14), STR_100(17), 
  7786 ;;		 -> STR_99(7), STR_98(17), STR_97(11), STR_96(12), 
  7787 ;;		 -> STR_95(4), STR_94(9), STR_93(12), STR_92(4), 
  7788 ;;		 -> STR_91(9), STR_90(16), STR_89(9), STR_50(17), 
  7789 ;;		 -> STR_49(4), STR_48(4), STR_47(4), STR_46(4), 
  7790 ;;		 -> STR_45(4), STR_44(4), STR_43(4), STR_42(4), 
  7791 ;;		 -> STR_41(4), STR_40(4), STR_39(4), STR_38(4), 
  7792 ;;		 -> STR_37(4), STR_36(4), STR_35(4), STR_34(4), 
  7793 ;;		 -> STR_33(4), STR_32(4), STR_31(4), STR_30(4), 
  7794 ;;		 -> STR_29(4), STR_28(4), STR_27(4), STR_26(4), 
  7795 ;;		 -> STR_25(4), STR_24(3), STR_23(4), STR_22(4), 
  7796 ;;		 -> STR_21(4), STR_20(4), STR_19(4), STR_18(4), 
  7797 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(4), 
  7798 ;;		 -> STR_13(6), STR_12(5), STR_11(17), STR_10(12), 
  7799 ;;		 -> STR_7(12), STR_6(6), STR_5(9), STR_4(17), 
  7800 ;;		 -> STR_3(13), STR_2(15), STR_1(13), 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  i               1   16[BANK0 ] unsigned char 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;		None               void
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7815 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;Total ram usage:        5 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    9
  7819 ;; This function calls:
  7820 ;;		_LCDPutChar
  7821 ;; This function is called by:
  7822 ;;		_DisplaySplashText
  7823 ;;		_DisplayVoltMenu
  7824 ;;		_DisplayVoltage
  7825 ;;		_DisplayBuzMenu
  7826 ;;		_DisplayBuzzerData
  7827 ;;		_StateClockSet
  7828 ;;		_DisplayClockMenu
  7829 ;;		_DisplayTime
  7830 ;;		_DisplayTempMenu
  7831 ;;		_DisplayTemperature
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           	psect	text39
  7836  001C66                     __ptext39:
  7837                           	opt stack 0
  7838  001C66                     _LCDPutStr:
  7839                           	opt stack 19
  7840                           
  7841                           ;lcd.c: 137: uint8_t i=0;
  7842                           
  7843                           ;incstack = 0
  7844  001C66  0E00               	movlw	0
  7845  001C68  0100               	movlb	0	; () banked
  7846  001C6A  6FCB               	movwf	LCDPutStr@i& (0+255),b
  7847                           
  7848                           ;lcd.c: 140: while (str[i])
  7849  001C6C  D017               	goto	l4576
  7850  001C6E                     l4572:
  7851                           
  7852                           ; BSR set to: 0
  7853                           ;lcd.c: 141: {
  7854                           ;lcd.c: 143: LCDPutChar(str[i++]);
  7855  001C6E  0100               	movlb	0	; () banked
  7856  001C70  51CB               	movf	LCDPutStr@i& (0+255),w,b
  7857  001C72  0D01               	mullw	1
  7858  001C74  C03F  F0C9         	movff	LCDPutStr@str,??_LCDPutStr
  7859  001C78  C040  F0CA         	movff	LCDPutStr@str+1,??_LCDPutStr+1
  7860  001C7C  50F3               	movf	prodl,w,c
  7861  001C7E  0100               	movlb	0	; () banked
  7862  001C80  27C9               	addwf	??_LCDPutStr& (0+255),f,b
  7863  001C82  50F4               	movf	prodh,w,c
  7864  001C84  0100               	movlb	0	; () banked
  7865  001C86  23CA               	addwfc	(??_LCDPutStr+1)& (0+255),f,b
  7866  001C88  C0C9  FFF6         	movff	??_LCDPutStr,tblptrl
  7867  001C8C  C0CA  FFF7         	movff	??_LCDPutStr+1,tblptrh
  7868  001C90                     	if	0	;tblptru may be non-zero
  7869  001C90                     	endif
  7870  001C90                     	if	0	;tblptru may be non-zero
  7871  001C90                     	endif
  7872  001C90  0008               	tblrd		*
  7873  001C92  50F5               	movf	tablat,w,c
  7874  001C94  EC8A  F011         	call	_LCDPutChar
  7875  001C98  0100               	movlb	0	; () banked
  7876  001C9A  2BCB               	incf	LCDPutStr@i& (0+255),f,b
  7877  001C9C                     l4576:
  7878                           
  7879                           ; BSR set to: 0
  7880  001C9C  0100               	movlb	0	; () banked
  7881  001C9E  51CB               	movf	LCDPutStr@i& (0+255),w,b
  7882  001CA0  0D01               	mullw	1
  7883  001CA2  C03F  F0C9         	movff	LCDPutStr@str,??_LCDPutStr
  7884  001CA6  C040  F0CA         	movff	LCDPutStr@str+1,??_LCDPutStr+1
  7885  001CAA  50F3               	movf	prodl,w,c
  7886  001CAC  0100               	movlb	0	; () banked
  7887  001CAE  27C9               	addwf	??_LCDPutStr& (0+255),f,b
  7888  001CB0  50F4               	movf	prodh,w,c
  7889  001CB2  0100               	movlb	0	; () banked
  7890  001CB4  23CA               	addwfc	(??_LCDPutStr+1)& (0+255),f,b
  7891  001CB6  C0C9  FFF6         	movff	??_LCDPutStr,tblptrl
  7892  001CBA  C0CA  FFF7         	movff	??_LCDPutStr+1,tblptrh
  7893  001CBE                     	if	0	;tblptru may be non-zero
  7894  001CBE                     	endif
  7895  001CBE                     	if	0	;tblptru may be non-zero
  7896  001CBE                     	endif
  7897  001CBE  0008               	tblrd		*
  7898  001CC0  50F5               	movf	tablat,w,c
  7899  001CC2  0900               	iorlw	0
  7900  001CC4  B4D8               	btfsc	status,2,c
  7901                           
  7902                           ; BSR set to: 0
  7903                           
  7904                           ; BSR set to: 0
  7905  001CC6  0012               	return	
  7906  001CC8  D7D2               	goto	l4572
  7907  001CCA                     __end_of_LCDPutStr:
  7908                           	opt stack 0
  7909                           tblptru	equ	0xFF8
  7910                           tblptrh	equ	0xFF7
  7911                           tblptrl	equ	0xFF6
  7912                           tablat	equ	0xFF5
  7913                           prodh	equ	0xFF4
  7914                           prodl	equ	0xFF3
  7915                           intcon	equ	0xFF2
  7916                           postinc0	equ	0xFEE
  7917                           wreg	equ	0xFE8
  7918                           indf2	equ	0xFDF
  7919                           postinc2	equ	0xFDE
  7920                           postdec2	equ	0xFDD
  7921                           plusw2	equ	0xFDB
  7922                           fsr2h	equ	0xFDA
  7923                           fsr2l	equ	0xFD9
  7924                           status	equ	0xFD8
  7925                           
  7926 ;; *************** function _LCDPutChar *****************
  7927 ;; Defined at:
  7928 ;;		line 103 in file "lcd.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;  ch              1    wreg     unsigned char 
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;  ch              1   29[COMRAM] unsigned char 
  7933 ;; Return value:  Size  Location     Type
  7934 ;;		None               void
  7935 ;; Registers used:
  7936 ;;		wreg, status,2, status,0, cstack
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;Total ram usage:        2 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:    8
  7949 ;; This function calls:
  7950 ;;		_LCDWriteNibble
  7951 ;; This function is called by:
  7952 ;;		_DisplayVoltage
  7953 ;;		_LCDPutStr
  7954 ;;		_DisplayBuzzerData
  7955 ;;		_StateClockSet
  7956 ;;		_DisplayTime
  7957 ;;		_DisplayTemperature
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           	psect	text40
  7962  002314                     __ptext40:
  7963                           	opt stack 0
  7964  002314                     _LCDPutChar:
  7965                           	opt stack 19
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;incstack = 0
  7969                           ;LCDPutChar@ch stored from wreg
  7970  002314  6E3E               	movwf	LCDPutChar@ch,c
  7971                           
  7972                           ;lcd.c: 105: _delay((unsigned long)((5)*(4000000/4000.0)));
  7973  002316  0E07               	movlw	7
  7974  002318  6E3D               	movwf	??_LCDPutChar& (0+255),c
  7975  00231A  0E7D               	movlw	125
  7976  00231C                     u4147:
  7977  00231C  2EE8               	decfsz	wreg,f,c
  7978  00231E  D7FE               	goto	u4147
  7979  002320  2E3D               	decfsz	??_LCDPutChar& (0+255),f,c
  7980  002322  D7FC               	goto	u4147
  7981  002324  F000               	nop	
  7982                           
  7983                           ;lcd.c: 108: LCDWriteNibble(ch,1);
  7984  002326  0E01               	movlw	1
  7985  002328  6E3B               	movwf	LCDWriteNibble@rs,c
  7986  00232A  503E               	movf	LCDPutChar@ch,w,c
  7987  00232C  ECA1  F011         	call	_LCDWriteNibble
  7988                           
  7989                           ;lcd.c: 111: ch = (ch << 4);
  7990  002330  383E               	swapf	LCDPutChar@ch,w,c
  7991  002332  0BF0               	andlw	240
  7992  002334  6E3E               	movwf	LCDPutChar@ch,c
  7993                           
  7994                           ;lcd.c: 114: LCDWriteNibble(ch,1);
  7995  002336  0E01               	movlw	1
  7996  002338  6E3B               	movwf	LCDWriteNibble@rs,c
  7997  00233A  503E               	movf	LCDPutChar@ch,w,c
  7998  00233C  ECA1  F011         	call	_LCDWriteNibble
  7999  002340  0012               	return	
  8000  002342                     __end_of_LCDPutChar:
  8001                           	opt stack 0
  8002                           tblptru	equ	0xFF8
  8003                           tblptrh	equ	0xFF7
  8004                           tblptrl	equ	0xFF6
  8005                           tablat	equ	0xFF5
  8006                           prodh	equ	0xFF4
  8007                           prodl	equ	0xFF3
  8008                           intcon	equ	0xFF2
  8009                           postinc0	equ	0xFEE
  8010                           wreg	equ	0xFE8
  8011                           indf2	equ	0xFDF
  8012                           postinc2	equ	0xFDE
  8013                           postdec2	equ	0xFDD
  8014                           plusw2	equ	0xFDB
  8015                           fsr2h	equ	0xFDA
  8016                           fsr2l	equ	0xFD9
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function _LCDGoto *****************
  8020 ;; Defined at:
  8021 ;;		line 148 in file "lcd.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  pos             1    wreg     unsigned char 
  8024 ;;  ln              1   30[COMRAM] unsigned char 
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;  pos             1   18[BANK0 ] unsigned char 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;		None               void
  8029 ;; Registers used:
  8030 ;;		wreg, status,2, status,0, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8036 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;Total ram usage:        6 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    9
  8043 ;; This function calls:
  8044 ;;		_LCDPutCmd
  8045 ;; This function is called by:
  8046 ;;		_DisplaySplashText
  8047 ;;		_DisplayVoltMenu
  8048 ;;		_DisplayVoltage
  8049 ;;		_DisplayBuzMenu
  8050 ;;		_DisplayBuzzerData
  8051 ;;		_StateClockSet
  8052 ;;		_DisplayClockMenu
  8053 ;;		_DisplayTime
  8054 ;;		_DisplayTempMenu
  8055 ;;		_DisplayTemperature
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text41
  8060  001E9C                     __ptext41:
  8061                           	opt stack 0
  8062  001E9C                     _LCDGoto:
  8063                           	opt stack 19
  8064                           
  8065                           ;incstack = 0
  8066                           ;LCDGoto@pos stored from wreg
  8067  001E9C  0100               	movlb	0	; () banked
  8068  001E9E  6FCD               	movwf	LCDGoto@pos& (0+255),b
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;lcd.c: 151: if ((ln > (2-1)) || (pos > (16-1)))
  8072  001EA0  0E02               	movlw	2
  8073  001EA2  5C3F               	subwf	LCDGoto@ln,w,c
  8074  001EA4  B0D8               	btfsc	status,0,c
  8075  001EA6  0012               	return	
  8076                           
  8077                           ; BSR set to: 0
  8078  001EA8  0E0F               	movlw	15
  8079  001EAA  0100               	movlb	0	; () banked
  8080  001EAC  65CD               	cpfsgt	LCDGoto@pos& (0+255),b
  8081  001EAE  D001               	goto	l4582
  8082  001EB0  0012               	return	
  8083  001EB2                     l4582:
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;lcd.c: 155: }
  8087                           ;lcd.c: 158: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  8088  001EB2  043F               	decf	LCDGoto@ln,w,c
  8089  001EB4  B4D8               	btfsc	status,2,c
  8090  001EB6  D002               	goto	l4586
  8091                           
  8092                           ; BSR set to: 0
  8093  001EB8  0E80               	movlw	128
  8094  001EBA  D001               	goto	L6
  8095  001EBC                     l4586:
  8096                           
  8097                           ; BSR set to: 0
  8098  001EBC  0EC0               	movlw	192
  8099  001EBE                     L6:
  8100  001EBE  0100               	movlb	0	; () banked
  8101  001EC0  C0CD  F0C9         	movff	LCDGoto@pos,??_LCDGoto
  8102  001EC4  0100               	movlb	0	; () banked
  8103  001EC6  6BCA               	clrf	(??_LCDGoto+1)& (0+255),b
  8104  001EC8  0100               	movlb	0	; () banked
  8105  001ECA  11C9               	iorwf	??_LCDGoto& (0+255),w,b
  8106  001ECC  0100               	movlb	0	; () banked
  8107  001ECE  6FCB               	movwf	_LCDGoto$2245& (0+255),b
  8108  001ED0  0100               	movlb	0	; () banked
  8109  001ED2  51CA               	movf	(??_LCDGoto+1)& (0+255),w,b
  8110  001ED4  0100               	movlb	0	; () banked
  8111  001ED6  6FCC               	movwf	(_LCDGoto$2245+1)& (0+255),b
  8112                           
  8113                           ; BSR set to: 0
  8114                           
  8115                           ; BSR set to: 0
  8116  001ED8  0100               	movlb	0	; () banked
  8117  001EDA  51CB               	movf	_LCDGoto$2245& (0+255),w,b
  8118  001EDC  ECB0  F010         	call	_LCDPutCmd
  8119                           
  8120                           ;lcd.c: 161: _delay((unsigned long)((5)*(4000000/4000.0)));
  8121  001EE0  0E07               	movlw	7
  8122  001EE2  0100               	movlb	0	; () banked
  8123  001EE4  6FC9               	movwf	??_LCDGoto& (0+255),b
  8124  001EE6  0E7D               	movlw	125
  8125  001EE8                     u4157:
  8126  001EE8  2EE8               	decfsz	wreg,f,c
  8127  001EEA  D7FE               	goto	u4157
  8128  001EEC  2FC9               	decfsz	??_LCDGoto& (0+255),f,b
  8129  001EEE  D7FC               	goto	u4157
  8130  001EF0  F000               	nop	
  8131  001EF2  0012               	return	
  8132  001EF4                     __end_of_LCDGoto:
  8133                           	opt stack 0
  8134                           tblptru	equ	0xFF8
  8135                           tblptrh	equ	0xFF7
  8136                           tblptrl	equ	0xFF6
  8137                           tablat	equ	0xFF5
  8138                           prodh	equ	0xFF4
  8139                           prodl	equ	0xFF3
  8140                           intcon	equ	0xFF2
  8141                           postinc0	equ	0xFEE
  8142                           wreg	equ	0xFE8
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           postdec2	equ	0xFDD
  8146                           plusw2	equ	0xFDB
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function _SYSTEM_Initialize *****************
  8152 ;; Defined at:
  8153 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;		None               void
  8160 ;; Registers used:
  8161 ;;		wreg, status,2, status,0, cstack
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    9
  8174 ;; This function calls:
  8175 ;;		_ADC_Initialize
  8176 ;;		_EPWM1_Initialize
  8177 ;;		_EUSART1_Initialize
  8178 ;;		_I2C1_Initialize
  8179 ;;		_INTERRUPT_Initialize
  8180 ;;		_OSCILLATOR_Initialize
  8181 ;;		_PIN_MANAGER_Initialize
  8182 ;;		_TMR0_Initialize
  8183 ;;		_TMR1_Initialize
  8184 ;;		_TMR4_Initialize
  8185 ;; This function is called by:
  8186 ;;		_main
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           	psect	text42
  8191  0023C4                     __ptext42:
  8192                           	opt stack 0
  8193  0023C4                     _SYSTEM_Initialize:
  8194                           	opt stack 21
  8195                           
  8196                           ;mcc.c: 114: OSCILLATOR_Initialize();
  8197                           
  8198                           ;incstack = 0
  8199  0023C4  ECD5  F012         	call	_OSCILLATOR_Initialize	;wreg free
  8200                           
  8201                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8202  0023C8  ECCC  F00F         	call	_PIN_MANAGER_Initialize	;wreg free
  8203                           
  8204                           ;mcc.c: 116: INTERRUPT_Initialize();
  8205  0023CC  ECCD  F012         	call	_INTERRUPT_Initialize	;wreg free
  8206                           
  8207                           ;mcc.c: 117: ADC_Initialize();
  8208  0023D0  EC9E  F012         	call	_ADC_Initialize	;wreg free
  8209                           
  8210                           ;mcc.c: 118: EPWM1_Initialize();
  8211  0023D4  EC1D  F012         	call	_EPWM1_Initialize	;wreg free
  8212                           
  8213                           ;mcc.c: 119: TMR4_Initialize();
  8214  0023D8  EC93  F012         	call	_TMR4_Initialize	;wreg free
  8215                           
  8216                           ;mcc.c: 120: TMR1_Initialize();
  8217  0023DC  EC50  F012         	call	_TMR1_Initialize	;wreg free
  8218                           
  8219                           ;mcc.c: 121: I2C1_Initialize();
  8220  0023E0  EC16  F010         	call	_I2C1_Initialize	;wreg free
  8221                           
  8222                           ;mcc.c: 122: EUSART1_Initialize();
  8223  0023E4  EC76  F010         	call	_EUSART1_Initialize	;wreg free
  8224                           
  8225                           ;mcc.c: 123: TMR0_Initialize();
  8226  0023E8  EC6D  F012         	call	_TMR0_Initialize	;wreg free
  8227  0023EC  0012               	return	
  8228  0023EE                     __end_of_SYSTEM_Initialize:
  8229                           	opt stack 0
  8230                           tblptru	equ	0xFF8
  8231                           tblptrh	equ	0xFF7
  8232                           tblptrl	equ	0xFF6
  8233                           tablat	equ	0xFF5
  8234                           prodh	equ	0xFF4
  8235                           prodl	equ	0xFF3
  8236                           intcon	equ	0xFF2
  8237                           postinc0	equ	0xFEE
  8238                           wreg	equ	0xFE8
  8239                           indf2	equ	0xFDF
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           plusw2	equ	0xFDB
  8243                           fsr2h	equ	0xFDA
  8244                           fsr2l	equ	0xFD9
  8245                           status	equ	0xFD8
  8246                           
  8247 ;; *************** function _TMR4_Initialize *****************
  8248 ;; Defined at:
  8249 ;;		line 58 in file "mcc_generated_files/tmr4.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;		None
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;		None
  8254 ;; Return value:  Size  Location     Type
  8255 ;;		None               void
  8256 ;; Registers used:
  8257 ;;		wreg, status,2
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;Total ram usage:        0 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    7
  8270 ;; This function calls:
  8271 ;;		Nothing
  8272 ;; This function is called by:
  8273 ;;		_SYSTEM_Initialize
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           	psect	text43
  8278  002526                     __ptext43:
  8279                           	opt stack 0
  8280  002526                     _TMR4_Initialize:
  8281                           	opt stack 22
  8282                           
  8283                           ;tmr4.c: 63: T4CON = 0x02;
  8284                           
  8285                           ;incstack = 0
  8286  002526  0E02               	movlw	2
  8287  002528  010F               	movlb	15	; () banked
  8288  00252A  6F51               	movwf	81,b	;volatile
  8289                           
  8290                           ;tmr4.c: 66: PR4 = 0x05;
  8291  00252C  0E05               	movlw	5
  8292  00252E  010F               	movlb	15	; () banked
  8293  002530  6F52               	movwf	82,b	;volatile
  8294                           
  8295                           ;tmr4.c: 69: TMR4 = 0x00;
  8296  002532  0E00               	movlw	0
  8297  002534  010F               	movlb	15	; () banked
  8298  002536  6F53               	movwf	83,b	;volatile
  8299                           
  8300                           ; BSR set to: 15
  8301                           ;tmr4.c: 72: PIR5bits.TMR4IF = 0;
  8302  002538  907E               	bcf	3966,0,c	;volatile
  8303                           
  8304                           ; BSR set to: 15
  8305  00253A  0012               	return	
  8306  00253C                     __end_of_TMR4_Initialize:
  8307                           	opt stack 0
  8308                           tblptru	equ	0xFF8
  8309                           tblptrh	equ	0xFF7
  8310                           tblptrl	equ	0xFF6
  8311                           tablat	equ	0xFF5
  8312                           prodh	equ	0xFF4
  8313                           prodl	equ	0xFF3
  8314                           intcon	equ	0xFF2
  8315                           postinc0	equ	0xFEE
  8316                           wreg	equ	0xFE8
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           plusw2	equ	0xFDB
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function _TMR1_Initialize *****************
  8326 ;; Defined at:
  8327 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;		None               void
  8334 ;; Registers used:
  8335 ;;		wreg, status,2
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;Total ram usage:        0 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    7
  8348 ;; This function calls:
  8349 ;;		Nothing
  8350 ;; This function is called by:
  8351 ;;		_SYSTEM_Initialize
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	text44
  8356  0024A0                     __ptext44:
  8357                           	opt stack 0
  8358  0024A0                     _TMR1_Initialize:
  8359                           	opt stack 22
  8360                           
  8361                           ;tmr1.c: 68: T1CON = 0x88;
  8362                           
  8363                           ; BSR set to: 15
  8364                           ;incstack = 0
  8365  0024A0  0E88               	movlw	136
  8366  0024A2  6ECD               	movwf	4045,c	;volatile
  8367                           
  8368                           ;tmr1.c: 71: T1GCON = 0x00;
  8369  0024A4  0E00               	movlw	0
  8370  0024A6  6ECC               	movwf	4044,c	;volatile
  8371                           
  8372                           ;tmr1.c: 74: TMR1H = 0x80;
  8373  0024A8  0E80               	movlw	128
  8374  0024AA  6ECF               	movwf	4047,c	;volatile
  8375                           
  8376                           ;tmr1.c: 77: TMR1L = 0x00;
  8377  0024AC  0E00               	movlw	0
  8378  0024AE  6ECE               	movwf	4046,c	;volatile
  8379                           
  8380                           ;tmr1.c: 80: timer1ReloadVal=TMR1;
  8381  0024B0  CFCE F041          	movff	4046,_timer1ReloadVal	;volatile
  8382  0024B4  CFCF F042          	movff	4047,_timer1ReloadVal+1	;volatile
  8383                           
  8384                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  8385  0024B8  909E               	bcf	3998,0,c	;volatile
  8386                           
  8387                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
  8388  0024BA  809D               	bsf	3997,0,c	;volatile
  8389  0024BC  0012               	return	
  8390  0024BE                     __end_of_TMR1_Initialize:
  8391                           	opt stack 0
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           postinc0	equ	0xFEE
  8400                           wreg	equ	0xFE8
  8401                           indf2	equ	0xFDF
  8402                           postinc2	equ	0xFDE
  8403                           postdec2	equ	0xFDD
  8404                           plusw2	equ	0xFDB
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8
  8408                           
  8409 ;; *************** function _TMR0_Initialize *****************
  8410 ;; Defined at:
  8411 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;		None
  8416 ;; Return value:  Size  Location     Type
  8417 ;;		None               void
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;Total ram usage:        0 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    8
  8432 ;; This function calls:
  8433 ;;		_TMR0_StartTimer
  8434 ;; This function is called by:
  8435 ;;		_SYSTEM_Initialize
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           	psect	text45
  8440  0024DA                     __ptext45:
  8441                           	opt stack 0
  8442  0024DA                     _TMR0_Initialize:
  8443                           	opt stack 21
  8444                           
  8445                           ;tmr0.c: 71: T0CON = 0xD7;
  8446                           
  8447                           ;incstack = 0
  8448  0024DA  0ED7               	movlw	215
  8449  0024DC  6ED5               	movwf	4053,c	;volatile
  8450                           
  8451                           ;tmr0.c: 74: TMR0H = 0x00;
  8452  0024DE  0E00               	movlw	0
  8453  0024E0  6ED7               	movwf	4055,c	;volatile
  8454                           
  8455                           ;tmr0.c: 77: TMR0L = 0x00;
  8456  0024E2  0E00               	movlw	0
  8457  0024E4  6ED6               	movwf	4054,c	;volatile
  8458                           
  8459                           ;tmr0.c: 80: timer0ReloadVal8bit = 0;
  8460  0024E6  0E00               	movlw	0
  8461  0024E8  6E1D               	movwf	_timer0ReloadVal8bit,c	;volatile
  8462                           
  8463                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
  8464  0024EA  94F2               	bcf	intcon,2,c	;volatile
  8465                           
  8466                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
  8467  0024EC  8AF2               	bsf	intcon,5,c	;volatile
  8468                           
  8469                           ;tmr0.c: 89: TMR0_StartTimer();
  8470  0024EE  ECF5  F012         	call	_TMR0_StartTimer	;wreg free
  8471  0024F2  0012               	return	
  8472  0024F4                     __end_of_TMR0_Initialize:
  8473                           	opt stack 0
  8474                           tblptru	equ	0xFF8
  8475                           tblptrh	equ	0xFF7
  8476                           tblptrl	equ	0xFF6
  8477                           tablat	equ	0xFF5
  8478                           prodh	equ	0xFF4
  8479                           prodl	equ	0xFF3
  8480                           intcon	equ	0xFF2
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           indf2	equ	0xFDF
  8484                           postinc2	equ	0xFDE
  8485                           postdec2	equ	0xFDD
  8486                           plusw2	equ	0xFDB
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _TMR0_StartTimer *****************
  8492 ;; Defined at:
  8493 ;;		line 92 in file "mcc_generated_files/tmr0.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;		None
  8498 ;; Return value:  Size  Location     Type
  8499 ;;		None               void
  8500 ;; Registers used:
  8501 ;;		None
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;Total ram usage:        0 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    7
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_TMR0_Initialize
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text46
  8522  0025EA                     __ptext46:
  8523                           	opt stack 0
  8524  0025EA                     _TMR0_StartTimer:
  8525                           	opt stack 21
  8526                           
  8527                           ;tmr0.c: 95: T0CONbits.TMR0ON = 1;
  8528                           
  8529                           ;incstack = 0
  8530  0025EA  8ED5               	bsf	4053,7,c	;volatile
  8531  0025EC  0012               	return	
  8532  0025EE                     __end_of_TMR0_StartTimer:
  8533                           	opt stack 0
  8534                           tblptru	equ	0xFF8
  8535                           tblptrh	equ	0xFF7
  8536                           tblptrl	equ	0xFF6
  8537                           tablat	equ	0xFF5
  8538                           prodh	equ	0xFF4
  8539                           prodl	equ	0xFF3
  8540                           intcon	equ	0xFF2
  8541                           postinc0	equ	0xFEE
  8542                           wreg	equ	0xFE8
  8543                           indf2	equ	0xFDF
  8544                           postinc2	equ	0xFDE
  8545                           postdec2	equ	0xFDD
  8546                           plusw2	equ	0xFDB
  8547                           fsr2h	equ	0xFDA
  8548                           fsr2l	equ	0xFD9
  8549                           status	equ	0xFD8
  8550                           
  8551 ;; *************** function _PIN_MANAGER_Initialize *****************
  8552 ;; Defined at:
  8553 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  8554 ;; Parameters:    Size  Location     Type
  8555 ;;		None
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;		None
  8558 ;; Return value:  Size  Location     Type
  8559 ;;		None               void
  8560 ;; Registers used:
  8561 ;;		wreg, status,2
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;Total ram usage:        0 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    7
  8574 ;; This function calls:
  8575 ;;		Nothing
  8576 ;; This function is called by:
  8577 ;;		_SYSTEM_Initialize
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text47
  8582  001F98                     __ptext47:
  8583                           	opt stack 0
  8584  001F98                     _PIN_MANAGER_Initialize:
  8585                           	opt stack 22
  8586                           
  8587                           ;pin_manager.c: 52: LATA = 0x00;
  8588                           
  8589                           ;incstack = 0
  8590  001F98  0E00               	movlw	0
  8591  001F9A  6E89               	movwf	3977,c	;volatile
  8592                           
  8593                           ;pin_manager.c: 53: TRISA = 0xFF;
  8594  001F9C  6892               	setf	3986,c	;volatile
  8595                           
  8596                           ;pin_manager.c: 54: ANSELA = 0x01;
  8597  001F9E  0E01               	movlw	1
  8598  001FA0  010F               	movlb	15	; () banked
  8599  001FA2  6F38               	movwf	56,b	;volatile
  8600                           
  8601                           ;pin_manager.c: 56: LATB = 0x00;
  8602  001FA4  0E00               	movlw	0
  8603  001FA6  6E8A               	movwf	3978,c	;volatile
  8604                           
  8605                           ;pin_manager.c: 57: TRISB = 0x01;
  8606  001FA8  0E01               	movlw	1
  8607  001FAA  6E93               	movwf	3987,c	;volatile
  8608                           
  8609                           ;pin_manager.c: 58: ANSELB = 0x00;
  8610  001FAC  0E00               	movlw	0
  8611  001FAE  010F               	movlb	15	; () banked
  8612  001FB0  6F39               	movwf	57,b	;volatile
  8613                           
  8614                           ;pin_manager.c: 59: WPUB = 0x00;
  8615  001FB2  0E00               	movlw	0
  8616  001FB4  6E61               	movwf	3937,c	;volatile
  8617                           
  8618                           ;pin_manager.c: 61: LATC = 0x18;
  8619  001FB6  0E18               	movlw	24
  8620  001FB8  6E8B               	movwf	3979,c	;volatile
  8621                           
  8622                           ;pin_manager.c: 62: TRISC = 0xFB;
  8623  001FBA  0EFB               	movlw	251
  8624  001FBC  6E94               	movwf	3988,c	;volatile
  8625                           
  8626                           ;pin_manager.c: 63: ANSELC = 0x00;
  8627  001FBE  0E00               	movlw	0
  8628  001FC0  010F               	movlb	15	; () banked
  8629  001FC2  6F3A               	movwf	58,b	;volatile
  8630                           
  8631                           ;pin_manager.c: 65: LATD = 0x00;
  8632  001FC4  0E00               	movlw	0
  8633  001FC6  6E8C               	movwf	3980,c	;volatile
  8634                           
  8635                           ;pin_manager.c: 66: TRISD = 0x00;
  8636  001FC8  0E00               	movlw	0
  8637  001FCA  6E95               	movwf	3989,c	;volatile
  8638                           
  8639                           ;pin_manager.c: 67: ANSELD = 0x00;
  8640  001FCC  0E00               	movlw	0
  8641  001FCE  010F               	movlb	15	; () banked
  8642  001FD0  6F3B               	movwf	59,b	;volatile
  8643                           
  8644                           ;pin_manager.c: 69: LATE = 0x00;
  8645  001FD2  0E00               	movlw	0
  8646  001FD4  6E8D               	movwf	3981,c	;volatile
  8647                           
  8648                           ;pin_manager.c: 70: TRISE = 0x07;
  8649  001FD6  0E07               	movlw	7
  8650  001FD8  6E96               	movwf	3990,c	;volatile
  8651                           
  8652                           ;pin_manager.c: 71: ANSELE = 0x00;
  8653  001FDA  0E00               	movlw	0
  8654  001FDC  010F               	movlb	15	; () banked
  8655  001FDE  6F3C               	movwf	60,b	;volatile
  8656                           
  8657                           ; BSR set to: 15
  8658                           ;pin_manager.c: 73: INTCON2bits.nRBPU = 0x01;
  8659  001FE0  8EF1               	bsf	intcon2,7,c	;volatile
  8660                           
  8661                           ; BSR set to: 15
  8662  001FE2  0012               	return	
  8663  001FE4                     __end_of_PIN_MANAGER_Initialize:
  8664                           	opt stack 0
  8665                           tblptru	equ	0xFF8
  8666                           tblptrh	equ	0xFF7
  8667                           tblptrl	equ	0xFF6
  8668                           tablat	equ	0xFF5
  8669                           prodh	equ	0xFF4
  8670                           prodl	equ	0xFF3
  8671                           intcon	equ	0xFF2
  8672                           intcon2	equ	0xFF1
  8673                           postinc0	equ	0xFEE
  8674                           wreg	equ	0xFE8
  8675                           indf2	equ	0xFDF
  8676                           postinc2	equ	0xFDE
  8677                           postdec2	equ	0xFDD
  8678                           plusw2	equ	0xFDB
  8679                           fsr2h	equ	0xFDA
  8680                           fsr2l	equ	0xFD9
  8681                           status	equ	0xFD8
  8682                           
  8683 ;; *************** function _OSCILLATOR_Initialize *****************
  8684 ;; Defined at:
  8685 ;;		line 126 in file "mcc_generated_files/mcc.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;		None
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;		None               void
  8692 ;; Registers used:
  8693 ;;		wreg, status,2
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;Total ram usage:        0 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:    7
  8706 ;; This function calls:
  8707 ;;		Nothing
  8708 ;; This function is called by:
  8709 ;;		_SYSTEM_Initialize
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text48
  8714  0025AA                     __ptext48:
  8715                           	opt stack 0
  8716  0025AA                     _OSCILLATOR_Initialize:
  8717                           	opt stack 22
  8718                           
  8719                           ;mcc.c: 129: OSCCON = 0x52;
  8720                           
  8721                           ; BSR set to: 15
  8722                           ;incstack = 0
  8723  0025AA  0E52               	movlw	82
  8724  0025AC  6ED3               	movwf	4051,c	;volatile
  8725                           
  8726                           ;mcc.c: 131: OSCCON2 = 0x04;
  8727  0025AE  0E04               	movlw	4
  8728  0025B0  6ED2               	movwf	4050,c	;volatile
  8729                           
  8730                           ;mcc.c: 133: OSCTUNE = 0x00;
  8731  0025B2  0E00               	movlw	0
  8732  0025B4  6E9B               	movwf	3995,c	;volatile
  8733  0025B6  0012               	return	
  8734  0025B8                     __end_of_OSCILLATOR_Initialize:
  8735                           	opt stack 0
  8736                           tblptru	equ	0xFF8
  8737                           tblptrh	equ	0xFF7
  8738                           tblptrl	equ	0xFF6
  8739                           tablat	equ	0xFF5
  8740                           prodh	equ	0xFF4
  8741                           prodl	equ	0xFF3
  8742                           intcon	equ	0xFF2
  8743                           intcon2	equ	0xFF1
  8744                           postinc0	equ	0xFEE
  8745                           wreg	equ	0xFE8
  8746                           indf2	equ	0xFDF
  8747                           postinc2	equ	0xFDE
  8748                           postdec2	equ	0xFDD
  8749                           plusw2	equ	0xFDB
  8750                           fsr2h	equ	0xFDA
  8751                           fsr2l	equ	0xFD9
  8752                           status	equ	0xFD8
  8753                           
  8754 ;; *************** function _INTERRUPT_Initialize *****************
  8755 ;; Defined at:
  8756 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;		None
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;		None
  8761 ;; Return value:  Size  Location     Type
  8762 ;;		None               void
  8763 ;; Registers used:
  8764 ;;		None
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;Total ram usage:        0 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; Hardware stack levels required when called:    7
  8777 ;; This function calls:
  8778 ;;		Nothing
  8779 ;; This function is called by:
  8780 ;;		_SYSTEM_Initialize
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           	psect	text49
  8785  00259A                     __ptext49:
  8786                           	opt stack 0
  8787  00259A                     _INTERRUPT_Initialize:
  8788                           	opt stack 22
  8789                           
  8790                           ;interrupt_manager.c: 55: RCONbits.IPEN = 1;
  8791                           
  8792                           ;incstack = 0
  8793  00259A  8ED0               	bsf	4048,7,c	;volatile
  8794                           
  8795                           ;interrupt_manager.c: 60: IPR1bits.TMR1IP = 1;
  8796  00259C  809F               	bsf	3999,0,c	;volatile
  8797                           
  8798                           ;interrupt_manager.c: 64: IPR1bits.RC1IP = 0;
  8799  00259E  9A9F               	bcf	3999,5,c	;volatile
  8800                           
  8801                           ;interrupt_manager.c: 67: IPR1bits.SSP1IP = 0;
  8802  0025A0  969F               	bcf	3999,3,c	;volatile
  8803                           
  8804                           ;interrupt_manager.c: 70: IPR1bits.TX1IP = 0;
  8805  0025A2  989F               	bcf	3999,4,c	;volatile
  8806                           
  8807                           ;interrupt_manager.c: 73: INTCON2bits.TMR0IP = 0;
  8808  0025A4  94F1               	bcf	intcon2,2,c	;volatile
  8809                           
  8810                           ;interrupt_manager.c: 76: IPR2bits.BCL1IP = 0;
  8811  0025A6  96A2               	bcf	4002,3,c	;volatile
  8812  0025A8  0012               	return	
  8813  0025AA                     __end_of_INTERRUPT_Initialize:
  8814                           	opt stack 0
  8815                           tblptru	equ	0xFF8
  8816                           tblptrh	equ	0xFF7
  8817                           tblptrl	equ	0xFF6
  8818                           tablat	equ	0xFF5
  8819                           prodh	equ	0xFF4
  8820                           prodl	equ	0xFF3
  8821                           intcon	equ	0xFF2
  8822                           intcon2	equ	0xFF1
  8823                           postinc0	equ	0xFEE
  8824                           wreg	equ	0xFE8
  8825                           indf2	equ	0xFDF
  8826                           postinc2	equ	0xFDE
  8827                           postdec2	equ	0xFDD
  8828                           plusw2	equ	0xFDB
  8829                           fsr2h	equ	0xFDA
  8830                           fsr2l	equ	0xFD9
  8831                           status	equ	0xFD8
  8832                           
  8833 ;; *************** function _I2C1_Initialize *****************
  8834 ;; Defined at:
  8835 ;;		line 199 in file "mcc_generated_files/i2c1.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;		None
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;		None
  8840 ;; Return value:  Size  Location     Type
  8841 ;;		None               void
  8842 ;; Registers used:
  8843 ;;		wreg, status,2, status,0
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;Total ram usage:        0 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    7
  8856 ;; This function calls:
  8857 ;;		Nothing
  8858 ;; This function is called by:
  8859 ;;		_SYSTEM_Initialize
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           	psect	text50
  8864  00202C                     __ptext50:
  8865                           	opt stack 0
  8866  00202C                     _I2C1_Initialize:
  8867                           	opt stack 22
  8868                           
  8869                           ;i2c1.c: 201: i2c1_object.pTrHead = i2c1_tr_queue;
  8870                           
  8871                           ;incstack = 0
  8872  00202C  0100               	movlb	0	; () banked
  8873  00202E  0E00               	movlw	high _i2c1_tr_queue
  8874  002030  0100               	movlb	0	; () banked
  8875  002032  6FE0               	movwf	(_i2c1_object+3)& (0+255),b
  8876  002034  0100               	movlb	0	; () banked
  8877  002036  0EB2               	movlw	low _i2c1_tr_queue
  8878  002038  0100               	movlb	0	; () banked
  8879  00203A  6FDF               	movwf	(_i2c1_object+2)& (0+255),b
  8880                           
  8881                           ;i2c1.c: 202: i2c1_object.pTrTail = i2c1_tr_queue;
  8882  00203C  0100               	movlb	0	; () banked
  8883  00203E  0E00               	movlw	high _i2c1_tr_queue
  8884  002040  0100               	movlb	0	; () banked
  8885  002042  6FDE               	movwf	(_i2c1_object+1)& (0+255),b
  8886  002044  0100               	movlb	0	; () banked
  8887  002046  0EB2               	movlw	low _i2c1_tr_queue
  8888  002048  0100               	movlb	0	; () banked
  8889  00204A  6FDD               	movwf	_i2c1_object& (0+255),b
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;i2c1.c: 203: i2c1_object.trStatus.s.empty = 1;
  8893  00204C  0100               	movlb	0	; () banked
  8894  00204E  83E1               	bsf	(_i2c1_object+4)& (0+255),1,b
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;i2c1.c: 204: i2c1_object.trStatus.s.full = 0;
  8898  002050  0100               	movlb	0	; () banked
  8899  002052  91E1               	bcf	(_i2c1_object+4)& (0+255),0,b
  8900                           
  8901                           ; BSR set to: 0
  8902                           ;i2c1.c: 206: i2c1_object.i2cErrors = 0;
  8903  002054  0E00               	movlw	0
  8904  002056  0100               	movlb	0	; () banked
  8905  002058  6FE3               	movwf	(_i2c1_object+6)& (0+255),b
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;i2c1.c: 209: SSP1STAT = 0x00;
  8909  00205A  0E00               	movlw	0
  8910  00205C  6EC7               	movwf	4039,c	;volatile
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;i2c1.c: 211: SSP1CON1 = 0x28;
  8914  00205E  0E28               	movlw	40
  8915  002060  6EC6               	movwf	4038,c	;volatile
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;i2c1.c: 213: SSP1CON3 = 0x00;
  8919  002062  0E00               	movlw	0
  8920  002064  6ECB               	movwf	4043,c	;volatile
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;i2c1.c: 215: SSP1ADD = 0x09;
  8924  002066  0E09               	movlw	9
  8925  002068  6EC8               	movwf	4040,c	;volatile
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;i2c1.c: 219: PIR1bits.SSP1IF = 0;
  8929  00206A  969E               	bcf	3998,3,c	;volatile
  8930                           
  8931                           ; BSR set to: 0
  8932                           ;i2c1.c: 221: PIE1bits.SSP1IE = 1;
  8933  00206C  869D               	bsf	3997,3,c	;volatile
  8934                           
  8935                           ; BSR set to: 0
  8936  00206E  0012               	return	
  8937  002070                     __end_of_I2C1_Initialize:
  8938                           	opt stack 0
  8939                           tblptru	equ	0xFF8
  8940                           tblptrh	equ	0xFF7
  8941                           tblptrl	equ	0xFF6
  8942                           tablat	equ	0xFF5
  8943                           prodh	equ	0xFF4
  8944                           prodl	equ	0xFF3
  8945                           intcon	equ	0xFF2
  8946                           intcon2	equ	0xFF1
  8947                           postinc0	equ	0xFEE
  8948                           wreg	equ	0xFE8
  8949                           indf2	equ	0xFDF
  8950                           postinc2	equ	0xFDE
  8951                           postdec2	equ	0xFDD
  8952                           plusw2	equ	0xFDB
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957 ;; *************** function _EUSART1_Initialize *****************
  8958 ;; Defined at:
  8959 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;		None               void
  8966 ;; Registers used:
  8967 ;;		wreg, status,2
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    7
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_SYSTEM_Initialize
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text51
  8988  0020EC                     __ptext51:
  8989                           	opt stack 0
  8990  0020EC                     _EUSART1_Initialize:
  8991                           	opt stack 22
  8992                           
  8993                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  8994                           
  8995                           ; BSR set to: 0
  8996                           ;incstack = 0
  8997  0020EC  9A9D               	bcf	3997,5,c	;volatile
  8998                           
  8999                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  9000  0020EE  989D               	bcf	3997,4,c	;volatile
  9001                           
  9002                           ;eusart1.c: 85: BAUD1CON = 0x48;
  9003  0020F0  0E48               	movlw	72
  9004  0020F2  6EB8               	movwf	4024,c	;volatile
  9005                           
  9006                           ;eusart1.c: 88: RC1STA = 0x80;
  9007  0020F4  0E80               	movlw	128
  9008  0020F6  6EAB               	movwf	4011,c	;volatile
  9009                           
  9010                           ;eusart1.c: 91: TX1STA = 0x26;
  9011  0020F8  0E26               	movlw	38
  9012  0020FA  6EAC               	movwf	4012,c	;volatile
  9013                           
  9014                           ;eusart1.c: 94: SPBRG1 = 0xA0;
  9015  0020FC  0EA0               	movlw	160
  9016  0020FE  6EAF               	movwf	4015,c	;volatile
  9017                           
  9018                           ;eusart1.c: 97: SPBRGH1 = 0x01;
  9019  002100  0E01               	movlw	1
  9020  002102  6EB0               	movwf	4016,c	;volatile
  9021                           
  9022                           ;eusart1.c: 100: TXREG1 = 0x00;
  9023  002104  0E00               	movlw	0
  9024  002106  6EAD               	movwf	4013,c	;volatile
  9025                           
  9026                           ;eusart1.c: 103: RCREG1 = 0x00;
  9027  002108  0E00               	movlw	0
  9028  00210A  6EAE               	movwf	4014,c	;volatile
  9029                           
  9030                           ;eusart1.c: 107: eusart1TxHead = 0;
  9031  00210C  0E00               	movlw	0
  9032  00210E  6E17               	movwf	_eusart1TxHead,c
  9033                           
  9034                           ;eusart1.c: 108: eusart1TxTail = 0;
  9035  002110  0E00               	movlw	0
  9036  002112  6E18               	movwf	_eusart1TxTail,c
  9037                           
  9038                           ;eusart1.c: 109: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9039  002114  0E40               	movlw	64
  9040  002116  6E43               	movwf	_eusart1TxBufferRemaining,c	;volatile
  9041                           
  9042                           ;eusart1.c: 111: eusart1RxHead = 0;
  9043  002118  0E00               	movlw	0
  9044  00211A  6E15               	movwf	_eusart1RxHead,c
  9045                           
  9046                           ;eusart1.c: 112: eusart1RxTail = 0;
  9047  00211C  0E00               	movlw	0
  9048  00211E  6E16               	movwf	_eusart1RxTail,c
  9049                           
  9050                           ;eusart1.c: 113: eusart1RxCount = 0;
  9051  002120  0E00               	movlw	0
  9052  002122  6E14               	movwf	_eusart1RxCount,c	;volatile
  9053                           
  9054                           ;eusart1.c: 116: PIE1bits.RC1IE = 1;
  9055  002124  8A9D               	bsf	3997,5,c	;volatile
  9056  002126  0012               	return	
  9057  002128                     __end_of_EUSART1_Initialize:
  9058                           	opt stack 0
  9059                           tblptru	equ	0xFF8
  9060                           tblptrh	equ	0xFF7
  9061                           tblptrl	equ	0xFF6
  9062                           tablat	equ	0xFF5
  9063                           prodh	equ	0xFF4
  9064                           prodl	equ	0xFF3
  9065                           intcon	equ	0xFF2
  9066                           intcon2	equ	0xFF1
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           plusw2	equ	0xFDB
  9073                           fsr2h	equ	0xFDA
  9074                           fsr2l	equ	0xFD9
  9075                           status	equ	0xFD8
  9076                           
  9077 ;; *************** function _EPWM1_Initialize *****************
  9078 ;; Defined at:
  9079 ;;		line 64 in file "mcc_generated_files/epwm1.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;		None
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;		None
  9084 ;; Return value:  Size  Location     Type
  9085 ;;		None               void
  9086 ;; Registers used:
  9087 ;;		wreg, status,2
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9097 ;;Total ram usage:        0 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    7
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;;		_SYSTEM_Initialize
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           	psect	text52
  9108  00243A                     __ptext52:
  9109                           	opt stack 0
  9110  00243A                     _EPWM1_Initialize:
  9111                           	opt stack 22
  9112                           
  9113                           ;epwm1.c: 69: CCP1CON = 0x3C;
  9114                           
  9115                           ;incstack = 0
  9116  00243A  0E3C               	movlw	60
  9117  00243C  6EBD               	movwf	4029,c	;volatile
  9118                           
  9119                           ;epwm1.c: 72: ECCP1AS = 0x00;
  9120  00243E  0E00               	movlw	0
  9121  002440  6EB6               	movwf	4022,c	;volatile
  9122                           
  9123                           ;epwm1.c: 75: PWM1CON = 0x80;
  9124  002442  0E80               	movlw	128
  9125  002444  6EB7               	movwf	4023,c	;volatile
  9126                           
  9127                           ;epwm1.c: 78: PSTR1CON = 0x01;
  9128  002446  0E01               	movlw	1
  9129  002448  6EB9               	movwf	4025,c	;volatile
  9130                           
  9131                           ;epwm1.c: 81: CCPR1L = 0x02;
  9132  00244A  0E02               	movlw	2
  9133  00244C  6EBE               	movwf	4030,c	;volatile
  9134                           
  9135                           ;epwm1.c: 84: CCPR1H = 0x00;
  9136  00244E  0E00               	movlw	0
  9137  002450  6EBF               	movwf	4031,c	;volatile
  9138                           
  9139                           ;epwm1.c: 88: CCPTMRS0bits.C1TSEL = 0x1;
  9140  002452  010F               	movlb	15	; () banked
  9141  002454  5149               	movf	73,w,b	;volatile
  9142  002456  0BFC               	andlw	-4
  9143  002458  0901               	iorlw	1
  9144  00245A  010F               	movlb	15	; () banked
  9145  00245C  6F49               	movwf	73,b	;volatile
  9146                           
  9147                           ; BSR set to: 15
  9148  00245E  0012               	return	
  9149  002460                     __end_of_EPWM1_Initialize:
  9150                           	opt stack 0
  9151                           tblptru	equ	0xFF8
  9152                           tblptrh	equ	0xFF7
  9153                           tblptrl	equ	0xFF6
  9154                           tablat	equ	0xFF5
  9155                           prodh	equ	0xFF4
  9156                           prodl	equ	0xFF3
  9157                           intcon	equ	0xFF2
  9158                           intcon2	equ	0xFF1
  9159                           postinc0	equ	0xFEE
  9160                           wreg	equ	0xFE8
  9161                           indf2	equ	0xFDF
  9162                           postinc2	equ	0xFDE
  9163                           postdec2	equ	0xFDD
  9164                           plusw2	equ	0xFDB
  9165                           fsr2h	equ	0xFDA
  9166                           fsr2l	equ	0xFD9
  9167                           status	equ	0xFD8
  9168                           
  9169 ;; *************** function _ADC_Initialize *****************
  9170 ;; Defined at:
  9171 ;;		line 59 in file "mcc_generated_files/adc.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;		None
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;		None
  9176 ;; Return value:  Size  Location     Type
  9177 ;;		None               void
  9178 ;; Registers used:
  9179 ;;		wreg, status,2
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;Total ram usage:        0 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    7
  9192 ;; This function calls:
  9193 ;;		Nothing
  9194 ;; This function is called by:
  9195 ;;		_SYSTEM_Initialize
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           	psect	text53
  9200  00253C                     __ptext53:
  9201                           	opt stack 0
  9202  00253C                     _ADC_Initialize:
  9203                           	opt stack 22
  9204                           
  9205                           ;adc.c: 64: ADCON0 = 0x01;
  9206                           
  9207                           ; BSR set to: 15
  9208                           ;incstack = 0
  9209  00253C  0E01               	movlw	1
  9210  00253E  6EC2               	movwf	4034,c	;volatile
  9211                           
  9212                           ;adc.c: 67: ADCON1 = 0x00;
  9213  002540  0E00               	movlw	0
  9214  002542  6EC1               	movwf	4033,c	;volatile
  9215                           
  9216                           ;adc.c: 70: ADCON2 = 0x87;
  9217  002544  0E87               	movlw	135
  9218  002546  6EC0               	movwf	4032,c	;volatile
  9219                           
  9220                           ;adc.c: 73: ADRESL = 0x00;
  9221  002548  0E00               	movlw	0
  9222  00254A  6EC3               	movwf	4035,c	;volatile
  9223                           
  9224                           ;adc.c: 76: ADRESH = 0x00;
  9225  00254C  0E00               	movlw	0
  9226  00254E  6EC4               	movwf	4036,c	;volatile
  9227  002550  0012               	return	
  9228  002552                     __end_of_ADC_Initialize:
  9229                           	opt stack 0
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           prodh	equ	0xFF4
  9235                           prodl	equ	0xFF3
  9236                           intcon	equ	0xFF2
  9237                           intcon2	equ	0xFF1
  9238                           postinc0	equ	0xFEE
  9239                           wreg	equ	0xFE8
  9240                           indf2	equ	0xFDF
  9241                           postinc2	equ	0xFDE
  9242                           postdec2	equ	0xFDD
  9243                           plusw2	equ	0xFDB
  9244                           fsr2h	equ	0xFDA
  9245                           fsr2l	equ	0xFD9
  9246                           status	equ	0xFD8
  9247                           
  9248 ;; *************** function _LCD_Initialize *****************
  9249 ;; Defined at:
  9250 ;;		line 46 in file "lcd.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;Total ram usage:        1 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    9
  9271 ;; This function calls:
  9272 ;;		_LCDPutCmd
  9273 ;; This function is called by:
  9274 ;;		_main
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           	psect	text54
  9279  002128                     __ptext54:
  9280                           	opt stack 0
  9281  002128                     _LCD_Initialize:
  9282                           	opt stack 21
  9283                           
  9284                           ;lcd.c: 49: PORTD = 0;
  9285                           
  9286                           ;incstack = 0
  9287  002128  0E00               	movlw	0
  9288  00212A  6E83               	movwf	3971,c	;volatile
  9289                           
  9290                           ;lcd.c: 51: TRISD = 0x00;
  9291  00212C  0E00               	movlw	0
  9292  00212E  6E95               	movwf	3989,c	;volatile
  9293                           
  9294                           ;lcd.c: 54: PORTDbits.RD7 = 1;
  9295  002130  8E83               	bsf	3971,7,c	;volatile
  9296                           
  9297                           ;lcd.c: 57: _delay((unsigned long)((15)*(4000000/4000.0)));
  9298  002132  0E14               	movlw	20
  9299  002134  6E3F               	movwf	??_LCD_Initialize& (0+255),c
  9300  002136  0E7A               	movlw	122
  9301  002138                     u4167:
  9302  002138  2EE8               	decfsz	wreg,f,c
  9303  00213A  D7FE               	goto	u4167
  9304  00213C  2E3F               	decfsz	??_LCD_Initialize& (0+255),f,c
  9305  00213E  D7FC               	goto	u4167
  9306                           
  9307                           ;lcd.c: 60: LCDPutCmd(0x32);
  9308  002140  0E32               	movlw	50
  9309  002142  ECB0  F010         	call	_LCDPutCmd
  9310                           
  9311                           ;lcd.c: 63: LCDPutCmd(0x28);
  9312  002146  0E28               	movlw	40
  9313  002148  ECB0  F010         	call	_LCDPutCmd
  9314                           
  9315                           ;lcd.c: 66: LCDPutCmd(0x0C);
  9316  00214C  0E0C               	movlw	12
  9317  00214E  ECB0  F010         	call	_LCDPutCmd
  9318                           
  9319                           ;lcd.c: 68: LCDPutCmd(0x01);
  9320  002152  0E01               	movlw	1
  9321  002154  ECB0  F010         	call	_LCDPutCmd
  9322                           
  9323                           ;lcd.c: 71: LCDPutCmd(0x06);
  9324  002158  0E06               	movlw	6
  9325  00215A  ECB0  F010         	call	_LCDPutCmd
  9326  00215E  0012               	return	
  9327  002160                     __end_of_LCD_Initialize:
  9328                           	opt stack 0
  9329                           tblptru	equ	0xFF8
  9330                           tblptrh	equ	0xFF7
  9331                           tblptrl	equ	0xFF6
  9332                           tablat	equ	0xFF5
  9333                           prodh	equ	0xFF4
  9334                           prodl	equ	0xFF3
  9335                           intcon	equ	0xFF2
  9336                           intcon2	equ	0xFF1
  9337                           postinc0	equ	0xFEE
  9338                           wreg	equ	0xFE8
  9339                           indf2	equ	0xFDF
  9340                           postinc2	equ	0xFDE
  9341                           postdec2	equ	0xFDD
  9342                           plusw2	equ	0xFDB
  9343                           fsr2h	equ	0xFDA
  9344                           fsr2l	equ	0xFD9
  9345                           status	equ	0xFD8
  9346                           
  9347 ;; *************** function _LCDPutCmd *****************
  9348 ;; Defined at:
  9349 ;;		line 118 in file "lcd.c"
  9350 ;; Parameters:    Size  Location     Type
  9351 ;;  ch              1    wreg     unsigned char 
  9352 ;; Auto vars:     Size  Location     Type
  9353 ;;  ch              1   29[COMRAM] unsigned char 
  9354 ;; Return value:  Size  Location     Type
  9355 ;;		None               void
  9356 ;; Registers used:
  9357 ;;		wreg, status,2, status,0, cstack
  9358 ;; Tracked objects:
  9359 ;;		On entry : 0/0
  9360 ;;		On exit  : 0/0
  9361 ;;		Unchanged: 0/0
  9362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;Total ram usage:        2 bytes
  9368 ;; Hardware stack levels used:    1
  9369 ;; Hardware stack levels required when called:    8
  9370 ;; This function calls:
  9371 ;;		_LCDWriteNibble
  9372 ;; This function is called by:
  9373 ;;		_StateInitial
  9374 ;;		_DisplaySplashText
  9375 ;;		_StateVoltage
  9376 ;;		_LCD_Initialize
  9377 ;;		_LCDGoto
  9378 ;;		_StateBuzzer
  9379 ;;		_StateClock
  9380 ;;		_StateClockSet
  9381 ;;		_StateTemperature
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           	psect	text55
  9386  002160                     __ptext55:
  9387                           	opt stack 0
  9388  002160                     _LCDPutCmd:
  9389                           	opt stack 21
  9390                           
  9391                           ;incstack = 0
  9392                           ;LCDPutCmd@ch stored from wreg
  9393  002160  6E3E               	movwf	LCDPutCmd@ch,c
  9394                           
  9395                           ;lcd.c: 120: _delay((unsigned long)((5)*(4000000/4000.0)));
  9396  002162  0E07               	movlw	7
  9397  002164  6E3D               	movwf	??_LCDPutCmd& (0+255),c
  9398  002166  0E7D               	movlw	125
  9399  002168                     u4177:
  9400  002168  2EE8               	decfsz	wreg,f,c
  9401  00216A  D7FE               	goto	u4177
  9402  00216C  2E3D               	decfsz	??_LCDPutCmd& (0+255),f,c
  9403  00216E  D7FC               	goto	u4177
  9404  002170  F000               	nop	
  9405                           
  9406                           ;lcd.c: 123: LCDWriteNibble(ch,0);
  9407  002172  0E00               	movlw	0
  9408  002174  6E3B               	movwf	LCDWriteNibble@rs,c
  9409  002176  503E               	movf	LCDPutCmd@ch,w,c
  9410  002178  ECA1  F011         	call	_LCDWriteNibble
  9411                           
  9412                           ;lcd.c: 126: ch = (ch << 4);
  9413  00217C  383E               	swapf	LCDPutCmd@ch,w,c
  9414  00217E  0BF0               	andlw	240
  9415  002180  6E3E               	movwf	LCDPutCmd@ch,c
  9416                           
  9417                           ;lcd.c: 128: _delay((unsigned long)((1)*(4000000/4000.0)));
  9418  002182  0EFA               	movlw	250
  9419  002184                     u4187:
  9420  002184  F000               	nop	
  9421  002186  2EE8               	decfsz	wreg,f,c
  9422  002188  D7FD               	goto	u4187
  9423                           
  9424                           ;lcd.c: 131: LCDWriteNibble(ch,0);
  9425  00218A  0E00               	movlw	0
  9426  00218C  6E3B               	movwf	LCDWriteNibble@rs,c
  9427  00218E  503E               	movf	LCDPutCmd@ch,w,c
  9428  002190  ECA1  F011         	call	_LCDWriteNibble
  9429  002194  0012               	return	
  9430  002196                     __end_of_LCDPutCmd:
  9431                           	opt stack 0
  9432                           tblptru	equ	0xFF8
  9433                           tblptrh	equ	0xFF7
  9434                           tblptrl	equ	0xFF6
  9435                           tablat	equ	0xFF5
  9436                           prodh	equ	0xFF4
  9437                           prodl	equ	0xFF3
  9438                           intcon	equ	0xFF2
  9439                           intcon2	equ	0xFF1
  9440                           postinc0	equ	0xFEE
  9441                           wreg	equ	0xFE8
  9442                           indf2	equ	0xFDF
  9443                           postinc2	equ	0xFDE
  9444                           postdec2	equ	0xFDD
  9445                           plusw2	equ	0xFDB
  9446                           fsr2h	equ	0xFDA
  9447                           fsr2l	equ	0xFD9
  9448                           status	equ	0xFD8
  9449                           
  9450 ;; *************** function _LCDWriteNibble *****************
  9451 ;; Defined at:
  9452 ;;		line 76 in file "lcd.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;  ch              1    wreg     unsigned char 
  9455 ;;  rs              1   26[COMRAM] unsigned char 
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;  ch              1   27[COMRAM] unsigned char 
  9458 ;; Return value:  Size  Location     Type
  9459 ;;		None               void
  9460 ;; Registers used:
  9461 ;;		wreg, status,2, status,0
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9467 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9468 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;Total ram usage:        2 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    7
  9474 ;; This function calls:
  9475 ;;		Nothing
  9476 ;; This function is called by:
  9477 ;;		_LCDPutChar
  9478 ;;		_LCDPutCmd
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text56
  9483  002342                     __ptext56:
  9484                           	opt stack 0
  9485  002342                     _LCDWriteNibble:
  9486                           	opt stack 21
  9487                           
  9488                           ;incstack = 0
  9489                           ;LCDWriteNibble@ch stored from wreg
  9490  002342  6E3C               	movwf	LCDWriteNibble@ch,c
  9491                           
  9492                           ;lcd.c: 79: ch = (ch >> 4);
  9493  002344  383C               	swapf	LCDWriteNibble@ch,w,c
  9494  002346  0B0F               	andlw	15
  9495  002348  6E3C               	movwf	LCDWriteNibble@ch,c
  9496                           
  9497                           ;lcd.c: 82: ch = (ch & 0x0F);
  9498  00234A  503C               	movf	LCDWriteNibble@ch,w,c
  9499  00234C  0B0F               	andlw	15
  9500  00234E  6E3C               	movwf	LCDWriteNibble@ch,c
  9501                           
  9502                           ;lcd.c: 85: PORTD = (PORTD & 0xF0);
  9503  002350  5083               	movf	3971,w,c	;volatile
  9504  002352  0BF0               	andlw	240
  9505  002354  6E83               	movwf	3971,c	;volatile
  9506                           
  9507                           ;lcd.c: 88: PORTD = (PORTD | ch);
  9508  002356  5083               	movf	3971,w,c	;volatile
  9509  002358  103C               	iorwf	LCDWriteNibble@ch,w,c
  9510  00235A  6E83               	movwf	3971,c	;volatile
  9511                           
  9512                           ;lcd.c: 91: PORTDbits.RD4 = rs;
  9513  00235C  B03B               	btfsc	LCDWriteNibble@rs,0,c
  9514  00235E  D002               	bra	u3285
  9515  002360  9883               	bcf	3971,4,c	;volatile
  9516  002362  D001               	bra	u3286
  9517  002364                     u3285:
  9518  002364  8883               	bsf	3971,4,c	;volatile
  9519  002366                     u3286:
  9520                           
  9521                           ;lcd.c: 94: PORTDbits.RD5 = 0;
  9522  002366  9A83               	bcf	3971,5,c	;volatile
  9523                           
  9524                           ;lcd.c: 97: PORTDbits.RD6 = 1;
  9525  002368  8C83               	bsf	3971,6,c	;volatile
  9526                           
  9527                           ;lcd.c: 100: PORTDbits.RD6 = 0;
  9528  00236A  9C83               	bcf	3971,6,c	;volatile
  9529  00236C  0012               	return	
  9530  00236E                     __end_of_LCDWriteNibble:
  9531                           	opt stack 0
  9532                           tblptru	equ	0xFF8
  9533                           tblptrh	equ	0xFF7
  9534                           tblptrl	equ	0xFF6
  9535                           tablat	equ	0xFF5
  9536                           prodh	equ	0xFF4
  9537                           prodl	equ	0xFF3
  9538                           intcon	equ	0xFF2
  9539                           intcon2	equ	0xFF1
  9540                           postinc0	equ	0xFEE
  9541                           wreg	equ	0xFE8
  9542                           indf2	equ	0xFDF
  9543                           postinc2	equ	0xFDE
  9544                           postdec2	equ	0xFDD
  9545                           plusw2	equ	0xFDB
  9546                           fsr2h	equ	0xFDA
  9547                           fsr2l	equ	0xFD9
  9548                           status	equ	0xFD8
  9549                           
  9550 ;; *************** function _Buttons_Initialize *****************
  9551 ;; Defined at:
  9552 ;;		line 68 in file "Buttons.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;		None
  9555 ;; Auto vars:     Size  Location     Type
  9556 ;;		None
  9557 ;; Return value:  Size  Location     Type
  9558 ;;		None               void
  9559 ;; Registers used:
  9560 ;;		None
  9561 ;; Tracked objects:
  9562 ;;		On entry : 0/0
  9563 ;;		On exit  : 0/0
  9564 ;;		Unchanged: 0/0
  9565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9570 ;;Total ram usage:        0 bytes
  9571 ;; Hardware stack levels used:    1
  9572 ;; Hardware stack levels required when called:    7
  9573 ;; This function calls:
  9574 ;;		Nothing
  9575 ;; This function is called by:
  9576 ;;		_main
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           	psect	text57
  9581  0019EE                     __ptext57:
  9582                           	opt stack 0
  9583  0019EE                     _Buttons_Initialize:
  9584                           	opt stack 23
  9585                           
  9586                           ;incstack = 0
  9587  0019EE  9E10               	bcf	_TempButtons,7,c	;volatile
  9588  0019F0  9C10               	bcf	_TempButtons,6,c	;volatile
  9589  0019F2  9A10               	bcf	_TempButtons,5,c	;volatile
  9590  0019F4  9810               	bcf	_TempButtons,4,c	;volatile
  9591  0019F6  9610               	bcf	_TempButtons,3,c	;volatile
  9592  0019F8  A610               	btfss	_TempButtons,3,c	;volatile
  9593  0019FA  D002               	bra	u2685
  9594  0019FC  8410               	bsf	_TempButtons,2,c	;volatile
  9595  0019FE  D001               	bra	u2687
  9596  001A00                     u2685:
  9597  001A00  9410               	bcf	_TempButtons,2,c	;volatile
  9598  001A02                     u2687:
  9599  001A02  A410               	btfss	_TempButtons,2,c	;volatile
  9600  001A04  D002               	bra	u2695
  9601  001A06  8210               	bsf	_TempButtons,1,c	;volatile
  9602  001A08  D001               	bra	u2697
  9603  001A0A                     u2695:
  9604  001A0A  9210               	bcf	_TempButtons,1,c	;volatile
  9605  001A0C                     u2697:
  9606  001A0C  A210               	btfss	_TempButtons,1,c	;volatile
  9607  001A0E  D002               	bra	u2705
  9608  001A10  8010               	bsf	_TempButtons,0,c	;volatile
  9609  001A12  D001               	bra	u2707
  9610  001A14                     u2705:
  9611  001A14  9010               	bcf	_TempButtons,0,c	;volatile
  9612  001A16                     u2707:
  9613  001A16  A010               	btfss	_TempButtons,0,c	;volatile
  9614  001A18  D003               	bra	u2715
  9615  001A1A  0100               	movlb	0	; () banked
  9616  001A1C  8FB7               	bsf	_Buttons& (0+255),7,b
  9617  001A1E  D002               	bra	u2717
  9618  001A20                     u2715:
  9619  001A20  0100               	movlb	0	; () banked
  9620  001A22  9FB7               	bcf	_Buttons& (0+255),7,b
  9621  001A24                     u2717:
  9622  001A24  0100               	movlb	0	; () banked
  9623  001A26  AFB7               	btfss	_Buttons& (0+255),7,b
  9624  001A28  D003               	bra	u2725
  9625  001A2A  0100               	movlb	0	; () banked
  9626  001A2C  8DB7               	bsf	_Buttons& (0+255),6,b
  9627  001A2E  D002               	bra	u2727
  9628  001A30                     u2725:
  9629  001A30  0100               	movlb	0	; () banked
  9630  001A32  9DB7               	bcf	_Buttons& (0+255),6,b
  9631  001A34                     u2727:
  9632  001A34  0100               	movlb	0	; () banked
  9633  001A36  ADB7               	btfss	_Buttons& (0+255),6,b
  9634  001A38  D003               	bra	u2735
  9635  001A3A  0100               	movlb	0	; () banked
  9636  001A3C  8BB7               	bsf	_Buttons& (0+255),5,b
  9637  001A3E  D002               	bra	u2737
  9638  001A40                     u2735:
  9639  001A40  0100               	movlb	0	; () banked
  9640  001A42  9BB7               	bcf	_Buttons& (0+255),5,b
  9641  001A44                     u2737:
  9642  001A44  0100               	movlb	0	; () banked
  9643  001A46  ABB7               	btfss	_Buttons& (0+255),5,b
  9644  001A48  D003               	bra	u2745
  9645  001A4A  0100               	movlb	0	; () banked
  9646  001A4C  89B7               	bsf	_Buttons& (0+255),4,b
  9647  001A4E  D002               	bra	u2747
  9648  001A50                     u2745:
  9649  001A50  0100               	movlb	0	; () banked
  9650  001A52  99B7               	bcf	_Buttons& (0+255),4,b
  9651  001A54                     u2747:
  9652  001A54  0100               	movlb	0	; () banked
  9653  001A56  A9B7               	btfss	_Buttons& (0+255),4,b
  9654  001A58  D003               	bra	u2755
  9655  001A5A  0100               	movlb	0	; () banked
  9656  001A5C  87B7               	bsf	_Buttons& (0+255),3,b
  9657  001A5E  D002               	bra	u2757
  9658  001A60                     u2755:
  9659  001A60  0100               	movlb	0	; () banked
  9660  001A62  97B7               	bcf	_Buttons& (0+255),3,b
  9661  001A64                     u2757:
  9662  001A64  0100               	movlb	0	; () banked
  9663  001A66  A7B7               	btfss	_Buttons& (0+255),3,b
  9664  001A68  D003               	bra	u2765
  9665  001A6A  0100               	movlb	0	; () banked
  9666  001A6C  85B7               	bsf	_Buttons& (0+255),2,b
  9667  001A6E  D002               	bra	u2767
  9668  001A70                     u2765:
  9669  001A70  0100               	movlb	0	; () banked
  9670  001A72  95B7               	bcf	_Buttons& (0+255),2,b
  9671  001A74                     u2767:
  9672  001A74  0100               	movlb	0	; () banked
  9673  001A76  A5B7               	btfss	_Buttons& (0+255),2,b
  9674  001A78  D003               	bra	u2775
  9675  001A7A  0100               	movlb	0	; () banked
  9676  001A7C  83B7               	bsf	_Buttons& (0+255),1,b
  9677  001A7E  D002               	bra	u2777
  9678  001A80                     u2775:
  9679  001A80  0100               	movlb	0	; () banked
  9680  001A82  93B7               	bcf	_Buttons& (0+255),1,b
  9681  001A84                     u2777:
  9682                           
  9683                           ;Buttons.c: 71: Buttons.But1Pressed = Buttons.But2Pressed = Buttons.But3Pressed = Button
      +                          s.But4Pressed =
  9684                           ;Buttons.c: 72: Buttons.But5Pressed = Buttons.But6Pressed = Buttons.But7Pressed = Button
      +                          s.But8Pressed =
  9685                           ;Buttons.c: 73: TempButtons.But1Pressed = TempButtons.But2Pressed = TempButtons.But3Pres
      +                          sed =
  9686                           ;Buttons.c: 74: TempButtons.But4Pressed = TempButtons.But5Pressed = TempButtons.But6Pres
      +                          sed =
  9687                           ;Buttons.c: 75: TempButtons.But7Pressed = TempButtons.But8Pressed = 0;
  9688  001A84  0100               	movlb	0	; () banked
  9689  001A86  A3B7               	btfss	_Buttons& (0+255),1,b
  9690  001A88  D003               	bra	u2785
  9691  001A8A  0100               	movlb	0	; () banked
  9692  001A8C  81B7               	bsf	_Buttons& (0+255),0,b
  9693  001A8E  D002               	bra	u2787
  9694  001A90                     u2785:
  9695  001A90  0100               	movlb	0	; () banked
  9696  001A92  91B7               	bcf	_Buttons& (0+255),0,b
  9697  001A94                     u2787:
  9698                           
  9699                           ; BSR set to: 0
  9700  001A94  0012               	return	
  9701  001A96                     __end_of_Buttons_Initialize:
  9702                           	opt stack 0
  9703                           tblptru	equ	0xFF8
  9704                           tblptrh	equ	0xFF7
  9705                           tblptrl	equ	0xFF6
  9706                           tablat	equ	0xFF5
  9707                           prodh	equ	0xFF4
  9708                           prodl	equ	0xFF3
  9709                           intcon	equ	0xFF2
  9710                           intcon2	equ	0xFF1
  9711                           postinc0	equ	0xFEE
  9712                           wreg	equ	0xFE8
  9713                           indf2	equ	0xFDF
  9714                           postinc2	equ	0xFDE
  9715                           postdec2	equ	0xFDD
  9716                           plusw2	equ	0xFDB
  9717                           fsr2h	equ	0xFDA
  9718                           fsr2l	equ	0xFD9
  9719                           status	equ	0xFD8
  9720                           
  9721 ;; *************** function _INTERRUPT_InterruptManagerLow *****************
  9722 ;; Defined at:
  9723 ;;		line 93 in file "mcc_generated_files/interrupt_manager.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;		None
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;		None
  9728 ;; Return value:  Size  Location     Type
  9729 ;;		None               void
  9730 ;; Registers used:
  9731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;Total ram usage:       17 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    6
  9744 ;; This function calls:
  9745 ;;		_EUSART1_Receive_ISR
  9746 ;;		_EUSART1_Transmit_ISR
  9747 ;;		_I2C1_BusCollisionISR
  9748 ;;		_I2C1_ISR
  9749 ;;		_TMR0_ISR
  9750 ;; This function is called by:
  9751 ;;		Interrupt level 1
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755                           	psect	intcodelo
  9756  000018                     __pintcodelo:
  9757                           	opt stack 0
  9758  000018                     _INTERRUPT_InterruptManagerLow:
  9759                           	opt stack 19
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;incstack = 0
  9763  000018  CFD8 F027          	movff	status,??_INTERRUPT_InterruptManagerLow
  9764  00001C  CFE8 F028          	movff	wreg,??_INTERRUPT_InterruptManagerLow+1
  9765  000020  CFE0 F029          	movff	bsr,??_INTERRUPT_InterruptManagerLow+2
  9766  000024  CFFA F02A          	movff	pclath,??_INTERRUPT_InterruptManagerLow+3
  9767  000028  CFFB F02B          	movff	pclatu,??_INTERRUPT_InterruptManagerLow+4
  9768  00002C  CFE9 F02C          	movff	fsr0l,??_INTERRUPT_InterruptManagerLow+5
  9769  000030  CFEA F02D          	movff	fsr0h,??_INTERRUPT_InterruptManagerLow+6
  9770  000034  CFE1 F02E          	movff	fsr1l,??_INTERRUPT_InterruptManagerLow+7
  9771  000038  CFE2 F02F          	movff	fsr1h,??_INTERRUPT_InterruptManagerLow+8
  9772  00003C  CFD9 F030          	movff	fsr2l,??_INTERRUPT_InterruptManagerLow+9
  9773  000040  CFDA F031          	movff	fsr2h,??_INTERRUPT_InterruptManagerLow+10
  9774  000044  CFF3 F032          	movff	prodl,??_INTERRUPT_InterruptManagerLow+11
  9775  000048  CFF4 F033          	movff	prodh,??_INTERRUPT_InterruptManagerLow+12
  9776  00004C  CFF6 F034          	movff	tblptrl,??_INTERRUPT_InterruptManagerLow+13
  9777  000050  CFF7 F035          	movff	tblptrh,??_INTERRUPT_InterruptManagerLow+14
  9778  000054  CFF8 F036          	movff	tblptru,??_INTERRUPT_InterruptManagerLow+15
  9779  000058  CFF5 F037          	movff	tablat,??_INTERRUPT_InterruptManagerLow+16
  9780                           
  9781                           ;interrupt_manager.c: 96: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  9782  00005C  BA9D               	btfsc	3997,5,c	;volatile
  9783  00005E  AA9E               	btfss	3998,5,c	;volatile
  9784  000060  D003               	goto	i1l245
  9785                           
  9786                           ;interrupt_manager.c: 97: {
  9787                           ;interrupt_manager.c: 98: EUSART1_Receive_ISR();
  9788  000062  EC16  F011         	call	_EUSART1_Receive_ISR	;wreg free
  9789                           
  9790                           ;interrupt_manager.c: 99: }
  9791  000066  D017               	goto	i1l255
  9792  000068                     i1l245:
  9793                           
  9794                           ;interrupt_manager.c: 100: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  9795  000068  B69D               	btfsc	3997,3,c	;volatile
  9796  00006A  A69E               	btfss	3998,3,c	;volatile
  9797  00006C  D003               	goto	i1l247
  9798                           
  9799                           ;interrupt_manager.c: 101: {
  9800                           ;interrupt_manager.c: 102: I2C1_ISR();
  9801  00006E  EC27  F009         	call	_I2C1_ISR	;wreg free
  9802                           
  9803                           ;interrupt_manager.c: 103: }
  9804  000072  D011               	goto	i1l255
  9805  000074                     i1l247:
  9806                           
  9807                           ;interrupt_manager.c: 104: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  9808  000074  B89D               	btfsc	3997,4,c	;volatile
  9809  000076  A89E               	btfss	3998,4,c	;volatile
  9810  000078  D003               	goto	i1l249
  9811                           
  9812                           ;interrupt_manager.c: 105: {
  9813                           ;interrupt_manager.c: 106: EUSART1_Transmit_ISR();
  9814  00007A  ECCB  F010         	call	_EUSART1_Transmit_ISR	;wreg free
  9815                           
  9816                           ;interrupt_manager.c: 107: }
  9817  00007E  D00B               	goto	i1l255
  9818  000080                     i1l249:
  9819                           
  9820                           ;interrupt_manager.c: 108: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  9821  000080  BAF2               	btfsc	intcon,5,c	;volatile
  9822  000082  A4F2               	btfss	intcon,2,c	;volatile
  9823  000084  D003               	goto	i1l251
  9824                           
  9825                           ;interrupt_manager.c: 109: {
  9826                           ;interrupt_manager.c: 110: TMR0_ISR();
  9827  000086  ECBC  F012         	call	_TMR0_ISR	;wreg free
  9828                           
  9829                           ;interrupt_manager.c: 111: }
  9830  00008A  D005               	goto	i1l255
  9831  00008C                     i1l251:
  9832                           
  9833                           ;interrupt_manager.c: 112: else if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  9834  00008C  B6A0               	btfsc	4000,3,c	;volatile
  9835  00008E  A6A1               	btfss	4001,3,c	;volatile
  9836  000090  D002               	goto	i1l255
  9837                           
  9838                           ;interrupt_manager.c: 113: {
  9839                           ;interrupt_manager.c: 114: I2C1_BusCollisionISR();
  9840  000092  ECF9  F012         	call	_I2C1_BusCollisionISR	;wreg free
  9841  000096                     i1l255:
  9842  000096  C037  FFF5         	movff	??_INTERRUPT_InterruptManagerLow+16,tablat
  9843  00009A  C036  FFF8         	movff	??_INTERRUPT_InterruptManagerLow+15,tblptru
  9844  00009E  C035  FFF7         	movff	??_INTERRUPT_InterruptManagerLow+14,tblptrh
  9845  0000A2  C034  FFF6         	movff	??_INTERRUPT_InterruptManagerLow+13,tblptrl
  9846  0000A6  C033  FFF4         	movff	??_INTERRUPT_InterruptManagerLow+12,prodh
  9847  0000AA  C032  FFF3         	movff	??_INTERRUPT_InterruptManagerLow+11,prodl
  9848  0000AE  C031  FFDA         	movff	??_INTERRUPT_InterruptManagerLow+10,fsr2h
  9849  0000B2  C030  FFD9         	movff	??_INTERRUPT_InterruptManagerLow+9,fsr2l
  9850  0000B6  C02F  FFE2         	movff	??_INTERRUPT_InterruptManagerLow+8,fsr1h
  9851  0000BA  C02E  FFE1         	movff	??_INTERRUPT_InterruptManagerLow+7,fsr1l
  9852  0000BE  C02D  FFEA         	movff	??_INTERRUPT_InterruptManagerLow+6,fsr0h
  9853  0000C2  C02C  FFE9         	movff	??_INTERRUPT_InterruptManagerLow+5,fsr0l
  9854  0000C6  C02B  FFFB         	movff	??_INTERRUPT_InterruptManagerLow+4,pclatu
  9855  0000CA  C02A  FFFA         	movff	??_INTERRUPT_InterruptManagerLow+3,pclath
  9856  0000CE  C029  FFE0         	movff	??_INTERRUPT_InterruptManagerLow+2,bsr
  9857  0000D2  C028  FFE8         	movff	??_INTERRUPT_InterruptManagerLow+1,wreg
  9858  0000D6  C027  FFD8         	movff	??_INTERRUPT_InterruptManagerLow,status
  9859  0000DA  0010               	retfie	
  9860  0000DC                     __end_of_INTERRUPT_InterruptManagerLow:
  9861                           	opt stack 0
  9862                           pclatu	equ	0xFFB
  9863                           pclath	equ	0xFFA
  9864                           tblptru	equ	0xFF8
  9865                           tblptrh	equ	0xFF7
  9866                           tblptrl	equ	0xFF6
  9867                           tablat	equ	0xFF5
  9868                           prodh	equ	0xFF4
  9869                           prodl	equ	0xFF3
  9870                           intcon	equ	0xFF2
  9871                           intcon2	equ	0xFF1
  9872                           postinc0	equ	0xFEE
  9873                           fsr0h	equ	0xFEA
  9874                           fsr0l	equ	0xFE9
  9875                           wreg	equ	0xFE8
  9876                           fsr1h	equ	0xFE2
  9877                           fsr1l	equ	0xFE1
  9878                           bsr	equ	0xFE0
  9879                           indf2	equ	0xFDF
  9880                           postinc2	equ	0xFDE
  9881                           postdec2	equ	0xFDD
  9882                           plusw2	equ	0xFDB
  9883                           fsr2h	equ	0xFDA
  9884                           fsr2l	equ	0xFD9
  9885                           status	equ	0xFD8
  9886                           
  9887 ;; *************** function _TMR0_ISR *****************
  9888 ;; Defined at:
  9889 ;;		line 128 in file "mcc_generated_files/tmr0.c"
  9890 ;; Parameters:    Size  Location     Type
  9891 ;;		None
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;		None
  9894 ;; Return value:  Size  Location     Type
  9895 ;;		None               void
  9896 ;; Registers used:
  9897 ;;		wreg, status,2, status,0, cstack
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9907 ;;Total ram usage:        0 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    5
  9910 ;; This function calls:
  9911 ;;		_CheckButtons
  9912 ;; This function is called by:
  9913 ;;		_INTERRUPT_InterruptManagerLow
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           	psect	text59
  9918  002578                     __ptext59:
  9919                           	opt stack 0
  9920  002578                     _TMR0_ISR:
  9921                           	opt stack 19
  9922                           
  9923                           ;tmr0.c: 132: INTCONbits.TMR0IF = 0;
  9924                           
  9925                           ;incstack = 0
  9926  002578  94F2               	bcf	intcon,2,c	;volatile
  9927                           
  9928                           ;tmr0.c: 135: TMR0L = timer0ReloadVal8bit;
  9929  00257A  C01D  FFD6         	movff	_timer0ReloadVal8bit,4054	;volatile
  9930                           
  9931                           ;tmr0.c: 139: if (tmrCount)
  9932  00257E  501E               	movf	_tmrCount,w,c
  9933  002580  A4D8               	btfss	status,2,c
  9934                           
  9935                           ;tmr0.c: 140: {
  9936                           ;tmr0.c: 141: tmrCount--;
  9937  002582  061E               	decf	_tmrCount,f,c
  9938                           
  9939                           ;tmr0.c: 142: }
  9940                           ;tmr0.c: 143: CheckButtons();
  9941  002584  ECF2  F00F         	call	_CheckButtons	;wreg free
  9942  002588  0012               	return	
  9943  00258A                     __end_of_TMR0_ISR:
  9944                           	opt stack 0
  9945                           pclatu	equ	0xFFB
  9946                           pclath	equ	0xFFA
  9947                           tblptru	equ	0xFF8
  9948                           tblptrh	equ	0xFF7
  9949                           tblptrl	equ	0xFF6
  9950                           tablat	equ	0xFF5
  9951                           prodh	equ	0xFF4
  9952                           prodl	equ	0xFF3
  9953                           intcon	equ	0xFF2
  9954                           intcon2	equ	0xFF1
  9955                           postinc0	equ	0xFEE
  9956                           fsr0h	equ	0xFEA
  9957                           fsr0l	equ	0xFE9
  9958                           wreg	equ	0xFE8
  9959                           fsr1h	equ	0xFE2
  9960                           fsr1l	equ	0xFE1
  9961                           bsr	equ	0xFE0
  9962                           indf2	equ	0xFDF
  9963                           postinc2	equ	0xFDE
  9964                           postdec2	equ	0xFDD
  9965                           plusw2	equ	0xFDB
  9966                           fsr2h	equ	0xFDA
  9967                           fsr2l	equ	0xFD9
  9968                           status	equ	0xFD8
  9969                           
  9970 ;; *************** function _CheckButtons *****************
  9971 ;; Defined at:
  9972 ;;		line 78 in file "Buttons.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;		None
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;		None
  9977 ;; Return value:  Size  Location     Type
  9978 ;;		None               void
  9979 ;; Registers used:
  9980 ;;		wreg, status,2
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;Total ram usage:        0 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    4
  9993 ;; This function calls:
  9994 ;;		Nothing
  9995 ;; This function is called by:
  9996 ;;		_TMR0_ISR
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text60
 10001  001FE4                     __ptext60:
 10002                           	opt stack 0
 10003  001FE4                     _CheckButtons:
 10004                           	opt stack 19
 10005                           
 10006                           ;Buttons.c: 81: if(!PORTAbits.RA4)
 10007                           
 10008                           ;incstack = 0
 10009  001FE4  B880               	btfsc	3968,4,c	;volatile
 10010  001FE6  D00C               	goto	i1l3502
 10011                           
 10012                           ;Buttons.c: 82: {
 10013                           ;Buttons.c: 84: if(debCnt1)
 10014  001FE8  5012               	movf	_debCnt1,w,c
 10015  001FEA  B4D8               	btfsc	status,2,c
 10016  001FEC  D005               	goto	i1l3498
 10017                           
 10018                           ;Buttons.c: 85: {
 10019                           ;Buttons.c: 87: if(!--debCnt1)
 10020  001FEE  2E12               	decfsz	_debCnt1,f,c
 10021  001FF0  D00A               	goto	i1l3506
 10022                           
 10023                           ;Buttons.c: 88: {
 10024                           ;Buttons.c: 90: Buttons.But1Pressed = 1;
 10025  001FF2  0100               	movlb	0	; () banked
 10026  001FF4  81B7               	bsf	_Buttons& (0+255),0,b
 10027  001FF6  D006               	goto	L7
 10028  001FF8                     i1l3498:
 10029                           
 10030                           ;Buttons.c: 97: else
 10031                           ;Buttons.c: 98: {
 10032                           ;Buttons.c: 100: debCnt1 = 2;
 10033  001FF8  0E02               	movlw	2
 10034  001FFA  6E12               	movwf	_debCnt1,c
 10035                           
 10036                           ;Buttons.c: 103: TempButtons.But1Pressed = 1;
 10037  001FFC  8010               	bsf	_TempButtons,0,c	;volatile
 10038  001FFE  D003               	goto	i1l3506
 10039  002000                     i1l3502:
 10040                           
 10041                           ;Buttons.c: 107: else
 10042                           ;Buttons.c: 108: {
 10043                           ;Buttons.c: 110: debCnt1 = 0;
 10044  002000  0E00               	movlw	0
 10045  002002  6E12               	movwf	_debCnt1,c
 10046  002004                     L7:
 10047                           
 10048                           ;Buttons.c: 113: TempButtons.But1Pressed = 0;
 10049  002004  9010               	bcf	_TempButtons,0,c	;volatile
 10050  002006                     i1l3506:
 10051                           
 10052                           ;Buttons.c: 114: }
 10053                           ;Buttons.c: 117: if(!PORTBbits.RB0)
 10054  002006  B081               	btfsc	3969,0,c	;volatile
 10055  002008  D00D               	goto	i1l3518
 10056                           
 10057                           ;Buttons.c: 118: {
 10058                           ;Buttons.c: 120: if(debCnt2)
 10059  00200A  5013               	movf	_debCnt2,w,c
 10060  00200C  B4D8               	btfsc	status,2,c
 10061  00200E  D006               	goto	i1l3514
 10062                           
 10063                           ;Buttons.c: 121: {
 10064                           ;Buttons.c: 123: if(!--debCnt2)
 10065  002010  2E13               	decfsz	_debCnt2,f,c
 10066  002012  0012               	return	
 10067                           
 10068                           ;Buttons.c: 124: {
 10069                           ;Buttons.c: 126: Buttons.But2Pressed = 1;
 10070  002014  0100               	movlb	0	; () banked
 10071  002016  83B7               	bsf	_Buttons& (0+255),1,b
 10072                           
 10073                           ;Buttons.c: 129: TempButtons.But2Pressed = 0;
 10074  002018  9210               	bcf	_TempButtons,1,c	;volatile
 10075  00201A  0012               	return	
 10076  00201C                     i1l3514:
 10077                           
 10078                           ;Buttons.c: 133: else
 10079                           ;Buttons.c: 134: {
 10080                           ;Buttons.c: 136: debCnt2 = 2;
 10081  00201C  0E02               	movlw	2
 10082  00201E  6E13               	movwf	_debCnt2,c
 10083                           
 10084                           ;Buttons.c: 139: TempButtons.But2Pressed = 1;
 10085  002020  8210               	bsf	_TempButtons,1,c	;volatile
 10086  002022  0012               	return	
 10087  002024                     i1l3518:
 10088                           
 10089                           ;Buttons.c: 143: else
 10090                           ;Buttons.c: 144: {
 10091                           ;Buttons.c: 146: debCnt2 = 0;
 10092  002024  0E00               	movlw	0
 10093  002026  6E13               	movwf	_debCnt2,c
 10094                           
 10095                           ;Buttons.c: 149: TempButtons.But2Pressed = 0;
 10096  002028  9210               	bcf	_TempButtons,1,c	;volatile
 10097  00202A  0012               	return	
 10098  00202C                     __end_of_CheckButtons:
 10099                           	opt stack 0
 10100                           pclatu	equ	0xFFB
 10101                           pclath	equ	0xFFA
 10102                           tblptru	equ	0xFF8
 10103                           tblptrh	equ	0xFF7
 10104                           tblptrl	equ	0xFF6
 10105                           tablat	equ	0xFF5
 10106                           prodh	equ	0xFF4
 10107                           prodl	equ	0xFF3
 10108                           intcon	equ	0xFF2
 10109                           intcon2	equ	0xFF1
 10110                           postinc0	equ	0xFEE
 10111                           fsr0h	equ	0xFEA
 10112                           fsr0l	equ	0xFE9
 10113                           wreg	equ	0xFE8
 10114                           fsr1h	equ	0xFE2
 10115                           fsr1l	equ	0xFE1
 10116                           bsr	equ	0xFE0
 10117                           indf2	equ	0xFDF
 10118                           postinc2	equ	0xFDE
 10119                           postdec2	equ	0xFDD
 10120                           plusw2	equ	0xFDB
 10121                           fsr2h	equ	0xFDA
 10122                           fsr2l	equ	0xFD9
 10123                           status	equ	0xFD8
 10124                           
 10125 ;; *************** function _I2C1_ISR *****************
 10126 ;; Defined at:
 10127 ;;		line 234 in file "mcc_generated_files/i2c1.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;		None
 10130 ;; Auto vars:     Size  Location     Type
 10131 ;;		None
 10132 ;; Return value:  Size  Location     Type
 10133 ;;		None               void
 10134 ;; Registers used:
 10135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10136 ;; Tracked objects:
 10137 ;;		On entry : 0/0
 10138 ;;		On exit  : 0/0
 10139 ;;		Unchanged: 0/0
 10140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10143 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;Total ram usage:        3 bytes
 10146 ;; Hardware stack levels used:    1
 10147 ;; Hardware stack levels required when called:    5
 10148 ;; This function calls:
 10149 ;;		_I2C1_FunctionComplete
 10150 ;;		_I2C1_Stop
 10151 ;; This function is called by:
 10152 ;;		_INTERRUPT_InterruptManagerLow
 10153 ;; This function uses a non-reentrant model
 10154 ;;
 10155                           
 10156                           	psect	text61
 10157  00124E                     __ptext61:
 10158                           	opt stack 0
 10159  00124E                     _I2C1_ISR:
 10160                           	opt stack 19
 10161                           
 10162                           ;i2c1.c: 237: static uint8_t *pi2c_buf_ptr;
 10163                           ;i2c1.c: 238: static uint16_t i2c_address = 0;
 10164                           ;i2c1.c: 239: static uint8_t i2c_bytes_left = 0;
 10165                           ;i2c1.c: 240: static uint8_t i2c_10bit_address_restart = 0;
 10166                           ;i2c1.c: 242: PIR1bits.SSP1IF = 0;
 10167                           
 10168                           ;incstack = 0
 10169  00124E  969E               	bcf	3998,3,c	;volatile
 10170                           
 10171                           ;i2c1.c: 246: if(SSP1CON1bits.WCOL)
 10172  001250  AEC6               	btfss	4038,7,c	;volatile
 10173  001252  D11C               	goto	i1l4214
 10174                           
 10175                           ;i2c1.c: 247: {
 10176                           ;i2c1.c: 249: SSP1CON1bits.WCOL = 0;
 10177  001254  9EC6               	bcf	4038,7,c	;volatile
 10178                           
 10179                           ;i2c1.c: 250: i2c1_state = S_MASTER_IDLE;
 10180  001256  0E00               	movlw	0
 10181  001258  6E19               	movwf	_i2c1_state,c
 10182                           
 10183                           ;i2c1.c: 251: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 10184  00125A  EE20 F003          	lfsr	2,3
 10185  00125E  500A               	movf	_p_i2c1_current,w,c
 10186  001260  26D9               	addwf	fsr2l,f,c
 10187  001262  500B               	movf	_p_i2c1_current+1,w,c
 10188  001264  22DA               	addwfc	fsr2h,f,c
 10189  001266  CFDE F024          	movff	postinc2,??_I2C1_ISR
 10190  00126A  CFDD F025          	movff	postdec2,??_I2C1_ISR+1
 10191  00126E  C024  FFD9         	movff	??_I2C1_ISR,fsr2l
 10192  001272  C025  FFDA         	movff	??_I2C1_ISR+1,fsr2h
 10193  001276  0E01               	movlw	1
 10194  001278  6EDF               	movwf	indf2,c
 10195                           
 10196                           ;i2c1.c: 254: p_i2c1_current = (0);
 10197  00127A  0E00               	movlw	0
 10198  00127C  6E0B               	movwf	_p_i2c1_current+1,c
 10199  00127E  0E00               	movlw	0
 10200  001280  6E0A               	movwf	_p_i2c1_current,c
 10201  001282  0012               	return	
 10202  001284                     i1l389:
 10203                           
 10204                           ;i2c1.c: 264: if(i2c1_object.trStatus.s.empty != 1)
 10205  001284  0100               	movlb	0	; () banked
 10206  001286  B3E1               	btfsc	(_i2c1_object+4)& (0+255),1,b
 10207  001288  0012               	return	
 10208                           
 10209                           ; BSR set to: 0
 10210                           ;i2c1.c: 265: {
 10211                           ;i2c1.c: 267: p_i2c1_current = i2c1_object.pTrHead;
 10212  00128A  0100               	movlb	0	; () banked
 10213  00128C  C0E0  F00B         	movff	_i2c1_object+3,_p_i2c1_current+1
 10214  001290  0100               	movlb	0	; () banked
 10215  001292  C0DF  F00A         	movff	_i2c1_object+2,_p_i2c1_current
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;i2c1.c: 268: i2c1_trb_count = i2c1_object.pTrHead->count;
 10219  001296  C0DF  FFD9         	movff	_i2c1_object+2,fsr2l
 10220  00129A  C0E0  FFDA         	movff	_i2c1_object+3,fsr2h
 10221  00129E  50DF               	movf	indf2,w,c
 10222  0012A0  6E1A               	movwf	_i2c1_trb_count,c
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;i2c1.c: 269: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 10226  0012A2  0100               	movlb	0	; () banked
 10227  0012A4  EE20 F001          	lfsr	2,1
 10228  0012A8  0100               	movlb	0	; () banked
 10229  0012AA  51DF               	movf	(_i2c1_object+2)& (0+255),w,b
 10230  0012AC  26D9               	addwf	fsr2l,f,c
 10231  0012AE  0100               	movlb	0	; () banked
 10232  0012B0  51E0               	movf	(_i2c1_object+3)& (0+255),w,b
 10233  0012B2  22DA               	addwfc	fsr2h,f,c
 10234  0012B4  CFDE F00C          	movff	postinc2,_p_i2c1_trb_current
 10235  0012B8  CFDD F00D          	movff	postdec2,_p_i2c1_trb_current+1
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;i2c1.c: 271: i2c1_object.pTrHead++;
 10239  0012BC  0E05               	movlw	5
 10240  0012BE  0100               	movlb	0	; () banked
 10241  0012C0  27DF               	addwf	(_i2c1_object+2)& (0+255),f,b
 10242  0012C2  0E00               	movlw	0
 10243  0012C4  0100               	movlb	0	; () banked
 10244  0012C6  23E0               	addwfc	(_i2c1_object+3)& (0+255),f,b
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;i2c1.c: 274: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 10248  0012C8  0EB7               	movlw	low (_i2c1_tr_queue+5)
 10249  0012CA  6E24               	movwf	??_I2C1_ISR& (0+255),c
 10250  0012CC  0E00               	movlw	high (_i2c1_tr_queue+5)
 10251  0012CE  6E25               	movwf	(??_I2C1_ISR+1)& (0+255),c
 10252  0012D0  0100               	movlb	0	; () banked
 10253  0012D2  EE20  F0DF         	lfsr	2,_i2c1_object+2
 10254  0012D6  52DE               	movf	postinc2,f,c
 10255  0012D8  5025               	movf	??_I2C1_ISR+1,w,c
 10256  0012DA  18DD               	xorwf	postdec2,w,c
 10257  0012DC  C024  FFE8         	movff	??_I2C1_ISR,wreg
 10258  0012E0  B4D8               	btfsc	status,2,c
 10259  0012E2  18DF               	xorwf	indf2,w,c
 10260  0012E4  A4D8               	btfss	status,2,c
 10261  0012E6  D008               	goto	i1l4104
 10262                           
 10263                           ; BSR set to: 0
 10264                           ;i2c1.c: 275: {
 10265                           ;i2c1.c: 277: i2c1_object.pTrHead = i2c1_tr_queue;
 10266  0012E8  0100               	movlb	0	; () banked
 10267  0012EA  0E00               	movlw	high _i2c1_tr_queue
 10268  0012EC  0100               	movlb	0	; () banked
 10269  0012EE  6FE0               	movwf	(_i2c1_object+3)& (0+255),b
 10270  0012F0  0100               	movlb	0	; () banked
 10271  0012F2  0EB2               	movlw	low _i2c1_tr_queue
 10272  0012F4  0100               	movlb	0	; () banked
 10273  0012F6  6FDF               	movwf	(_i2c1_object+2)& (0+255),b
 10274  0012F8                     i1l4104:
 10275                           
 10276                           ; BSR set to: 0
 10277                           ;i2c1.c: 278: }
 10278                           ;i2c1.c: 282: i2c1_object.trStatus.s.full = 0;
 10279  0012F8  0100               	movlb	0	; () banked
 10280  0012FA  91E1               	bcf	(_i2c1_object+4)& (0+255),0,b
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;i2c1.c: 285: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 10284  0012FC  0100               	movlb	0	; () banked
 10285  0012FE  EE20  F0DF         	lfsr	2,_i2c1_object+2
 10286  001302  0100               	movlb	0	; () banked
 10287  001304  52DE               	movf	postinc2,f,c
 10288  001306  0100               	movlb	0	; () banked
 10289  001308  51DE               	movf	(_i2c1_object+1)& (0+255),w,b
 10290  00130A  18DD               	xorwf	postdec2,w,c
 10291  00130C  0100               	movlb	0	; () banked
 10292  00130E  C0DD  FFE8         	movff	_i2c1_object,wreg
 10293  001312  B4D8               	btfsc	status,2,c
 10294  001314  18DF               	xorwf	indf2,w,c
 10295  001316  A4D8               	btfss	status,2,c
 10296  001318  D002               	goto	i1l392
 10297                           
 10298                           ; BSR set to: 0
 10299                           ;i2c1.c: 286: {
 10300                           ;i2c1.c: 288: i2c1_object.trStatus.s.empty = 1;
 10301  00131A  0100               	movlb	0	; () banked
 10302  00131C  83E1               	bsf	(_i2c1_object+4)& (0+255),1,b
 10303  00131E                     i1l392:
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;i2c1.c: 289: }
 10307                           ;i2c1.c: 292: SSP1CON2bits.SEN = 1;
 10308  00131E  80C5               	bsf	4037,0,c	;volatile
 10309                           
 10310                           ; BSR set to: 0
 10311                           ;i2c1.c: 295: i2c1_state = S_MASTER_SEND_ADDR;
 10312  001320  0E02               	movlw	2
 10313  001322  6E19               	movwf	_i2c1_state,c
 10314  001324  0012               	return	
 10315  001326                     i1l394:
 10316                           
 10317                           ;i2c1.c: 305: SSP1CON2bits.RSEN = 1;
 10318  001326  82C5               	bsf	4037,1,c	;volatile
 10319                           
 10320                           ;i2c1.c: 308: i2c1_state = S_MASTER_SEND_ADDR;
 10321  001328  0E02               	movlw	2
 10322  00132A  6E19               	movwf	_i2c1_state,c
 10323                           
 10324                           ;i2c1.c: 310: break;
 10325  00132C  0012               	return	
 10326  00132E                     i1l395:
 10327                           
 10328                           ;i2c1.c: 314: if(SSP1CON2bits.ACKSTAT)
 10329  00132E  ACC5               	btfss	4037,6,c	;volatile
 10330  001330  D006               	goto	i1l4118
 10331                           
 10332                           ;i2c1.c: 315: {
 10333                           ;i2c1.c: 316: i2c1_object.i2cErrors++;
 10334  001332  0100               	movlb	0	; () banked
 10335  001334  2BE3               	incf	(_i2c1_object+6)& (0+255),f,b
 10336                           
 10337                           ; BSR set to: 0
 10338                           ;i2c1.c: 317: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 10339  001336  0E04               	movlw	4
 10340  001338  EC57  F010         	call	_I2C1_Stop
 10341                           
 10342                           ;i2c1.c: 318: }
 10343  00133C  0012               	return	
 10344  00133E                     i1l4118:
 10345                           
 10346                           ;i2c1.c: 319: else
 10347                           ;i2c1.c: 320: {
 10348                           ;i2c1.c: 322: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 10349  00133E  90D8               	bcf	status,0,c
 10350  001340  3020               	rrcf	I2C1_ISR@i2c_address+1,w,c
 10351  001342  6E25               	movwf	(??_I2C1_ISR+1)& (0+255),c
 10352  001344  301F               	rrcf	I2C1_ISR@i2c_address,w,c
 10353  001346  6E24               	movwf	??_I2C1_ISR& (0+255),c
 10354  001348  5024               	movf	??_I2C1_ISR,w,c
 10355  00134A  6EC9               	movwf	4041,c	;volatile
 10356                           
 10357                           ;i2c1.c: 325: if(i2c_address & 0x01)
 10358  00134C  A01F               	btfss	I2C1_ISR@i2c_address,0,c
 10359  00134E  D003               	goto	i1l4124
 10360                           
 10361                           ;i2c1.c: 326: {
 10362                           ;i2c1.c: 329: i2c1_state = S_MASTER_10BIT_RESTART;
 10363  001350  0E0B               	movlw	11
 10364  001352  6E19               	movwf	_i2c1_state,c
 10365                           
 10366                           ;i2c1.c: 330: }
 10367  001354  0012               	return	
 10368  001356                     i1l4124:
 10369                           
 10370                           ;i2c1.c: 331: else
 10371                           ;i2c1.c: 332: {
 10372                           ;i2c1.c: 334: i2c1_state = S_MASTER_SEND_DATA;
 10373  001356  0E03               	movlw	3
 10374  001358  6E19               	movwf	_i2c1_state,c
 10375  00135A  0012               	return	
 10376  00135C                     i1l400:
 10377                           
 10378                           ;i2c1.c: 342: if(SSP1CON2bits.ACKSTAT)
 10379  00135C  ACC5               	btfss	4037,6,c	;volatile
 10380  00135E  D006               	goto	i1l401
 10381                           
 10382                           ;i2c1.c: 343: {
 10383                           ;i2c1.c: 344: i2c1_object.i2cErrors++;
 10384  001360  0100               	movlb	0	; () banked
 10385  001362  2BE3               	incf	(_i2c1_object+6)& (0+255),f,b
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;i2c1.c: 345: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 10389  001364  0E04               	movlw	4
 10390  001366  EC57  F010         	call	_I2C1_Stop
 10391                           
 10392                           ;i2c1.c: 346: }
 10393  00136A  0012               	return	
 10394  00136C                     i1l401:
 10395                           
 10396                           ;i2c1.c: 347: else
 10397                           ;i2c1.c: 348: {
 10398                           ;i2c1.c: 351: SSP1CON2bits.RSEN = 1;
 10399  00136C  82C5               	bsf	4037,1,c	;volatile
 10400                           
 10401                           ;i2c1.c: 355: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 10402  00136E  C020  F024         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR
 10403  001372  C024  F025         	movff	??_I2C1_ISR,??_I2C1_ISR+1
 10404  001376  6A26               	clrf	(??_I2C1_ISR+2)& (0+255),c
 10405  001378  0E06               	movlw	6
 10406  00137A  1625               	andwf	??_I2C1_ISR+1,f,c
 10407  00137C  0E00               	movlw	0
 10408  00137E  1626               	andwf	??_I2C1_ISR+2,f,c
 10409  001380  0EF0               	movlw	240
 10410  001382  1025               	iorwf	??_I2C1_ISR+1,w,c
 10411  001384  6E1F               	movwf	I2C1_ISR@i2c_address,c
 10412  001386  5026               	movf	??_I2C1_ISR+2,w,c
 10413  001388  6E20               	movwf	I2C1_ISR@i2c_address+1,c
 10414                           
 10415                           ;i2c1.c: 358: i2c_address |= 0x0001;
 10416  00138A  801F               	bsf	I2C1_ISR@i2c_address,0,c
 10417                           
 10418                           ;i2c1.c: 361: i2c_10bit_address_restart = 1;
 10419  00138C  0E01               	movlw	1
 10420  00138E  6E0E               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 10421                           
 10422                           ;i2c1.c: 364: i2c1_state = S_MASTER_SEND_ADDR;
 10423  001390  0E02               	movlw	2
 10424  001392  6E19               	movwf	_i2c1_state,c
 10425  001394  0012               	return	
 10426  001396                     i1l4138:
 10427                           
 10428                           ;i2c1.c: 382: if(i2c_10bit_address_restart != 1)
 10429  001396  040E               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 10430  001398  B4D8               	btfsc	status,2,c
 10431  00139A  D01A               	goto	i1l405
 10432                           
 10433                           ;i2c1.c: 383: {
 10434                           ;i2c1.c: 385: i2c_address = p_i2c1_trb_current->address;
 10435  00139C  C00C  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 10436  0013A0  C00D  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 10437  0013A4  CFDE F01F          	movff	postinc2,I2C1_ISR@i2c_address
 10438  0013A8  CFDD F020          	movff	postdec2,I2C1_ISR@i2c_address+1
 10439                           
 10440                           ;i2c1.c: 386: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 10441  0013AC  EE20 F003          	lfsr	2,3
 10442  0013B0  500C               	movf	_p_i2c1_trb_current,w,c
 10443  0013B2  26D9               	addwf	fsr2l,f,c
 10444  0013B4  500D               	movf	_p_i2c1_trb_current+1,w,c
 10445  0013B6  22DA               	addwfc	fsr2h,f,c
 10446  0013B8  CFDE F008          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 10447  0013BC  CFDD F009          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 10448                           
 10449                           ;i2c1.c: 387: i2c_bytes_left = p_i2c1_trb_current->length;
 10450  0013C0  EE20 F002          	lfsr	2,2
 10451  0013C4  500C               	movf	_p_i2c1_trb_current,w,c
 10452  0013C6  26D9               	addwf	fsr2l,f,c
 10453  0013C8  500D               	movf	_p_i2c1_trb_current+1,w,c
 10454  0013CA  22DA               	addwfc	fsr2h,f,c
 10455  0013CC  50DF               	movf	indf2,w,c
 10456  0013CE  6E0F               	movwf	I2C1_ISR@i2c_bytes_left,c
 10457  0013D0                     i1l405:
 10458                           
 10459                           ;i2c1.c: 410: else
 10460                           ;i2c1.c: 411: {
 10461                           ;i2c1.c: 413: SSP1BUF = i2c_address;
 10462  0013D0  C01F  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
 10463                           
 10464                           ;i2c1.c: 414: if(i2c_address & 0x01)
 10465  0013D4  A01F               	btfss	I2C1_ISR@i2c_address,0,c
 10466  0013D6  D003               	goto	i1l4158
 10467                           
 10468                           ;i2c1.c: 415: {
 10469                           ;i2c1.c: 417: i2c1_state = S_MASTER_ACK_ADDR;
 10470  0013D8  0E05               	movlw	5
 10471  0013DA  6E19               	movwf	_i2c1_state,c
 10472                           
 10473                           ;i2c1.c: 418: }
 10474  0013DC  0012               	return	
 10475  0013DE                     i1l4158:
 10476                           
 10477                           ;i2c1.c: 419: else
 10478                           ;i2c1.c: 420: {
 10479                           ;i2c1.c: 422: i2c1_state = S_MASTER_SEND_DATA;
 10480  0013DE  0E03               	movlw	3
 10481  0013E0  6E19               	movwf	_i2c1_state,c
 10482  0013E2  0012               	return	
 10483  0013E4                     i1l411:
 10484                           
 10485                           ;i2c1.c: 430: if(SSP1CON2bits.ACKSTAT)
 10486  0013E4  ACC5               	btfss	4037,6,c	;volatile
 10487  0013E6  D007               	goto	i1l4166
 10488                           
 10489                           ;i2c1.c: 431: {
 10490                           ;i2c1.c: 433: i2c1_object.i2cErrors++;
 10491  0013E8  0100               	movlb	0	; () banked
 10492  0013EA  2BE3               	incf	(_i2c1_object+6)& (0+255),f,b
 10493                           
 10494                           ; BSR set to: 0
 10495                           ;i2c1.c: 436: SSP1CON2bits.ACKSTAT = 0;
 10496  0013EC  9CC5               	bcf	4037,6,c	;volatile
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;i2c1.c: 439: I2C1_Stop(I2C1_DATA_NO_ACK);
 10500  0013EE  0E05               	movlw	5
 10501  0013F0  EC57  F010         	call	_I2C1_Stop
 10502                           
 10503                           ;i2c1.c: 441: }
 10504  0013F4  0012               	return	
 10505  0013F6                     i1l4166:
 10506                           
 10507                           ;i2c1.c: 442: else
 10508                           ;i2c1.c: 443: {
 10509                           ;i2c1.c: 445: if(i2c_bytes_left-- == 0U)
 10510  0013F6  060F               	decf	I2C1_ISR@i2c_bytes_left,f,c
 10511  0013F8  280F               	incf	I2C1_ISR@i2c_bytes_left& (0+255),w,c
 10512  0013FA  A4D8               	btfss	status,2,c
 10513  0013FC  D00E               	goto	i1l4176
 10514                           
 10515                           ;i2c1.c: 446: {
 10516                           ;i2c1.c: 450: p_i2c1_trb_current++;
 10517  0013FE  0E05               	movlw	5
 10518  001400  260C               	addwf	_p_i2c1_trb_current,f,c
 10519  001402  0E00               	movlw	0
 10520  001404  220D               	addwfc	_p_i2c1_trb_current+1,f,c
 10521                           
 10522                           ;i2c1.c: 453: if(--i2c1_trb_count == 0)
 10523  001406  2E1A               	decfsz	_i2c1_trb_count,f,c
 10524  001408  D004               	goto	i1l415
 10525                           
 10526                           ;i2c1.c: 454: {
 10527                           ;i2c1.c: 455: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 10528  00140A  0E00               	movlw	0
 10529  00140C  EC57  F010         	call	_I2C1_Stop
 10530                           
 10531                           ;i2c1.c: 456: }
 10532  001410  0012               	return	
 10533  001412                     i1l415:
 10534                           
 10535                           ;i2c1.c: 457: else
 10536                           ;i2c1.c: 458: {
 10537                           ;i2c1.c: 465: SSP1CON2bits.RSEN = 1;
 10538  001412  82C5               	bsf	4037,1,c	;volatile
 10539                           
 10540                           ;i2c1.c: 468: i2c1_state = S_MASTER_SEND_ADDR;
 10541  001414  0E02               	movlw	2
 10542  001416  6E19               	movwf	_i2c1_state,c
 10543  001418  0012               	return	
 10544  00141A                     i1l4176:
 10545                           
 10546                           ;i2c1.c: 472: else
 10547                           ;i2c1.c: 473: {
 10548                           ;i2c1.c: 475: SSP1BUF = *pi2c_buf_ptr++;
 10549  00141A  C008  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 10550  00141E  C009  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 10551  001422  50DF               	movf	indf2,w,c
 10552  001424  6EC9               	movwf	4041,c	;volatile
 10553  001426  4A08               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
 10554  001428  2A09               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
 10555  00142A  0012               	return	
 10556  00142C                     i1l418:
 10557                           
 10558                           ;i2c1.c: 483: if(SSP1CON2bits.ACKSTAT)
 10559  00142C  ACC5               	btfss	4037,6,c	;volatile
 10560  00142E  D007               	goto	i1l419
 10561                           
 10562                           ;i2c1.c: 484: {
 10563                           ;i2c1.c: 487: i2c1_object.i2cErrors++;
 10564  001430  0100               	movlb	0	; () banked
 10565  001432  2BE3               	incf	(_i2c1_object+6)& (0+255),f,b
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;i2c1.c: 490: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 10569  001434  0E04               	movlw	4
 10570  001436  EC57  F010         	call	_I2C1_Stop
 10571                           
 10572                           ;i2c1.c: 493: SSP1CON2bits.ACKSTAT = 0;
 10573  00143A  9CC5               	bcf	4037,6,c	;volatile
 10574                           
 10575                           ;i2c1.c: 494: }
 10576  00143C  0012               	return	
 10577  00143E                     i1l419:
 10578                           
 10579                           ;i2c1.c: 495: else
 10580                           ;i2c1.c: 496: {
 10581                           ;i2c1.c: 497: SSP1CON2bits.RCEN = 1;
 10582  00143E  86C5               	bsf	4037,3,c	;volatile
 10583                           
 10584                           ;i2c1.c: 498: i2c1_state = S_MASTER_ACK_RCV_DATA;
 10585  001440  0E08               	movlw	8
 10586  001442  6E19               	movwf	_i2c1_state,c
 10587  001444  0012               	return	
 10588  001446                     i1l4188:
 10589                           
 10590                           ;i2c1.c: 507: i2c1_state = S_MASTER_ACK_RCV_DATA;
 10591  001446  0E08               	movlw	8
 10592  001448  6E19               	movwf	_i2c1_state,c
 10593                           
 10594                           ;i2c1.c: 510: SSP1CON2bits.RCEN = 1;
 10595  00144A  86C5               	bsf	4037,3,c	;volatile
 10596                           
 10597                           ;i2c1.c: 512: break;
 10598  00144C  0012               	return	
 10599  00144E                     i1l4192:
 10600                           
 10601                           ;i2c1.c: 517: *pi2c_buf_ptr++ = SSP1BUF;
 10602  00144E  C008  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 10603  001452  C009  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 10604  001456  CFC9 FFDF          	movff	4041,indf2	;volatile
 10605  00145A  4A08               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
 10606  00145C  2A09               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
 10607                           
 10608                           ;i2c1.c: 520: if(--i2c_bytes_left)
 10609  00145E  0E01               	movlw	1
 10610  001460  5E0F               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 10611  001462  B4D8               	btfsc	status,2,c
 10612  001464  D004               	goto	i1l423
 10613                           
 10614                           ;i2c1.c: 521: {
 10615                           ;i2c1.c: 527: SSP1CON2bits.ACKDT = 0;
 10616  001466  9AC5               	bcf	4037,5,c	;volatile
 10617                           
 10618                           ;i2c1.c: 530: i2c1_state = S_MASTER_RCV_DATA;
 10619  001468  0E06               	movlw	6
 10620  00146A  6E19               	movwf	_i2c1_state,c
 10621                           
 10622                           ;i2c1.c: 531: }
 10623  00146C  D003               	goto	i1l4204
 10624  00146E                     i1l423:
 10625                           
 10626                           ;i2c1.c: 532: else
 10627                           ;i2c1.c: 533: {
 10628                           ;i2c1.c: 537: SSP1CON2bits.ACKDT = 1;
 10629  00146E  8AC5               	bsf	4037,5,c	;volatile
 10630                           
 10631                           ;i2c1.c: 539: I2C1_FunctionComplete();
 10632  001470  EC87  F012         	call	_I2C1_FunctionComplete	;wreg free
 10633  001474                     i1l4204:
 10634                           
 10635                           ;i2c1.c: 540: }
 10636                           ;i2c1.c: 543: SSP1CON2bits.ACKEN = 1;
 10637  001474  88C5               	bsf	4037,4,c	;volatile
 10638                           
 10639                           ;i2c1.c: 544: break;
 10640  001476  0012               	return	
 10641  001478                     i1l4206:
 10642                           
 10643                           ;i2c1.c: 547: case S_MASTER_SEND_STOP:
 10644                           ;i2c1.c: 550: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 10645  001478  0E00               	movlw	0
 10646  00147A  EC57  F010         	call	_I2C1_Stop
 10647                           
 10648                           ;i2c1.c: 551: break;
 10649  00147E  0012               	return	
 10650  001480                     i1l4208:
 10651                           
 10652                           ;i2c1.c: 557: i2c1_object.i2cErrors++;
 10653  001480  0100               	movlb	0	; () banked
 10654  001482  2BE3               	incf	(_i2c1_object+6)& (0+255),f,b
 10655                           
 10656                           ; BSR set to: 0
 10657                           ;i2c1.c: 558: I2C1_Stop(I2C1_LOST_STATE);
 10658  001484  0E06               	movlw	6
 10659  001486  EC57  F010         	call	_I2C1_Stop
 10660                           
 10661                           ;i2c1.c: 559: break;
 10662  00148A  0012               	return	
 10663  00148C                     i1l4214:
 10664  00148C  5019               	movf	_i2c1_state,w,c
 10665                           
 10666                           ; Switch size 1, requested type "space"
 10667                           ; Number of cases is 11, Range of values is 0 to 11
 10668                           ; switch strategies available:
 10669                           ; Name         Instructions Cycles
 10670                           ; simple_byte           34    18 (average)
 10671                           ;	Chosen strategy is simple_byte
 10672  00148E  0A00               	xorlw	0	; case 0
 10673  001490  B4D8               	btfsc	status,2,c
 10674  001492  D6F8               	goto	i1l389
 10675  001494  0A01               	xorlw	1	; case 1
 10676  001496  B4D8               	btfsc	status,2,c
 10677  001498  D746               	goto	i1l394
 10678  00149A  0A03               	xorlw	3	; case 2
 10679  00149C  B4D8               	btfsc	status,2,c
 10680  00149E  D77B               	goto	i1l4138
 10681  0014A0  0A01               	xorlw	1	; case 3
 10682  0014A2  B4D8               	btfsc	status,2,c
 10683  0014A4  D79F               	goto	i1l411
 10684  0014A6  0A07               	xorlw	7	; case 4
 10685  0014A8  B4D8               	btfsc	status,2,c
 10686  0014AA  D7E6               	goto	i1l4206
 10687  0014AC  0A01               	xorlw	1	; case 5
 10688  0014AE  B4D8               	btfsc	status,2,c
 10689  0014B0  D7BD               	goto	i1l418
 10690  0014B2  0A03               	xorlw	3	; case 6
 10691  0014B4  B4D8               	btfsc	status,2,c
 10692  0014B6  D7C7               	goto	i1l4188
 10693  0014B8  0A01               	xorlw	1	; case 7
 10694  0014BA  B4D8               	btfsc	status,2,c
 10695  0014BC  D7DD               	goto	i1l4206
 10696  0014BE  0A0F               	xorlw	15	; case 8
 10697  0014C0  B4D8               	btfsc	status,2,c
 10698  0014C2  D7C5               	goto	i1l4192
 10699  0014C4  0A02               	xorlw	2	; case 10
 10700  0014C6  B4D8               	btfsc	status,2,c
 10701  0014C8  D732               	goto	i1l395
 10702  0014CA  0A01               	xorlw	1	; case 11
 10703  0014CC  B4D8               	btfsc	status,2,c
 10704  0014CE  D746               	goto	i1l400
 10705  0014D0  D7D7               	goto	i1l4208
 10706  0014D2                     __end_of_I2C1_ISR:
 10707                           	opt stack 0
 10708                           pclatu	equ	0xFFB
 10709                           pclath	equ	0xFFA
 10710                           tblptru	equ	0xFF8
 10711                           tblptrh	equ	0xFF7
 10712                           tblptrl	equ	0xFF6
 10713                           tablat	equ	0xFF5
 10714                           prodh	equ	0xFF4
 10715                           prodl	equ	0xFF3
 10716                           intcon	equ	0xFF2
 10717                           intcon2	equ	0xFF1
 10718                           postinc0	equ	0xFEE
 10719                           fsr0h	equ	0xFEA
 10720                           fsr0l	equ	0xFE9
 10721                           wreg	equ	0xFE8
 10722                           fsr1h	equ	0xFE2
 10723                           fsr1l	equ	0xFE1
 10724                           bsr	equ	0xFE0
 10725                           indf2	equ	0xFDF
 10726                           postinc2	equ	0xFDE
 10727                           postdec2	equ	0xFDD
 10728                           plusw2	equ	0xFDB
 10729                           fsr2h	equ	0xFDA
 10730                           fsr2l	equ	0xFD9
 10731                           status	equ	0xFD8
 10732                           
 10733 ;; *************** function _I2C1_Stop *****************
 10734 ;; Defined at:
 10735 ;;		line 582 in file "mcc_generated_files/i2c1.c"
 10736 ;; Parameters:    Size  Location     Type
 10737 ;;  completion_c    1    wreg     enum E8851
 10738 ;; Auto vars:     Size  Location     Type
 10739 ;;  completion_c    1    2[COMRAM] enum E8851
 10740 ;; Return value:  Size  Location     Type
 10741 ;;		None               void
 10742 ;; Registers used:
 10743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10744 ;; Tracked objects:
 10745 ;;		On entry : 0/0
 10746 ;;		On exit  : 0/0
 10747 ;;		Unchanged: 0/0
 10748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10752 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10753 ;;Total ram usage:        3 bytes
 10754 ;; Hardware stack levels used:    1
 10755 ;; Hardware stack levels required when called:    4
 10756 ;; This function calls:
 10757 ;;		Nothing
 10758 ;; This function is called by:
 10759 ;;		_I2C1_ISR
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           	psect	text62
 10764  0020AE                     __ptext62:
 10765                           	opt stack 0
 10766  0020AE                     _I2C1_Stop:
 10767                           	opt stack 19
 10768                           
 10769                           ;incstack = 0
 10770                           ;I2C1_Stop@completion_code stored from wreg
 10771  0020AE  6E23               	movwf	I2C1_Stop@completion_code,c
 10772                           
 10773                           ;i2c1.c: 585: SSP1CON2bits.PEN = 1;
 10774  0020B0  84C5               	bsf	4037,2,c	;volatile
 10775                           
 10776                           ;i2c1.c: 588: if (p_i2c1_current->pTrFlag != (0))
 10777  0020B2  EE20 F003          	lfsr	2,3
 10778  0020B6  500A               	movf	_p_i2c1_current,w,c
 10779  0020B8  26D9               	addwf	fsr2l,f,c
 10780  0020BA  500B               	movf	_p_i2c1_current+1,w,c
 10781  0020BC  22DA               	addwfc	fsr2h,f,c
 10782  0020BE  50DE               	movf	postinc2,w,c
 10783  0020C0  10DD               	iorwf	postdec2,w,c
 10784  0020C2  B4D8               	btfsc	status,2,c
 10785  0020C4  D010               	goto	i1l3468
 10786                           
 10787                           ;i2c1.c: 589: {
 10788                           ;i2c1.c: 591: *(p_i2c1_current->pTrFlag) = completion_code;
 10789  0020C6  EE20 F003          	lfsr	2,3
 10790  0020CA  500A               	movf	_p_i2c1_current,w,c
 10791  0020CC  26D9               	addwf	fsr2l,f,c
 10792  0020CE  500B               	movf	_p_i2c1_current+1,w,c
 10793  0020D0  22DA               	addwfc	fsr2h,f,c
 10794  0020D2  CFDE F021          	movff	postinc2,??_I2C1_Stop
 10795  0020D6  CFDD F022          	movff	postdec2,??_I2C1_Stop+1
 10796  0020DA  C021  FFD9         	movff	??_I2C1_Stop,fsr2l
 10797  0020DE  C022  FFDA         	movff	??_I2C1_Stop+1,fsr2h
 10798  0020E2  C023  FFDF         	movff	I2C1_Stop@completion_code,indf2
 10799  0020E6                     i1l3468:
 10800                           
 10801                           ;i2c1.c: 592: }
 10802                           ;i2c1.c: 595: i2c1_state = S_MASTER_IDLE;
 10803  0020E6  0E00               	movlw	0
 10804  0020E8  6E19               	movwf	_i2c1_state,c
 10805  0020EA  0012               	return	
 10806  0020EC                     __end_of_I2C1_Stop:
 10807                           	opt stack 0
 10808                           pclatu	equ	0xFFB
 10809                           pclath	equ	0xFFA
 10810                           tblptru	equ	0xFF8
 10811                           tblptrh	equ	0xFF7
 10812                           tblptrl	equ	0xFF6
 10813                           tablat	equ	0xFF5
 10814                           prodh	equ	0xFF4
 10815                           prodl	equ	0xFF3
 10816                           intcon	equ	0xFF2
 10817                           intcon2	equ	0xFF1
 10818                           postinc0	equ	0xFEE
 10819                           fsr0h	equ	0xFEA
 10820                           fsr0l	equ	0xFE9
 10821                           wreg	equ	0xFE8
 10822                           fsr1h	equ	0xFE2
 10823                           fsr1l	equ	0xFE1
 10824                           bsr	equ	0xFE0
 10825                           indf2	equ	0xFDF
 10826                           postinc2	equ	0xFDE
 10827                           postdec2	equ	0xFDD
 10828                           plusw2	equ	0xFDB
 10829                           fsr2h	equ	0xFDA
 10830                           fsr2l	equ	0xFD9
 10831                           status	equ	0xFD8
 10832                           
 10833 ;; *************** function _I2C1_FunctionComplete *****************
 10834 ;; Defined at:
 10835 ;;		line 564 in file "mcc_generated_files/i2c1.c"
 10836 ;; Parameters:    Size  Location     Type
 10837 ;;		None
 10838 ;; Auto vars:     Size  Location     Type
 10839 ;;		None
 10840 ;; Return value:  Size  Location     Type
 10841 ;;		None               void
 10842 ;; Registers used:
 10843 ;;		wreg, status,2, status,0
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/0
 10846 ;;		On exit  : 0/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10853 ;;Total ram usage:        0 bytes
 10854 ;; Hardware stack levels used:    1
 10855 ;; Hardware stack levels required when called:    4
 10856 ;; This function calls:
 10857 ;;		Nothing
 10858 ;; This function is called by:
 10859 ;;		_I2C1_ISR
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           	psect	text63
 10864  00250E                     __ptext63:
 10865                           	opt stack 0
 10866  00250E                     _I2C1_FunctionComplete:
 10867                           	opt stack 19
 10868                           
 10869                           ;i2c1.c: 568: p_i2c1_trb_current++;
 10870                           
 10871                           ;incstack = 0
 10872  00250E  0E05               	movlw	5
 10873  002510  260C               	addwf	_p_i2c1_trb_current,f,c
 10874  002512  0E00               	movlw	0
 10875  002514  220D               	addwfc	_p_i2c1_trb_current+1,f,c
 10876                           
 10877                           ;i2c1.c: 571: if(--i2c1_trb_count == 0)
 10878  002516  2E1A               	decfsz	_i2c1_trb_count,f,c
 10879  002518  D003               	goto	i1l3476
 10880                           
 10881                           ;i2c1.c: 572: {
 10882                           ;i2c1.c: 573: i2c1_state = S_MASTER_SEND_STOP;
 10883  00251A  0E04               	movlw	4
 10884  00251C  6E19               	movwf	_i2c1_state,c
 10885                           
 10886                           ;i2c1.c: 574: }
 10887  00251E  0012               	return	
 10888  002520                     i1l3476:
 10889                           
 10890                           ;i2c1.c: 575: else
 10891                           ;i2c1.c: 576: {
 10892                           ;i2c1.c: 577: i2c1_state = S_MASTER_RESTART;
 10893  002520  0E01               	movlw	1
 10894  002522  6E19               	movwf	_i2c1_state,c
 10895  002524  0012               	return	
 10896  002526                     __end_of_I2C1_FunctionComplete:
 10897                           	opt stack 0
 10898                           pclatu	equ	0xFFB
 10899                           pclath	equ	0xFFA
 10900                           tblptru	equ	0xFF8
 10901                           tblptrh	equ	0xFF7
 10902                           tblptrl	equ	0xFF6
 10903                           tablat	equ	0xFF5
 10904                           prodh	equ	0xFF4
 10905                           prodl	equ	0xFF3
 10906                           intcon	equ	0xFF2
 10907                           intcon2	equ	0xFF1
 10908                           postinc0	equ	0xFEE
 10909                           fsr0h	equ	0xFEA
 10910                           fsr0l	equ	0xFE9
 10911                           wreg	equ	0xFE8
 10912                           fsr1h	equ	0xFE2
 10913                           fsr1l	equ	0xFE1
 10914                           bsr	equ	0xFE0
 10915                           indf2	equ	0xFDF
 10916                           postinc2	equ	0xFDE
 10917                           postdec2	equ	0xFDD
 10918                           plusw2	equ	0xFDB
 10919                           fsr2h	equ	0xFDA
 10920                           fsr2l	equ	0xFD9
 10921                           status	equ	0xFD8
 10922                           
 10923 ;; *************** function _I2C1_BusCollisionISR *****************
 10924 ;; Defined at:
 10925 ;;		line 729 in file "mcc_generated_files/i2c1.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;		None
 10928 ;; Auto vars:     Size  Location     Type
 10929 ;;		None
 10930 ;; Return value:  Size  Location     Type
 10931 ;;		None               void
 10932 ;; Registers used:
 10933 ;;		None
 10934 ;; Tracked objects:
 10935 ;;		On entry : 0/0
 10936 ;;		On exit  : 0/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10943 ;;Total ram usage:        0 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; Hardware stack levels required when called:    4
 10946 ;; This function calls:
 10947 ;;		Nothing
 10948 ;; This function is called by:
 10949 ;;		_INTERRUPT_InterruptManagerLow
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           	psect	text64
 10954  0025F2                     __ptext64:
 10955                           	opt stack 0
 10956  0025F2                     _I2C1_BusCollisionISR:
 10957                           	opt stack 20
 10958                           
 10959                           ;incstack = 0
 10960  0025F2  0012               	return	
 10961  0025F4                     __end_of_I2C1_BusCollisionISR:
 10962                           	opt stack 0
 10963                           pclatu	equ	0xFFB
 10964                           pclath	equ	0xFFA
 10965                           tblptru	equ	0xFF8
 10966                           tblptrh	equ	0xFF7
 10967                           tblptrl	equ	0xFF6
 10968                           tablat	equ	0xFF5
 10969                           prodh	equ	0xFF4
 10970                           prodl	equ	0xFF3
 10971                           intcon	equ	0xFF2
 10972                           intcon2	equ	0xFF1
 10973                           postinc0	equ	0xFEE
 10974                           fsr0h	equ	0xFEA
 10975                           fsr0l	equ	0xFE9
 10976                           wreg	equ	0xFE8
 10977                           fsr1h	equ	0xFE2
 10978                           fsr1l	equ	0xFE1
 10979                           bsr	equ	0xFE0
 10980                           indf2	equ	0xFDF
 10981                           postinc2	equ	0xFDE
 10982                           postdec2	equ	0xFDD
 10983                           plusw2	equ	0xFDB
 10984                           fsr2h	equ	0xFDA
 10985                           fsr2l	equ	0xFD9
 10986                           status	equ	0xFD8
 10987                           
 10988 ;; *************** function _EUSART1_Transmit_ISR *****************
 10989 ;; Defined at:
 10990 ;;		line 173 in file "mcc_generated_files/eusart1.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;		None
 10993 ;; Auto vars:     Size  Location     Type
 10994 ;;		None
 10995 ;; Return value:  Size  Location     Type
 10996 ;;		None               void
 10997 ;; Registers used:
 10998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10999 ;; Tracked objects:
 11000 ;;		On entry : 0/0
 11001 ;;		On exit  : 0/0
 11002 ;;		Unchanged: 0/0
 11003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11008 ;;Total ram usage:        0 bytes
 11009 ;; Hardware stack levels used:    1
 11010 ;; Hardware stack levels required when called:    4
 11011 ;; This function calls:
 11012 ;;		Nothing
 11013 ;; This function is called by:
 11014 ;;		_INTERRUPT_InterruptManagerLow
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           	psect	text65
 11019  002196                     __ptext65:
 11020                           	opt stack 0
 11021  002196                     _EUSART1_Transmit_ISR:
 11022                           	opt stack 20
 11023                           
 11024                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11025                           
 11026                           ;incstack = 0
 11027  002196  0E40               	movlw	64
 11028  002198  5C43               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
 11029  00219A  B0D8               	btfsc	status,0,c
 11030  00219C  D014               	goto	i1l321
 11031                           
 11032                           ;eusart1.c: 178: {
 11033                           ;eusart1.c: 179: TX1REG = eusart1TxBuffer[eusart1TxTail++];
 11034  00219E  5018               	movf	_eusart1TxTail,w,c
 11035  0021A0  0D01               	mullw	1
 11036  0021A2  0100               	movlb	0	; () banked
 11037  0021A4  0E60               	movlw	low _eusart1TxBuffer
 11038  0021A6  24F3               	addwf	prodl,w,c
 11039  0021A8  6ED9               	movwf	fsr2l,c
 11040  0021AA  0100               	movlb	0	; () banked
 11041  0021AC  0E00               	movlw	high _eusart1TxBuffer
 11042  0021AE  20F4               	addwfc	prodh,w,c
 11043  0021B0  6EDA               	movwf	fsr2h,c
 11044  0021B2  50DF               	movf	indf2,w,c
 11045  0021B4  6EAD               	movwf	4013,c	;volatile
 11046                           
 11047                           ; BSR set to: 0
 11048  0021B6  2A18               	incf	_eusart1TxTail,f,c
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11052  0021B8  0E3F               	movlw	63
 11053  0021BA  6418               	cpfsgt	_eusart1TxTail,c
 11054  0021BC  D002               	goto	i1l4226
 11055                           
 11056                           ; BSR set to: 0
 11057                           ;eusart1.c: 181: {
 11058                           ;eusart1.c: 182: eusart1TxTail = 0;
 11059  0021BE  0E00               	movlw	0
 11060  0021C0  6E18               	movwf	_eusart1TxTail,c
 11061  0021C2                     i1l4226:
 11062                           
 11063                           ; BSR set to: 0
 11064                           ;eusart1.c: 183: }
 11065                           ;eusart1.c: 184: eusart1TxBufferRemaining++;
 11066  0021C2  2A43               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 11067                           
 11068                           ;eusart1.c: 185: }
 11069  0021C4  0012               	return	
 11070  0021C6                     i1l321:
 11071                           
 11072                           ;eusart1.c: 186: else
 11073                           ;eusart1.c: 187: {
 11074                           ;eusart1.c: 188: PIE1bits.TX1IE = 0;
 11075  0021C6  989D               	bcf	3997,4,c	;volatile
 11076  0021C8  0012               	return	
 11077  0021CA                     __end_of_EUSART1_Transmit_ISR:
 11078                           	opt stack 0
 11079                           pclatu	equ	0xFFB
 11080                           pclath	equ	0xFFA
 11081                           tblptru	equ	0xFF8
 11082                           tblptrh	equ	0xFF7
 11083                           tblptrl	equ	0xFF6
 11084                           tablat	equ	0xFF5
 11085                           prodh	equ	0xFF4
 11086                           prodl	equ	0xFF3
 11087                           intcon	equ	0xFF2
 11088                           intcon2	equ	0xFF1
 11089                           postinc0	equ	0xFEE
 11090                           fsr0h	equ	0xFEA
 11091                           fsr0l	equ	0xFE9
 11092                           wreg	equ	0xFE8
 11093                           fsr1h	equ	0xFE2
 11094                           fsr1l	equ	0xFE1
 11095                           bsr	equ	0xFE0
 11096                           indf2	equ	0xFDF
 11097                           postinc2	equ	0xFDE
 11098                           postdec2	equ	0xFDD
 11099                           plusw2	equ	0xFDB
 11100                           fsr2h	equ	0xFDA
 11101                           fsr2l	equ	0xFD9
 11102                           status	equ	0xFD8
 11103                           
 11104 ;; *************** function _EUSART1_Receive_ISR *****************
 11105 ;; Defined at:
 11106 ;;		line 192 in file "mcc_generated_files/eusart1.c"
 11107 ;; Parameters:    Size  Location     Type
 11108 ;;		None
 11109 ;; Auto vars:     Size  Location     Type
 11110 ;;		None
 11111 ;; Return value:  Size  Location     Type
 11112 ;;		None               void
 11113 ;; Registers used:
 11114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;Total ram usage:        0 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    4
 11127 ;; This function calls:
 11128 ;;		Nothing
 11129 ;; This function is called by:
 11130 ;;		_INTERRUPT_InterruptManagerLow
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	text66
 11135  00222C                     __ptext66:
 11136                           	opt stack 0
 11137  00222C                     _EUSART1_Receive_ISR:
 11138                           	opt stack 20
 11139                           
 11140                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
 11141                           
 11142                           ;incstack = 0
 11143  00222C  A2AB               	btfss	4011,1,c	;volatile
 11144  00222E  D002               	goto	i1l4070
 11145                           
 11146                           ;eusart1.c: 195: {
 11147                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
 11148  002230  98AB               	bcf	4011,4,c	;volatile
 11149                           
 11150                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
 11151  002232  88AB               	bsf	4011,4,c	;volatile
 11152  002234                     i1l4070:
 11153                           
 11154                           ;eusart1.c: 200: }
 11155                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
 11156  002234  5015               	movf	_eusart1RxHead,w,c
 11157  002236  0D01               	mullw	1
 11158  002238  0100               	movlb	0	; () banked
 11159  00223A  0EA0               	movlw	low _eusart1RxBuffer
 11160  00223C  24F3               	addwf	prodl,w,c
 11161  00223E  6ED9               	movwf	fsr2l,c
 11162  002240  0100               	movlb	0	; () banked
 11163  002242  0E00               	movlw	high _eusart1RxBuffer
 11164  002244  20F4               	addwfc	prodh,w,c
 11165  002246  6EDA               	movwf	fsr2h,c
 11166  002248  CFAE FFDF          	movff	4014,indf2	;volatile
 11167                           
 11168                           ; BSR set to: 0
 11169  00224C  2A15               	incf	_eusart1RxHead,f,c
 11170                           
 11171                           ; BSR set to: 0
 11172                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 11173  00224E  0E07               	movlw	7
 11174  002250  6415               	cpfsgt	_eusart1RxHead,c
 11175  002252  D002               	goto	i1l4078
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;eusart1.c: 205: {
 11179                           ;eusart1.c: 206: eusart1RxHead = 0;
 11180  002254  0E00               	movlw	0
 11181  002256  6E15               	movwf	_eusart1RxHead,c
 11182  002258                     i1l4078:
 11183                           
 11184                           ; BSR set to: 0
 11185                           ;eusart1.c: 207: }
 11186                           ;eusart1.c: 208: eusart1RxCount++;
 11187  002258  2A14               	incf	_eusart1RxCount,f,c	;volatile
 11188                           
 11189                           ; BSR set to: 0
 11190  00225A  0012               	return	
 11191  00225C                     __end_of_EUSART1_Receive_ISR:
 11192                           	opt stack 0
 11193                           pclatu	equ	0xFFB
 11194                           pclath	equ	0xFFA
 11195                           tblptru	equ	0xFF8
 11196                           tblptrh	equ	0xFF7
 11197                           tblptrl	equ	0xFF6
 11198                           tablat	equ	0xFF5
 11199                           prodh	equ	0xFF4
 11200                           prodl	equ	0xFF3
 11201                           intcon	equ	0xFF2
 11202                           intcon2	equ	0xFF1
 11203                           postinc0	equ	0xFEE
 11204                           fsr0h	equ	0xFEA
 11205                           fsr0l	equ	0xFE9
 11206                           wreg	equ	0xFE8
 11207                           fsr1h	equ	0xFE2
 11208                           fsr1l	equ	0xFE1
 11209                           bsr	equ	0xFE0
 11210                           indf2	equ	0xFDF
 11211                           postinc2	equ	0xFDE
 11212                           postdec2	equ	0xFDD
 11213                           plusw2	equ	0xFDB
 11214                           fsr2h	equ	0xFDA
 11215                           fsr2l	equ	0xFD9
 11216                           status	equ	0xFD8
 11217                           
 11218 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 11219 ;; Defined at:
 11220 ;;		line 81 in file "mcc_generated_files/interrupt_manager.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;		None
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;		None
 11225 ;; Return value:  Size  Location     Type
 11226 ;;		None               void
 11227 ;; Registers used:
 11228 ;;		wreg, status,2, status,0, cstack
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11236 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11237 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;Total ram usage:       14 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; Hardware stack levels required when called:    3
 11241 ;; This function calls:
 11242 ;;		_TMR1_ISR
 11243 ;; This function is called by:
 11244 ;;		Interrupt level 2
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           	psect	intcode
 11249  000008                     __pintcode:
 11250                           	opt stack 0
 11251  000008                     _INTERRUPT_InterruptManagerHigh:
 11252                           	opt stack 19
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;incstack = 0
 11256  000008  CFFA F0BB          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 11257  00000C  CFFB F0BC          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 11258  000010  CFE9 F0BD          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 11259  000014  EFC8  F00D         	goto	int_func
 11260                           pclatu	equ	0xFFB
 11261                           pclath	equ	0xFFA
 11262                           tblptru	equ	0xFF8
 11263                           tblptrh	equ	0xFF7
 11264                           tblptrl	equ	0xFF6
 11265                           tablat	equ	0xFF5
 11266                           prodh	equ	0xFF4
 11267                           prodl	equ	0xFF3
 11268                           intcon	equ	0xFF2
 11269                           intcon2	equ	0xFF1
 11270                           postinc0	equ	0xFEE
 11271                           fsr0h	equ	0xFEA
 11272                           fsr0l	equ	0xFE9
 11273                           wreg	equ	0xFE8
 11274                           fsr1h	equ	0xFE2
 11275                           fsr1l	equ	0xFE1
 11276                           bsr	equ	0xFE0
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           plusw2	equ	0xFDB
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285                           	psect	intcode_body
 11286  001B90                     __pintcode_body:
 11287                           	opt stack 19
 11288  001B90                     int_func:
 11289                           	opt stack 19
 11290  001B90  CFEA F0BE          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 11291  001B94  CFE1 F0BF          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 11292  001B98  CFE2 F0C0          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 11293  001B9C  CFD9 F0C1          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 11294  001BA0  CFDA F0C2          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 11295  001BA4  CFF3 F0C3          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 11296  001BA8  CFF4 F0C4          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 11297  001BAC  CFF6 F0C5          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 11298  001BB0  CFF7 F0C6          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 11299  001BB4  CFF8 F0C7          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 11300  001BB8  CFF5 F0C8          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 11301                           
 11302                           ;interrupt_manager.c: 84: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 11303  001BBC  B09D               	btfsc	3997,0,c	;volatile
 11304  001BBE  A09E               	btfss	3998,0,c	;volatile
 11305  001BC0  D002               	goto	i2l242
 11306                           
 11307                           ;interrupt_manager.c: 85: {
 11308                           ;interrupt_manager.c: 86: TMR1_ISR();
 11309  001BC2  EC7A  F012         	call	_TMR1_ISR	;wreg free
 11310  001BC6                     i2l242:
 11311  001BC6  C0C8  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 11312  001BCA  C0C7  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 11313  001BCE  C0C6  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 11314  001BD2  C0C5  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 11315  001BD6  C0C4  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 11316  001BDA  C0C3  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 11317  001BDE  C0C2  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 11318  001BE2  C0C1  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 11319  001BE6  C0C0  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 11320  001BEA  C0BF  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 11321  001BEE  C0BE  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 11322  001BF2  C0BD  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 11323  001BF6  C0BC  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 11324  001BFA  C0BB  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 11325  001BFE  0011               	retfie		f
 11326  001C00                     __end_of_INTERRUPT_InterruptManagerHigh:
 11327                           	opt stack 0
 11328                           pclatu	equ	0xFFB
 11329                           pclath	equ	0xFFA
 11330                           tblptru	equ	0xFF8
 11331                           tblptrh	equ	0xFF7
 11332                           tblptrl	equ	0xFF6
 11333                           tablat	equ	0xFF5
 11334                           prodh	equ	0xFF4
 11335                           prodl	equ	0xFF3
 11336                           intcon	equ	0xFF2
 11337                           intcon2	equ	0xFF1
 11338                           postinc0	equ	0xFEE
 11339                           fsr0h	equ	0xFEA
 11340                           fsr0l	equ	0xFE9
 11341                           wreg	equ	0xFE8
 11342                           fsr1h	equ	0xFE2
 11343                           fsr1l	equ	0xFE1
 11344                           bsr	equ	0xFE0
 11345                           indf2	equ	0xFDF
 11346                           postinc2	equ	0xFDE
 11347                           postdec2	equ	0xFDD
 11348                           plusw2	equ	0xFDB
 11349                           fsr2h	equ	0xFDA
 11350                           fsr2l	equ	0xFD9
 11351                           status	equ	0xFD8
 11352                           
 11353 ;; *************** function _TMR1_ISR *****************
 11354 ;; Defined at:
 11355 ;;		line 155 in file "mcc_generated_files/tmr1.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;		None
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;		None               void
 11362 ;; Registers used:
 11363 ;;		wreg, status,2, status,0, cstack
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11371 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11372 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11373 ;;Total ram usage:        3 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    2
 11376 ;; This function calls:
 11377 ;;		_RTCisr
 11378 ;; This function is called by:
 11379 ;;		_INTERRUPT_InterruptManagerHigh
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           	psect	text68
 11384  0024F4                     __ptext68:
 11385                           	opt stack 0
 11386  0024F4                     _TMR1_ISR:
 11387                           	opt stack 19
 11388                           
 11389                           ;tmr1.c: 159: PIR1bits.TMR1IF = 0;
 11390                           
 11391                           ;incstack = 0
 11392  0024F4  909E               	bcf	3998,0,c	;volatile
 11393                           
 11394                           ;tmr1.c: 162: TMR1H = (timer1ReloadVal >> 8);
 11395  0024F6  C042  F038         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
 11396  0024FA  C038  F039         	movff	??_TMR1_ISR,??_TMR1_ISR+1
 11397  0024FE  6A3A               	clrf	(??_TMR1_ISR+2)& (0+255),c
 11398  002500  5039               	movf	??_TMR1_ISR+1,w,c
 11399  002502  6ECF               	movwf	4047,c	;volatile
 11400                           
 11401                           ;tmr1.c: 163: TMR1L = (uint8_t) timer1ReloadVal;
 11402  002504  C041  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 11403                           
 11404                           ;tmr1.c: 166: RTCisr();
 11405  002508  ECDC  F012         	call	_RTCisr	;wreg free
 11406  00250C  0012               	return	
 11407  00250E                     __end_of_TMR1_ISR:
 11408                           	opt stack 0
 11409                           pclatu	equ	0xFFB
 11410                           pclath	equ	0xFFA
 11411                           tblptru	equ	0xFF8
 11412                           tblptrh	equ	0xFF7
 11413                           tblptrl	equ	0xFF6
 11414                           tablat	equ	0xFF5
 11415                           prodh	equ	0xFF4
 11416                           prodl	equ	0xFF3
 11417                           intcon	equ	0xFF2
 11418                           intcon2	equ	0xFF1
 11419                           postinc0	equ	0xFEE
 11420                           fsr0h	equ	0xFEA
 11421                           fsr0l	equ	0xFE9
 11422                           wreg	equ	0xFE8
 11423                           fsr1h	equ	0xFE2
 11424                           fsr1l	equ	0xFE1
 11425                           bsr	equ	0xFE0
 11426                           indf2	equ	0xFDF
 11427                           postinc2	equ	0xFDE
 11428                           postdec2	equ	0xFDD
 11429                           plusw2	equ	0xFDB
 11430                           fsr2h	equ	0xFDA
 11431                           fsr2l	equ	0xFD9
 11432                           status	equ	0xFD8
 11433                           
 11434 ;; *************** function _RTCisr *****************
 11435 ;; Defined at:
 11436 ;;		line 351 in file "StateRTC.c"
 11437 ;; Parameters:    Size  Location     Type
 11438 ;;		None
 11439 ;; Auto vars:     Size  Location     Type
 11440 ;;		None
 11441 ;; Return value:  Size  Location     Type
 11442 ;;		None               void
 11443 ;; Registers used:
 11444 ;;		wreg, status,2, status,0, cstack
 11445 ;; Tracked objects:
 11446 ;;		On entry : 0/0
 11447 ;;		On exit  : 0/0
 11448 ;;		Unchanged: 0/0
 11449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;Total ram usage:        0 bytes
 11455 ;; Hardware stack levels used:    1
 11456 ;; Hardware stack levels required when called:    1
 11457 ;; This function calls:
 11458 ;;		_RTCIncDateTime
 11459 ;; This function is called by:
 11460 ;;		_TMR1_ISR
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           	psect	text69
 11465  0025B8                     __ptext69:
 11466                           	opt stack 0
 11467  0025B8                     _RTCisr:
 11468                           	opt stack 19
 11469                           
 11470                           ;StateRTC.c: 354: TMR1H |= 0x80;
 11471                           
 11472                           ;incstack = 0
 11473  0025B8  8ECF               	bsf	4047,7,c	;volatile
 11474                           
 11475                           ;StateRTC.c: 357: RTCIncDateTime();
 11476  0025BA  ECB7  F011         	call	_RTCIncDateTime	;wreg free
 11477                           
 11478                           ;StateRTC.c: 360: timeHasChgd = 1;
 11479  0025BE  0E01               	movlw	1
 11480  0025C0  6E1C               	movwf	_timeHasChgd,c
 11481                           
 11482                           ;StateRTC.c: 363: TMR1IF = 0;
 11483  0025C2  909E               	bcf	3998,0,c	;volatile
 11484  0025C4  0012               	return	
 11485  0025C6                     __end_of_RTCisr:
 11486                           	opt stack 0
 11487                           pclatu	equ	0xFFB
 11488                           pclath	equ	0xFFA
 11489                           tblptru	equ	0xFF8
 11490                           tblptrh	equ	0xFF7
 11491                           tblptrl	equ	0xFF6
 11492                           tablat	equ	0xFF5
 11493                           prodh	equ	0xFF4
 11494                           prodl	equ	0xFF3
 11495                           intcon	equ	0xFF2
 11496                           intcon2	equ	0xFF1
 11497                           postinc0	equ	0xFEE
 11498                           fsr0h	equ	0xFEA
 11499                           fsr0l	equ	0xFE9
 11500                           wreg	equ	0xFE8
 11501                           fsr1h	equ	0xFE2
 11502                           fsr1l	equ	0xFE1
 11503                           bsr	equ	0xFE0
 11504                           indf2	equ	0xFDF
 11505                           postinc2	equ	0xFDE
 11506                           postdec2	equ	0xFDD
 11507                           plusw2	equ	0xFDB
 11508                           fsr2h	equ	0xFDA
 11509                           fsr2l	equ	0xFD9
 11510                           status	equ	0xFD8
 11511                           
 11512 ;; *************** function _RTCIncDateTime *****************
 11513 ;; Defined at:
 11514 ;;		line 261 in file "StateRTC.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;		None
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;		None               void
 11521 ;; Registers used:
 11522 ;;		wreg, status,2, status,0
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;Total ram usage:        0 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; This function calls:
 11535 ;;		Nothing
 11536 ;; This function is called by:
 11537 ;;		_RTCisr
 11538 ;; This function uses a non-reentrant model
 11539 ;;
 11540                           
 11541                           	psect	text70
 11542  00236E                     __ptext70:
 11543                           	opt stack 0
 11544  00236E                     _RTCIncDateTime:
 11545                           	opt stack 19
 11546                           
 11547                           ;StateRTC.c: 264: if (++dateTime.Sec == 60)
 11548                           
 11549                           ;incstack = 0
 11550  00236E  2A01               	incf	_dateTime,f,c
 11551  002370  5001               	movf	_dateTime& (0+255),w,c
 11552  002372  0A3C               	xorlw	60
 11553  002374  A4D8               	btfss	status,2,c
 11554  002376  0012               	return	
 11555                           
 11556                           ;StateRTC.c: 265: {
 11557                           ;StateRTC.c: 267: dateTime.Sec = 0;
 11558  002378  0E00               	movlw	0
 11559  00237A  6E01               	movwf	_dateTime,c
 11560                           
 11561                           ;StateRTC.c: 270: if (++dateTime.Min == 60)
 11562  00237C  2A02               	incf	_dateTime+1,f,c
 11563  00237E  5002               	movf	(_dateTime+1)& (0+255),w,c
 11564  002380  0A3C               	xorlw	60
 11565  002382  A4D8               	btfss	status,2,c
 11566  002384  0012               	return	
 11567                           
 11568                           ;StateRTC.c: 271: {
 11569                           ;StateRTC.c: 273: dateTime.Min = 0;
 11570  002386  0E00               	movlw	0
 11571  002388  6E02               	movwf	_dateTime+1,c
 11572                           
 11573                           ;StateRTC.c: 276: if (++dateTime.Hour == 24)
 11574  00238A  2A03               	incf	_dateTime+2,f,c
 11575  00238C  5003               	movf	(_dateTime+2)& (0+255),w,c
 11576  00238E  0A18               	xorlw	24
 11577  002390  A4D8               	btfss	status,2,c
 11578  002392  0012               	return	
 11579                           
 11580                           ;StateRTC.c: 277: {
 11581                           ;StateRTC.c: 279: dateTime.Hour = 0;
 11582  002394  0E00               	movlw	0
 11583  002396  6E03               	movwf	_dateTime+2,c
 11584  002398  0012               	return	
 11585  00239A                     __end_of_RTCIncDateTime:
 11586                           	opt stack 0
 11587                           pclatu	equ	0xFFB
 11588                           pclath	equ	0xFFA
 11589                           tblptru	equ	0xFF8
 11590                           tblptrh	equ	0xFF7
 11591                           tblptrl	equ	0xFF6
 11592                           tablat	equ	0xFF5
 11593                           prodh	equ	0xFF4
 11594                           prodl	equ	0xFF3
 11595                           intcon	equ	0xFF2
 11596                           intcon2	equ	0xFF1
 11597                           postinc0	equ	0xFEE
 11598                           fsr0h	equ	0xFEA
 11599                           fsr0l	equ	0xFE9
 11600                           wreg	equ	0xFE8
 11601                           fsr1h	equ	0xFE2
 11602                           fsr1l	equ	0xFE1
 11603                           bsr	equ	0xFE0
 11604                           indf2	equ	0xFDF
 11605                           postinc2	equ	0xFDE
 11606                           postdec2	equ	0xFDD
 11607                           plusw2	equ	0xFDB
 11608                           fsr2h	equ	0xFDA
 11609                           fsr2l	equ	0xFD9
 11610                           status	equ	0xFD8
 11611                           pclatu	equ	0xFFB
 11612                           pclath	equ	0xFFA
 11613                           tblptru	equ	0xFF8
 11614                           tblptrh	equ	0xFF7
 11615                           tblptrl	equ	0xFF6
 11616                           tablat	equ	0xFF5
 11617                           prodh	equ	0xFF4
 11618                           prodl	equ	0xFF3
 11619                           intcon	equ	0xFF2
 11620                           intcon2	equ	0xFF1
 11621                           postinc0	equ	0xFEE
 11622                           fsr0h	equ	0xFEA
 11623                           fsr0l	equ	0xFE9
 11624                           wreg	equ	0xFE8
 11625                           fsr1h	equ	0xFE2
 11626                           fsr1l	equ	0xFE1
 11627                           bsr	equ	0xFE0
 11628                           indf2	equ	0xFDF
 11629                           postinc2	equ	0xFDE
 11630                           postdec2	equ	0xFDD
 11631                           plusw2	equ	0xFDB
 11632                           fsr2h	equ	0xFDA
 11633                           fsr2l	equ	0xFD9
 11634                           status	equ	0xFD8
 11635                           
 11636                           	psect	rparam
 11637  0000                     pclatu	equ	0xFFB
 11638                           pclath	equ	0xFFA
 11639                           tblptru	equ	0xFF8
 11640                           tblptrh	equ	0xFF7
 11641                           tblptrl	equ	0xFF6
 11642                           tablat	equ	0xFF5
 11643                           prodh	equ	0xFF4
 11644                           prodl	equ	0xFF3
 11645                           intcon	equ	0xFF2
 11646                           intcon2	equ	0xFF1
 11647                           postinc0	equ	0xFEE
 11648                           fsr0h	equ	0xFEA
 11649                           fsr0l	equ	0xFE9
 11650                           wreg	equ	0xFE8
 11651                           fsr1h	equ	0xFE2
 11652                           fsr1l	equ	0xFE1
 11653                           bsr	equ	0xFE0
 11654                           indf2	equ	0xFDF
 11655                           postinc2	equ	0xFDE
 11656                           postdec2	equ	0xFDD
 11657                           plusw2	equ	0xFDB
 11658                           fsr2h	equ	0xFDA
 11659                           fsr2l	equ	0xFD9
 11660                           status	equ	0xFD8


Data Sizes:
    Strings     486
    Constant    0
    Data        4
    BSS         123
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      69
    BANK0           160     34     134
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E8851 size(2) Largest target is 0
		 -> I2C_status(BANK0[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_111(CODE[7]), STR_110(CODE[7]), STR_109(CODE[10]), STR_101(CODE[16]), 
		 -> STR_88(CODE[4]), STR_87(CODE[4]), STR_86(CODE[4]), STR_85(CODE[4]), 
		 -> STR_84(CODE[4]), STR_83(CODE[4]), STR_82(CODE[4]), STR_81(CODE[4]), 
		 -> STR_80(CODE[4]), STR_79(CODE[4]), STR_78(CODE[4]), STR_77(CODE[4]), 
		 -> STR_76(CODE[4]), STR_75(CODE[4]), STR_74(CODE[4]), STR_73(CODE[4]), 
		 -> STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[4]), STR_69(CODE[4]), 
		 -> STR_68(CODE[4]), STR_67(CODE[4]), STR_66(CODE[4]), STR_65(CODE[4]), 
		 -> STR_64(CODE[4]), STR_63(CODE[3]), STR_62(CODE[4]), STR_61(CODE[4]), 
		 -> STR_60(CODE[4]), STR_59(CODE[4]), STR_58(CODE[4]), STR_57(CODE[4]), 
		 -> STR_56(CODE[4]), STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[4]), 
		 -> STR_52(CODE[15]), STR_51(CODE[8]), STR_9(CODE[17]), STR_8(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S2534$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_108(CODE[17]), STR_107(CODE[17]), STR_106(CODE[7]), STR_105(CODE[7]), 
		 -> STR_104(CODE[8]), STR_103(CODE[17]), STR_102(CODE[14]), STR_100(CODE[17]), 
		 -> STR_99(CODE[7]), STR_98(CODE[17]), STR_97(CODE[11]), STR_96(CODE[12]), 
		 -> STR_95(CODE[4]), STR_94(CODE[9]), STR_93(CODE[12]), STR_92(CODE[4]), 
		 -> STR_91(CODE[9]), STR_90(CODE[16]), STR_89(CODE[9]), STR_50(CODE[17]), 
		 -> STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), 
		 -> STR_45(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), 
		 -> STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), 
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), 
		 -> STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), 
		 -> STR_25(CODE[4]), STR_24(CODE[3]), STR_23(CODE[4]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), 
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[17]), STR_10(CODE[12]), 
		 -> STR_7(CODE[12]), STR_6(CODE[6]), STR_5(CODE[9]), STR_4(CODE[17]), 
		 -> STR_3(CODE[13]), STR_2(CODE[15]), STR_1(CODE[13]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 1
		 -> TC74_cmd(BANK0[1]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E8851 size(2) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E8851 size(2) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    I2C1_MasterRead@pflag	PTR enum E8851 size(2) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), 

    F8963.pbuffer	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    I2C1_MasterWrite@pflag	PTR enum E8851 size(2) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(2) Largest target is 1
		 -> TC74_cmd(BANK0[1]), 

    F8958.pbuffer	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), I2C1_ISR@i2c_address(COMRAM[2]), NULL(NULL[0]), 

    S1076$pbuffer	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 1
		 -> readValue(BANK0[1]), TC74_cmd(BANK0[1]), 

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E8851 size(2) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    S1088$pTrFlag	PTR enum E8851 size(2) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    p_i2c1_current.pTrFlag	PTR enum E8851 size(2) Largest target is 1
		 -> I2C_status(BANK0[1]), 

    S1088$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), NULL(NULL[0]), 

    S1099$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    S1099$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 


Critical Paths under _main in COMRAM

    _DisplayVoltage->_LCDPutStr
    _DisplayVoltage->___wmul
    ___lwdiv->___wmul
    _DisplayVoltMenu->_LCDPutStr
    _I2C1_MasterWrite->_I2C1_MasterTRBInsert
    _I2C1_MasterRead->_I2C1_MasterTRBInsert
    _DisplayTemperature->_LCDPutStr
    _DisplayTemperature->___awmod
    _DisplayTempMenu->_LCDPutStr
    _DisplaySplashText->_LCDPutStr
    _StateClockSet->_LCDPutStr
    _StateClockSet->___awmod
    _DisplayTime->_LCDPutStr
    _DisplayTime->___awmod
    _DisplayClockMenu->_LCDPutStr
    _DisplayBuzzerData->_LCDPutStr
    _DisplayBuzzerData->___awmod
    _printf->_putch
    _putch->_EUSART1_Write
    ___awmod->___awdiv
    _DisplayBuzMenu->_LCDPutStr
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCD_Initialize->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _INTERRUPT_InterruptManagerHigh->_TMR1_ISR

Critical Paths under _INTERRUPT_InterruptManagerLow in COMRAM

    _INTERRUPT_InterruptManagerLow->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_StateVoltage
    _StateVoltage->_DisplayVoltage
    _DisplayVoltage->___lwmod
    ___lwmod->___lwdiv
    _DisplayVoltMenu->_LCDGoto
    _StateTemperature->_I2C1_MasterRead
    _StateTemperature->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _DisplayTemperature->___awmod
    _DisplayTempMenu->_LCDGoto
    _DisplaySplashText->_LCDGoto
    _StateClockSet->___awmod
    _DisplayTime->___awmod
    _DisplayClockMenu->_LCDGoto
    _StateBuzzer->_DisplayBuzzerData
    _DisplayBuzzerData->___awmod
    ___awmod->___awdiv
    _DisplayBuzMenu->_LCDGoto

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  151720
                 _Buttons_Initialize
                     _LCD_Initialize
                  _SYSTEM_Initialize
                        _StateBuzzer
                         _StateClock
                       _StateInitial
                   _StateTemperature
                       _StateVoltage
 ---------------------------------------------------------------------------------
 (1) _StateVoltage                                         2     2      0   26136
                                             32 BANK0      2     2      0
                  _ADC_GetConversion
                    _DisplayVoltMenu
                     _DisplayVoltage
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _DisplayVoltage                                       6     4      2   17226
                                             26 BANK0      6     4      2
                      _EUSART1_Write
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutStr
                            ___lwdiv
                            ___lwmod
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4    1772
                                             21 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    2089
                                             14 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _DisplayVoltMenu                                      0     0      0    8320
                            _LCDGoto
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _StateTemperature                                     3     3      0   34627
                                             28 BANK0      3     3      0
                    _DisplayTempMenu
                 _DisplayTemperature
                    _I2C1_MasterRead
                   _I2C1_MasterWrite
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _I2C1_MasterWrite                                     7     0      7    1451
                                             21 BANK0      7     0      7
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWriteTRBBuild                             9     2      7     494
                                             26 COMRAM     2     2      0
                                             14 BANK0      7     0      7
 ---------------------------------------------------------------------------------
 (2) _I2C1_MasterRead                                      7     0      7    1482
                                             21 BANK0      7     0      7
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterTRBInsert                                 7     3      4     494
                                             26 COMRAM     6     2      4
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterReadTRBBuild                              9     2      7     525
                                             26 COMRAM     2     2      0
                                             14 BANK0      7     0      7
 ---------------------------------------------------------------------------------
 (2) _DisplayTemperature                                   3     2      1   22723
                                             22 BANK0      3     2      1
                      _EUSART1_Write
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                             _printf
 ---------------------------------------------------------------------------------
 (2) _DisplayTempMenu                                      0     0      0    8320
                            _LCDGoto
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (1) _StateInitial                                         0     0      0    9388
                  _DisplaySplashText
                          _LCDPutCmd
                             _Wait2s
 ---------------------------------------------------------------------------------
 (2) _Wait2s                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DisplaySplashText                                    0     0      0    8854
                            _LCDGoto
                          _LCDPutCmd
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (1) _StateClock                                           0     0      0   49403
                   _DisplayClockMenu
                        _DisplayTime
                          _LCDPutCmd
                      _StateClockSet
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _StateClockSet                                        0     0      0   18736
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutCmd
                          _LCDPutStr
                          _RTCDecHrs
                      _RTCDecMinutes
                          _RTCIncHrs
                      _RTCIncMinutes
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _RTCIncMinutes                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RTCIncHrs                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RTCDecMinutes                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RTCDecHrs                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DisplayTime                                          0     0      0   21813
                      _EUSART1_Write
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                             _printf
 ---------------------------------------------------------------------------------
 (2) _DisplayClockMenu                                     0     0      0    8320
                            _LCDGoto
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (1) _StateBuzzer                                          1     1      0   31632
                                             25 BANK0      1     1      0
                     _DisplayBuzMenu
                  _DisplayBuzzerData
                          _LCDPutCmd
                           _SNDSound
                     _TMR4_StopTimer
 ---------------------------------------------------------------------------------
 (2) _TMR4_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SNDSound                                             2     1      1     139
                                             26 COMRAM     2     1      1
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DisplayBuzzerData                                    9     9      0   22605
                                             22 BANK0      3     3      0
                      _EUSART1_Write
                            _LCDGoto
                         _LCDPutChar
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              12    10      2    3549
                                             28 COMRAM     2     0      2
                                             14 BANK0      3     3      0
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    3667
                                             30 COMRAM     2     2      0
                                             18 BANK0      4     0      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    5681
                                             26 COMRAM     4     0      4
                                             14 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _DisplayBuzMenu                                       0     0      0    8320
                            _LCDGoto
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (3) _LCDPutStr                                            5     3      2    5823
                                             30 COMRAM     2     0      2
                                             14 BANK0      3     3      0
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (4) _LCDPutChar                                           2     2      0     534
                                             28 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDGoto                                              6     5      1    2497
                                             30 COMRAM     1     0      1
                                             14 BANK0      5     5      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                   _EPWM1_Initialize
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     534
                                             30 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     534
                                             28 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     438
                                             26 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _Buttons_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManagerLow                       17    17      0      22
                                              6 COMRAM    17    17      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                       _CheckButtons
 ---------------------------------------------------------------------------------
 (8) _CheckButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_ISR                                             3     3      0      22
                                              3 COMRAM     3     3      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C1_Stop                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) _I2C1_FunctionComplete                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManagerHigh                      14    14      0       0
                                              0 BANK0     14    14      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            3     3      0       0
                                             23 COMRAM     3     3      0
                             _RTCisr
 ---------------------------------------------------------------------------------
 (11) _RTCisr                                              0     0      0       0
                     _RTCIncDateTime
 ---------------------------------------------------------------------------------
 (12) _RTCIncDateTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buttons_Initialize
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EUSART1_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _TMR1_Initialize
     _TMR4_Initialize
   _StateBuzzer
     _DisplayBuzMenu
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _DisplayBuzzerData
       _EUSART1_Write
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       _printf
         _putch
           _EUSART1_Write
     _LCDPutCmd
       _LCDWriteNibble
     _SNDSound
       _TMR4_StartTimer
     _TMR4_StopTimer
   _StateClock
     _DisplayClockMenu
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _DisplayTime
       _EUSART1_Write
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       _printf
         _putch
           _EUSART1_Write
     _LCDPutCmd
       _LCDWriteNibble
     _StateClockSet
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutCmd
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       _RTCDecHrs
       _RTCDecMinutes
       _RTCIncHrs
       _RTCIncMinutes
       ___awdiv
       ___awmod
         ___awdiv (ARG)
     _TMR1_StartTimer
   _StateInitial
     _DisplaySplashText
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutCmd
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _LCDPutCmd
       _LCDWriteNibble
     _Wait2s
   _StateTemperature
     _DisplayTempMenu
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _DisplayTemperature
       _EUSART1_Write
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       _printf
         _putch
           _EUSART1_Write
     _I2C1_MasterRead
       _I2C1_MasterReadTRBBuild
       _I2C1_MasterTRBInsert
     _I2C1_MasterWrite
       _I2C1_MasterTRBInsert
       _I2C1_MasterWriteTRBBuild
     _LCDPutCmd
       _LCDWriteNibble
   _StateVoltage
     _ADC_GetConversion
     _DisplayVoltMenu
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
     _DisplayVoltage
       _EUSART1_Write
       _LCDGoto
         _LCDPutCmd
           _LCDWriteNibble
       _LCDPutChar
         _LCDWriteNibble
       _LCDPutStr
         _LCDPutChar
           _LCDWriteNibble
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _printf
         _putch
           _EUSART1_Write
     _LCDPutCmd
       _LCDWriteNibble

 _INTERRUPT_InterruptManagerLow (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _TMR0_ISR
     _CheckButtons

 _INTERRUPT_InterruptManagerHigh (ROOT)
   _TMR1_ISR
     _RTCisr
       _RTCIncDateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      86       5       83.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     20      45       1       72.6%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CB      12        0.0%
DATA                 0      0      CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Apr 29 09:34:56 2015

                       ??_DisplayVoltage 0041                        ??_DisplayVoltMenu 0041  
               _eusart1TxBufferRemaining 0043                           _LCD_Initialize 2128  
                            ?_LCDPutChar 0021                                       l96 2214  
                           ___awdiv@sign 00CA                                       bsr 000FE0  
                    ___wmul@multiplicand 003D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                          ??_StateClockSet 0041  
                                    l309 2082                                      l456 1862  
                                    l458 1870                                      l724 1AAC  
                                    l901 0B0C                                      l742 24D6  
                                    l567 25CA                                      l729 1AE4  
                                    l594 1F5C                                      l908 0AFA  
                                    l927 0C5C                                      l884 1E5A  
                                    l889 1E7E                                      l899 08B8  
                           __CFG_CPB$OFF 000000                                      _PR4 000F52  
                           __CFG_CPD$OFF 000000                __end_of_DisplaySplashText 23C4  
                        _timer1ReloadVal 0041                                      _set 001B  
                           ___awmod@sign 0040                                      prod 000FF3  
                                    wreg 000FE8                       SNDSound@pwm_period 003B  
                StateTemperature@sChange 00D9                             __CFG_LVP$OFF 000000  
                        __end_of_LCDGoto 1EF4                         __end_of_I2C1_ISR 14D2  
                                   l1018 16CA                                     l1060 113E  
                                   l1029 176E                                     l1063 1170  
                                   l1072 123A                                     l1057 10E2  
                                   l1069 11DE                                     l1601 1B86  
                                   l1611 1D20                                     l5100 0ABC  
                                   l5112 0AEE                                     l5104 0ACE  
                                   l5220 10C6                                     l5204 1054  
                                   l5126 0B1A                                     l5230 1150  
                                   l5072 09B8                                     l5216 10A2  
                                   l5208 107C                                     l5306 1A9A  
                                   l5154 0C1E                                     l5410 1E68  
                                   l4620 18E8                                     l4612 18C2  
                                   l5340 1AF6                                     l5244 119E  
                                   l4630 190C                                     l4622 18EC  
                                   l4606 18A0                                     l5318 1AB6  
                                   l5166 0C50                                     l5158 0C30  
                                   l5238 1182                                     l5344 1B04  
                                   l5248 11C2                                     l4552 182E  
                                   l4712 1D12                                     l4704 1CDC  
                                   l5280 1F4A                                     l4618 18DE  
                                   l4634 1918                                     l4650 1960  
                                   l4482 2072                                     l5426 1E94  
                                   l5194 1012                                     l5186 0FDA  
                                   l4722 1D7C                                     l5354 16B8  
                                   l4706 1CE8                                     l4572 1C6E  
                                   l4660 199C                                     l4900 04C8  
                                   l5348 1B10                                     l5372 1742  
                                   l4708 1CEE                                     l5292 1F66  
                                   l5444 2402                                     l4582 1EB2  
                                   l4638 192C                                     l4662 19A2  
                                   l4670 19D2                                     l4654 1982  
                                   l4494 20A8                                     l4830 0222  
                                   l4558 1856                                     l5390 178A  
                                   l5366 16D4                                     l4576 1C9C  
                                   l4496 20AA                                     l4920 05F0  
                                   l4840 0268                                     l4832 0230  
                                   l4824 01F8                                     l4728 1DDC  
                                   l5392 1798                                     l5368 1706  
                                   l4586 1EBC                                     l4674 19E4  
                                   l4666 19C6                                     l4658 1992  
                                   l4594 21D8                                     l4930 0636  
                                   l4922 05FE                                     l4850 02AE  
                                   l4842 0276                                     l4834 023E  
                                   l4826 0206                                     l4596 21E0  
                                   l4940 067C                                     l4932 0644  
                                   l4924 060C                                     l4860 02F4  
                                   l4852 02BC                                     l4844 0284  
                                   l4836 024C                                     l4828 0214  
                                   l5396 1E48                                     l4684 1B36  
                                   l4950 06C2                                     l4942 068A  
                                   l4934 0652                                     l4926 061A  
                                   l4918 05E2                                     l4870 033A  
                                   l4862 0302                                     l4854 02CA  
                                   l4846 0292                                     l4838 025A  
                                   l4686 1B42                                     l4960 0708  
                                   l4952 06D0                                     l4944 0698  
                                   l4936 0660                                     l4928 0628  
                                   l4880 0380                                     l4872 0348  
                                   l4864 0310                                     l4856 02D8  
                                   l4848 02A0                                     l4696 1B78  
                                   l4688 1B48                                     l4970 074E  
                                   l4962 0716                                     l4954 06DE  
                                   l4946 06A6                                     l4938 066E  
                                   l4890 03C6                                     l4882 038E  
                                   l4874 0356                                     l4866 031E  
                                   l4858 02E6                                     l4980 0794  
                                   l4972 075C                                     l4964 0724  
                                   l4956 06EC                                     l4948 06B4  
                                   l4892 03D4                                     l4884 039C  
                                   l4876 0364                                     l4868 032C  
                                   l4982 07A2                                     l4974 076A  
                                   l4966 0732                                     l4958 06FA  
                                   l4894 03E2                                     l4886 03AA  
                                   l4878 0372                                     l4984 07B0  
                                   l4976 0778                                     l4968 0740  
                                   l4992 07DA                                     l4888 03B8  
                                   l4986 07BE                                     l4978 0786  
                                   l4898 03F0                                     l4988 07CC  
                                   STR_1 FED8                                     STR_2 FEAE  
                                   STR_3 FECB                                     STR_4 FE6E  
                                   STR_5 FF16                                     STR_6 FF61  
                                   STR_7 FEFD                                     STR_8 FF14  
                                   STR_9 FE5D                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   u4000 1AFE                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u3305 181A  
                                   u2705 1A14                                     u2715 1A20  
                                   u2707 1A16                                     u4147 231C  
                                   u2725 1A30                                     u2717 1A24  
                                   u3285 2364                                     u4157 1EE8  
                                   u3286 2366                                     u2735 1A40  
                                   u2727 1A34                                     u4167 2138  
                                   u2745 1A50                                     u2737 1A44  
                                   u4177 2168                                     u2755 1A60  
                                   u2747 1A54                                     u4187 2184  
                                   u2765 1A70                                     u2757 1A64  
                                   u2685 1A00                                     u2775 1A80  
                                   u2767 1A74                                     u2695 1A0A  
                                   u2687 1A02                                     u2785 1A90  
                                   u2777 1A84                                     u2697 1A0C  
                                   u2787 1A94                                     _TMR1 000FCE  
                                   _TMR4 000F53                             __CFG_WDTPS$1 000000  
                                   _WPUB 000F61          __end_of_I2C1_MasterReadTRBBuild 1C66  
                          _EUSART1_Write 2070                            __CFG_FCMEN$ON 000000  
                                   _main 23EE                          _TMR0_StartTimer 25EA  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                   ??_I2C1_MasterTRBInsert 003F  
                          __CFG_BORV$250 000000                                     pclat 000FFA  
                     __size_of_LCDPutCmd 0036                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00DC  
                     __size_of_LCDPutStr 0064                            __CFG_IESO$OFF 000000  
                 __end_of_LCD_Initialize 2160           I2C1_MasterWriteTRBBuild@length 00CD  
                        ??_RTCIncMinutes 003B                  __end_of_TMR0_Initialize 24F4  
                             _i2c1_state 0019                              LCDPutCmd@ch 003E  
         __size_of_OSCILLATOR_Initialize 000E               __size_of_DisplayBuzzerData 07D2  
              I2C1_MasterTRBInsert@count 00C9            __end_of_OSCILLATOR_Initialize 25B8  
              I2C1_MasterTRBInsert@pflag 003D                      __end_of_DisplayTime 16A2  
                                  ?_main 0021                          __end_of___awdiv 1936  
                      __end_of_I2C1_Stop 20EC                                    STR_10 FEF1  
                                  STR_11 FE6E                                    STR_20 FFB4  
                                  STR_12 FF67                                    STR_13 FEA8  
                                  STR_21 FFB0                                    STR_14 FFF4  
                                  STR_22 FFE8                                    STR_30 FFA0  
                                  STR_15 FFB8                                    STR_23 FFAC  
                                  STR_31 FF9C                                    STR_24 FFFC  
                                  STR_16 FFF0                                    STR_32 FFDC  
                                  STR_40 FF8C                                    STR_17 FFEC  
                                  STR_25 FFD4                                    STR_41 FFCC  
                                  STR_33 FF98                                    STR_34 FFD8  
                                  STR_18 FFBC                                    STR_26 FF90  
                                  STR_42 FF88                                    STR_50 FE4C  
                                  STR_27 FFE4                                    STR_19 FFA8  
                                  STR_35 FF94                                    STR_43 FF84  
                                  STR_51 FF44                                    STR_60 FFB0  
                                  STR_44 FFC8                                    STR_28 FFA4  
                                  STR_36 FF78                                    STR_52 FE9F  
                        __end_of___awmod 19EE                                    STR_61 FFE8  
                                  STR_53 FFF4                                    STR_29 FFE0  
                                  STR_37 FFC0                                    STR_45 FF80  
                                  STR_70 FF9C                                    STR_62 FFAC  
                                  STR_54 FFB8                                    STR_46 FFC4  
                                  STR_38 FF74                                    STR_71 FFDC  
                                  STR_55 FFF0                                    STR_63 FFFC  
                                  STR_39 FFD0                                    STR_47 FF7C  
                                  STR_72 FF98                                    STR_80 FFCC  
                                  STR_64 FFD4                                    STR_56 FFEC  
                                  STR_48 FF70                                    STR_81 FF88  
                                  STR_65 FF90                                    STR_57 FFBC  
                                  STR_73 FFD8                                    STR_49 FFF8  
                                  STR_82 FF84                                    STR_74 FF94  
                                  STR_58 FFA8                                    STR_66 FFE4  
                                  STR_90 FE7F                                    STR_75 FF78  
                                  STR_67 FFA4                                    STR_59 FFB4  
                                  STR_83 FFC8                                    STR_91 FF3B  
                                  STR_84 FF80                                    STR_76 FFC0  
                                  STR_68 FFE0                                    STR_92 FF6C  
                                  STR_77 FF74                                    STR_69 FFA0  
                                  STR_85 FFC4                                    STR_93 FEE5  
                                  STR_86 FF7C                                    STR_78 FFD0  
                                  STR_94 FF32                                    STR_87 FF70  
                                  STR_79 FF8C                                    STR_95 FF6C  
                                  STR_88 FFF8                                    STR_96 FEE5  
                                  STR_89 FF29                                    STR_97 FF09  
                                  STR_98 FE6E                                    STR_99 FF5A  
                        _TMR1_StartTimer 25E6                                    _T0CON 000FD5  
                        ___awdiv@divisor 003D                                    _T1CON 000FCD  
                                  _T4CON 000F51                           __CFG_DEBUG$OFF 000000  
                        __end_of___lwdiv 1B90                                    i1l400 135C  
                                  i1l321 21C6                                    i1l401 136C  
                                  i1l411 13E4                                    i1l251 008C  
                                  i1l405 13D0                                    i1l245 0068  
                                  i1l423 146E                                    i1l415 1412  
                                  i1l247 0074                                    i1l255 0096  
                                  i1l249 0080                          __end_of___lwmod 1D2A  
                                  i1l418 142C                                    i1l419 143E  
                                  i1l392 131E                                    i2l242 1BC6  
                                  i1l394 1326                                    i1l395 132E  
                                  i1l389 1284                          ___awdiv@counter 00C9  
                                  _TMR0H 000FD7                                    _TMR1H 000FCF  
                                  _TMR0L 000FD6                                    _TMR1L 000FCE  
                                  _PORTD 000F83                            SNDSound@onoff 003C  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96             __end_of_I2C1_BusCollisionISR 25F4  
                          __CFG_WRT0$OFF 000000                          _TMR4_Initialize 2526  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                        ??_I2C1_MasterRead 0041  
                   _EUSART1_Transmit_ISR 2196                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                        ??_I2C1_Initialize 003B  
                       __end_of_TMR0_ISR 258A                         __end_of_TMR1_ISR 250E  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                  __size_of_CheckButtons 0048                                    _count 0011  
                     __size_of_RTCDecHrs 0012                         __end_of_SNDSound 24DA  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 25D0  
                     __size_of_RTCIncHrs 0014                           ?_EUSART1_Write 0021  
                __end_of_TMR1_Initialize 24BE                           __CFG_BOREN$OFF 000000  
                       ??_RTCIncDateTime 0038                                    tablat 000FF5  
                    __size_of_LCDPutChar 002E                                    plusw2 000FDB  
                                  status 000FD8           ?_INTERRUPT_InterruptManagerLow 0021  
        I2C1_MasterWriteTRBBuild@address 00CE                          ?_LCD_Initialize 0021  
                        __initialization 1EF4                    I2C1_MasterWrite@pdata 00D0  
                  I2C1_MasterWrite@pflag 00D5               __end_of_EUSART1_Initialize 2128  
                           __end_of_main 2414                 __end_of_StateTemperature 17A0  
                            _i2c1_object 00DD                                   ??_main 0041  
                           _CheckButtons 1FE4                            __activetblptr 000002  
             __size_of_DisplaySplashText 002A                                ??_LCDGoto 00C9  
                      __end_of_LCDPutCmd 2196                             LCDPutChar@ch 003E  
                      __end_of_LCDPutStr 1CCA                    ?_EUSART1_Transmit_ISR 0021  
                __end_of_TMR0_StartTimer 25EE                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 STR_100 FE3B                                   STR_101 FE8F  
                                 STR_110 FF53                                   STR_102 FEBD  
                                 STR_111 FF4C                                   STR_103 FE6E  
                                 STR_104 FF21                                   STR_105 FF53  
                                 STR_106 FF4C                                   _ADRESH 000FC4  
                                 STR_107 FE19                                   STR_108 FE2A  
                                 STR_109 FF1F                                   _ADRESL 000FC3  
                                 _CCPR1H 000FBF                                   _CCPR1L 000FBE  
                       ___awdiv@dividend 003B                                   _ANSELA 000F38  
                                 ?_putch 0021                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                                   _T1GCON 000FCC  
                                 _RC1REG 000FAE                                   _RC1STA 000FAB  
                       StateVoltage@Volt 00DB                                   i1l4104 12F8  
                                 i1l4204 1474                                   i1l4124 1356  
                                 i1l4070 2234                                   i1l4206 1478  
                                 i1l4118 133E                                   i1l4214 148C  
                                 i1l3502 2000                                   i1l4208 1480  
                                 i1l4226 21C2                                   i1l4138 1396  
                                 i1l3514 201C                                   i1l3506 2006  
                                 i1l4078 2258                                   i1l4166 13F6  
                                 i1l4158 13DE                                   i1l3518 2024  
                                 i1l4192 144E                                   i1l4176 141A  
                                 i1l3476 2520                                   i1l3468 20E6  
                                 i1l4188 1446                                   i1l3498 1FF8  
                         __CFG_WDTEN$OFF 000000                                   _RCREG1 000FAE  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _TMR1IF 007CF0                                   _TX1REG 000FAD  
                                 _TX1STA 000FAC                             LCDPutStr@str 003F  
                                 _TRISC2 007CA2                                   _TXREG1 000FAD  
                                 _RTCisr 25B8                          _TMR4_StartTimer 25E0  
                         _LCDWriteNibble 2342                        ?_I2C1_MasterWrite 00D0  
                         __CFG_XINST$OFF 000000                                   _Wait2s 25C6  
                     ??_I2C1_MasterWrite 0041                             _CCPTMRS0bits 000F49  
                            _DisplayTime 14D2                           _p_i2c1_current 000A  
                __end_of_TMR1_StartTimer 25EA                                   ___wmul 2414  
                              ??___awdiv 003F                __size_of_DisplayClockMenu 002E  
                              ??___awmod 003F                        __end_of_RTCDecHrs 2578  
                     _Buttons_Initialize 19EE                                ??___lwdiv 0041  
                              ??___lwmod 0041               ??_I2C1_MasterWriteTRBBuild 003B  
                      __end_of_RTCIncHrs 2566                         ?_TMR0_Initialize 0021  
                __end_of_TMR4_Initialize 253C                                ?_I2C1_ISR 0021  
                                 clear_0 1EFA                                   clear_1 1F06  
                       ___awdiv@quotient 00CB                          ___awmod@divisor 00CF  
                        ___awmod@counter 003F                                   _printf 21CA  
                                 _pwm_on 0045         __size_of_I2C1_MasterReadTRBBuild 0066  
                    ?_Buttons_Initialize 0021                             __pdataCOMRAM 0044  
                             _StateClock 1E44                             __mediumconst FE18  
                        _DisplayTempMenu 228A                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
               ADC_GetConversion@channel 003F                          ??_EUSART1_Write 003B  
          I2C1_MasterWriteTRBBuild@pdata 00CB                          _eusart1RxBuffer 00A0  
                        __CFG_HFOFST$OFF 000000            __size_of_INTERRUPT_Initialize 0010  
                        _eusart1TxBuffer 0060                         ?_TMR1_Initialize 0021  
                        _DisplayVoltMenu 225C          ?_INTERRUPT_InterruptManagerHigh 0021  
       ??_INTERRUPT_InterruptManagerHigh 00BB                        _SYSTEM_Initialize 23C4  
                 __end_of_LCDWriteNibble 236E                               __accesstop 0060  
                __end_of__initialization 1F3C                          __CFG_PBADEN$OFF 000000  
                     ?_SYSTEM_Initialize 0021                     ??_Buttons_Initialize 003B  
                          ??_StateBuzzer 0041                                LCDGoto@ln 003F  
                         _i2c1_trb_count 001A                    _I2C1_FunctionComplete 250E  
                   _I2C1_BusCollisionISR 25F2                        ?_EPWM1_Initialize 0021  
            __size_of_DisplayTemperature 0288                           __pcstackCOMRAM 0021  
                 I2C1_MasterWrite@length 00D2                      _timer0ReloadVal8bit 001D  
                           __pidataBANK0 25F0                      ??_SYSTEM_Initialize 003B  
                              ?_TMR0_ISR 0021                                ?_TMR1_ISR 0021  
                     ??_EPWM1_Initialize 003B                             ??_LCDPutChar 003D  
                          __end_of_putch 25DA                               ??_I2C1_ISR 0024  
                              ?_SNDSound 003B           I2C1_MasterReadTRBBuild@address 00CE  
                 ??_EUSART1_Transmit_ISR 0021              __end_of_EUSART1_Receive_ISR 225C  
                       ?_TMR0_StartTimer 0021                  __end_of_TMR4_StartTimer 25E6  
              __end_of_SYSTEM_Initialize 23EE                                  ??_putch 003C  
                          _eusart1RxHead 0015                            _eusart1TxHead 0017  
                          _eusart1RxTail 0016                               __pbssBANK0 0060  
                          _eusart1TxTail 0018                          __CFG_PLLCFG$OFF 000000  
                        ?_LCDWriteNibble 003B                       __end_of_LCDPutChar 2342  
                             __pnvCOMRAM 0041                                  ?_RTCisr 0021  
                  ?_I2C1_BusCollisionISR 0021                                  ?_Wait2s 0021  
                     __CFG_CCP2MX$PORTC1 000000                    __end_of_RTCDecMinutes 24A0  
                                ?___wmul 003B                         ?_TMR1_StartTimer 0021  
                             ??_TMR0_ISR 0021                               ??_TMR1_ISR 0038  
                     __CFG_CCP3MX$PORTE0 000000                          _I2C1_MasterRead 1D8A  
                        _I2C1_Initialize 202C                                  _CCP1CON 000FBD  
                    __end_of_StateBuzzer 1B18                                  _ECCP1AS 000FB6  
                             ??_SNDSound 003C                         ?_TMR4_Initialize 0021  
                __end_of_DisplayTempMenu 22B8                                  ?_printf 003D  
                __size_of_ADC_Initialize 0016                                  _LCDGoto 1E9C  
                  __end_of_StateClockSet 0C6E                              ?_StateClock 0021  
                __end_of_DisplayVoltMenu 228A                                  _OSCCON2 000FD2  
                              _I2C1_Stop 20AE                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _PWM1CON 000FB7  
                                _SPBRGH1 000FB0                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9            I2C1_MasterTRBInsert@ptrb_list 003B  
                            _TempButtons 0010                         ??_LCD_Initialize 003F  
                        __size_of_RTCisr 000E                                  _Buttons 00B7  
                        __CFG_PWRTEN$OFF 000000                   ?_I2C1_FunctionComplete 0021  
                                __Hparam 0000            __size_of_I2C1_MasterTRBInsert 00D8  
              DisplayTemperature@thermal 00D2                                  __Lparam 0000  
                        __size_of_Wait2s 000A                       _p_i2c1_trb_current 000C  
                __size_of_TMR4_StopTimer 0006                         _DisplayClockMenu 22B8  
                                ___awdiv 1878                                  ___awmod 1936  
                      ?_StateTemperature 0021                          __size_of___wmul 0026  
                                _debCnt1 0012                                  _debCnt2 0013  
                __size_of_DisplayBuzMenu 002E                                  ___lwdiv 1B18  
                                ___lwmod 1CCA                    __end_of_RTCIncMinutes 2482  
                        __CFG_STVREN$OFF 000000                                  __pcinit 1EF4  
                     ??_StateTemperature 0041                                  __ramtop 1000  
                _I2C1_MasterReadTRBBuild 1C00                                  __ptext0 23EE  
                                __ptext1 1F46                                  __ptext2 0C6E  
                                __ptext3 2414                                  __ptext4 1CCA  
                                __ptext5 1B18                                  __ptext6 225C  
                                __ptext7 21FC                                  __ptext8 16A2  
                                __ptext9 1D2A                          __size_of_printf 0032  
                              _T0CONbits 000FD5                                _T1CONbits 000FCD  
                  _OSCILLATOR_Initialize 25AA                  __size_of_DisplayVoltage 0358  
           I2C1_MasterReadTRBBuild@pdata 00CB                     I2C1_MasterRead@pdata 00D0  
                   I2C1_MasterRead@pflag 00D5                         ___awmod@dividend 00CD  
                              _T4CONbits 000F51                       _EUSART1_Initialize 20EC  
               ??_PIN_MANAGER_Initialize 003B                               ?_I2C1_Stop 0021  
                              _LCDPutCmd 2160               __size_of_SYSTEM_Initialize 002A  
                   I2C1_ISR@pi2c_buf_ptr 0008                                _LCDPutStr 1C66  
                       ?_TMR4_StartTimer 0021                           __pintcode_body 1B90  
                   end_of_initialization 1F3C                      ?_EUSART1_Initialize 0021  
                          __Lmediumconst FE18                                  int_func 1B90  
                          ?_StateInitial 0021                             _LCDGoto$2245 00CB  
                __end_of_I2C1_MasterRead 1DEA                   ??_I2C1_BusCollisionISR 0021  
                __end_of_I2C1_Initialize 2070                              _StateBuzzer 1A96  
                    __size_of_StateClock 0058                             ?_DisplayTime 0021  
                                printf@c 00CB                                  printf@f 003D  
                          ?_StateVoltage 0021                   _DisplayBuzzerData$3133 00D1  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                     ??_EUSART1_Initialize 003B  
                       ?_DisplayTempMenu 0021               StateTemperature@degreeType 00D8  
                              _PORTAbits 000F80                                _PORTBbits 000F81  
                              _PORTDbits 000F83                                _RTCDecHrs 2566  
              __size_of_I2C1_MasterWrite 0060                        __size_of_I2C1_ISR 0284  
                              _RTCIncHrs 2552                         ?_DisplayVoltMenu 0021  
                             ?_LCDPutCmd 0021                               ?_LCDPutStr 003F  
                    EUSART1_Write@txData 003B        I2C1_ISR@i2c_10bit_address_restart 000E  
                         ??_StateInitial 0041                               LCDGoto@pos 00CD  
                I2C1_MasterWrite@address 00D3                           __end_of_RTCisr 25C6  
                         ??_StateVoltage 0041                              _I2C_Address 00E4  
                __size_of_RTCIncDateTime 002C                           __end_of_Wait2s 25D0  
              ??_I2C1_MasterReadTRBBuild 003B             __end_of_INTERRUPT_Initialize 25AA  
                             LCDPutStr@i 00CB                           __end_of___wmul 243A  
                I2C1_MasterWrite@trBlock 00AD                            __pidataCOMRAM 25EE  
                      __size_of_TMR0_ISR 0012                        __size_of_TMR1_ISR 001A  
               I2C1_Stop@completion_code 0023                           _ADC_Initialize 253C  
                 ?_OSCILLATOR_Initialize 0021                               ?_RTCDecHrs 0021  
                      __size_of_SNDSound 001C                           __end_of_printf 21FC  
                             ?_RTCIncHrs 0021                      start_initialization 1EF4  
              __size_of_EPWM1_Initialize 0026                              ??_I2C1_Stop 0021  
               __size_of_TMR0_Initialize 001A          __size_of_PIN_MANAGER_Initialize 004C  
                       ??_LCDWriteNibble 003C        __size_of_I2C1_MasterWriteTRBBuild 005A  
                            putch@txData 003C                ?_I2C1_MasterWriteTRBBuild 00C9  
                  __end_of_EUSART1_Write 20AE                                 ??_RTCisr 0038  
            __size_of_Buttons_Initialize 00A8               __end_of_DisplayTemperature 124E  
                       ?_I2C1_MasterRead 00D0                         ?_I2C1_Initialize 0021  
                               ??_Wait2s 003B                 __size_of_TMR1_Initialize 001E  
                 DisplayTemperature@type 00D1                           _TMR4_StopTimer 25DA  
                         _DisplayBuzMenu 22E6                                 ??___wmul 003F  
                 __end_of_ADC_Initialize 2552                              __pdataBANK0 00E4  
                               ??_printf 003F             I2C1_MasterWriteTRBBuild@ptrb 00C9  
                         _eusart1RxCount 0014                           _DisplayVoltage 0C6E  
                               ?_LCDGoto 003F                       DisplayVoltage@volt 00D5  
                           ??_StateClock 0041                              __pbssCOMRAM 0001  
          __size_of_EUSART1_Transmit_ISR 0034                            __pcstackBANK0 00BB  
                    __end_of__stringdata FFFF                            _i2c1_tr_queue 00B2  
                            ??_LCDPutCmd 003D             DisplayVoltage@ADC_Conversion 00D9  
                            ??_LCDPutStr 00C9                 __end_of_DisplayClockMenu 22E6  
                ??_I2C1_FunctionComplete 0021             __size_of_EUSART1_Receive_ISR 0030  
                              __pnvBANK0 00DD                 __size_of_TMR0_StartTimer 0004  
                 __end_of_TMR4_StopTimer 25E0                   __end_of_DisplayBuzMenu 2314  
                       ___lwdiv@dividend 00C9                   _PIN_MANAGER_Initialize 1F98  
                              __pintcode 0008                       __end_of_StateClock 1E9C  
                          __pmediumconst FE18                                 ?___awdiv 003B  
                               ?___awmod 00CD                                 ?___lwdiv 00C9  
                               ?___lwmod 00D0                          ?_ADC_Initialize 0021  
                   __size_of_DisplayTime 01D0                         LCDWriteNibble@ch 003C  
                       LCDWriteNibble@rs 003B                              __pintcodelo 0018  
                               _I2C1_ISR 124E                   __end_of_DisplayVoltage 0FC6  
                          ?_CheckButtons 0021                              ??_RTCDecHrs 003B  
                       _I2C1_MasterWrite 1D2A                     __end_of_StateInitial 259A  
                               _BAUD1CON 000FB8                              ??_RTCIncHrs 003B  
           __end_of_I2C1_MasterTRBInsert 1878                 __size_of_TMR1_StartTimer 0004  
                 I2C1_MasterRead@address 00D3                 __size_of_TMR4_Initialize 0016  
                   __end_of_StateVoltage 1F98                         ___lwdiv@quotient 00CE  
                 __size_of_RTCDecMinutes 001E                __size_of_StateTemperature 00FE  
                              _readValue 00BA                           __size_of_putch 000A  
                   _INTERRUPT_Initialize 259A              I2C1_MasterReadTRBBuild@ptrb 00C9  
                 I2C1_MasterRead@trBlock 00A8                        ??_TMR0_Initialize 003B  
                               _TC74_cmd 00B9                           ___wmul@product 003F  
                               _IPR1bits 000F9F                                 _IPR2bits 000FA2  
                               _PIE1bits 000F9D                                 _PIE2bits 000FA0  
                           ?_StateBuzzer 0021                          ?_TMR4_StopTimer 0021  
                        ?_DisplayBuzMenu 0021                   __size_of_StateClockSet 03BC  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                               _PIR5bits 000F7E                           _RTCIncDateTime 236E  
                               _RCONbits 000FD0                                 _SSP1CON1 000FC6  
                               _SSP1CON3 000FCB                                 _TMR0_ISR 2578  
                               _TMR1_ISR 24F4                                 _PSTR1CON 000FB9  
                               _SSP1STAT 000FC7                DisplayBuzzerData@pwm_freq 00D3  
                               _SNDSound 24BE                           ??_CheckButtons 0021  
                        ?_DisplayVoltage 00D5                        ??_TMR1_Initialize 003B  
                             _ADCON0bits 000FC2                              __stringdata FE19  
                      ___wmul@multiplier 003B                         _EPWM1_Initialize 243A  
                       __size_of_LCDGoto 0058                         StateBuzzer@sound 00D4  
             DisplayTemperature@negValue 00D3                              _INTCON2bits 000FF1  
                  ?_INTERRUPT_Initialize 0021                   __size_of_RTCIncMinutes 0022  
                 __end_of_RTCIncDateTime 239A                 __size_of_TMR4_StartTimer 0006  
                               __Hrparam 0000                               _I2C_status 00B8  
          __size_of_I2C1_BusCollisionISR 0002                                 __Lrparam 0000  
                      _ADC_GetConversion 21FC                            _RTCDecMinutes 2482  
                 I2C1_ISR@i2c_bytes_left 000F                        __CFG_P2BMX$PORTC0 000000  
                ??_OSCILLATOR_Initialize 003B                  __size_of_LCD_Initialize 0038  
                     ?_ADC_GetConversion 003B                        ??_TMR0_StartTimer 003B  
                       __size_of___awdiv 00BE                StateTemperature@tempValue 00D7  
                       __size_of___awmod 00B8              __size_of_EUSART1_Initialize 003C  
                       __size_of___lwdiv 0078                         __size_of___lwmod 0060  
       __end_of_I2C1_MasterWriteTRBBuild 1E44                      ??_ADC_GetConversion 003D  
                               _dateTime 0001          ??_INTERRUPT_InterruptManagerLow 0027  
                          _StateClockSet 08B2                          ___lwdiv@divisor 00CB  
                    I2C1_ISR@i2c_address 001F                          ___lwdiv@counter 00CD  
               __size_of_DisplayTempMenu 002E                                 __ptext10 1DEA  
                               __ptext11 1D8A                                 __ptext20 25E6  
                               __ptext12 17A0                                 __ptext21 08B2  
                               __ptext13 1C00                               _T1GCONbits 000FCC  
                               __ptext30 24BE                                 __ptext22 2460  
                               __ptext14 0FC6                                 __ptext31 25E0  
                               __ptext23 2552                                 __ptext15 228A  
                               __ptext40 2314                                 __ptext32 00E0  
                               __ptext24 2482                                 __ptext16 258A  
                               __ptext41 1E9C                                 __ptext33 21CA  
                               __ptext25 2566                                 __ptext17 25C6  
                               __ptext50 202C                                 __ptext42 23C4  
                               __ptext34 25D0                                 __ptext26 14D2  
                               __ptext18 239A                                 __ptext51 20EC  
                               __ptext43 2526                                 __ptext35 2070  
                               __ptext27 22B8                                 __ptext19 1E44  
                               __ptext60 1FE4                                 __ptext52 243A  
                               __ptext44 24A0                                 __ptext36 1936  
                               __ptext28 1A96                                 __ptext61 124E  
                               __ptext53 253C                                 __ptext45 24DA  
                               __ptext37 1878                                 __ptext29 25DA  
                               __ptext70 236E                                 __ptext62 20AE  
                               __ptext54 2128                                 __ptext46 25EA  
                               __ptext38 22E6                                 __ptext63 250E  
                               __ptext55 2160                                 __ptext47 1F98  
                               __ptext39 1C66                                 __ptext64 25F2  
                               __ptext56 2342                                 __ptext48 25AA  
                               __ptext65 2196                                 __ptext57 19EE  
                               __ptext49 259A                                 __ptext66 222C  
                               __ptext59 2578                                 __ptext68 24F4  
                               __ptext69 25B8                             _SSP1CON1bits 000FC6  
                           _SSP1CON2bits 000FC5                        ??_TMR1_StartTimer 003B  
               __size_of_DisplayVoltMenu 002E                        ??_TMR4_Initialize 003B  
                          __size_of_main 0026            I2C1_MasterReadTRBBuild@length 00CD  
                  I2C1_MasterRead@length 00D2                __end_of_ADC_GetConversion 222C  
                        ?_RTCIncDateTime 0021                     _I2C1_MasterTRBInsert 17A0  
                             _RC1STAbits 000FAB                           ?_RTCDecMinutes 0021  
                               _tmrCount 001E                    __size_of_StateInitial 0010  
                               _pwm_freq 0044                               _LCDPutChar 2314  
                    _EUSART1_Receive_ISR 222C                            _RTCIncMinutes 2460  
                     _DisplayTemperature 0FC6                    __size_of_StateVoltage 0052  
                      _DisplayBuzzerData 00E0                           ?_StateClockSet 0021  
                             _INTCONbits 000FF2                       ?_DisplayBuzzerData 0021  
                    ?_DisplayTemperature 00D1                   ??_INTERRUPT_Initialize 003B  
                       _StateTemperature 16A2                        ?_DisplayClockMenu 0021  
                               intlevel1 0000                                 intlevel2 0000  
                    ??_DisplayBuzzerData 0041               __end_of_Buttons_Initialize 1A96  
                   ?_EUSART1_Receive_ISR 0021                       ??_DisplayClockMenu 0041  
                   __end_of_CheckButtons 202C                         ___lwmod@dividend 00D0  
                ?_PIN_MANAGER_Initialize 0021                 __end_of_I2C1_MasterWrite 1D8A  
         __size_of_I2C1_FunctionComplete 0018                             _StateInitial 258A  
                            _timeHasChgd 001C            __end_of_I2C1_FunctionComplete 2526  
                  ?_I2C1_MasterTRBInsert 003B             __end_of_EUSART1_Transmit_ISR 21CA  
               ?_I2C1_MasterReadTRBBuild 00C9                         ??_ADC_Initialize 003B  
                   ??_DisplayTemperature 0041                     __size_of_StateBuzzer 0082  
                           _StateVoltage 1F46                                 printf@ap 00C9  
                      ??_TMR4_StartTimer 003B                 __size_of_I2C1_MasterRead 0060  
                         ?_RTCIncMinutes 0021                __end_of_DisplayBuzzerData 08B2  
               __size_of_I2C1_Initialize 0044                   __size_of_EUSART1_Write 003E  
 __end_of_INTERRUPT_InterruptManagerHigh 1C00  __size_of_INTERRUPT_InterruptManagerHigh 1BF8  
         _INTERRUPT_InterruptManagerHigh 0008                          ___lwmod@divisor 00D2  
                    _DisplayVoltage$3132 00D7                          _TMR0_Initialize 24DA  
                        ___lwmod@counter 00D4                        _DisplaySplashText 239A  
               _I2C1_MasterWriteTRBBuild 1DEA                        __CFG_T3CMX$PORTB5 000000  
                     ?_DisplaySplashText 0021    __end_of_INTERRUPT_InterruptManagerLow 00DC  
 __size_of_INTERRUPT_InterruptManagerLow 00C4            _INTERRUPT_InterruptManagerLow 0018  
                  ??_EUSART1_Receive_ISR 0021           __end_of_PIN_MANAGER_Initialize 1FE4  
                       ??_TMR4_StopTimer 003B                         ??_DisplayBuzMenu 0041  
                     __size_of_I2C1_Stop 003E                        __CFG_FOSC$INTIO67 000000  
                      ??_DisplayTempMenu 0041                      ??_DisplaySplashText 0041  
                        ??_RTCDecMinutes 003B                  __size_of_LCDWriteNibble 002C  
             __size_of_ADC_GetConversion 0030                          _TMR1_Initialize 24A0  
               __end_of_EPWM1_Initialize 2460                            ??_DisplayTime 0041  
